
export class Content {

    public temas: Item[] = [...PRUEBAS, ...AGILES, ...ANALISIS, ...ARQUITECTURAS, ...BUENAS_PRACTICAS,
    ...CALIDAD, ...COMPILACION, ...META_CARACTERISTICAS, ...CONOCIMIENTOS_EMPIRICOS, ...DOCKER,
    ...ESTATEGIAS_DESARROLLO, ...FRAMEWORKS, ...GIT, ...HARDWARE, ...HISTORIAS_USUARIO, ...WEB,
    ...MALAS_PRACTICAS, ...META_ESTRUCTURAS, ...METODOLOGIAS, ...PARADIGMAS, ...NUBE, ...OTROS,
    ...PATRONES, ...PERSONAS, ...POO, ...BASES_DE_DATOS, ...PRINCIPIOS, ...PRUEBAS_AVANZADAS,
    ...REFACTORIZACION, ...REQUISITOS, ...SEGURIDAD, ...SMELLS_CODES, ...UML, ...VERSIONAMIENTO
    ];

}

export class Item {

    key = '';
    content: string[] = [];

    constructor(key: string, content: string[]) {
        this.key = key;
        this.content = content;
    }

}

export const PRUEBAS =
    [
        new Item('principios',
            ['- Las pruebas demuestran la presencia de defectos, por ende entre más pruebas halla mejor ',
                '- Es improductivo hacer pruebas exhaustivas, ademas de que es casi imposible de hacer ',
                '- Las pruebas tempranas ayudan a encontrar defectos con prontitud, y a su vez reducir tiempo y costos ',
                '- Agrupar defectos permite que las soluciones sean más especializadas, y las pruebas sean más efectivas ',
                '- La paradoja del pesticida, si nuestro software cambia, las pruebas tambien deben hacerlo, que sigan funcionando no siempre es buena señal ',
                '- Las pruebas dependen del contexto, entre más se parezca el entorno de pruebas al entorno de producción mejor ',
                '- Que no se presenten errores no significa que no se presentaran errores, solo que no se han dado las condiciones ',
            ]
        ),
        new Item('manifiesto',
            [
                '- El testing no es una fase más, siempre debe estar presente en todo el desarrollo ',
                '- La calidad no depende solo de las pruebas, es un proceso constante durante todo el ciclo de vida ',
                '',
                ' - Testing inicial <strong> SOBRE </strong> testing final ',
                ' - Prevenir bugs <strong> SOBRE </strong> encontrar bugs ',
                ' - Entender que se prueba <strong> SOBRE </strong> probar una funcionalidad ',
                ' - Construir un mejor sistema <strong> SOBRE </strong> destruir el sistema ',
                ' - Responsabilidad del equipo <strong> SOBRE </strong> la responsabilidad del tester ',
            ]),
        new Item('QAperson',
            [
                '- Quality Assurance (seguro de calidad) es un concepto donde todos los involucrados deben aportar, ',
                ' - aunque haya personas especificas para verificar su cumplimiento ',
                '- Todo proyecto deberia contar con un plan de pruebas que asegure la calidad del proyecto entregado ',
                '- La integración continua y los tests son herramientas con las que el proyecto deberia contar desde su inicio ',
                '- El encargado de estos aspectos debe ser el intermediario entre los clientes y sus espectativas y lo que ha sido elaborado ',
                '- Tambien es el encargado de crear ambientes de prueba que sean similares al ambiente de producción ',
            ]),
        new Item('tiposPruebas',
            [
                '- Funcionales    -> prueban las funcionalidades del sistema y suelen ser de caja negra, al validar el QUE más que el COMO ',
                '- No Funcionales -> estas validan cosas como carga, estres, rendimiento, confiabilidad, etc... ',
                '',
                '- Estructurales -> indagan la estructura interna del programa y sus relaciones, aca se pueden incluir las pruebas unitarias y de integración ',
                '- Estructurales -> estan son de tipo caja blanca, ya que es necesario conocer todo el sistema y como funciona para que sean bien planificadas ',
                '',
                '- Regresión -> basicamente es volver a correr todas la pruebas despues de que se cambien componentes ó se corrija un problema ',
                '- Regresión -> dependiendo de la cantidad de pruebas que hayan y de su complejidad puede ser una operación bastante demorada ',
            ]
        ),
        new Item('beneficios',
            [
                '- La calidad mejora al encontrar errores en etapas previas y durante el desarrollo, en vez de hacerlo en etapas finales ',
                '- Los cambios son hechos de manera más agil al inducir una mayor comunicación con todo el equipo ',
                '- Reducen el tiempo y los costos asociados a la mantenibilidad del software ',
                '- Los tests pueden tener documentación la cual no debe ser muy extensa, y tambien pueden servir como documentación ',
            ]),
        new Item('nombramiento',
            [
                '- Representa el intercambio de mensajes entre los diferentes componentes del sistema para lograr una funcionalidad ',
                '- El tiempo es importante ya que un mensaje debe terminar para que otro empieze (generalmente) ',
                '- Los objetos que interactuan puede ser simple clases, hasta modulos y sistemas completos ',
                '- El diablo esta en los detalles, saber nombrar los elementos que intervienen ayudara al analisis ',
                '',
                '- Clases -> deberian tener un indicador que las agrupe, como: (nombreClase)Test ',
                '- Metodos -> hay varias convenciones, pero generalmente deben incluir:  ',
                '  - nombre del metodo, estado a probar, comportamiento esperado; tambien se pueden incluir las palabras de given, when, should, test  ',
                '',
                '- Variables -> deben describir el proposito de cada variable, no deben ser resumidas ni genericas, algunos ejemplos pueden ser: ',
                '  - target, expected, actual, valid, invalid, Object(Mock)',
            ]),
        new Item('first',
            [
                ' Fast            -> los tests unitarios deben ser lo más rapido posible, ya que se suelen tener cientos de pruebas y ejecutarlas conlleva tiempo y recursos ',
                ' Independent     -> cada test debe ser independiente de los demás, de lo contrario habra un acoplamiento no deseado ',
                ' Repeatable      -> las pruebas deben funcionar en cualquier ambiente que se ejecuten, ya sea local o en un ambiente de integración ',
                ' Self-Validating -> las pruebas deben mostrar resultados concluyentes, estos no deben tener intervención humana para que sean validos ',
                ' Timely          -> toda prueba debe ser oportuna y debe tener una razon de ser, si no se pueden justificar, estas habran sido una perdida de tiempo ',
            ]),
        new Item('sutydoc',
            [
                '- System Under Test ',
                '  - Es aquello que se esta probando ya sea una clase, un componente, una funcionalidad ',
                '- Depend On Component ',
                '  - Es lo que necesita cada SUT para poder funcionar, y que la prueba pueda ser llevada a cabo ',
                '- Organización ',
                '  - Generalmente se organizan mediante una tabla que contiene el tipo de prueba, los SUTs y los DOCs ',
            ]),
        new Item('dobles',
            [
                '- Son objetos que se comportan de manera igual que el elemento que copian, pero son más simples de manejar ',
                ' - Dummy -> Es un objeto con valore concretos que solo sirve para que se cumplan ciertas precondiciones ',
                ' - Fake  -> son funcionales y se comportan igual que en producción, solo que de una manera más simple y limitada ',
                ' - Stub  -> Es un objeto que ya viene con una información predefinida, en vez de información real e impredecible ',
                ' - Mock  -> Son objetos que actuan de acuerdo a una llamada en especifico, de lo contrario no funcionaran debidamente ',
                ' - Spies -> Este objeto se encarga de visualizar todos los procesos y llamados internos, verificando que sean los desados ',
            ]),
        new Item('aaa',
            [
                '- Arrange -> en esta parte se organiza todo lo necesario y se deben establecer las condiciones del test ',
                '- Act     -> es la ejecución del fragmento a testear',
                '- Assert  -> ultimo paso de la prueba y es la comprobación de lo resultados ',
            ]),
        new Item('gwt',

            [
                '- Funciona de la misma manera que AAA, con algunas ventajas (Given, When, Then)',
                '- Puede ser usado con frameworks de BDD, es más que solo una estructura',
                '- Es obicuo por lo que más personas pueden entenderlo sin necesidad de un conocimiento completo del sistema ',
                '- Añade valor extra al negocio, al interconectar el codigo y las pruebas a un nivel mayor ',

            ]),
        new Item('piramide',
            [
                '        Exploracion                                                 ',
                '         GUI  Tests          Piramide de tests:                     ',
                '       API      Tests        La mayor parte de las pruebas deberian ',
                '     Integration  Tests      ser unitarias, y la menor parte        ',
                '   Component       Tests     deberian ser la interfaz grafica       ',
                ' Unit               Tests                                           ',
                '',
                '        Exploracion                                                 ',
                ' GUI                Tests    Cono de helado:                        ',
                '   API             Tests     Es un anti patron de pruebas           ',
                '     Integration  Tests      Donde la mayoria de pruebas son        ',
                '       Component Tests       de la interfaz graficas                ',
                '         Unit   Tests        y NO pruebas unitarias                 ',
            ]),
        new Item('triangulo',
            [
                '         Alcance              Alcance -> requisitos ó tareas a realizar            ',
                '                              Tiempo -> planificicación de la duración del proyecto ',
                '         Calidad              Costos -> recursos a gastar el proyecto              ',
                '                                                                                   ',
                '   Costo         Tiempo                                                            ',
            ]),
        new Item('cobertura',
            [
                '- La cobertura del codigo es fundamental para garantizar un alcance optimo de las pruebas ',
                '- No hay un numero magico para todos los proyectos, cada uno tendra una cobertura ideal',
                '- El 100% de esta cobertura no es garantia de ausencia de errores, como el 50% no es garantia de la calidad de las pruebas ',
                '- Esto es importante ya que se puede usar para hacer despliegues e integración continua, y encontrar codigo muerto ',
                '- Existen varios tipos de cobertura, pero el más usado es la cobertura de las lineas de codigo ',
            ]),
        new Item('falsos',
            [
                '- Falsos Positivos & Falsos Negativos ',
                '- Son comunes en ambientes inestables, ó poco hermeticos ',
                '',
                '- Falso Positivo -> ocurre cuando se detectan defectos, que no son culpa del componente inmediato ',
                '  - Esto puede ser debido a fuentes externas de error, inestabilidad del ambiente, errores de los datos ',
                '',
                '- Falso Negativo -> ocurre cuando no se detectan errores, que estan presentes en lo que se esta probando ',
                '  - Suelen suceder por pruebas mal desarrolladas, más que por el propio entorno ',
            ])
    ];

export const AGILES =
    [
        new Item('moscow',
            [
                '- Es una tecnica para la priorización de requisitos y funciones para lograr un alcance especificado ',
                '',
                '- M (Must Have)   -> debe tener:    este requisito debe estar implementado si ó si, si no, el producto es un fracaso ',
                '- S (Should have) -> deberia tener: requisito de alta prioridad que en la medida de lo posible deberia quedar en el producto final ',
                '- C (Could have)  -> podria tener:  caracteristica deseable, pero que no es necesaria y solo sera implementada si hay posibilidades ',
                '- W (Won´t have)  -> no tendra:     son requisitos que estan descartados por esta vez, pero seran incluidos a futuro ',
            ]),
        new Item('scoring',
            [
                '- Permite determinar la prioridad de las funcionalidades, basandose en diferentes criterios, que a su vez ',
                ' - constan con diferentes pesos, cada caracteristica de la Historia de Usuario tendra un valor ',
                '',
                '- Determinar el peso de las caracteristicas es más facil ya que se hace en base a una comparación, ',
                ' - Donde previamente se ha tomado una HU como punto base y las demás sr miden con esta base ',
            ]),
        new Item('muda',
            [
                '- El desperdicio en las empresas viene del termino japones MUDA, que es todo lo inutil, superfluo, despilfarro, residuos, ocioso ',
                '',
                '- Sobreproducción -> producir más de lo demandado, esperando que el mercado lo necesite es una mala praxis, ',
                ' - que despilfarra recursos que pudieron ser usados en otras areas ',
                '- Esperas -> son los famosos cuellos de botella, donde un proceso alenta a los demás, haciendoles perder tiempo ',
                '- Transporte -> todo movimiento innecesario de elementos que no aporta valor debe ser minimizado ',
                '- SobreProcesos -> son procesos que aunque pueden ser utiles, no van a volver ser usados, por eso su realización es un desperdicio ',
                '- Exceso de inventario -> puede conllevar a perdidad monetarias a la empresa, debido a que se pueden volver obsoletos, o nunca usarse ',
                '- Movimientos innecesarios -> todo movimiento que no aporte valor al producto es un despedicio, hasta caminar al trabajo puede serlo ',
                '- Defectos -> todo error consume tiempo para ser resuelto, independientemente de su tamaño, además de la insatisfacción del cliente ',
            ]),
        new Item('5s',
            [
                '- Seiri, Seiton, Seiso, Seiketsu, Shitsu ke; la base de la mejora continua ',
                '',
                '- Seieri -> clasifica y organizar de manera apropiada ',
                ' - es retirar del area o estación todo aquello que no es necesario ',
                '- Seiton -> orden ',
                ' - organizar los elementos necesarios de manera que sean de facil acceso ',
                '- Seiso  -> limpieza',
                ' - ya con un orden establecido y areas limpias, es más facil detectar malas practicas ',
                '- Seiketsu -> estandares',
                ' - este estado solo se obtiene cuando la limpieza y la organización se mantienen constantes ',
                '- Shitsuke -> disciplina',
                ' - es la creación de habitos que eviten el rompimiento de los conceptos anteriores ',
                '',
                '- ¿ Porque no la aplican algunas empresas ? ',
                '',
                '- La maquinaria no puede parar -> los cronogramas no dan tiempo de mantenimiento de la maquinaria ',
                '- La limpieza como perdida de tiempo -> algunos empleadores pagan para trabajar, no para limpiar su area de trabajo ',
                '- Costumbre -> crear nuevos habitos y cambiar los viejos es un cambio fuerte y prolongado de paradigma ',
                '',
                '- Beneficios ',
                '- Mayor seguridad de los empleados ',
                '- Reducción de las perdidas y mermas por defectos ',
                '- Mayor calidad, y menos tiempo de respuesta ',
                '- Genera una cultura organizacional ',
            ]),
        new Item('muda#1',
            [
                ' 1 -> Trabajo hecho a medias: desplegar sin probar y tener errores conocidos más no solucionados, ',
                '  - daran problemas a futuro, de manera que aveces es mejor un nuevo desarrollo que corregir lo existente ',
                ' 2 -> Funcionalidad extra: toda funcionalidad que no haya sido pedida significa, ',
                '  - recursos gastados que no tendran redito alguno ',
                ' 3 -> Reaprendizaje: nuestra memoria no es absoluta, por lo que inevitablemente olvidaremos cosas, ',
                '  - y gastaremos tiempo volviendolas a aprender, tambien aplica para personas expertas ',
                '  - que ya tienen el conocimiento, pero nos empeñamos por aprenderlo nosotros mismos, sumando tiempo al desperdicio ',
            ]),
        new Item('muda#2',
            [
                ' 4 -> Transferencia de conocimiento: todo proceso de comunicación es ineficiente ya que, ',
                '  - durante el proceso se suelen perder datos u omitir detalles importantes, y asi entre más niveles ',
                '  - haya que permear, de las mejores manera para evitar esto son la comunicación cara a cara ',
                ' 5 -> Retrasos: algunas funcionalidades requieren que sean lineales, por lo que si la etapa previa se retrasa, ',
                '  - las etapas subsiguientes tambien lo haran, por lo que estas situaciones deben ser evitadas lo más posible ',
                ' 6 -> Cambios de contexto: cuando tenemos varias cosas por hacer de manera inmediata, tendemos a ser multitarea, ',
                '  - esto no es más que un cambio de contexto que requiere tiempo y esfuerzo, y que entre más se hagan, más desperdicio habra ',
                ' 7 -> Defectos: uno de los más peligrosos, ya que entre más tarde se encuentre un error, más costoso sera corregirlo ',
                '  - estos errores se pueden disminuir por medio de las pruebas, e integración continua ',
            ]),
        new Item('planningPoker',
            [
                '- Las estimaciones son de mucha ayuda, para definir tiempo, costos y esfuerzos ',
                ' - independientemente de certeza, ya que generalmente casi nunca se cumplen ',
                '- Ayuda a visualizar desde diferentes puntos de vista, esto es bastante util para analizar un problema ',
                '-Los riesgos pueden ser detectados de manera previa, además de prever posibles obstaculos ',
                '-Todo el equipo involucrado deberia estar presente en este evento, ya que todos pueden aportar desde sus areas ',
                '',
                '- Material necesario',
                '- Cada participante debe tener su propia baraja ',
                '- La baraja en si es una secuencia de Fibonacci modificada, junto a ciertas cartas especiales: ',
                ' - infinito   -> es una HU que es demasiado grande para ser estimada, por lo que debera ser dividida y reorganizada ',
                ' - cero       -> significa que la HU ya fue realizada ',
                ' - coffee cup -> puede significar una actividad de esfuerzo minimo o simplemente la necesidad de realizar una pausa ',
                '',
                '- Trabajo previo',
                ' - es necesario indicar que indica cada numero antes de realizar el ejercicio, (horas, dias, esfuerzo, etc...)',
                ' - indicar que incluye y que no la HU, documentación, tests unitarios, tests de integración ',
                '',
                '- Dinamica',
                ' - se especifica todo lo que se va a estimar y se hacen las preguntas y respuestas pertinentes ',
                ' - se leen la historia de usuario y se vota por medio de la baraja ',
                ' - si no hay consenso se abre una breve discusión y se vuelve a votar, ',
                '  - si no vuelve a haber concenso se podra realizar un promedio o escoger un extremo ',
                ' - se repite el proceso hasta completar todas las HU ',
            ])
    ];

export const ANALISIS =
    [
        new Item('comportamiento',
            [
                '- Estos modelos se usan para describir a profundidad el comportamiento de un sistema ',
                '',
                '  - Flujos de datos -> modelan el procesamiento de los datos del sistema ',
                '   - No solo sirven para saber las entradas y salidad del sistema, tambien para validaciones con los usuarios ',
                '   - Y que estos validen los datos y los procesos a nivel interno ',
                '',
                '  - Maquinas de estado -> modelan la reacción del evento en cuanto a los estimulos externos/internos ',
                '   - Estos indican los posibles estados de un sistema, y que puede suceder cuando paso un estimulo en especifico ',
                '   - Se usan para sistemas en tiempo real mas que todo, ya que estos son sumamente dependientes de su ambiente ',
                '   - Para sistemas grandes se recomienda usar diferentes niveles de estados de mayor a menor complejidad ',
            ]),
        new Item('dominio',
            [
                '- Estudio de los dominios de conocimientos de las sociedades ',
                '- De esta manera el enfoque socio-cognitivo no es el unico usado para la toma de información ',
                '- Tambien se ha de tener en cuenta el contexto presente y lo que motiva sus acciones ',
                '- Esto tambien da un conocimiento más profundo del entorno, y una mayor calidad de la información recolectada ',
            ]),
        new Item('case',
            [
                '- Ingeniería asistida por computador, que es el desarrollo y mantenimiento de proyectos de software por medio de herramientas de software ',
                '',
                '- Documentación -> crea documentos de cualquiera de las etapas del proyecto y para diferentes tipos de personas; como DrExplain',
                '- Configuración -> son utiles para el control de versiones y la evolución del software; como Git',
                '- Diseño -> ayudan a la creación de la estructura del programa y de su desglose para detallarlos y refinarlos; como Star UML ',
                '- Analisis -> ayuda a cumplir con los requisitos al analizar los diagramas por posibles falencias, omisiones ó redundancias; como casecomplete ',
                '- Implementación -> en esta categoria se encuentran los IDEs como Eclipe y herramientas para hacer prototipos; como Mockup Builder',
                '- Pruebas -> son herramientas para realizar pruebas de software como y aumentar la calidad; como Jmeter',
                '- Mantenimiento -> sirven para documentar errores y seguimiento de defectos; como HP Quality Center ',
            ]),
        new Item('divide',
            [
                '- Generalmente es una tecnica aplicada a algoritmos, pero puede usarse en ambientes de mayor embergadura ',
                '- Suelen se problemas capaces de descomponerse en subproblemas y ser resueltos de manera recursiva ',
                '',
                ' - Divide -> dividir el problema en subproblemas más pequeños ',
                ' - Vence -> resolver los problemas de manera individual y de manera acotada ',
                ' - Combina -> las soluciones de los subproblemas en la solución del problema original ',
            ]),
        new Item('diseño',
            [
                '- Un buen analisis desemboca en un buen Diseño (generalmente) ',
                '- Esta etapa es fundamental para llegar a una solución optima que cumpla los requisitos funcionales y no funcionales, ',
                ' - basandose en la creatividad y experiencia de los profesionales a cargo ',
                '',
                ' - Entendimiento de los requisitos -> sean funcionales o NO funcionales estos deben ser claros y sin ambiguedades ',
                ' - Usar patrones de diseño -> No reinventes la rueda, sabiendo que hay soluciones a tus mismos problemas, documentadas y confiables ',
                ' - Calidad -> esta debe ser un objetivo a alcanzar en tu proyecto, no una fase más ',
                ' - Modularidad -> al ser modular esto facilitara la reutilización y que las futuras modificaciones afectan el menos codigo posible ',
                ' - A la medida -> el diseño puede crecer y cambiar de acuerdo a las especificaciones de cliente, no necesariamente debe nacer completo ',
                ' - Documentación -> la documentación debe existir en cualquier proyecto, para ayudar a la compresión del sistema, sea a nivel general ó especifico ',
            ]),
        new Item('crc',
            [
                '- Ayuda a los equipos a entender los procesos de una manera más facil y concisa ',
                '- Al tener todos las posibles parte del sistema a la disposición se reduce la redundancia y se asignan mejor las responsabilidades ',
                '- Es ideal hacer esto mediante una lluvia de ideas, donde todos participen ',
                '- Cuando hay demasiadas tarjetas, estas empiezan a añadir complejidad al entendimiento del modelado, ',
                '  - para esto se desarrollaron los casos de uso, y explorar diferentes flujos y especializaciones ',
                '',
                ' - Constan de 3 partes: ',
                ' - Clase -> Nombre de la clase en si, el cual debe ser diciente y que ayude a entender el porque de su creación ',
                ' - Responsabilidad -> cual es la función ó funciones de la clase, entre más especifica mejor ',
                ' - Colaborador -> son otras clases ó entidades que son necesarias para el correcto funcionamiento de la clase ',
            ]),
        new Item('avestruz',
            [
                '- Es una estrategia donde se ignora un problema, en vez de buscar una solución para este ',
                '- Esto es debido a la premisa de suponer de que son problemas increiblemente raros ',
                '- Al ser problemas raros, es más costoso y complejo evitar que sucedan a controlarlos cuando suceden ',
                '- Además de que se agregaria complejidad extra por un esceneario poco probable ',
            ]),
    ];

export const ARQUITECTURAS =
    [
        new Item('definicion',
            [
                ' - Representa la estructura del sistema ',
                ' - Las responsabilidades de cada uno de sus partes ',
                ' - La organización y jerarquización de sus componentes ',
                ' - Las propiedades visibles externamente y las relaciones a nivel interno ',
                ' - Son independientes de las tecnologias, aunque su implementación pueda cambiar ligeramente entre una y otra ',
            ]),
        new Item('principiosArquitecturas',
            [
                '- Cualquier programador con cierto recorrido conoce el nombre de Robert Martin o su libro acerca de Clean Code',
                '',
                '- Clean Code -> buenas practicas de programación como: ',
                ' - codigo autocomentado ',
                ' - testing unitario y de integración ',
                ' - estructura comprensible ',
                ' - que implemente los principios SOLID ',
                '',
                '- Cohesion y Acoplamiento, a nivel de arquitectura',
                '',
                '- Cohesion: ',
                ' - Principio de equivalencia al Lanzar/Reutilizar -> esto nos dice que los componentes debe ser desplegados ',
                '  - de manera independiente sin afectar a los demás ',
                ' - Principio de cierre comun -> es la apliación de la S de SOLID a nivel de paquetes, donde se agrupan clases ',
                '  - que puedan cambiar por motivos en comun, todas en un mismo lugar ',
                ' - Principio común de reutilización -> evitar la dependencia de componentes que no se necesiten ',
                '  - para que solo se use lo realmente necesario',
                '',
                '- Conseguir el cumplimiento de estos 3 principios al mismo tiempo es dificil, por lo que se suele, ',
                ' - sacrificar alguno en mayor o menor medida ',
                '',
                '- Acoplamiento: ',
                ' - Principio de dependencias acíclicas -> cuando un cambio significa que se deben modificar más componentes, ',
                '  - y esto a su vez desencadena más cambios en el componente inicial, la estabilidad del sistema se ve comprometida ',
                ' - Principio de dependencias estables -> todo sistema tiene la tendencia natural de cambiar y evolucionar, ',
                '  - por lo que componentes volatiles deberian depender de componentes más estables pero no muy dificiles de cambiar ',
                ' - Principio de abstracciones estables -> los componentes estables que tienen poca variación deberian contar con ',
                '  - interfaces y clases abstractas, de esta manera es más extensible, sin tantas afectaciones en general ',
                '',
                '- Una Arquitectura limpia tambien cumple las siguientes caracteristicas: ',
                ' - Son independientes de los frameworks en la mayor medida posible, ya que estos son herramientas y no obligaciones ',
                ' - La logica de la aplicación es testeable y no depende de otras partes para esto ',
                ' - La interfaz grafica depende de nuestra aplicación, no al contrario, los cambios en esta solo son relevantes para los usuarios ',
                ' - La capa de persistencia, es agnostica, por lo que nuestra aplicación es minimamente afectada por la BD que este usando ',
                ' - Los cambios externos, no deben afectar a los componentes internos ',
                '',
                '- Partes de una arquitectura limpia (de mas interna a externa) ',
                ' - Entidades -> continen la logica de nuestra aplicación y solo deben cambiar si estrictamente necesario ',
                ' - Casos de uso -> reglas de negocio que son variables de acuerdo a las condiciones que se den ',
                ' - Adaptadores -> estas interfaces son las encargas de transformar los datos de capas internas, a los usados por las más externas ',
                ' - Frameworks -> es la capa más externa, donde van los detalles, como las tecnologias usadas, frameworks, bases de datos, etc...',
                '',
                '- Definición de fronteras',
                ' - Es una separación acerca que de puede y que no puede hacer un componente, para evitar acoplamientos indeseados entre componentes ',
                ' - Un ejemplo de esto es, de quien es la responsabilidad de guardar la información, de la logica de negocio o de la base de datos ',
                ' - Esto nos ayuda a pensar nuestra aplicación como una serie de elementos intercambiables, con minimas afectaciones en los demás ',
                ' - Hacer esto es laborioso y tiene un nivel de complejidad y esfuerzo alto, por lo que en ciertos casos solo se hace de manera parcial ',
            ]),
        new Item('arquitecturasLimpias',
            [
                'Frameworks & Drivers     Interface Adapters    Aplication Rules    Enterprise rules ',
                ' Servicios                                                                          ',
                ' Bases de datos           Controladores                                             ',
                ' Web                -->   Puertas de enlace --> Casos de uso   -->  Entidades       ',
                ' Interfaz de usuario      Presentación                                              ',
                ' Interfaces externas                                                                ',
                'De + externo --> a + interno                                                        ',
            ]),
        new Item('capas',
            [
                ' - Se basa en la distribución de roles y responsabilidades de forma jerarquica en cada capa ',
                ' - Puede tener n - capas, generalmente son 3, de la cual se desprende MVC ',
                ' - La abstracción se mejora al definir la responsabilidad de cada capa ',
                ' - Se aumenta la reutilización, al tener componentes especializados ',
                ' - El desacople y la integración mejoran como resultado de una adecuada abstracción y definición de responsabilidades ',
                ' - Con un alto grado de abstracción se pueden aislar ciertas capas y hacerlas independientes de las tecnologias ',
                ' - Los cambios tienen bajo impacto y la matenibilidad es más eficiente de hacer ',
            ]),
        new Item('cliente',
            [
                ' - Existen 3 elementos principales y es una de las arquitecturas más usadas debido a su simplicidad ',
                '',
                ' Servidor -> encargado de responder las peticiones, gestionar la concurrencia y la persistencia de los datos ',
                ' Red -> medio para la comunicación entre ambas partes ',
                ' Cliente -> Dispositivos que hacen solicitudes, para crear/manipular/eliminar información ',
            ]),
        new Item('intermediario',
            [
                ' - Un componente central maneja diferentes sistemas distribuidos coordinando las respuestas ',
                ' - Los clientes solicitan el intermediario y este a su vez solicita los servicios expuestos indicados ',
            ]),
        new Item('servicios',
            [
                ' - Se pasa de un nucleo central y robusto a diferentes partes más pequeñas y ligeras ',
                ' - Las partes se intercomunican entre si y funcionan de manera separada, aumentando la tolerancia a fallos ',
                ' - Los servicios pueden ser independientes de las tecnologias, además de que se pueden subdividir tambien ',
                ' - Tambien se pueden escalar de manera individual significando una mejora en el uso de recursos ',
            ]),
        new Item('hexagonal',
            [
                ' - Aisla el dominio de las tecnologias, permitiendo que los cambios entre tecnologias sean superfluos o minimos ',
                ' - La comunicación entre componentes internos/llamados externos se da por medio de puertos(interfaces) ',
                ' - Cualquier dispositivo/usuario/sistema podra consultar de forma homogonea la información y esta sera consistente ',
                ' - Las capas que se hayan definido son idependientes entre si, sin estar totalmente aisladas ',
                ' - Hay una definición clara de responsabilidades, permitiendo hacer testing más facilmente ',
                ' - El termino hexagonal solo se da para resaltar la naturaleza similar de los puertos, no la cantidad de estos ',
            ]),
        new Item('otrasArquitecturas',
            [
                ' - Bus de Eventos -> Una fuente emite eventos donde un bus los direcciona a los receptores indicados ',
                ' - MVC -> Consta de 3 capas bien definidas, modelo, vista y controlador, cada una con una función especifica ',
                ' - Tuberia -> Es un flujo donde los datos son transformados a medida que van desde su origen hasta su destino ',
            ]),
        new Item('monolitos',
            [
                '  Caracteristica                 MONOLITO                        MICROSERVICIOS                         MICROLITOS         ',
                ' ',
                ' Separación de            Acoplamiento alto y mayor        Entregadas por la plataforma          Acoplamiento alto y mayor ',
                ' funciones tecnica        dependencia del framework        usada, reduce el acoplamiento         dependencia del framework ',
                ' ',
                ' Latencia                 Casi nula                        Puede ser alta                        casi nula ',
                ' ',
                ' Consistencia             Transaccional                    Eventual, requiere más atención       Eventual ',
                ' ',
                ' Evolución                Complicada por proceso           Sencilla por proceso                  Sencilla ',
                ' ',
                ' Especialización          Alta variedad de                 Alta especialización,                 Alta especialización,    ',
                ' de los equipos           conocimientos                    conocimiento del negocio              conocimiento del negocio ',
                ' ',
                ' Automatización           Pocos despliegues                Muchos despliegues                    pocos despliegues ',
                ' ',
                ' Tamaño                   Grande                           Pequeño                               Pequeño ',
                ' ',
                ' Observalidad             Relativamente facil              Más complicada                        Punto intermedio ',
                ' ',
                ' Monitarización           Complicado separar               Sencillez para identificar            Sencillez para identificar ',
                ' tecnica                  los problemas                    problemas de rendimiento              problemas de rendimiento ',
            ]),
    ];

export const BUENAS_PRACTICAS =
    [
        new Item('practicas1',
            [
                '- Definir el alcance, establecer limites con el cliente acerca del trabajo a realizar ',
                '- Dividir el desarrollo en fases o entregables que sean factibles',
                '- Elegir el mejor IDE de acuerdo a los conocimientos o las necesidades',
                '- Reutiliza código y comentalo cuando sea necesario',
                '- Documenta lo que haz hecho, asi es más facil integrar personal y sera util para futuros desarrollos ',
            ]),
        new Item('practicas2',
            [
                '- Presencia activa de los clientes en el desarollo',
                '- Definir los requerimientos y sus prioridades con el cliente',
                '- Adaptar el lenguaje de acuerdo a los tipos de clientes',
                '- Nunca dejar funciones al azar, que las pruebas demuestren su funcionamiento ',
            ]),
        new Item('practicas3',
            [
                '- Escoger un ciclo de vida adecuado segun cada desarrollo',
                '- Estimar y presupuestar correctamente (más facil decirlo que hacerlo) ',
                '- Control de calidad y revisiones de código periodicas',
                '- Planificar el matenimiento el soporte y posibles mejoras',
            ]),
        new Item('practicas4',
            [
                '- Usar tecnologias y frameworks consolidados',
                '- Promover que el uso de la aplicación sea intuitivo y accesible ',
                '- Distribución de tareas, no hay equipos de un solo hombre',
            ]),
        new Item('demeter',
            [
                '- No aceptar caramelos de extraños',
                '- El encadenamiento de muchos metodos puede significar un alto acoplamiento',
                '- Entre más grande sea una pila de llamadas, sera más propensa a futuras refactorizaciones ',
            ]),
        new Item('complejidad',
            [
                '- Es una metrica del software que proporciona una medida cuantitativa de la complejidad logica del programa ',
                '- Son los diferentes caminos que puede seguir una aplicación desde la entrada hasta la salida, ',
                ' - teniendo en cuenta condiciones, parametros, funciones y atributos ',
                '',
                '- Lo ideal es tener la menor complejidad ciclomatica posible ya que: ',
                ' - Facilita el mantenimiento del codigo ',
                ' - Simplifica la refactorización ',
                ' - El codigo es más facil de entender ',
                ' - La escabilidad del proyecto se puede facilitar ',
                '',
                '- Para reducirla se pueden aplicar los siguientes concejos: ',
                ' - No abusar de la identación ',
                ' - Evitar las sentencias switch ',
                ' - Metodos pequeños para funcionalidades más desacopladas ',
            ]),
        new Item('logging',
            [
                ' “Depurar es como ser el detective de una película policial en la que también eres el asesino. ”- Filipe Fortes ',
                '',
                '- Depurar es recomendable cuando la pila de llamadas es demasiado extensa y compleja',
                '- Registrar es util cuando la aplicación ó funcionalidad es pequeña y de baja complejidad ',
                '- Esta elección tambien depende de la comodiad de cada programador y de su eficiencia con cada herramienta ',
            ]),
        new Item('complejidadCognitiva',
            [
                '- Es una metrica de software complementaria a la complejidad ciclomatica ',
                '- Esta metrica trata sobre que tan dificil es de entender un fragmento de codigo ',
                '- Esta metrica aumenta de acuerdo a ciertas condiciones ',
                ' - Anidamiento',
                ' - Condicionales',
                ' - try/catch y retrasmision de excepciones',
                ' - Estructuras switch-case ',
                ' - sequencias largas de operadores logicos ',
                ' - recursividad ',
                ' - ciclos',
                '',
                '- Un codigo con una alta complejidad cognitiva es dificil de mantener, por lo que siempre se busca simplificarla, ',
                ' - sin cambiar su comportamiento, para ser más facil de comprender y de modificar ',
            ]),
        new Item('complejidadAlgoritmica',
            [
                '- Un algoritmo es una manera de hallar un dato desconocido, o una secuencia de pasos para obtener un resultado ',
                '- Los problemas pueden ser resueltos de diversas maneras, sin embargo no todas son optimas o viables ',
                '- Esto nos permite medir un algoritmo mediante los recursos y el tiempo necesario para su ejecución ',
                '- Tambien se suelen describir mediante el tamaño del conjunto de datos ',
                ' - y el crecimiento de las instrucciones para poder cumplir el objetivo ',
                '- Para medir la complejidad cada instrucción suele tener un peso determinado, ',
                ' - despues de sumarlas y tener el mayor termino, este es el indicativo de la complejidad ',
                '',
                '- Grados de complejidad comunes: ',
                '- O(1)       -> constante         - O(n<sup>2</sup>) -> cuadratico  ',
                '- O(log n)   -> logaritmico       - O(n<sup>3</sup>) -> cubico      ',
                '- O(n)       -> lineal            - O(n<sup>a</sup>) -> polinomico  ',
                '- O(n log n) -> cuasi-lineal      - O(2<sup>n</sup>) -> exponencial ',
                '- O(n!)      -> factorial                                           ',
                '',
                '- Sabiendo analizar estas caracteristicas, se puede suponer el costo de los algoritmos, e intentar optimizarlos ',
                '- Si la optimización no es prioridad algunos de estos conceptos pierden relevancia, sin embargo',
                ' - conocerlos permite generar mejores soluciones, al tener más perspectivas a la hora de resolver un problema ',
            ]),
        new Item('estandaresNombramiento',
            [
                '- Cada lenguaje de programación tiene sus convenciones para nombrar metodos, clases, variables, constantes, etc... ',
                '- Se recomienda seguir estas convenciones para aumentar la legibilidad de nuestro codigo y facilitar el mantenimiento ',
                '',
                '- camelCase -> se usan mayusculas para diferenciar una palabra de otra ',
                ' - UpperCamelCase  -> la primera letra de las palabras es mayuscula: MiPaginaDeConceptos ',
                ' - lowerCammelCase -> igual al anterior pero la primera letra es minuscula: miPaginaDeConceptos ',
                '- Generalmente usada para nombres de variables en diversos lenguajes ',
                '',
                '- snake_case -> las palabras estan separadas por guion bajo: mi_pagina_de_conceptos ',
                ' - SCREAMING_SNAKE_CASE -> igual que snake case pero en mayusculas: MI_PAGINA_DE_CONCEPTOS ',
                '- Utilizado para nombre de constantes y de variables en lenguajes más antiguos ',
                '',
                '- kebab-case -> como snake case pero con guion medio: mi-pagina-de-conceptos ',
                ' - Train-Case -> variedad de kebab case pero mayuscula inicial: Mi-Pagina-De-Conceptos ',
                '- Se encuentra generalmente en nombres de paquetes o de urls ',
                '',
                '- leetspeak ó 1337 -> consiste en remplazar caracteres por otros similares o su reflexion: M1P4G1N4D3C0NC3P70$ ',
                '- Usada ampliamente en internet, además de diversas comunidades en este ',
                '',
                '- Notacion hungara -> se usa para crear nombres de variables que indiquen su tipo: nContador ó bActivo ',
                '- Tambien usada en la programación, más que todo en lenguajes no tipados '
            ]),
    ];

export const CALIDAD =
    [
        new Item('artesanos',
            [
                '- Se puede considerar el siguiente nivel del desarrollo profesional, no solo mejorando nosotros mismo, sino a los demás ',
                '- Los 4 principios que este expone son: ',
                '',
                '- No sólo software que funciona, <strong>SINO</strong> también software bien diseñado',
                '- No sólo responder al cambio, <strong>SINO</strong> también agregar valor constantemente',
                '- No sólo individuos e interacciones, <strong>SINO</strong> también una comunidad de profesionales',
                '- No sólo colaboración con el cliente, <strong>SINO</strong> también asociaciones productivas',
            ]),
        new Item('metricas',
            [
                '- Además de revelar el desempeño del equipo de desarrollo, puede ser indicativo de la efectividad del equipo ',
                '- Metricas de productividad ',
                ' - Tiempo de entrega -> tiempo que se tarda de inicio a fin para entregar un proyecto ',
                ' - Cantidad de codigo -> lineas de codigo de la aplicación, esto puede ser un indicativo de la productividad, ',
                '   - más no de la calidad ',
                ' - Trabajo en curso -> trabajo empezado y que se compara con lo anteriormente hecho para tener una idea del progreso ',
                ' - Velocidad agil -> basandose en los sprints previos y cuantos puntos se han hecho, se puede estimar el proximo sprint ',
                ' - Tasa de exito -> calcula el porcentaje de exito del sprint, esto no significa necesariamente completar los puntos, ',
                '   - pero si las tareas del sprint ',
                ' - Numero de versiones -> los equipos agiles dan prioridad a las nuevas versiones con nuevas caracteristicas que den valor ',
                '',
                '- Metricas de rendimiento ',
                ' - Rendimiento -> cantidad de unidades que procesa un sistema en un periodo de tiempo ',
                ' - Tiempo de respuesta -> tiempo que se tarda en responder a una consulta ',
                ' - Fiabilidad y disponibilidad -> capacidad del software para cumplir con sus especificaciones ',
                '',
                '- Metricas de defectos ',
                ' - Cobertura de codigo -> proporcion del codigo que cubren las pruebas en relación a toda su extension ',
                ' - Deteccion de defectos ->  es un porcentaje calculado entre los defectos encontrados antes y despues del lanzamiento ',
                ' - Deuda tecnica -> es el costo de ignorar problemas que a la larga se podran convertir en errores ',
                ' - Vulnerabilidades de seguridad -> entre menos brechas y defectos se encuentren, más seguro sera la aplicación ',
                ' - Incidentes de seguridad -> recuento de las veces en que una aplicación fue vulnerada y la gravedad del ataque ',
                '',
                '- Metricas de usabilidad ',
                ' - UX -> suelen ser cualitativas e incluyen las respuestas objetivas y subjetivas del usuario ',
                ' - Usabilidad -> mide que tan bien el software permite alcanzar sus objetivos ',
                ' - Net Promoter Score -> es la voluntad de un cliente para recomendar la aplicación a otros ',
            ]),
        new Item('metricasEnCodigo',
            [
                '- Aplicar estas metricas suele ser un tema complejo, ya que estas dependen de las necesidades especificas de la aplicación ',
                '- Pero esto trae grandes beneficios para las aplicaciones al permitir conocer el estado actual y las acciones para mejorar nuestro codigo ',
                '',
                ' - Acoplamiento -> todo modulo debe ser lo suficientemente independiente para ser modificado y afectar en lo minimo posible a los demás ',
                '  - demasiado acoplamiento significa que esto conllevara a efectos en cascada no deseados al realizar modificaciones en el codigo ',
                '',
                ' - Cohesion -> es el grado de relación entre las partes, y va muy de la mano con el principio de responsabilidad unica ',
                '  - un codigo poco integrado se vuelve complejo, dificil de mantener y poco reutilizable ',
                '',
                ' - Complejidad -> un algoritmo debe ser eficaz y facil de entender, de esta se diferencia 2 tipos de complejidad ',
                '  - Complejidad Cognitiva -> que es la dificultad para entender intuitivamente el codigo ',
                '  - Complejidad Ciclomatica -> que es la dificultad para probar determinado segmento de codigo ',
                '',
                ' - Code Churn -> frecuencia con que altera el codigo a traves del tiempo, a mayor numero de modificaciones, más posibilidad de error ',
                '',
                ' - Cobertura -> porcentaje de codigo cubierto por las pruebas, a mayor cobertura, menor es la posibilidad de defectos ',
                '',
                ' - Codigo muerto -> es codigo que nunca es ejecutado, no siempre es facil de encontrar y no hay metodos infalibles para esto ',
                '',
                ' - Duplicación -> este codigo es producto del desconocimiento general del proyecto, replicando codigo que ya existe ',
            ]),
        new Item('cleanCode',
            [
                '- La calidad de codigo es un estandar que siempre se debe perseguir, hasta el codigo más limpio puede verse afectado por las malas practicas ',
                '- El proceso de degradación en todo proyecto es inevitable, más no incontrolable ',
                '- Los parches pueden ser reparaciones o adiciones rapidas y funcionales, sin embargo puedan estar en contravia directa de la calidad del codigo ',
                '',
                '- Para soluciones limpias y bien estructuradas se deberian seguir los siguientes pasos: ',
                '  - Analisis de caracateristicas -> toda nueva funcionalidad debe ser analizada e implementada de manera que, ',
                '    - el mayor numero de inquietudes este resuelto antes de iniciar la solución ',
                '  - Analisis del codigo base -> sabiendo la solución se debe analizar el codigo base para causar el menor impacto posible, ',
                '    - para tener claro que se puede modificar, reutilizar y que se debe crear nuevo ',
                '  - Desarrollo y refactorización -> no solo es desarrollar nuevos componentes y modificar los existentes, ',
                '    - tambien puede haber lugar para refactorizaciones, evitando la degradación del codigo ',
                '',
                '- Si estos pasos se realizan de manera adecuada y se mantiene la calidad del codigo en la mente, ',
                ' - la degeneración de nuestro codigo se podra manejar en terminos aceptables ',
            ]),
    ];

export const COMPILACION =
    [
        new Item('compilacion',
            [
                ' - Es el proceso de pasar un lenguaje de programación a otro formato de manera equivalente ',
                ' - Generalmente es un proceso de lenguajes de alto nivel a bajo nivel ',
                ' - Durante el proceso el codigo se puede optimizar o añadir más procesos ',
            ]),
        new Item('nivel',
            [
                ' - Bajo nivel -> son lenguajes de alto rendimiento dependientes de la maquina donde se ejecute ',
                ' - Bajo nivel -> Es un lenguaje que esta más cercano al lenguaje maquina, por lo que son dificiles de manejar ',
                ' ',
                ' - Medio nivel -> Pocos lenguajes caen en esta categoria, ya que pueden ',
                ' - Medio nivel -> Acceder al sistema pero tambien puede funcionar como lenguaje de alto nivel ',
                ' ',
                ' - Alto nivel -> Son lenguajes más cercanos al entendimiento humano, además de ser más dinamicos ',
                ' - Alto nivel -> Son independientes de las maquinas donde se ejecuten, a traves de un traductor como intermediario ',
            ]),
        new Item('interprete',
            [
                ' - Compilados -> son traducidos y ejecutados en la maquina que esten ',
                ' - Compilados -> esto hace que la optimización sea mayor, pero la compatibilidad no ',
                ' - Compilados -> los archivos ejecutables se realizan previamente, por lo que la ejecución es inmediata ',
                ' - Compilados -> al estar enlazados con el SO y el Host, estos se pueden afectar mutuamente ',
                ' ',
                ' - Interpretados -> estos deben tambien deben ser traducidos, pero lo hacen a un intermediario ',
                ' - Interpretados -> este intermediario se encarga de ejecutar el programa para que el sistema lo entienda ',
                ' - Interpretados -> debido a esto son multiplataforma, y se hace a pedido, (just in Time) ',
                ' - Interpretados -> la ejecución de estos programas estan aisladas del SO, por lo que requieren más recursos ',
            ]),
        new Item('transpilacion',
            [
                ' - Estos tambien traducen codigo de un lenguaje a otro, pero de igual nivel ',
                ' - Uno de los ejemplos más relevantes es paso de Typescript a Javascript ',
                ' - Todo transpilador puede ser considerado un compilador, pero no al contrario ',
                ' - Generalmente toda la sintaxis del lenguaje destino es compatible con la de origen, pero no al contrario ',
            ]),
        new Item('azucarSintactico',
            [
                '- Termino acuñado para hacer referencia a las adiciones sintacticas de un lenguaje de programación ',
                '- Estas adiciones se dan con el proposito de hacer que las construcciones sean más faciles de leer y expresar ',
                '- Esto no cambia el sentido semantico de las expresiones, pero si lo hace más entendible para el ser humano ',
                '- Son aquellas expresiones que pueden ser borradas sin afectar el funcionamiento del programa, o su rendimiento ',
                '- Parte del trabajo de los compiladores es desglosar estas expresiones a sus reducciones más basicas ',
            ]),
        new Item('coercion',
            [
                '- Es la conversion automatica o implicita de un tipo de dato a otro ',
                ' - Ejemplo: de string a number ',
                '- La coerción es implicita, mientras que la conversion puede ser implicita o explicita ',
                '- Esto puede dar a errores o conversiones erroneas si no se especifica que es lo que se necesita ',
                ' - Ejemplo -> "5" + 9 = 59         ',
                ' - Ejemplo -> Number("5") + 9 = 14 ',
            ]),
        new Item('ofuscacion',
            [
                '- Es comun el dicho que suele recordar que progames como si tu codigo fuera a ser mantenido por un psicopata que sabe donde vives ',
                '- Esto es para evitar que te termine odiando quien quiera que sea que tenga que mantener el codigo, ',
                ' - pero generalmente esto nos pasa con nuestro codigo, al cual nosotros mismos mantenemos ',
                '- Pero en ocasiones es interesante ocultar el funcionamiento de nuestro codigo cuando es inevitablemente visible, ',
                ' - como lo es en el caso de Javascript, para para evitar modificaciones, desentrañar su funcionamiento, o su plagio ',
                '- Esto en si, es opuesto a un codigo mantenible y entendible',
                '',
                '- Existen diferentes maneras "manuales" de hacer esto (malas practicas): ',
                ' - Nombre de variables sin sentido ',
                ' - Duplicar codigo ',
                ' - Añadir/eliminar comentarios innecesarios/necesarios ',
                ' - Agregar pasos innecesarios y codigo muerto ',
                '',
                '- La ofuscación es particularmente problematica cuando existen sistemas legacy sin buena documentación y con malas practicas ',
                '- Tambien puede ser usada con propositos malintencionados al introducir codigo malicioso dificil de revisar y por ende de encontrar ',
                '',
                '- Esto se puede dar de manera involuntaria pero necesaria en procesos como: ',
                ' - La transpilación de un lenguaje a otro, Typescript a Javascript',
                ' - La minificación de archivos para reducir su peso ',
                ' - La compilación de lenguajes de alto nivel (compilados) a codigo binario ',
                ' - Optimizaciones realizadas por los propios compiladores ',
            ]),
        new Item('grafos',
            [
                '- Son una composición interesante de un conjunto de objetos denominados nodos (vertices) ',
                '- Estos estan conectados con otros por medio de aristas (arcos) ',
                '- Algunos de sus usos son las bases de datos, donde la información esta interelacionada entre multiples nodos ',
                '- Para estudiarlos nacio la teoria de grafos, con la finalidad de representar estas abstracciónes graficamente ',
                '- El analisis de los nodos y sus aristas nos permite entender a profundidad las relaciones de los datos ',
                '- Existen diferentes tipos de grafos, dependiendo de los caminos que estos tengan ',
                '- Un camino, es el recorrido que se da al pasar por cierta cantidad de nodos, para llegar de A a B ',
                '- Tambien son utiles para la optimización y/o simplificación de redes de cualquier tipo ',
            ])
    ];

export const META_CARACTERISTICAS =
    [
        new Item('metaDatos',
            [
                '- Literalmente son datos de los datos ',
                '- Estan estructurados para describir caracteristicas de los datos como cantidad y contenido ',
                '- Actualmente se usan para gestionar y recolectar información de interes ',
                '- Facilitan la estandarización y la gestion de los cambios ',
                '- Pueden facilitar el desarrollo al tener un menor cambio de costo entre plataformas ',
            ]),
        new Item('metaClase',
            [
                '- Normalmente se considera una clase de clases ',
                '- Es una caracteristica propia del sistema por lo que el usuario jamas la llegara a ver ',
                '- Esta caracteristica permite añadir y modificar comportamientos del programa, ',
                ' - Sin llegarlo a afectar directamente ',
                '- Este concepto es ampliamente usado para realizar testing, por medio de anotaciones, dobles y otros conceptos, ',
                ' - Un ejemplo de esto son Junit y Mockito, frameworks para realizar pruebas en java, que se basan en estas caracteristica ',
            ]),
        new Item('reflexion',
            [
                '- Capacidad de un codigo para observar un programa para observarse y cambiar su estructura a alto nivel ',
                '- Puede ser dinamica o estatica, y es más comun en los lenguajes que usan maquinas virtuales para ejecutarse, como JAVA ',
                '- Cuando el codigo fuente se compila normalmente pierde su estructura al pasar a un lenguaje de un nivel más bajo, pero ',
                ' - si este sistema permite la reflexión esta estructura se preserva como metadatos ',
                '- La reflexión permite conseguir un codigo aun más flexible, a cambio de perder rendimiento ',
                '',
                '- Esta caracteristica permite realizar acciones como: ',
                ' - Descubrir y modificar secciones de codigo en tiempo de ejecución ',
                ' - Evaluar una cadena como si fuera una sentencia de código fuente en tiempo de ejecución ',
                ' - Flexibilizar el tipado en lenguajes fuertemente tipados ',
            ]),
        new Item('asserts',
            [
                '- Todo codigo contiene algun tipo de restriccion, si estas no se documentan bien pueden inducir a errores ',
                '- La documentación extensiva tampoco es una buena idea ya que modificar codigo conlleva a modificar la documentación tambien ',
                '- Las aserciones son predicados que se evaluan como ciertos o falsos en tiempo de ejecución ',
                '- Estas comprobaciones favorecen el proceso de detectar errores y garantizar las condiciones de funcionamiento ',
                '- Son una opción a considerar si se quiere evitar la programación defensiva ',
            ]),
        new Item('excepciones',
            [
                '- Es la indicación de que se produjo un error en la ejecución del programa ',
                '- Estas pueden ser situaciones esperadas, inesperadas e incluso pueden se provocadas ',
                '- Las exepciones son objetos especializados con toda la información del error ',
                '- Estos objetos pueden ser atrapados por la instrucción try-catch y evitar que se detenga el programa, ',
                ' - o simplemente ser lanzados y terminar el programa de manera abrupta ',
                '- El manejo de excepciones es fundamental para conseguir programas robustos y confiables, por esto es ideal definir, ',
                ' - responsabilidades acerca de quienes pueden lanzar excepciones y quienes pueden atraparlas ',
            ]),
        new Item('scafolding',
            [
                '- Es la generación automatica de codigo funcional, archivos, carpetas, configuraciones, interfaces graficas, etc... ',
                '- Generalmente se basa en la creación de las operaciones CRUD, basandose en un modelo de datos previo ',
                '- Algunos frameworks pueden ayudar en este sentido, e incluso existen aplicaciones con este proposito ',
            ]),
        new Item('cache',
            [
                '- La cache existe para diminuir la latencia e incrementar el rendimiento en operaciones costosas ',
                '- Esta es recomendable usarla en los casos donde el rendimiento no es el esperado, ',
                '  - o si son recursos poco mutables y muy solicitados ',
                '- Esto significa que el sistema soporte operaciones de datos con consistencia eventual ',
                '',
                '- Tipos de cache: ',
                '- Local -> almacenamiento en memoria, ideal cuando la información es poca, predecible y poco mutable ',
                '  - esto puede conllevar a inconsistencias de los datos si hay diferentes instancias y problemas de rendimiento en la ejecución ',
                '- Centralizado -> se almacena de manera externa y este siempre esta en concordancia con las demás ',
                '  - al ser externa depende directamente de la latencia del medio en que este, y de su disponibilidad, además de su manejo ',
                '- Distribuida -> esta particionada y administrada por diferentes nodos que se comunican entre si ',
                '  - su manejo implica más complejidad ',
            ]),
        new Item('hilos',
            [
                '- Un hilo es una secuencia de control dentro de un proceso que ejecuta sus procesos de forma independiente ',
                '- Un proceso es una acción continua o serie de cambios, tareas que ocurren de manera definida ',
                '- El ciclo de vida de un proceso es el siguiente: ',
                '  Creacion -> Listo &larr;&rarr; Ejecución -> Terminado',
                '                            &darr;                     ',
                '                &uarr;	Bloqueado                       ',
            ]),
        new Item('argumentos',
            [
                '- En java los argumentos siempre se pasan por valor, esto significa que siempre se pasa el valor de la variable, ',
                ' - y no la referencia en memoria de la variable, por lo que siempre es una copia del original ',
                '- Las copias se pueden hacer del valor para datos primitivos, o una copia con la dirección de memoria si es un objeto ',
                '- Esto no modifica la variable original, ya sea un tipo primitivo o un objeto ',
                '- Algunas clases son inmutables por lo que los objetos originales nunca son modificados, ',
                ' - solo se devuelve una nueva instancia con los cambios en vez de la original ',
            ]),
        new Item('concurrenciaParalelismo',
            [
                '- Concunrrencia -> es la capacidad de realizar muchas tareas a la vez, con ó sin una secuencia especifica ',
                '- Paralelismo -> es la capacidad de ejecutar 2 ó más acciones de manera simultanea ',
                '',
                '- Para implementar concurrencia se recomienda usar Hilos, en cambio ',
                '- Para implementar paralelismos se optara por usar Procesos ',
                '',
                '- Aunque la programación concurrente tiene problemas en cuanto a la coherencia de los datos, ',
                ' - es bastante util para resolver problemas de rendimiento ',
                '- En cambio si el orden de las tareas es importante y tanto el inicio como el fin tambien, ',
                ' - la programación paralela es mejor debido a su aislamiento inherente ',
            ]),
        new Item('ortogonalidad',
            [
                '- Basicamente significa que cuando hacemos una accion esta no debe modificar lo que no le respecta ',
                '- Tambien se puede interpretar de manera que cuando se ejecute una instrucción solo se ejecute esta y nada más ',
            ]),
        new Item('boilerPlate',
            [
                '- Este hace referencia a codigo repetitivo que no siempre es util, pero si requerido, aun aveces cuando no vaya a ser usado ',
                '- Esto tambien aplica para fragmentos de codigo propios, ya que se reutiliza codigo, con solo copiar y pegar ',
                '- El boiler plate es diferente del scafolding, ya que este primero es más de copiar y pegar, ',
                ' - en cambio el segundo esta relacionado con mantener estandares y formas de uso ',
                '- Un ejemplo de esto es el uso de getters y setters en POO para modificar los objetos, ',
                ' - aunque estos cambian de acuerdo al objeto, su función y su forma son casi siempre identicas ',
            ]),
        new Item('recursividad',
            [
                '- Es una tecnica de programación para ejecutar codigo un cierto numero de veces ',
                '- Esto es posible a la caracteristica de cualquier lenguaje de permitir que los metodos se llamen a si mismas ',
                '- La recursividad tiene que tener un condición de salida, de lo contrario se convertira, ',
                ' - en una pila de llamados infinita a si mismo ',
                '- Es una alternativa y en ocasiones más eficiente de realizar tareas que requieren ser repetitivas ',
                '',
                '- A continuación un ejemplo con la función factorial ',
                '   public int factorial(int n) { ',
                '       return (n == 0) ? 1 : n * factorial(n - 1);',
                '   }',
            ]),
        new Item('backtracing',
            [
                '- Es una estrategia para encontrar soluciones que satisfagan restricciones ',
                '- De una manera basica esto se asemeja a un recorrido en profundidad dentro de un grafo que no contega ciclos ',
                '- Durante todo el recorrido se va construyendo la solución del problema, todo esto para que al final si se tiene exito, ',
                ' - todas estas soluciones parciales se junten y conformar una solución completa ',
                '- Si el recorrido no tiene exito y tampoco se puede completar, se eliminaran todos los elementos construidos previamente ',
                '- Este proceso suelen implementarse mediante algoritmos recursivos para evitar busquedas profundas, ',
                ' - y asi evitar desperdicio de recursos infructuosamente ',
                '- Tambien se pueden hacer optimizaciones donde se evalua el peso de las ramas o se acotan los caminos posibles ',
                ' - mediante subrutinas para podar el arbol y mejorar su eficiencia ',
                '- Esta estrategia es usada en los analisis sintacticos de los compiladores y en la inteligencia artificial, ',
                ' - dando lugar a nuevos algoritmos de busqueda como el A*',
            ])
    ];

export const CONOCIMIENTOS_EMPIRICOS =
    [
        new Item('balas',
            [
                '- El software puede tener dificultades inherentes al software y accidentales ',
                '- Los errores son gajes del oficio, pero tienen diferentes grados de repercusión en el software ',
                '- Jamas sera lo mismo un error semantico a uno de diseño, el primero podria pasar por trivial, pero el segundo NO ',
                '',
                '- Complejidad -> la complejidad es directamente proporcional al tamaño ',
                '- Complejidad -> esta es una propiedad intrinseca del software, que no se puede desligar de su diseño o construcción ',
                '- Complejidad -> de esta complejidad nacen las dificultades para crecer sin afectar al resto del sistema ',
                '- Complejidad -> sin contar con los problemas tecnicos ó las dificultades de aprendizaje ',
                '',
                '- Conformidad -> tener que ajustarse a otros diseños, necesariamente implica algo más que una refactorización ',
                '- Conformidad -> no hay una sola manera para trabajar, por lo que hay acostumbrarse a las diferentes formas de cada persona ',
                '',
                '- Variabilidad -> El software esta sometido a la necesiadad de cambio constante, pero esto no necesariamente significa un "cambio" ',
                '- Variabilidad -> Se podria sacar un nuevo modelo ó una nueva versión, más no obligatoriamente cambiar lo que ya funciona ',
                '',
                '- Invisibilidad -> El software es un recurso intangible, solo entendible por la capacidad de abstracción y de visualización de los humanos ',
                '',
                '- Para revisar los demás temas puedes ir a la fuente original ',
            ]),
        new Item('lehman',
            [
                '- El contenido es eterno, pero no la materia que lo contiene ',
                '- Ley del cambio continuo -> En la realidad las cosas deben seguir cambiando constantemente, de lo contrario eventualmente seran obsoletas ',
                '- Ley de complejida creciente -> Mientras algo siga creciendo, su complejidad tambien lo hara, a no ser que se tomen medidas para reducirla ',
                '- Ley de evolución -> mientras algo crezca, tambien lo haran sus errores, casi siempre de manera promedio ',
                '- Ley de estabilidad organizacional -> la velocidad de desarrollo sera casi siempre la misma, por más recursos que se inyecten ',
                '- Ley de la conservación -> un crecimiento desmesurado hara que el conociemiento basico sea insuficiente para seguir creciendo ',
                '- Ley de crecimiento continuo -> las funcionalidades deben seguir mejorando para mantener a los clientes satisfechos ',
                '- Ley de retroalimentación -> la comunicación con el cliente y con las personas conocedoras es fundamental ',
            ]),
        new Item('conway',
            [
                '- El impacto de la comunicación en tu empresa ',
                '- “Cualquier organización que diseñe un sistema producirá un diseño que copia la estructura de comunicación de dicha organización.”',
                '- El software es una habilidad intelectual humana, por lo que la comunicación es fundamental para la integración ',
                '- La manera de trabajar de tu empresa se vera reflejada en tu software, es el significado principal de esta frase ',
                ' - Equipos pequeños, crearan soluciones pequeñas, altamente modulares ',
                ' - Personas egoistas, generan problemas de integración de componentes y falencias al compartir su conocmiento ',
                ' - Empresas sin organización, generaran codigo complejo, pero funcional de manera rapida, que se convertira en una bola de nieve ',
                ' - Empresas orgullosas, que comparten su codigo y sus buenas practicas ',
                ' - Estos y más ejemplos hay, como empresas y personas halla ',
            ]),
        new Item('murphy',
            [
                '- Si algo malo puede pasar, pasara',
                '- Se inspira en el concepto fisico de la entropia, el cual dicta que todo sistema fluye del orden al desorden ',
                '- Puede ser util para ayudar a prevenir el desastre, si se usa para tomar precauciones ',
                '- No hay ninguna demostración matematica que la niegue ó la acepta, solo es un conocimiento nacido de lo cotidiano ',
            ]),
        new Item('cristales',
            [
                '- Esta teoria predice que los desperfectos del ambiente van a generar la sensación de que la ley no existe ',
                '- Corregir los errores, aun por más por pequeños que sean evitara que el software se degenere ',
                '- Las pequeñas faltas pueden conllevar a transgresiones mayores ',
                '- Establcer normas claras ayuda a evitar este fenomeno ',
            ]),
        new Item('tiposProgramadores',
            [
                '- Estos son los 5 principales tipos de programadores que existen ',
                '',
                ' - The duct tape: ',
                '   - Este programador arreglara el error sin importale como, ',
                '   - la prioridad para el siempre sera arreglar el error, sin importar la complejidad de la solución ',
                '',
                ' - The perfectionist programmer ',
                '   - Para este programador cada segmento de codigo es una obra de arte, ',
                '   - no le importan las fechas limites ó los presupuestos, solo que el codigo generado sea hermoso eficiente, ',
                '   - e inmutable, a menos que sea el mismo quien lo cambie ',
                '',
                ' - The anti-programming programmer ',
                '   - Es aquel que siempre evitara reinventar la rueda, ya sea usando librerias de terceros',
                '   - ó usando codigo ya hecho por alguien más, pero siempre obtendra la solución más simple, ',
                '   - aunque esta no sea eficiente o retrocompatible, pero si sera facil de entender',
                '',
                ' - The half-assed programmer ',
                '   - Este programador es el más odiado por los demás tiposProgramadores, ya que solo le importa cumplir con su tarea, ',
                '   - la calidad ó la eficiencia son solo utopias con el, y lo más seguro es que generara problemas a largo plazo, ',
                '   - siempre sera eficaz a cuanto a los tiempos de entrega, aunque esto dañe otras partes del sistema ',
                '',
                ' - The theoretical programmer ',
                '   - Para este programador siempre habra n maneras de resolver algo, la mayoria de su tiempo lo ocupara pensando como ',
                '   - resolver el problema de la mejor manera, por lo que la manera que escoja para hacerlo nunca lo satisfacera al 100%, ',
                '   - pero entregara codigo a tiempo y con buena calidad ',
            ]),
        new Item('quo',
            [
                '- Es la preferencia innata del ser humano a la estabilidad ',
                '- Nuestras emociones son un punto de inflexión a la hora de tomas decisiones que arriesguan esta estabilidad ',
                '- Este fenomeno esta ligado a otros más comunes y que se viven casi a diario ',
                '',
                ' - Aversión a las perdidad -> es un efecto donde es más facil aferrarse a una cantidad u objeto en el que haya invertido tiempo y dinero, ',
                '   - que adquirir o construir uno nuevo que representara una ganancia, mayor a la actual ',
                ' - Efecto de dotación -> los bienes se perciben de manera más valiosa cuando son de nuestra propiedad, ',
                '   - Aunque este mismo bien sea el mismo que el de otra persona ',
                '',
                '- Estos fenomenos se pueden dar en el mundo del software al no realizar refactors en el codigo solamente porque, ',
                '  - "funciona", aunque lo haga de manera complicada u poco optima ',
            ]),
        new Item('costo',
            [
                '- La falacia del costo hundido es la tendencia a mantener proyectos fracasados ó obsoletos ',
                '- Esto se debe al tiempo y gastos invertidos en los proyectos, que no queremos soltar por la aversion a las perdidas ',
                '',
                ' - En la industria del software es comun tener casos donde hay sistemas que constantemente deben ser parcheados, ',
                '   - costando tiempo y dinero, y donde la solucion más optima seria rehacer el sistema que continuar con este tipo de situaciones ',
                ' - Tambien estan los casos donde las personas se niegan a abandonar proyectos estables, pero que eventualmente seran obsoletos ',
                '   - ya que migrar esto implica un costo, que puede ser menor que mantener a un proyecto legacy; pero esto no se ve a corto plazo ',
            ]),
        new Item('sesgos',
            [
                '- Son impulsos inherentes a cada ser humano que se basan en sus emociones, conocimientos, experiencias, creencias, etc.. ',
                '- Es la interpretación erronea de la información disponible, y como esto afecta nuestra emisión de juicios ',
                '',
                ' - Sesgo de confirmación -> es la busqueda de sucesos ó interpretaciones para confirmar algo que creemos de manera arraigada ',
                ' - Disponibilidad heuristica -> es un atajo mental que otorga más valor o credibilidad a la primera información que recordemos ',
                ' - Sesgo de anclaje -> es basarse en la primera información y solo esta fuente para tomar una decisión, sin evaluar otras posibilidades ',
                ' - Sesgo de observación selectiva -> es cuando diriges toda tu atención solamente a lo que te interesa, sin presta atención a los demás datos ',
                ' - Sesgo negativo -> te enfocas en los sucesos negativos en vez de tomar una posición más neutra ',
                ' - Resistencia reactiva -> se enfoca en hacer lo contrario de lo que alguien te dice ó aconseja, de manera selectiva y racional ',
                ' - Sesgo de impacto -> es la tendencia a sobrestimar un evento o lugar extraordinario, que pasara de lo excepcional a lo comun ',
            ]),
        new Item('multitarea',
            [
                'Es la capacidad de manejar y realizar multiples tareas al mismo tiempo, este concepto es muy buscado actualmente, aunque tiene pros y contras ',
                '',
                '- Ventajas',
                ' - Si se logra hacerlo de manera eficiente, se pueden ahorrar recursos y aumentar la productividad ',
                ' - Mejor reacción a las tareas complejas y un mejor manejo de las responsabilidades ',
                '',
                '- Contras ',
                ' - Menor eficacia, al tener un mayor ruido de las acciones por hacer ',
                ' - Decaimiento de la memoria y posibles problemas de estres, además de una peor salud fisica y mental ',
                ' - Mayor riesgo de errores al tener que estar atento a más cosas ',
                ' - Menor calidad del trabajo, además de posibilidades de sufrir de deficit de atención ',
            ]),
        new Item('maxwellCurve',
            [
                '- Más horas de trabajo, implican menos productividad',
                '- Este estudio fue realizado principalmente para Scrum, hasta la demostración de que en ciertos casos es más optimo el modelo de cascada ',
                '- Jornadas más cortas no necesariamente significan menos productividad, estas pueden ayudar a: ',
                ' - atraer nuevos talentos',
                ' - mejorar el equilibrio entre vida personal y laboral, teniendo trabajadores más felices ',
                ' - reduce los sentimientos de insatisfacción ',
            ]),
        new Item('pendulo',
            [
                '- Permite explicar comportamiento humanos cuando son llevados al extremo ',
                '- Se puede producir por diferentes razones: ',
                ' - Idealización del opuesto -> cuando estamos constreñidos en algo, tendemos a idealizar el contrario ',
                ' - Necesidad de reafirmación -> buscando un gran impacto, generalmente elegimos los polos opuestos al ser vistosos ',
                ' - Comodidad del extremo -> son comodos ya que no tienen contenciones ni filtros, lo opuesto de una posicion intermedia ',
                '',
                '- Los extremos no necesariamente son malos, ya que permiten tener nuevas experiencias, y conocer nuevos puntos de vista ',
                '- Esto se debe hacer de manera racional, y bajo nuestra propia elección, para que podamos reflexionar en vez de seguir ciegamente ',
            ]),
        new Item('prejuicios',
            [
                '- El primer paso es aceptar que todos tenemos segos cognitivos, estemos concientes o no de ellos ',
                '- Para combatirlos se pueden usar diferentes estrategias como: ',
                '',
                ' - Evitar el "punto ciego" -> todos estamos sesgados, el primer paso para evitarlo es aceptarlo ',
                ' - Para evitar la "subjetividad" -> es ideal tener un equipo diverso y participativo ',
                ' - No usar el "muro tecnico" -> para eludir o evitar cuestionamientos incomodos ',
                ' - Planificar e investigar para salir de nuestra zona de comfort, nos ayuda a encontrar más soluciones ',
                ' - Realiza pruebas, no siempre todo funciona o funciona como deberia ',
                ' - Mantener afinidad con una persona no significa que debemos de dejar de prestar atención a los demás ',
                ' - No aceptar la innovación puede ser tan malo como siempre estar al filo de la vanguardia ',
            ]),
        new Item('dunningKruger',
            [
                '- Es la tendencia natural de personas menos habilidosas a sobreestimar sus conocimientos y habilidades ',
                '- Tambien se da de la manera contraria, en la cual personas calificadas tienden a subestimar sus capacidades ',
                '- Una clara representación de este sesgo cognitivo se da con la siguente frase de: <strong>Charles Darwin</strong> ',
                ' - <i>"La ignorancia genera confianza más frecuentemente que el conocimiento"</i>',
                '',
                '- Ejemplos: ',
                ' - Cantantes que se creen muy talentosos sin tener tecnica vocal ',
                ' - Pacientes que se automedican ya que creen saber más que sus doctores ',
                ' - Personas que se entrenan y aumentan sus niveles de competencias, dandose cuenta de sus falencias ',
            ])
    ];

export const DOCKER =
    [
        new Item('docker',
            [
                '- Esta basado en el Kernel de Linux y su proposito es segregar los procesos de manera que sean independientes ',
                '- Reduce el consumo de recursos al solo tener lo necesario para ejecutar los procesos ',
                '- Desde su aparición las maquinas virtuales han perdido relevancia ',
                '- El uso de los contenedores y todos sus beneficios fue una gran revolución en el desarrollo del software ',
                '- Los contenedores son entornos de ejecución completos haciendolos independientes del sistema anfitrión ',
                '- Los servicios se pueden unir para generar aplicaciones de más complejidad y eficiencia ',
            ]),
        new Item('images',
            [
                '- Son los elementos necesarios para crear instancias de lo que se necesite ',
                '- Estas imagenes pueden ser oficiales ó personalizadas para nuestros requerimientos ',
                '- Existen repositorios en la nube donde se pueden descargar o guardar estas imagenes, uno de los principales es DockerHub ',
                '- Toda imagen tiene un tag asociado, para poder diferenciar las versiones entre si, por defecto este tag es latest ',
                '- Para descargar imagenes el comando es -> docker pull imagen:tag  (si no especifica el tag, se descargara la imagen con latest)',
                '- las imagenes se pueden personalizar de varias maneras: ',
                '  - Creando un contenedor a partir de una imagen base e instalar todo lo necesario manualmente, ',
                '  - y despues se hace un commit de el contenedor -> docker commit [id_container] [nombre_imagen] ',
                '',
                '  - Mediante un archivo DockerFile -> primero se crea un archivo llamado DockerFile sin ninguna extensión ',
                '  - cada comando de este archivo indica una capa, las cuales se van apilando entre si para construir algo más complejo ',
            ]),
        new Item('containers',
            [
                '- Son las instancias de las imagenes descargadas o creadas previamente ',
                '- docker ps -> contenedores ejecutandose ',
                '- docker ps -a -> todos los contenedores existentes, indifirentemente de su estado ',
                '- docker exec -> para ejecutar comandos dentro del contenedor, sin entrar en el ',
                '- docker start [nombre_contenedor]-> inicia el contenedor ',
                '- docker stop [nombre_contenedor]-> detiene el contenedor ',
                '- docker restart [nombre_contenedor]-> reinicia el contenedor ',
                '- docker rm [nombre_contenedor]-> elimina el contenedor ',
                '- para estos comandos tambien se puede usar las id de los contenedores ',
            ]),
        new Item('file',
            [
                '- FROM -> indica el SO base de la imagen ',
                '- COPY -> añade archivos del directorio actual a la imagen ',
                '- RUN -> ejecuta comandos dentro del contenedor necesarios para crear la imagen ',
                '- CMD -> ejecuta comandos directamente en la consola ',
                '- LABEL -> son etiquetas del proyecto para dar a conocer información, como licencias ',
                '- EXPOSE -> indica que puertos estaran abiertos en la imagen para que la aplicación pueda comunicarse ',
                '- ENV -> define las variables de entorno, sirve para ayudar en la configuración de la imagen ',
                '- ADD -> funciona igual que COPY pero se diferencia a la manera de extraer los archivos de sus ubicaciones ',
                '- ENTRYPOINT -> establece el comando principal de la imagen, suele ser el comando iniciador de la aplicación ',
                '- VOLUME -> es para indicar el directorio que siempre se mantendra aunque se eliminen los contenedores ',
                '  util para guardar archivos necesarios que necesita la aplicación y que pueden cambiar en cualquier momento ',
                '- USER -> este cambia el usuario del contenedor a uno diferente, el usuario por defecto suele ser root ',
                '- WORKDIR -> indica el directorio donde trabajara la aplicación, y se recomienda el uso de rutas absolutas para este ',
                '- ONBUILD -> son comandos que se ejecutaran una vez terminada la construcción de la imagen principal ',
            ]),
        new Item('volumes',
            [
                '- un volumen es un directorio o fichero que estara asociado a los contenedores, ',
                '- estos son independientes de los contenedores y no son afectados por la efimeridad de estos ',
                '',
                '- se crean añadiendo la opción -v al crear un contenedor ',
                ' - docker run -it --name contenedor -v /path imagen:tag bash',
                '',
                '- se pueden crear mediante volumenes o como simples directorios, por ejemplo: ',
                ' - docker run -it --name contenedor -v vol:/path imagen:tag bash',
                '',
                '- todo contenedor crea un volumen con un nombre aleatorio por defecto, estos se pueden consultar mediante 2 formas ',
                ' - docker inspect [nombre_contenedor] -> mostrando todas las caracteristicas del contenedor en cuestion ',
                ' - docker volume ls -> mostrando todos los contenedores existentes, pero sin sus asociaciones ',
            ]),
        new Item('network',
            [
                '- Cada contenedor de docker tiene una IP asociada, en base a la ip del Host',
                '- Existen 5 tipos de redes ',
                '',
                '- Bridge -> red por defecto de los contenedores cuando no se les especifica una ',
                '- Host -> el contenedor usara la misma IP del host en el que este ',
                '- None -> se le indica al contenedor que no tiene una red asignada ',
                '- Overlay -> crea multiples redes superpuestas permitiendo la comunicación de servicios en enjambre ',
                '- Macvlan -> permiten asignar una dirección MAC a un contenedor, apareciendo como un dispositivo fisico en la red ',
                '',
                '- docker network create --driver bridge [nombre_red] -> crea una nueva red, de tipo bridge ',
                ' - cada red creada creara una nueva subred ',
                '',
                '- a los contenedores se les puede especificar una red cuando estos se crean  ',
                ' - docker run -d -P --name [nombre_contenedor] --network [nombre_red] ',
                '',
                '- la red tambien se puede cambiar despues de que un contenedor es creado ',
                ' - docker network connect --link [nombre_contenedor]:[alias]  [nombre_red] [nombre_contenedor]',
            ]),
        new Item('compose',
            [
                '- Docker Compose permite simplificar y administrar los contenedores por medio de archivos YAML ',
                '- Esto permite conectar y administrar a los contenedores y sus puertos, volumenes, configuraciones, etc.. ',
                '- Se puede usar con Dockerfiles previamente creados, o especificar todo directamente en el archivo ',
            ])
    ];

export const ESTATEGIAS_DESARROLLO =
    [
        new Item('ddd',
            [
                ' -El lenguaje debe ser obicuo (entedible por cualquiera)',
                ' -El desarrollo debe ser lo más abstracto posible para ser independiente de las implementaciones ',
                ' -Las capas se vuelven parte diciente del codigo, indicando su utilidad con sus nombres ',
            ]),
        new Item('bdd',
            [
                ' - Es una evolución de TDD, que es más que solo testing ',
                ' - Aca las pruebas se concentran en tener un lenguaje obicuo, por lo que todas las partes se pueden involucrar rapidamente ',
                ' - Para implementarse las Historias de Usuario son fundamentales ',
                ' - Comprender el esquema Given-When-Then ',
                ' - <strong>Dado</strong> escenario y precondiciones <strong>Cuando</strong> acciones a ejecutar <strong>Entonces</strong> Resultado a validar',
                ' - Mejora la comunicación entre todas las partes, ya que todas se comunican más entre si ',
            ]),
        new Item('tdd',
            [
                ' - Primero se escriben las pruebas, y despues se crea el codigo para que estas funcionen ',
                ' - Puede incrementar la carga de trabajo, pero se obtiene un codigo más robusto y mantenible ',
                ' - Basicamente es un ciclo constante de creación de pruebas, refactorización y crecimiento ',
                ' - El <strong>Que</strong>, es más importante que el <strong>Como</strong> ',
                ' - La productividad se puede ver mermada si no se conoce esta estrategia ',
                ' - El incluir Bases de Datos o Interfaces graficas suele complicar el desarrollo ',
            ]),
        new Item('atdd',
            [
                '  - Primero se escriben las pruebas, despues se crean los casos de aceptación Y de ultimas se crea el codigo para que estos funcionen ',
                '  - Las pruebas se automatizan, por lo que a la larga el desarrollo se volvera más agil ',
                '  - Definir las Historias de Usuario y sus casos de aceptación es fundamental para evitar perder tiempo ',
            ]),
        new Item('analisis',
            [
                '- Son enfoques para el analisis y toma de decisiones, originarios en la informatica de los años 70',
                '',
                '- Bottom-Up',
                ' - Nace de lo particular para concluir en lo general ',
                '',
                '- Top-Down',
                ' - Nace de lo general hasta concluir en lo particular ',
            ]),
        new Item('tld',
            [
                '- Estas se dan una vez se ha terminado el codigo y las posibles refactorizaciones que este sufra ',
                ' -Este tipo de estrategia se puede usar de 2 maneras distintas: ',
                '',
                ' - Funciones completas: las pruebas cubriran todas las funciones y sus posibles escenarios ',
                ' - Proto funciones: Las pruebas cubriran los escenarios minimos para que la función cumpla con sus requerimientos ',
                '',
                '- TLD vs TDD',
                ' - Este enfoque es ideal si el tiempo de desarrollo es escaso ',
                ' - Su curva de aprendizaje es menor en comparación con TDD ',
                ' - El mantenimiento se reducen al usar TDD, pero la productividad aumenta con TLD (gastos y mano de obra) ',
                ' - Hay un mayor numero de pruebas en TDD, sin embargo el codigo con TLD es más entendible ',
                ' - Los cambios suelen tener menos impactos negativos con TDD, a cambio de más complejidad inherente al codigo ',
            ]),
    ];

export const FRAMEWORKS =
    [
        new Item('frameworks',
            [
                ' - Son marcos de trabajo con la finalidad de acelerar y aumentar la calidad del codigo desarrollado ',
                ' - Evitan perder tiempo desarrollando funciones que el propio entorno ya tiene ',
                ' - Aumentan la productividad y la reutilización de codigo ',
                ' - Existen infinidad de frameworks tanto para back como front, desarrollo movil, persistencia, etc... '
            ]),
        new Item('ioc',
            [
                ' - La inversion de control es la implementación del principio de Hollywood en la que se basan muchos frameworks para funcionar ',
                ' - El framework es quien toma el control de la ejecución del codigo del usuario modificando el ciclo de vida como tal ',
                ' - Permite añadir nuevas funciones prefabicadas sin tener que modificar el codigo por medio de la inyección de dependencias ',
            ]),
        new Item('iod',
            [
                ' - La inyección de dependencias Permite modificar y extender nuestro codigo mucho más facil ',
                ' - Solo es especificar que funcionalidades queremos añadir y estaran disponibles de manera transversal ',
                ' - El codigo modificado se vuelve más reutilizable, compacto y manejable '
            ]),
        new Item('spring',
            [
                ' - Es el framework de JAVA más usado actualmente ',
                ' - Admite el uso de ORM para simplificar las consultas SQL ',
                ' - Se adapta a diversos modelos de trabajo, para una gran cantidad de necesidades ',
                ' - Permite la implementación de cientos de funciones prefabricadas y testeadas para acelerar el trabajo ',
                ' - Al ser el framework predilecto de JAVA la documentación y la comunidad de desarrollo son enormes '
            ]),
        new Item('angular',
            [
                ' - Es un framework para programación web que implementa un patron MVC ',
                ' - Es multiplataforma y puede ser usado hasta para aplicaciones Android e IOS ',
                ' - Simplifica la comunicación entre la renderización del contenido(HTML) y la interactividad de la pagina(JS) ',
                ' - Facilita el desarrollo de paginas web SPA que son una una sola pagina que cambia de contenido dinamicamente',
                ' - Es mantenido por Google quienes se encargan de mejorarlo y respaldado por Microsoft al usar Typescript ',
                ' - Permite usar y crear componentes reutilizables, además de otras utilidades que vienen preconstruidas ',
            ]),
    ];

export const GIT =
    [
        new Item('introduccion',
            [
                '- Todo archivo puede tener un seguimiento, y todo archivo seguido tiene un identificador unico que cambia con cualquier cambio del archivo ',
                '- Existen 3 estados principales, cambios confirmados, archivos modificados y cambios en espera ',
                '- Se puede trabajar con repositorios localmente ó distribuidos en internet ',
                '- Los archivos tambien se pueden ignorar, configurando el .gitIgnore, especificando archivos y carpetas a ignorar ',
                '- Cualquier cambio puede ser deshecho, incluso despues de que haya sido confirmado ',
            ]),
        new Item('repositorios',
            [
                '- Git trabaja principalmente de manera local, pero es necesario sincronizar los cambios hechos con el repositorio central ',
                '- Los cambios pueden subirse mediante un push o bajarse del repositorio mediante un pull o un fetch ',
                '- Para trabajar con remotos es necesario contar con un usuario y contraseña configurados para la trazabilidad de los cambios ',
            ]),
        new Item('ramas',
            [
                '- Son versiones especificas de los cambios que se hayan realizado ',
                '- La rama principal es Main (anteriormente master) es el origen de donde se desprenden todas las demás ',
                '- El manejo de ramas en Git es bastante simplificado por lo que cambiar entre si, fusionar, ramificar, eliminar y rebasar se pueden hacer mediante simples comandos ',
                '- Usar diferentes ramas, para diferentes cambios garantiza que por lo menos siempre habra un punto al que retroceder si algo llegara a dañarse ',
                '- El uso de ramas tambien trae el problema de que puedan surgir conflictos, que son segmentos que cuentan con varias modificaciones por diferentes personas ',
                '- Solucionar conflictos y organizar las ramas suele ser una tarea delicada, por lo que debe realizarse con plena conciencia de lo que se esta haciendo ',
            ]),
        new Item('protocolos',
            [
                '- La comunicación entre el repositorio remoto y local se puede hacer mediante diferentes maneras ',
                ' - Local -> se usa el mismo metodo de carpetas y archivos que tenga el host por defecto ',
                ' - HTTP -> es una manera simple de mantener conectados el repo local y remoto con unas pocas configuraciones previas ',
                ' - SSH -> requiere de generar una clave encriptada que debe esta almacenada en ambos repositorios, más complejo pero seguro ',
                ' - Git -> no requiere ningun tipo de autenticación y es el más rapido de todos, haciendolo vulnerable a modificaciones de cualquier ente externo ',
            ]),
        new Item('versiones',
            [
                '- las etiquetas se añaden a un commit en especifico, dando a entender que esa ha de ser una nueva versión ó hay un cambio bastante importante ',
                '- Tambien se puede crear un archivo comprimido con todo el codigo de la nueva versión listo para descargar y ejecutar ',
            ]),
        new Item('forks',
            [
                '- Fork -> es una clonación de un proyecto desde un repositorio a otro en un momento y rama en especifico, con el usuario como nuevo dueño ',
                '- Pull request -> es la solicitud de una persona que haya modificaciones de manera externa al repositorio pero que quiera integrarlas al original ',
                '- Markdown -> son archivos utiles a la hora de añadir información extra del proyecto, de manera más interactiva que un simple archivo de texto ',
            ]),
        new Item('stash',
            [
                '- Stash -> el stash nos permite intercambiar entre ramas, sin necesidad de hacer commits pero guardando los cambios hechos ',
                '- Pop -> permite retomar los cambios guardados y continuar en el punto que se dejo ',
                '- Reset -> borra todos lo cambios hechos y devuelve la rama al ultimo commit hecho ',
            ]),
        new Item('merge',
            [
                '- Une los cambios de una rama a otra especifica, ocasionalmente surgen conflictos, que dependeran de la divergencia de los cambios realizados ',
                '- Las ramas se pueden desfusionar si se hay errores, ó abortar la fusión si esta se vuelve muy problematica mediante un revert o un abort segun el caso ',
                '- Rerere -> esta opción oculta permite dotar a memoria a Git para que esta resuelva conflictos de manera automatica ',
            ]),
        new Item('atributos',
            [
                ' - Evitar la comparación de archivos binarios que git no pueda detectar por si mismo ',
                ' - configurar maneras diferentes de ver los cambios de los archivos dependiendo de las extensiones (imagenes, textos, etc... )',
                ' - ignorar archivos a la hora de comprimir el proyecto ',
                ' - cambiar la forma de fusión de acuerdo a ciertos tipos de archivos ',
            ]),
        new Item('migracion',
            [
                '- Manejar los espacios en blanco que suelen ser un problema comun ',
                '- Git permite la migración desde diferentes sistemas de versionamiento anteriores ó que han caido en el deshuso como: ',
                '- Mercurial, Subversion, Perforce, TFS, ',
                '- Tambien es posible eliminar archivos totalmente del arbol de cambios, aun asi no es recomendable ya que el historial se podria ver afectado ',
                '- Configurar variables de ambiente como cualquier otro programa ',
                '- Algunos entornos de desarrollo como Eclipse, Visual estudio y Visual Estudio code, ya traen integrado git por defecto ',
            ]),
        new Item('flow',
            [
                '- Es una forma de trabajar basada en el uso de las ramas y el sentido comun ',
                '- Consta de 2 ramas principales y varias auxiliares ',
                '',
                ' - Master -> cualquier codigo que este en esta rama debe estar listo para producción ',
                ' - Develop -> es donde se trabaja la proxima versión a trabajar ',
                '  - Feature -> se originan de develop y son nuevas funcionalidades a integrar ',
                '  - Release -> aca se corrigen bugs y se hacen los ultimos ajustes, antes de Master ',
                '  - Hotfix -> son usadas para corregir problemas presentes en producción y que aparecen de improviso ',
                '',
                '- Todas las ramas Hotfix se unen con master y develop ',
                '- Cualquier rama feature se une a develop ',
            ]),
        new Item('remotos',
            [
                ' - Github -> El repositorio más grande actualmente en el mundo, con más de 50 millones de proyectos de codigo abierto ',
                ' - Gitlab -> Muy similar a Github en cuanto a funcionalidades, además de contar con version gratuita y empresarial ',
                ' - Bitbucket -> Similar a los mencionado previamente con la ventaja de tener Trello integrado por defecto ',
                '',
                '  - Permiten mantener un seguimiento de errores en los proyectos ',
                '  - Admiten proyectos colaborativos, repositorios privados y posibilidades de CD/CI ',
                '  - Son muy configurables permitiendo generar y mantener claves SSH ',
                '  - Los 3 cuentan con interfaces graficas que permiten la rapida revisión y creación de ramas, pulls, merges, logs y forks ',
            ]),
        new Item('practicas',
            [
                '- Los commits son sumamente importantes en git, por lo que realizarlos de manera correcta puede aportar metadata al proyecto ',
                '',
                ' - Especificar el tipo del commit, que puede ser de los siguientes tipos: ',
                '  - feat -> nueva caracteristica ',
                '  - fix -> solución de problemas ',
                '  - docs -> cambios en la documentación ',
                '  - style -> se aplica formato ó estructura al codigo, sin cambios en este ',
                '  - refactor -> refactorización de codigo ',
                '  - test -> se añaden cambios en las pruebas, como refactor, nuevas pruebas ',
                '  - chore -> actualización del build, cambios en los paquetes, sin cambios en el codigo ',
                '',
                ' - Tener en cuenta las 3 partes del commit, subject, body, footer',
                '  - subject -> no más de 50 caracteres y ser concisos, tambien se recomienda hacerlo en ingles ',
                '  - body -> no más de 72 caracteres, es una explicación más detallada del porque del commit ',
                '  - footer -> se usa para el seguimiento de los IDs cuando hay incidencias ',
            ]),
    ];

export const HARDWARE =
    [
        new Item('escalamiento',
            [
                '- Capacidad de un software para crecer de acuerdo a la demanda ',
                '',
                ' -vertical -> la más facil de realizar pero la más costosa',
                ' -vertical -> esta depende directamente de la capacidad de la infraestructura',
                ' -vertical -> las fallas en la infraestructura pueden conllevar a errores colapsantes ',
                '',
                ' -horizontal -> esta es más dificil de realizar pero es practicamente ilimitada',
                ' -horizontal -> se basa en tener varios nodos trabajando en paralelo de manera coordinada ',
                ' -horizontal -> soporta el balanceo de cargas y tiene una disponibilidad muy alta ',
                ' -horizontal -> el mantenimiento se incrementa considerablemente',
            ]),
        new Item('cli',
            [
                '- Es una interfaz de usuario basada en texto ',
                '- Antes de la invención del mouse, la unica interacción posible con el Sistema Operativo era mediantes comandos ',
                '- Los comandos no son universales, algunos son reconocibles solo por aplicaciones ó Sistemas Operativos especificos ',
                '- Pueden funcionar con o sin argumentos, los argumentos son maneras de especificar detalles y/o configuraciones ',
                '- Son rapidas y más eficientes ya que no necesitan interfaces graficas para funcionar ',
                '- Tambien son más complejas de usar, ya que se basan en la memoria del usuario ',
            ]),
        new Item('virtualizacion',
            [
                '- Es un entorno virtual que funciona con su propia CPU, memoria, red, y almacenamiento, pero ',
                ' - que se crea dentro de un sistema de hardware fisico ',
                '- Esto se da mediante un software llamado hipervisor encargado de separar y gestionar los recursos ',
                ' - de la maquina real para que la VM pueda utilizarlos de manera adecuada ',
                '- Las VM estan aisladas del host, y este a su vez puede contener las VM que soporte ',
                '- Una VM permite que se ejecuten diferentes Sistemas Operativos dentro de la misma maquina ',
                '',
                '- Ventajas ',
                ' - Una ventaja es que permiten aprovechar mejor los recursos de una maquina que no se esten usando ',
                ' - Dado su aislamiento se puede ejecutar software que no es de confianza sin peligro de que dañe al host ',
            ]),
        new Item('nubeVSvirtualizacion',
            [
                '- Ambos conceptos hacen referencia a la creación de entornos utiles a partir de recursos abstractos, ',
                ' - bajos diferentes conceptos ',
                '- La virtualización nos permite esto teniendo recursos especificos y de manera fisica ',
                '- La nube es un entorno de TI que agrupa, extrae y comparte recursos ajustables en una red ',
                '',
                '                           Virtualización                    Nube                     ',
                '- Definición                 Tecnologia                   Metodologia                 ',
                '',
                '- Proposito               Multiples entornos,           Agrupar recursos              ',
                '                        un solo sistema fisico        Con alta disponibilidad         ',
                '',
                '- Uso                Entregar recursos especificos  Entregar variedad de recursos     ',
                '                         a usuarios especificos        con multiples fines            ',
                '',
                '- Configuración          Basado en imagenes            Basado en plantillas           ',
                '',
                '- Duracion                  largo plazo                  Mediano plazo                ',
                '',
                '- Escalabilidad               vertical                    horizontal                  ',
            ]),
        new Item('rendering',
            [
                '- Server-side -> esta funciona convirtiendo archivos estaticos HTML en información utilizable por el navegador ',
                ' - Este proceso no cuenta con un modo de cache, por lo que cada vez que se necesite, este sera pedido al servidor ',
                ' - Su velocidad no solo depende del servidor, si no de la optimización del sitio web, personas conectadas, etc.. ',
                ' - Generalmente cada vez que hay un cambio se vuelve a pedir todo el contenido y no solo lo que se modifico ',
                ' - El lado positivo de este metodo es el SEO ya que es mucho más eficiente y facil para los motores de busqueda ',
                ' - Este enfoque es ideal para contenido estatico, que no se requiera para una interactividad continua con el usuario ',
                '',
                '- Client-side -> esta forma funciona mediante Javascript que obtendra el documento basico de HTML, ',
                ' - y que despues ejecutara el resto del sitio usando al navegador ',
                '- Este enfoque es más reciente y es utilizado por las librerias y frameworks de Javascript como Vue y Angular ',
                '- Mediante esto el servidor solo se encarga de responder con los datos, el resto se hace en el navegador ',
                '- Las paginas se cargan más rapido ya que solo se modifica lo que se necesite y no todo el archivo ',
                '- Debido a que se necesitan todos los archivos para una carga correcta de la pagina, ',
                ' - la conexión a internet puede afectar la carga inicial ',
                '- Generalmente se requiere de varias a muchas dependencias de terceros, incluyendo los problemas que esto puede tener ',
            ])
    ];

export const HISTORIAS_USUARIO =
    [
        new Item('historias',
            [
                '- Es uno de los elementos usados en las metodolgias agiles ',
                '- Su nivel de exhaustividad es menor a cambio de proporcionar más valor al negocio ',
                '- Se concentran en especificar las funciones requeridas y el porque de estas ',
            ]),
        new Item('objetivos',
            [
                '- Deben esclarecer el porque, el actor de la acción, un motivo y como validarla ',
                '- Se basan en una negociación entre las partes, lo que las hace mutables a traves del tiempo ',
                '- El foco de toda función se basa en el usuario final, más que en los clientes o los desarrolladores ',
                '- Se conforman de varios aspectos, ademas de seguir el modelo INVEST ',
            ]),
        new Item('partes',
            [
                '- Titulo -> que debe ser una forma concisa y clara de lo que se busca ',
                '- Titulo -> tambien puede servir como identificador para cada HU ',
                '- Titulo -> <strong>COMO</strong> Rol <strong>QUIERO</strong> Objetivo <strong>PARA</strong> motivación ',
                '',
                '- Descripción -> puede contener una descripción más detallada de lo que se espera ',
                '- Descripción -> da el contexto donde se desarrollara la HU ',
                '- Descripción -> pueden incluir imagenes, diseños, prototipos, etc... ',
                '',
                '- Criterios de Aceptación -> son los elementos que se deben cumplir para dar a la HU como terminada ',
                '- Criterios de Aceptación -> no hay punto medio, esta o no esta completa ',
                '- Criterios de Aceptación -> evitar la ambiguedad lo más que se pueda ',
                '- Criterios de Aceptación -> deben ser verificables con relativa facilidad ',
            ]),
        new Item('invest',
            [
                ' I -> independiente, las HU deben ser independientes entre si, aunque puden compartir criterios de acpetación ',
                ' N -> negociable, la negociación debe ser la base de toda HU, no son contratos ',
                ' V -> valiosa, toda HU debe aportar valor al negocio, de lo contrario son irrelevantes ',
                ' E -> estimable, toda HU debe ser medible en tiempo o esfuerzo, de manera objetiva (ideal) ',
                ' S -> pequeña, las HU deben poder realizarse en un solo sprint, por lo que puede ser subdividida de lo contrario ',
                ' T -> testeable, toda HU debe ser probada y validada, permitiendo que se considere finalizada ',
            ]),
        new Item('smart',
            [
                ' S -> specific, debe ser lo suficientemente especifica como para ser entendida ',
                ' M -> measurable, medible, ya que debe hacer lo que se pretende, segun el criterio del equipo ',
                ' A -> achievable, alcanzable, toda meta debe ser ambiciosa, más no demasido como para no alcanzarla ',
                ' R -> relevant, toda tarea debe ser relevante para que contribuya a la historia y al proyecto ',
                ' T -> time-boxed, cuenta con un tiempo limite para ser alcanzada, y asi saber los dias en que estara lista aproximadamente ',
            ]),
        new Item('agil',
            [
                '- Nace con el proposito de reformar el desarrollo de software para hacerlo más eficiente y eficaz ',
                '- Son 4 principios que toda metodologia agil lleva a cabo para mejorar el desarrollo ',
                '',
                ' - Individuos e interacciones <strong>sobre</strong> procesos y herramientas ',
                ' - Software funcionando <strong>sobre</strong> documentación extensiva ',
                ' - Colaboración con el cliente <strong>sobre</strong> negociación contractual ',
                ' - Respuesta ante el cambio <strong>sobre</strong> seguir un plan ',
            ]),
        new Item('3c',
            [
                '- Las historias de Usuario nacen de la necesidad de un entedimiento comun de lo que se debe hacer, ',
                ' - independientemente de quien lo lea, o quien lo haga, de ahi nace el concepto de las 3C ',
                '',
                '- Tarjeta (card) -> es un breve parrafo que resume la necesidad, el porque, y para quien es util, ',
                ' - Estas tarjetas tienen su propia estructura, la cual generalmente tiene 3 partes + los criterios de aceptación ',
                '- Conversación (conversation) -> es la comunicación cara a cara de todos lo involucrados necesarios, ',
                ' - para crear las tarjetas, Developers, Product Owner, Scrum Master, etc... y por medio de un conceso redactar la HU ',
                '- Confirmación (confirmation) -> Suelen ser los escenarios, precondiciones y postcondiciones para que la HU se de como terminada, ',
                ' - tambien se les conoce como los criterios de aceptación y no tienen punto medio,  ',
                ' - o se aceptan y se concluye la HU, o no se cumplen y es necesario seguir trabajando en la HU ',
            ]),
        new Item('gherkin',
            [
                '- El proposito del Gherkin es describir las HU y las pruebas de aceptación, en un lenguaje que todos los involucrados puedan entender ',
                '- Suele estar de la mano con el uso de BDD y TDD, donde todo el equipo es importante, ',
                ' - testers, developers, scrum master, product owner, ó cualquier otro involucrado ',
                '',
                '- Ya con las HU realizadas y con todos correctamente empapados se suelen crear los escenearios de uso ',
                '- La estructura general de cada prueba de aceptacion suele ser: ',
                ' - Dado que "contexto inicial" ',
                ' - Cuando "un acontecimiento o suceso" ',
                ' - Entonces "resultado determinado" ',
            ]),
        new Item('descomposicionHU',
            [
                '-Toda HU debe ser subdividida en tareas especificas que aporten valor y que ayuden al cumplimento de la meta planteada ',
                '-Una forma util puede ser tener una serie de tareas genericas que puedan ser modificadas segun cada proyecto como: ',
                '',
                '- Especificar cuantas pruebas unitarias estan asignadas a la HU ',
                '- Pruebas de aceptación bien definidas de la HU ',
                '- Tener claro los requisitos no funcionales que se deben cumplir ',
                '- La necesidad de revisiones y cuantas se han de hacer ',
                '- Refactorizaciones de codigo y cuanto tiempo se gastara para esto ',
                '- Correcion y/o verificación de errores, que puedan suceder despues de las pruebas ',
                '- Documentación, ya sea crearla o modificarla ',
            ])
    ];

export const MALAS_PRACTICAS =
    [
        new Item('callbackhell',
            [
                '- Generalmente es un problema al hacer codigo con caracteristicas asincronas (generalmente javascript) ',
                '- El orden en que se copia el codigo no necesariamente es en el que va a ser ejecutado',
                '- Cambiar el orden de las llamadas puede evitar el anidamiento innecesario',
                '- Usar promesas ó el Async/Await que hara que el codigo se comporte de manera más sincronica ',
            ]),
        new Item('cosas1',
            [
                '- Desconocimiento del negocio, clases mal diseñadas o condiciones sin sentido',
                '- Mala o nula formulación de requerimientos y requisitos ',
                '- Desconocimiento de las tecnologias que se usen, la experiencia de un desarrollador toma tiempo para conseguirse ',
                '- Malas estimaciones de los tiempos, obligando a mucho trabajo extra',
                '- No aplicar patrones y/o arquitecturas',
            ]),
        new Item('cosas2',
            [
                '- Asignación erronea del personal en roles inadecuados o sin la experiencia necesaria ',
                '- Asumir información sin tener una confirmación previa',
                '- Empezar a planear sin tener todas las variables a tener en cuenta',
                '- No se debe abusar de la capacidad de multitarea del equipo',
            ]),
        new Item('cosas3',
            [
                '- La falta de comunicación en el equipo puede conllevar al desastre',
                '- No poner limites es tan malo como ser inflexible, siempre hay un punto medio',
                '- Entregar productos incompletos, lo ideal seria pedir más tiempo o recursos',
                '- Asignación erronea del personal en roles inadecuados o sin la experiencia necesaria ',
            ])
    ];

export const META_ESTRUCTURAS =
    [
        new Item('scope',
            [
                '- Se puede definir como el alcance que tendran las variables en tu codigo ',
                '',
                '- Scope Local -> tus variables seran accesibles solamente en el ambito declarado como lo puede ser:  ',
                ' - dentro de una función, dentro de una clase, dentro de una sentencia de control ',
                '',
                '- Scope Global -> se pueden acceder desde cualquier parte de tu codigo, más aun asi no se recomiendan',
                ' - En el caso de Javascript se recomienda usar <strong>let</strong> y <strong>const</strong> para la declaración de variables, ya que el <strong>var</strong> puede traer bugs consigo',
            ]),
        new Item('precedencia',
            [
                '- los operadores en las expresiones tienen una jeararquia predeterminada que determina el orden de evaluación ',
                ' - Operadores con igual prioridad se evaluan de izquierda a derecha ',
                ' - Operadores logicos y de operación bit a bit de izquierda a derecha ',
                ' - Operadores matematicos, se respeta la jeararquia matematica, a menos que se involucren parantesis ',
                ' - Los parentesis afectan el orden de evaluación, al mismo tiempo que permiten asociar expresiones ',
                ' - La precedencia puede cambiar de lenguaje a lenguaje, por lo que se recomienda saber las especificaciones de cada uno ',
            ]),
        new Item('verticalAndHorizontal',
            [
                '- Una buena estructura es primordial para todo proyecto ',
                '',
                '- Estructura horizontal -> estaba fuertemente ligado al modelo en cascada, donde se realizaban capas transversales ',
                '  - a todo el sistema, de manera que todo los componentes estaban separados entre si ',
                '- Esta estructura suele ser compleja de entender si no se entiende el negocio, además de que no todos ',
                '  - necesitan de las mismas partes para funcionar ',
                '',
                '    Products       Orders                  Customers                   ',
                '-------&darr;-------------&darr;-----   Views      -----&darr;---------',
                '-------&darr;-------------&darr;-----  Presenter   -----&darr;---------',
                '-------&darr;-------------&darr;-----   Domain     -----&darr;---------',
                '------ &darr;-------------&darr;-----  Services    -----&darr;---------',
                '-------&darr;-------------&darr;-----  Entities    -----&darr;---------',
                '-------&darr;-------------&darr;----- Repositories -----&darr;---------',
                '-------&darr;-------------&darr;-----  DataSource  -----&darr;---------',
                '',
                '- Estructura vertical -> en esta organización prima el dominio, por lo que cada capa esta aislada entre si ',
                '  - toda la estructura de un componente es independiente entre si, y más facil de modificar ',
                '',
                '    Products           Orders            Customers        ',
                '|    Views     |   |    Views     |   |    Views     |    ',
                '|   Presenter  |   |   Presenter  |   |   Presenter  |    ',
                '|    Domain    |   |    Domain    |   |    Domain    |    ',
                '|   Services   |   |   Services   |   |   Services   |    ',
                '|   Entities   |   |   Entities   |   |   Entities   |    ',
                '| Repositories |   | Repositories |   | Repositories |    ',
                '|  DataSource  |   |  DataSource  |   |  DataSource  |    ',
            ]),
        new Item('expresionesRegulares',
            [
                '- Una expresion regular es una forma de buscar coincidencias o patrones de manera optimizada ',
                '- No solo permite encontrar coincidencia, tambien permite modificar lo que se haya encontrado ',
                '- Las expresiones regulares se basan en diagramas de estado, ya que todas las transiciones se deben cumplir, ',
                ' - para que el texto a evaluar cumpla con la condicion dada de la expresion ',
                '- Estas expresiones en si se escriben igual, y son independientes del lenguaje que se use ',
                '- Los compiladores de muchos lenguajes se basan en analizadores sintacticos, para analizar el codigo copiado, ',
                ' - estos a su vez se basan en expresiones regulares para saber si se cumplen con las condiciones del lenguaje ',
            ]),
        new Item('estructurasDatos',
            [
                '- Es un concepto general que comparten muchos lenguajes de programación ',
                '- Que a su vez cambia segun el lenguaje, dependiendo de cada implementación ',
                '- Una estructura es una colección de valores organizados, sobre los cuales se pueden administrar y hacer operaciones con ellos ',
                '- Tambien existe una manera estandarizada o implementada por el mismo lenguaje para acceder a los datos ',
                '',
                '- Tipos de estructuras ',
                ' - Contiguamente asignadas -> compuestas por bloques de memorias unicos e incluyen a: ',
                '  - arrays, matrices, heaps, hash tables',
                '',
                ' - Estructuas enlazadas -> son distintos fragmentos de memoria unidos por punteros e incluyen: ',
                '  - listas, arboles y grafos ',
                '',
                ' - Contenedores -> permiten almacenar y recuperar datos en un orden determinado sin importar el contenido y contienen: ',
                '  - pilas y colas ',
                '',
                '- Existen más tipos de estructuras, pero estas son de las más comunes y usadas generalmente ',
            ]),
        new Item('homoiconicidad',
            [
                '- Es una propiedad que comparten algunos lenguajes de programación en los cuales el propio lenguaje, ',
                ' - se puede manipular y comportarse como un dato más ',
                '- La representación primaria de esto tambien es una estructura de datos en un tipo primitivo del lenguaje ',
                '- Algunas ventajas de este comportamiento "extraño" son: ',
                ' - Extender el lenguaje con nuevos conceptos es más sencillo ',
                ' - Los datos pueden ser pasados entre capas, como lo son la capa base y meta del programa ',
                ' - Permite realizar operaciones de manipulacion de codigo en tiempo de compilación en vez de ejecución ',
                ' - Se puede modificar el arbol de sintaxis del lenguaje ',
            ]),
        new Item('maquinaEstados',
            [
                '- Es una modelización conceptual en forma de diagrama de un problema ',
                '- En esta situación siempre se encuentra un inicio, el cual es la espera de un estimulo ',
                '- Esto nos da una base para modelar problemas que pueden ser sustancialmente complejos, además de extensos ',
                '',
                '- Elementos de un diagrama',
                ' - Estados -> posición o acción en la cual se encuentra actualmente y de la cual es posible ',
                '  - saltar a otro estado, o a si mismo, impulsado por una acción con un resultaod en concreto ',
                ' - Entradas -> interacciones o acciones que pueden alterar un estado y hacerlo cambiar a otro ',
                ' - Salidas -> acciones con las cuales el estado responde despues de ser previamente alterado ',
                ' - Eventos -> son las acciones o interacciones que puede tener un estado, internas o externas ',
                ' - Transiciones -> son los caminos, que se pueden tomar entre estados, estos deberian estar acotados ',
                '  - y comprobar que las condiciones se dan para realizar el cambio',
                '',
                '- Este sistema "simple", y en casos trivial, evoluciono para ser parte fundamental de la informatica ',
                '- Acualmente las maquinas de Mealy y de Moore son usadas para crear maquinas de estados finitos "FSM" ',
                '- Para realizar estos esquemas lo primero es definir las entradas, salidas y sus estados ',
                '- Despues se realiza una tabla donde se definen las relaciones entre estos',
                '- Finalmente se grafica teniendo en cuenta las entradas y salidas de cada estado ',
                '',
                '- Si los sistemas se llegan a complicar o extender demasiado, se pueden realizar simplificaciones ',
                ' - mediante algebra de Boole',
            ]),
        new Item('sistemasComplejos',
            [
                '- Caracteristicas',
                '- Comportamiento impredecible -> Son sensibles a las condiciones iniciales ',
                '- Conectividad -> los subsistemas se afectan mutuamente, aun sin conexión directa ',
                '- Auto organización -> tendencia constante de generar patrones de comportamiento ',
                '- Jerarquia -> cualquier cambio de una jerarquia, afectara a esta ',
                '- Historico-dependientes -> el tiempo es un factor muy importante a tener en cuenta ',
                '- Irreductubilidad -> la estructura o no se puede, o es muy dificil de reducir a estados más simples',
                '- Dialogicos -> los opuestos no se excluyen, se complementan ',
                '- Recursivos -> las causas y los resultados se alternan en el tiempo ',
                '- Hologrametricos -> hay identidad estructural entre las partes y su todo ',
                '',
                '- Principios',
                '- Equifinidad -> los estados finales son alcanzables sin importar las condiciones iniciales ',
                '- Heterogeneidad auto organizacional -> la complejidad aumenta en medida que se interactua con la entropia del entorno ',
                '- Complejidad organizada -> los sistemas abiertos conjugan complejidad y orden ',
                '- Abundancia organizacional -> las estructuras complejas, son encontradas con facilidad ',
                '- Teleologico -> finalidades especificas dependen de sistemas especificos ',
                '- Retroalimentación -> se pueden tener feedbacks positivos y negativos ',
                '- Complejidad jerarquica -> a mayor complejidad, mayor jerarquización ',
            ])
    ];

export const METODOLOGIAS =
    [
        new Item('agiles',
            [
                '- Las metodologias agiles buscan hacer que cualquier desarrollo sea de alta calidad, con tiempos y costos reducidos ',
                '- Estas permiten la rapida adaptación a cualquier caracteristica del proyecto',
                '- La participación de los clientes es fundamental en todo el transcurso del desarrollo',
                '- El progreso se mide de una manera más relevante y metodica generando metricas más precisas',
                '- Estas formas de trabajar no son marcos irrompibles pueden ser modificadas y combinadas de acuerdo a las necesidades ',
                '- Algunas de estas son: Extreme Programing, SCRUM, Kanban, Agile Inception, Desing Sprint',
            ]),
        new Item('scrum',
            [
                '- Se basa en entregas pequeñas e incrementales que van sumando al producto final',
                '',
                '- Roles:',
                '  -Product Owner -> que es el encargado de defender los intereses del cliente',
                '  -Scrum Master -> es el encargado de que el equipo de trabajo no tenga incovenientes atascantes ',
                '  -The Team -> son los encargados del desarrollo directamente y de hacer las entregas a tiempo',
                '',
                '- Artefactos: ',
                '  -Product Backlog -> recoge el conjunto de tareas, requerimientos y funcionalidades del proyecto',
                '  -Sprint Backlog -> definición de las tareas a realizar y del tiempo aproximado que deberian conllevar durante el sprint ',
                '  -Incremento -> resultado del sprint listo para añadir al proyecto',
                '',
                '- Eventos: ',
                '  -Planning Meeting -> planeación general donde el Product Owner prioriza las tareas a realizar para el sprint ',
                '  -Daily Scrum -> seguimiento diario del proyecto, analizando posibles problemas encontrados',
                '  -Review -> se inspecciona el incremento realizado',
                '  -Retrospective -> se da a conocer las dificultades del sprint y que cosas se pueden mejorar',
            ]),
        new Item('kanban',
            [
                '- Nacido de metodologias usadas por Toyota donde se identificaban las necesidades de manera precisa',
                '- Esta metodologia tiene ciertos aspectos superiores que SCRUM, pero su implementación depende de las necesidades ',
                '- Se basa en una metodologia de tarjetas visuales para mostrar el completado de las tareas',
                '- Facil de usar y de asumir por parte del equipo, al ser sumamente visual',
                '',
                '- Tiene otras principios que son diferentes de las metodologias agiles',
                '  - Calidad -> Todo debe hacerse bien a la primera, los errores son más costosos cuando se arregla algo ',
                '  - Sin desperdicio -> no hacer más de lo necesario (Principio YAGNI)',
                '  - Mejora continua -> Siempre hay espacio para mejorar',
                '  - Flexible -> las prioridades pueden cambiar',
                '',
                '- Tiene varios pasos o aspectos a implementar',
                '  - Definir un flujo de trabajo accesible por todos, el tablero puede contener varios proyectos simultaneamente ',
                '  - Se deben tener tantas columnas como estados hallan, y las tarjetas se iran desplazando entre estas',
                '  - Visualizar las fases del desarrollo, al igual que SCRUM se basa en un desarrollo incremental',
                '  - La prioridad son las actividades que se estan haciendo en vez de empezar nuevas',
                '  - Las fases deben estar terminadas para poder iniciar la siguiente, además de tener un maximo de tareas',
                '  - Los trabajadores nunca esta inactivos, ya que pueden solapar tareas de diferentes proyectos sin problemas',
            ]),
        new Item('elevator',
            [
                '- Es una sintexis sobre ti y tu proyecto en menos de lo que sube un ascensor (1-5 minutos) ',
                '- Debe ser claro, conciso y atrayente para atraer a potenciales inversores',
                '- Debes tener una preparación previa, conocer todo lo necesario y siempre ser directo',
                '- Mide los tiempos, repasa una y otra vez lo que vayas a decir, sin dejar de lado la naturalidad ',
                '- Tu presentación debe ser sorprendente, mostrar el problema y su solución innovadora',
            ]),
        new Item('canvas',
            [
                '- Sirve para crear y definir modelos de negocios, con la prioridad de crear valor para los clientes ',
                '- Debes de llenar 9 bloques que tu empresa ha de cumplir',
                '  - Segmento de mercado -> ¿ quienes son tus clientes ?, son la base de todo tu negocio',
                '  - Propuesta de valor -> tu diferencia frente a la competencia como ventaja competitiva',
                '  - Canales -> como vas a distribuir tu producto',
                '  - Comunicación -> como te comunicaras con tus clientes',
                '  - Ingresos -> como ganaras dinero y de que fuentes',
                '  - Recursos -> cosas como derechos de autor, personal, fondos, patentes, etc..',
                '  - Actividades clave -> producción, soluciónes, plataformas y todo lo necesarios para tu propuesta ',
                '  - Socios -> quienes te ayudaran a conseguir los recursos necesarios',
                '  - Costos -> definir cuanto gastar y como gastarlo',
            ]),
        new Item('tradicionales',
            [
                '- Recolección de solicitudes -> Estudiar el sistema actual',
                '- Estudio de viabilidad -> se investiga desdes diferentes perspectivas, economicas, tecnologias, practicidad ',
                '- Analisis del sistema -> se intentan crear un plan a seguir',
                '- Diseño -> en base a todos los datos recogidos, analisis, entrevistas, etc..',
                '- Codificación -> se plasman todos los diseños en codigo funcional',
                '- Pruebas -> Toda función importante debe ser evaluada para garantizar su fiabilidad',
                '- Mantenimiento -> Despues de ser probado e implementado el software puede ser actualizado o corregido en el tiempo ',
            ]),
        new Item('cascada',
            [
                '- Es un metodo secuencial donde cada etapa se desarrolla una sola vez',
                '- Las fases del desarrollo no estan bien definidas y se pueden solapar entre si',
                '- Errores en etapas previas pueden ser fatales si no se corrigen con premura',
                '- Bastante inflexible en cuestion de cambios sin previo aviso',
                '- Los usuarios solo son consultados en etapas finales e iniciales, poca comunicación en etapas intermedias ',
            ]),
        new Item('espiral',
            [
                '- Es la evolución del modelo en cascada',
                '- Se basa en la repetición de las mismas tareas, haciendo controles con más periocidad ',
                '- Se reduce el riesgo del fracaso al dividir el proceso en partes más pequeñas ',
                '- Cada ciclo se planifica justo depues de terminar el objetivo del presente ',
                '- Los errores pueden evolucionar con cada ciclo, no necesarimente resolverse ',
            ]),
        new Item('iterativo',
            [
                '- Cada entrega es un proyecto más completo',
                '- En cada oportunidad se pueden añadir nuevas funciones o actualizar las existentes ',
                '- Resiliencia frente a cambios inesperados, mayor comunicación con el cliente',
                '- Permite desconocer detalles iniciales que se iran solucionando con las iteracciones ',
                '- Es funcional desde el primer ciclo, permite mejorar las estimaciones del proyecto ',
            ]),
        new Item('extrema',
            [
                '- Muy utilizada en la gestión de proyectos ',
                '- Se centra en potenciar las relaciones intepersonales de los equipos ',
                '- Mejorando el ambiente laboral y manteniendo un aprendizaje continuo ',
                '- La retroalimentación es un aspecto fundamental para la mejora continua ',
                '- Debe ser planificada, pero flexible al cambio ',
                '- Los Sprints son cambiados por iteracciones ',
                '- Maneja los siguentes roles: ',
                ' - Equipo, Tester, Tracker, Coach, Big Boss ',
            ]),
        new Item('v',
            [
                '- Desciende del modelo en cascada e igual que este consta de las siguentes fases: ',
                '- Es un modelo facil de seguir y el emparejamiento entre las etapas logra una mejor localizazion de fallos ',
                '- El producto final solo es obtenido al final de todas las fases por lo que es demorado y puede ser diferente de lo que se pidio ',
                '   &darr; Definición de requerimientos       &lt;--       validan      &lt;--        Pruebas de aceptación   &uarr; ',
                '   &darr;  Diseño funcional del sistema      &lt;--       validan      &lt;--      Pruebas de sistema        &uarr; ',
                '   &darr;   Diseño tecnico del sistema       &lt;--       validan      &lt;--    pruebas de componentes      &uarr; ',
                '   &darr;    Especificación de componentes   &lt;--       validan      &lt;--  Pruebas unitarias             &uarr; ',
                '   &darr;                                           Codificación                                       &uarr; ',
            ]),
        new Item('rup',
            [
                '- Diseñado y documentado para usar UML ',
                '- Es considerado bastante pesado, pero muy versatil y adaptable ',
                '',
                '            Requerimiento                ',
                '                  &rarr;                   ',
                '  Evaluación &uarr;        &darr; Implementación ',
                '                  &larr;                   ',
                '               Prueba                    ',
                '',
                '- Directrices ',
                '  - Requisitos de gestión:',
                '    - documentar las funcionalidades del sistema, sus limitaciones, requisitos del negocio, etc.. ',
                ' - Arquitectura basada en componentes:',
                '   - crea un sistema facilmente extensible, haciendo referencia al uso de POO a la hora programar ',
                ' - Uso de elementos visuales:',
                '   - es una forma de comprender mejor el sistema de manera general, normalmente mediante diagramas UML ',
                ' - Comprobar la calidad:',
                '   - la calidad debe estar siempre presente en todas las fases del proceso ',
                '',
                '- Fases ',
                '  - Diseño:',
                '    - fase inicial de la cual se generan los elementos necesarios para fases proximas',
                '  - Elaboración:',
                '    - descripción del producto y de los costos/beneficios de las fases proximas ',
                '  - Construcción:',
                '    - Desarrollo del software como tal, e incluyen las pruebas del mismo ',
                '  - Transición:',
                '    - Se lleva a cabo el plan de despliegue y seguimiento del software ',
            ]),
        new Item('kaizen',
            [
                '- Terminos japoneses que significan respectivamente acción de cambio y mejora continua ',
                '- Consiste en eliminar las ineficiencias de tu sistema productivo, todos los dias se debe mejorar algo ',
                '1 -> planificar: debes ser consciente de tu situación, analizar los problemas y definir un plan de acción con lo que te gustaria mejorar ',
                '2 -> hacer: desarrollar el plan para cada uno de los aspectos que has identificado ',
                '3 -> comprobar: debes analizar que tu plan si este dando resultados, de lo contrario deberas volver a empezar ',
                '2 -> actuar: si has logrado cumplir los objetivos marcados, entonces es hora de estandarizar y continuar con las mejoras ',
            ])
    ];

export const PARADIGMAS =
    [
        new Item('imperativo',
            [
                '- Imperativo -> secuencia ordenada de acciones a ejecutar, más cercano a lenguaje maquina ',
                '  - Estructurado -> donde se incluyen sentencias de control y se contemplan las interrupciones',
                '  - Procedimental -> donde se empieza a crear funciones y metodos para no repetir código',
                '  - Modular -> Se agrupan segmentos más grandes de código independientes entre si, facilitando la depuración',
                '- Declarativo -> Se describe el resultado de la operación y no el como, requiriendo más abstracción y menos código ',
                '  - Funcional -> la base son las funciones que se pueden concatenar para formar estructuras o usarse como argumentos ',
                '  - Logica -> la base es la matematica y su logica para predecir el resultado',
            ]),
        new Item('funcional',
            [
                '- Las acciones son delegadas a funciones propias del lenguaje',
                '  - Funciones Puras -> dada una entrada siempre van a tener la misma salida',
                '  - Composición -> se pueden juntar y crear una secuencia y resultado diferente ',
                '  - Efectos secundarios -> Son los cambios visibles fuera de la función llamada ',
                '  - Se le da más relevancia al concepto de inmutabilidad y mutabilidad',
                '  - Los efectos secundarios se evitan en este tipo de programación',
            ]),
        new Item('scripting',
            [
                '- Son lenguajes que no son compilados y que se ejecutan directamente en el lado del cliente ',
                '- El más famoso es Javascript, pero otros como Python y Ruby tambien lo son',
                '- Suelen ser menos eficientes al no ser compilados pero conllevan menos trabajo para el programador ',
                '- Generalmente son debilmente tipados, lo que da más flexibilidad y posiblidad de errores',
            ]),
        new Item('reactiva',
            [
                '- Es un paradigma enfocado al trabajo con flujo de datos, generalmente debe ser: ',
                '  - Resilientes -> deben responder incluso cuando hay estados de error',
                '  - Elasticos -> el aumento de la concurrencia no debe afectar las respuestas',
                '  - Comunicación -> minimo acoplamiento al hacer que todo se comunique mediante mensajeria ',
                '  - Operadores -> tener soporte hacia estos que permiten transformar el flujo de datos ',
            ]),
        new Item('marcado',
            [
                '- Son lenguajes relacionados con la presentación de contenido como HTML y XML',
                '- El primero se usa para estructurar contenido web y el segundo para estructurar datos ',
            ]),
        new Item('aspectos',
            [
                '- Es un paradigma de programación que tiene como objetivo aumentar la modularidad del codigo ',
                '- Permite la separación de responsabilidades sin cambiar el comportamiento actual de la aplicación ',
                '- Esto permite añadir un comportamiento paralelo, sin afectar el comportamiento principal ',
                '- Un aspecto es aquel que puede ser transversal a multiples capas de la aplicación ',
                '',
                '- Estos se pueden encadenar y unir mediante "Joinpoint", que son similares a las excepciones,  ',
                ' - estos se ejecutaran si las condiciones interceptadas se dan ',
                '- Si la interceptaciones cumplen las condiciones dadas, podran llamar a un "Pointcut" que sera el llamado a un ',
                ' - "Joinpoint" que a su vez ejecutara el "Advice" inidicado "',
                '- Un "Advice" es una accion especifica asociada a un "Joinpoint" ',
            ]),
        new Item('logica',
            [
                '- Al ser parte del paradigma declarativo, esta programación se concentra en el resultado, más que en el proceso ',
                '- Esto se base mediante el uso extensivo de la logica matematica: ',
                ' - De orden cero -> Logica proposicional ',
                ' - De primer orden -> Logica predictiva ',
                ' - De segundo orden -> donde se agregan variables y relaciones ',
                ' - Cada orden se base en el anterior para crear nuevos conceptos y formas de evaluación ',
                '',
                '- Algunos sistemas en los que se puede aplicar: ',
                ' - Inteligencia artificial ',
                ' - Sistemas expertos (toma de decisiones)',
                ' - Reconocimiento y procesamiento de lenguaje natural ',
                ' - Motores de bases de datos relacionales ',
                ' - Simulación '
            ])
    ];

export const NUBE =
    [
        new Item('nube',
            [
                ' -Nube Publica -> Los recursos son del proveedor y estos es compartido con otros usuarios',
                ' -Nube Privada -> Los recursos son propios y no deben ser compartidos con terceros',
                ' -Nube Hibrida -> Los recursos son propios pero el espacio puede ser compartido con otros usuarios ',
            ]),
        new Item('iaas-paas-saas',
            [
                '- Estos 3 modelos de servicios actualmente ayudan a las empresas a ahorrar costos, ',
                ' - tanto en software como en hardware, además de multiples ventajas ',
                '',
                '- IaaS -> infraestructura como servicio, aca todo la infraestructura necesaria se contrata con un tercero, ',
                ' - a cambio de una cuota o un alquiler, esto es muy conveniente ya que se compra lo que se necesita; ',
                '  - algunos de los más conocidos son Amazon Web Services Y Microsoft Azure ',
                '- PasS -> plataforma como servicio, en este caso solo se provee la infraestructura, ',
                ' - y el cliente solo se preocupa de su aplicación, delegando la administración a un tercero ',
                '  - algunos de los más conocidos son Google App Engine Y Bungee Connect ',
                '- SaaS -> software como infraestructura, aca se aloja el software y la infraestructura ',
                ' - y el usuario solo se preocupa por usarlo de acuerdo a sus necesidades ',
                '  - algunos de los más conocidos son Microsoft Office 365 y WordPress ',
            ]),
        new Item('api',
            [
                '- Conjunto de reglas y especificaciones por el cual se puede comunicar diferentes aplicaciones ',
                '- Permiten compartir reutilizar funciones ya existentes y no reiventar la rueda',
                '- Suelen ser la entrada principal a los sistemas distribuidos ',
            ]),
        new Item('rest',
            [
                '                 SOAP                            VS                  REST',
                '          Solo permite datos en XML                             Variedad de formatos',
                '      Puede incluir metadatos, más pesado              Generalmente se usa JSON, más liviano ',
                '      NO se puede guardar contenido en la cache       SI puede guardar contenido en la cache ',
            ]),
        new Item('restfull',
            [
                '- Rest Es un estilo de arquitectura para sistemas distribuidos, que usa el protocolo HTTP ',
                '',
                '- Caracteristicas',
                ' - Arquitectura cliente-servidor -> comunicación continua entre estos 2 agentes ',
                ' - Stateless -> No se deberia almacenar los datos del cliente para mantener el estado de este ',
                ' - Cacheable -> Algunas peticiones pueden ser cacheables para aumentar el rendimiento y la escabilidad ',
                ' - Interfaz uniforme -> independencia del servidor, ya que siempre se garantizara la misma respuesta ',
                ' - Mensajes -> todos los mensajes deben ser coherentes con la función que representan, halla un error ó no ',
                ' - HATEOAS -> es incluir todo lo necesario en la respuesta para que el usuario pueda seguir haciendo peticiones ',
                '',
                '- Web Restfull',
                ' - Uri del recurso -> cada metodo deberia contar con una url unica para identificar la función ',
                ' - Representación de recurso -> se puede añadir a la cabecera de la petición, definiendo el formato que se procesara ',
                ' - Operaciones -> Usar los metodos HTTP de manera idonea (GET, POST, PUT DELETE) ',
                ' - Hipervinculos -> Se pueden incluir vinculos para más acciones con el objeto, dentro de la respuesta ',
            ]),
        new Item('httpCodes',
            [
                '- Respuestas informativas -> 1xx ',
                ' - Son poco usadas y se enfocan más a aspectos de la red y la comunicación ',
                '',
                '- Respuestas satisfactorias -> 2xx ',
                ' - Se usan para denotar el exito de una operación ',
                ' - 200 OK -> respuesta estandar para peticiones correctas ',
                ' - 201 Created -> solicitud aceptada y se ha creado un nuevo recurso ',
                '',
                '- Redirecciones -> 3xx ',
                ' - Son cuando es necesario tomar acciones extras para efectuar la acción ',
                ' - 300 Multiple Choices -> multiples opciones con varias respuestas ',
                ' - 301 Moved Permanently -> la URI solicitada ha sido movida a otra URI ',
                ' - 304 Not Modified -> para propositos de cache, indicando que no ha sido modificado ',
                '',
                '- Errores del cliente -> 4xx ',
                ' - La solicitud es incorrecta ya sea por sintaxis o información errada ',
                ' - 400 Bad request -> la solicitud no puede ser interpretada por una sintaxis invalida ',
                ' - 401 Unauthorized -> la autenticacion del usuario es posible pero incorrecta ',
                ' - 403 Forbidden -> no se cuenta con los permisos necesarios para el contenido ',
                ' - 404 Not Found -> el contenido solicitado no pudo ser encontrado ',
                '',
                '- Errores del servidor -> 5xx ',
                ' - La solicitud es valida pero no pudo ser ejecutada debido a errores del servidor ',
                ' - 500 Internal Server Error -> el servidor ha tenido un error que no sabe manejar ',
                ' - 501 Not Implemented -> el metodo solicitado no es soportado por el servidor ',
                ' - 502 Bad Gateway -> al obtener una puerta de enlace se obtiene una respuesta invalida ',
                ' - 503 Service unavailable -> servicio no disponible ',
            ]),
        new Item('caracteristicas',
            [
                '- Buenas practicas para crear APIs 100% restfull',
                '',
                ' - Versionamiento -> las apis tambien cambian y esto no debe evitar que las versiones anteriores dejen de funcionar ',
                '',
                ' - Autenticación -> esto garantiza un minimo de seguridad e integración en las operaciones a realizar ',
                '   - Para esto se puede usar OAuth2 o JWT',
                '',
                ' - Paginación -> mostrar todos los resultados es inviable en varios terminos, por lo tanto deberia haber',
                '   - una forma de mostrar por partes la información ',
                '',
                ' - Documentación -> cuando algo cambia la documentación tambien debe hacerlo de inmediato',
                '   -  de lo contrario puede haber problemas de inconsistencias con los parametros ',
                '',
                ' - Respuestas -> los codigos deben reflejar lo que haya sucedido, es una mala practica siempre devolver OK(200) ',
                '   - aunque hayan sucedido errores, esto da lugar a mensajes contradictorios ',
            ]),
        new Item('madurezDeUnaApi',
            [
                '- Entre más niveles se implementen, más util y completa se puede considerar una API',
                '',
                ' - Nivel 0 -> se puede considerar simplemente como una conexión http con una sola URI y un solo metodo ',
                ' - Nivel 1 -> usa varias URIs y un solo metodo http por cada una, esto ayuda a la separación de recursos ',
                ' - Nivel 2 -> ademas de usar varias URIs, tambien se usan más metodos y tipos para cada URI, a su vez este expone más recursos ',
                ' - Nivel 3 -> este hace uso de todo lo anterior además de incluir HATEOAS, esto facilita su navegación al punto de ser más intuitivo ',
            ]),
        new Item('factores12',
            [
                '- Codigo base -> todo el codigo debe ser controlado mediante un sistema de versiones, ',
                ' - y este no deber ser compartido entre proyectos, de ser el caso esta seria una libreria en comun ',
                '',
                '- Dependencias -> todas las dependencias a usar siempre deben estar declaradas y aisladas del entorno de ejecución ',
                ' - la aplicación no puede depender de que estas esten instaladas en el host, ya el modo de su gestión es de libre albedrio ',
                '',
                '- Configuraciones -> si existen diferentes despliegues y entornos de ejecución, estos deben tener sus propias configuraciones ',
                ' - esto se puede lograr mediantes variables de entorno y el manejo de distintos archivos de configuración ',
                '',
                '- Backing services -> todo sistema que consuma la aplicación (bases de datos, mensajeria, colas, cache, etc.. ), ',
                ' - deberia poder conectarse y cambiarse por medio de simples configuraciones, sin modificar el codigo base ',
                '',
                '- Separacion de etapas -> cada etapa deberia ser manejada de manera diferente, ya que en esencia lo son ',
                ' - Construccion -> convierte el codigo base en un ejecutable listo para funcionar ',
                ' - Distribución -> se toma la construcción previa y se crea una o n instancias de acuerdo a una configuración ',
                ' - Ejecución    -> es la aplicación ya funcional en el entorno previamente preparado ',
                '',
                '- Procesos -> para que la aplicación se ejecute de manera adecuada, esta no deberia contemplar guardar estados ',
                ' - esto significa que todos los procesos deben ser individuales e independientes entre si ',
                '',
                '- Puertos -> Estas aplicaciones son autocontenidas y se comunican mediante puertos HTTP ',
                '',
                '- Concurrencia -> toda aplicación deberia ser su propia encargada de autogestionarse su crecimiento, ',
                ' - de acuerdo a la demanda y a la disponibilidad de recursos, ya sean hilos, procesos, uso de memoria, asincronia, etc.. ',
                '',
                '- Desechabilidad -> todos los procesos de las aplicaciones deberian ser desechable, y tener un tiempo de arranque minimo, ',
                ' - esto con el proposito de iniciar cuando sean requeridos, realizar su función, y devolver los recursos consumidos al finalizar ',
                '',
                '- Igualdad de ambientes -> desarrollo y producción deben ser lo más parecidos posibles ',
                ' - tener diferencias entre estos ambientes puede traer errores inesperados, al intercambiar entre tecnologias o herramientas ',
                '',
                '- Historiales -> además de ser utiles a la hora de depurar, estos permiten tener mediciones y metricas de la aplicación ',
                ' - se pueden observar en tiempo real, o guardarse en ficheros que seran consultados despues ',
                '',
                '- Administración de procesos -> estas tareas deberian tener los mismos comandos y secuencias de realización, ',
                ' - independientemente del ambiente o sus configuraciones',
            ]),
        new Item('migracionesNube',
            [
                '- Toda migración hacia la nube, generalmente recoge 6 alternativas ',
                ' - Realojar -> consiste en mover la aplicacion tal y como existia originalmente, una medida apresurada que no siempre funciona ',
                ' - Replataformar -> consiste en modificar la estructura subyacente, sin modificar la arquitectura central de aplicación ',
                ' - Readquirir -> consta de una migración de una nube o servicio a otro, de acuerdo a las necesidades del negocio ',
                ' - Refactorizar/Rediseñar -> no solo es un movimiento de ambiente, tambien son mejoras de escalabilidad ó rendimiento ',
                ' - Retirar -> a veces hay recursos que estan obsoletos o ya no se necesitan, por lo que se eliminan ó se desactivan ',
                ' - Retener -> son ocasiones donde es necesario soportar tecnologias legacy que no son compatibles con la nube',
            ]),
        new Item('capTeorema',
            [
                '- Este teorema sostiene que no es posible que un sistema distribuido cumpla o garantice más de 2/3 de las siguientes propiedades ',
                '',
                '- Consistency  (Coherencia) -> todos los clientes ven los mismos datos de manera simultanea ',
                '- Availability (disponibilidad) -> todos los clientes disponen de acceso de lectura y escritura en cualquier momento ',
                '- Partitions (tolerancia a la particion) -> el sistema sigue funcionando como un todo, despues de que las partes fallan o dejan de comunicarse ',
                '',
                '- Sistema CP -> coherencia y tolerancia a la particion (sistemas de DNS)',
                '- Sistena AP -> disponibilidad y tolerancia a la partición (BD relacionales) ',
                '- Sistema CA -> coherencia y disponibilidad (aplicaciones financieras)',
            ]),
        new Item('dns',
            [
                '- Es la manera como accedemos a una pagina web por medio de nombres(dominios) y no de direcciones IP ',
                '- Este proceso de traducción de direcciones es realizado por estos servidores que estan esparcidos por el mundo ',
                '- Al estar esparcidos por el mundo esto permite una administración descentralizada, pero sigue estando interconectada ',
                '- Aunque este metodo es normal hoy en dia, tambien se puede acceder a los sitios directamente por medio de una IP ',
                ' - y con esta obtener el dominio del sitio ',
                '- Si un servidor no encuentra la información solicitada, este la restransmite a otros en la red hasta dar con un resultado ',
            ]),
        new Item('linting',
            [
                '- Son una ayuda para encontrar errores y falencias en nuestro codigo mientras desarrollamos ',
                '- Estos errores pueden ser: ',
                ' - Errores de sintaxis            - Codigo innecesariamente complejo ',
                ' - Uso de malas practicas         - Estilos de codificación inconsistentes ',
                '',
                '- Estas herramientas no solo nos muestran los posibles errores, tambien pueden dar sugerencias de posibles soluciones ',
                '- Tambien permiten la configuración de nuevas reglas para cuando se trabaja en equipo y mantener la consistencia ',
            ]),
    ];

export const OTROS =
    [
        new Item('scraping',
            [
                '- Es una forma de buscar contenido de las paginas en internet ',
                '- Algunos buscadores como Google hacen esto para indexar contenido ',
                '- Son tipos especiales de Bots que buscan terminos especificos de busqueda ',
                '- Se puede dar manera de automatica (software de  analisis sintactico) y manual (copiar y pegar) ',
                '- Esto puede conllevar a una ventaja sobre tu competencia al comparar su contenido con el tuyo ',
                '- Puede violar las leyes de derechos de autor, por lo que puede llegar a ser ilegal ',
                '- Tambien se puede bloquear por medio de software ó dificultarles la extracción de los datos (imagenes) ',
            ]),
        new Item('cdci',
            [
                '- Integración continua Y Entrega continua nacen para entregar un mejor codigo, de una manera más rapida y con menos errores ',
                '- Los errores se pueden encontrar de manera previa a estar en producción ',
                '- Integración continua permite una mejora de la afluencia a la rama principal del codigo, evitando problemas con ramas aisladas ',
                '- Entrega continua permite que los cambios aprobados sean implementados con el menor numero de complicaciones posibles ',
                '- Para que todo esto sea posible todas las pruebas deben estar automatizadas ',
                '- Las pruebas deben tener la mayor cobertura posible, o en su defecto un minimo ',
                '- El uso de buenas pracaticas es fundamental, ya que esto evitara posibles errores ',
            ]),
        new Item('devops',
            [
                '- Es una metodologia para crear software de una manera más eficiente, con mayor calidad y menos problemas en producción ',
                '- Este modelo no consiste en aumentar las responsabilidades del desarrollador, todo lo contrario ',
                '- Ya que la meta es que cada despliegue sea automatico, reduciendo el tiempo de corrección de errores, aumentando la productividad ',
                '- La automatización de las tareas y las pruebas permite que el codigo en desarrollo fluya rapidamente a producción ',
            ]),
        new Item('mvp',
            [
                '- Es el conjunto minimo de funcionalidades precisas para que un software pueda atraer clientes potenciales ',
                '- Esto ayuda a crear productos apegados a la realidad ',
                '- Da retroalimentación a tiempo y util para el negocio ',
                '- Todo mvp es una apuesta orientada a conseguir un maximo de aprendizaje con la menor inversion posible ',
                '- A veces puede ser reutilizable o desechable, eso depende de su exito inicial ',
            ]),
        new Item('turingComplete',
            [
                '- Es un concepto usado para denotar aquellos lenguajes que teniendo recursos infinitos (teoricamente), ',
                ' - son capaces de realizar cualquier tipo de calculo, independientemente de los recursos usados ',
                '- Tambien son capaces de usar y reutilizar estructuras complejas ',
                '- Que un lenguaje o herramienta sea turing complete no garantiza su eficiencia ',
            ]),
        new Item('ingenieriaInversa',
            [
                '- Un concepto sencillo pero muy potente, basicamente consta de desmontar y volver a montar algo, ',
                ' - para ver como funciona ',
                '- Esto se da con la intención de mejorar o duplicar ese algo mediante una simple observación ',
                '- Su nacimiento se da durante la segunda guerra mundial, pero hoy en dia es aplicable hasta para el software ',
                '- Uno de los primeros casos de esta practica fue el nacimiento del Tu-4 (sovietico) copia del B-29 (Estadounidense) ',
            ]),
        new Item('dsl',
            [
                '- Un DSL es un lenguaje de programación con un nivel superior de abstracción ',
                '- Estos lenguajes son menos complejos que los lenguajes de alto nivel y proposito general, como Java, C, etc.. ',
                '- Tambien son diseñados por expertos en el campo que se van a usar, para ser usados ',
                ' - por las personas versadas en el tema, pero sin experiencia en la programación ',
                '- Esto desemboca en un paradigma donde se especifica lo que se requiere, ',
                ' - y se usa el lenguaje más adecuado para lograr el objetivo ',
                '- Este concepto desemboca en la programación poliglota o programación orientada al lenguaje ',
                '- Otro concepto importante es que los DSL pueden nacer y extenderse, con ó sin bases previas ',
            ])
    ];

export const PATRONES =
    [
        new Item('definicionPatrones',
            [
                '- Son soluciones especificas a problemas comunes y los más conocidos son: ',
                '   GOF -> que se dividen en 3, creacionales, estructurales y de comportamiento ',
                '   GRASP -> Representan los principios básicos de la asignación de responsabilidades a objetos, en forma de patrones ',
            ]),
        new Item('gof',
            [
                '- Creacionales -> Se usan para la creación de objetos ya se ocultando o simplificando la creación de estos ',
                '- Estructurales -> Separan la interfaz de su implementación por medio de la abstracción ',
                '- Comportamiento -> Definen la comunicación entre objetos, y la independencia de esta de los objetos ',
            ]),
        new Item('desglosegof',
            [
                '- Creacionales ',
                '  -Singleton -> Restringe la instancia de la clase a un solo Objeto ',
                '  -MVC -> plantea la separación en 3 capas, cada una con una función especifica ',
                '  -Abstract factory -> Permite crear familias de objetos relacionados sin especificarlas directamente ',
                '  -Builder -> Permite crear objetos bajo demanda, y solo con las propiedades especificadas ',
                '',
                '- Estructurales ',
                '  -Adapter -> Permite la comunicación entre objetos de tipos diferentes, independientemente del tipo de cada objeto ',
                '  -Decorator -> Añade funcionalidades extra añadiendo clases que ya las tienen, sin afectar al codigo existente ',
                '  -Facade -> Permite acceder facilmente a muchas funciones, muy usado en librerias y frameworks ',
                '  -Bridge -> Permite dividir clases muy relacionadas en otras más pequeñas e independientes ',
                '',
                '- Comportamiento ',
                '  -Iterator -> Permite recorrer los elementos de una colección ',
                '  -Mediador -> La comunicación entre objetos se da solo mediante un elemento central ',
                '  -Observer -> Permite generar subscripciones y que todos los oyentes se enteren de los cambios ',
                '  -Estrategia -> Permite que una clase escoja la mejor implementación de acuerdo al caso',
            ]),
        new Item('grasp',
            [
                '- Intentan hacer que la Asignación de responsabilidades sea lo más optima posible',
                '- Alta cohesion mediante la refactorización, y bajo acoplamiento al no abusar de la herencia ',
                '- Cada componente tiene una función especifica en la que es experto',
                '- Conocer las peculiaridades de cada lenguaje como ciclos de vida e integración con el SO ',
                '- Darle prioridad al polimorfismo más que a las sentencias de control al usarse en los objetos ',
                '- Evitar el uso de variables globales, especialmente en el desarrollo web ',
                '- La creación de factorias y clases intermedias ayudan a la mantenibilidad del código',
            ]),
        new Item('desglosegrasp',
            [
                '- Indirección -> Mejorar el acoplamiento entre 2 clases, asignando a una clase como mediadora entre ellas ',
                ' - ideal para clases con alta volutibilidad y uso de librerias de externas ',
                '',
                '- Invención pura -> son clases que no representan un objeto del dominio, sino que se creo para reducir el acoplamiento, ',
                ' - aumentar la cohesion y mejorar la reutilización ',
                '',
                '- Creación -> determina quien es el responsable de crear nuevas instancias de acuerdo a ciertos criterios, ',
                ' - mal usado puede degenerar en el smells code de cirugia a escopetazos ',
                '',
                '- Experto en Información -> la responsabilidad de crear o usar un objeto solo recae en aquel que conoce todo lo necesario para crearlo, ',
                ' - reduciendo el acoplamiento, y con mayor cohesión y encapsulamiento ',
                '',
                '- Controlador -> sirve como intermediario entre una determinada interfaz y el algoritmo que la implementa, es aquel que contiene la logica necesaria ',
                ' - para redireccionar a los componentes indicados segun los datos ingresados ',
            ]),
        new Item('dao',
            [
                '- Son usados para el acceso a los datos (persistencia)',
                '  - DAO -> obliga a una mayor implementación manual a cambio de flexibilidad ',
                '  - Active Record -> se gana una mayor independencia de la bd a costa de ceder el control ',
            ]),
        new Item('antipatrones',
            [
                '- Son malas soluciones a problemas comunes que a priori parecen buena idea',
                '- Pueden nacer del afan de implementar patrones innecesariamente o mezclarlos de manera icorrecta ',
                '',
                ' - Golden Hammer -> Pretende que todo se solucione de la misma manera o con el mismo lenguaje',
                ' - Lava Flow -> Es la codificación de manera continua, sin un orden alguno, y lleno de redundancias',
                ' - Spaghetti Code -> Aparece cuando se suelen mezclar muchos lenguajes, aumentando la complejidad de la solución ',
                ' - God Class -> Sucede cuando todo se soluciona en un solo archivo metodo o clase',
                ' - Poltergeist -> Es la existencia de elementos injustificadamente',
                '',
                '- Tambien se pueden aplicar para temas de arquitectura',
                ' - Reinventar la rueda -> Es la implementación de soluciones que ya existen de antemano',
                ' - Casarse con el diablo -> Es la dependencia total de algun elemento sin contingencia alguna ',
            ]),
        new Item('dobleDespacho',
            [
                '- Es un patron de diseño que resuelve 2 problemas: ',
                ' - cuando el comportamiento depende del objeto que se reciba ',
                ' - y tambien dependa de los parametros recibidos ',
                '- Esto se puede hacer mediante varias maneras, herencia, polimorfismo, reflexion, etc... ',
            ]),
        new Item('patronSaga',
            [
                '- Es un patron que ayuda a garantizar la integridad de las transacciones ',
                '- Especialmente util para aplicaciones distribuidas y microservicios ',
                '',
                ' - Mediante coreografia -> es una sucesión de eventos donde cada uno llama al siguiente ',
                '  - despues de terminar su tarea, en este caso cada servicio debe saber como responder ante cada caso posible ',
                ' - Facil de implementar y con poco acoplamiento, pero se puede complicar entre más operaciones hallan ',
                '',
                ' - Mediante orquestación -> de esta manera un solo proceso o servicio es el encargado de coordinar, ',
                '  - todas las llamadas de los procesos y de realizar el rollback completo si alguna de las operaciones falla ',
                ' - Más facil de mantener a cambio de convertirse en un posible cuello de botella ',
            ]),
        new Item('patroncqrs',
            [
                '- El acronimo significa: Segregación de Responsabilidad de Consultas de Comandos ',
                '- Las operaciones de lectura y escritura utilizan diferentes modelos de datos ',
                '- Esto permite facilitar leer y escribir operaciones, agregando tanto seguridad como complejidad ',
                '- Los datos no solo se manejan de maneras diferentes, tambien pueden ser almacenados de distintas formas ',
                '- Especialmente util cuando las operaciones de lectura y de creacion/modificación difieren sustancialmente ',
            ]),
        new Item('patronUndoRedo',
            [
                '- Es un patron de comportamiento bastente usado en la actualidad ',
                '- Este patron dicta que cualquier cambio que se realize puede ser devuelto a un estado previo ',
                ' - Ademas de que se debe ser capaz de volver a un estado futuro desde uno pasado ',
                '- Manejar estados y tener memmoria de estos puede implicar mayor complejidad para las aplicaciones ',
                '- Los estados no deben ser modificables y sus cambios no deben tener efectos colaterales ',
                '',
                '- Este patron puede tener 2 enfoques: ',
                '- Todo o nada -> no hay puntos intermedios de que guardar y que no, toda acción realizada deber ser recordada ',
                '- Calculados -> los estados anteriores y proximos, se pueden calcular en base al actual ',
                '- Ambos enfoques pueden presentar problemas de complejidad y rendimiento respectivamente ',
            ]),
        new Item('tiposDePatrones',
            [
                '- Existen diferentes clasificaciones para los patrones de acuerdo a su nivel de abstracción ',
                '- Hay 3 niveles de abstracción de acuerdo a la clasificación más popular de Frank Buschmann: ',
                '',
                '- Patrones Arquitectonicos -> Se centran en la estructura del sistema, definición de subsistemas, ',
                ' - manejo de responsabilidades, lineas guia para organizar las relaciones ',
                '',
                ' - Patrones de Diseño -> esquemas para refinar subsistemas, componentes o las relaciones de estos, ',
                ' - estos describen una estructura recurrente y comun que resuelve un problema de diseño, ',
                ' - en un contexto especifico, algunos de estos pueden ser los patrones GRASP o lo GOF ',
                '',
                ' - Patrones de codificación(idioms) -> ayudan a implementar aspectos particulares del diseño, ',
                '  - en un lenguaje especifico'
            ])
    ];

export const PERSONAS =
    [
        new Item('personasYprocesos',
            [
                '- Las personas, los procesos y las tecnologias son el sostenimiento de toda empresa ',
                '- El personal, siempre sera necesario para pensar, planear y ejecutar ',
                '- La tecnologia, que ayuda a las personas a llevar estos procesos ',
                '- Y finalmente los procesos, que ofrecen un valor agregado al cliente ',
                '- Llegar a un equilibrio de estos elementos es un equilibrio dificl de lograr ',
                '- Cualquier cambio de estas partes traera efectos secundarios sobre las demas ',
                '',
                '- Algunos de los objetivos de tener este equilibrio son: ',
                ' - Transformar los datos en conocimiento e información ',
                ' - Permitir que el conocimiento se accesible para todos y generable por todos ',
                ' - Mejora continua de los procesos y aumentar la productividad ',
            ]),
        new Item('gestionDeServicios',
            [
                '- Es una metodologia que pone su foco en el cliente y como mejorar su atención ',
                '- Toda organización debe contar con personal competente en cuanto al uso de las tecnologias que se usen ',
                '- Los proveedores y los socios son partes importantes de toda empresa, no se pueden ignorar ',
                '- La creación de valor es importante para todo producto y servicio que se ofrezcan ',
                '',
                '- Estos son 7 principios para una correcta gestión ',
                ' - Se debe crear el mayor valor para los clientes a la vez que se perjudican lo menos posible ',
                ' - Siempre sera mejor revisar los procesos existentes y mejorarlos que empezar desde cero ',
                ' - Es mejor avanzar seguro y constante con un enfoque concreto ',
                ' - El trabajo en equipo es importante, todos deben ser visibles y colaborarse entre si ',
                ' - Tener una consciencia holistica, ya que todas las areas se afectan entre si de alguna manera ',
                ' - Entre más simple sea un proceso mejor ',
                ' - La automatización y la optimización siempre deben ser aspectos a alcanzar ',
            ]),
        new Item('gestionDeActivos',
            [
                '- Los elementos fisicos y no fisicos de las empresas tambien deben ser considerados como partes del negocio ',
                '- Esto se puede aplicar a todo software que la empresa use o desarrolle y los elementos necesarios para su funcionamiento ',
                '- Tener un inventario actualizado garantiza que siempre se maneje lo necesario ',
                '- En un contexto informatico esto se puede aplicar de varias formas, principalmente al manejo de archivos electronicos ',
                ' - además de las licencias que se usan y que se generan desde la misma empresa ',
                '',
                '- Algunos ejemplos de activos: ',
                ' - Hardware -> dispositivos de redes, centros de datos, servidores',
                ' - Infraestructura proporcionada por terceros, y dispositivos propios de la empresa usados por los usuarios finales ',
                ' - Datos digitales derivados de las operaciones internas ',
                '',
                '- Estos suelen tener un ciclo de vida ciclico, el cual es el siguiente: ',
                '  -> Planear ->         -> Adquirir ->    -> Asignación ->       -> Mantenimiento ->    -> Retiro ->          ',
                '  Como obtenerlos       Construcción,     Introducción al        prolongar la vida      Al final del          ',
                '  y como se usaran      compra,           ambiente productivo    util o mitigar los     este debe ser         ',
                '  además de analizar    arrendamiento     y definiciones de      riesgos de posibles    retirado y desechado  ',
                '  costos/beneficios     o licencias       procesos y usos        fallos                 o solo cancelado      ',
                '',
                '- Beneficios de esta gestión ',
                ' - Mejores decisiones en base a información actual y verificable ',
                ' - Continuidad del negocio al estar mejor preparados para las interrupciónes del negocio ',
                ' - Manejo oportuno de las licencias y suscripciones de la empresa ',
                ' - Costos totales de la empresa de manera global ',
                ' - Permite la estandarización de manera transversal en la empresa ',
            ]),
        new Item('fidelizacion',
            [
                '- Fidelizar a un cliente, garantiza que esta siempre permanecera comprando nuestos productos y servicios ',
                '- Segun la ley de pareto el 80% de las ventas son de los clientes actuales y 20% de los nuevos ',
                '- Es un error comun concentrarse en adquirir nuevos clientes y descuidar los viejos ',
                '- Un cliente satisfecho es la mejor publicidad, aun asi, esto no siginifica que sea un cliente fiel ',
                '- ',
                '- Algunas estrategias para fidelizar a los clientes: ',
                ' - Ser honestos en la justa medida, ya que no siempre todo sera una historia de exito ',
                ' - Mantener una comunicación constante, haciendo saber los resultados de manera regular ',
                ' - Preparar un plan a futuro que lo haga sentir importante ',
                ' - Comparte los momentos de exito, no solo los fracasos merecen atención ',
                ' - Solicita sus opiniones y hazlos sentir escuchados ',
                ' - Las relaciones son mejores cuando son reciprocas ',
                '',
                '- Clasificación de los clientes: ',
                ' - Apostoles -> clientes fijos bastantes satisfechos y que recomendaran tu marca ',
                ' - Leales -> cuentan igual de satisfechos que los apostoles, pero que no divulgan tu marca ',
                ' - Mercenarios -> tienen satisfacción alta, pero solo compraran cuando esto les aporte algun beneficio ',
                ' - Rehenes -> no estan satisfechos con tu producto, pero tampoco estan dispuestos a migrar ni asummir más costos ',
                ' - Indiferentes -> son neutrales frente a la marca, y aunque esten satisfechos solo haran compras ocasionales ',
                ' - Terroristas -> además de estar insatisfechos, estos hablaran mal de la marca en sus circulos de influencia ',
            ]),
        new Item('modeloDIKW',
            [
                '- Es un sistema jerarquico donde cada capa le da soporte a las caracteristicas de la siguiente ',
                ' ',
                ' &uarr;',
                ' contexto ',
                ' &uarr;                                     Sabiduria        &#35;     Union de todas las partes ',
                ' &uarr;                      Conocimiento                   &#35;&#35;&#35;    Se forman las partes de un todo ',
                '           Información                                &#35;&#35;&#35;&#35;&#35;   Conexión de las partes',
                ' &uarr;  Datos                                            &#35;&#35;&#35;&#35;&#35;&#35;&#35;  Reunion de todas las partes ',
                '   &rarr;      &rarr;    &rarr;  comprension    &rarr;',
                '  Busqueda  Absorción     Practica     Reflexion',
                ' ',
                '- Datos -> son la materia prima para formar las siguientes capas, indeferentemente de la fuente ',
                '- Información -> es una construcción más avanzada a partir de acopio de simples datos, ',
                ' - gracias a nuestra capacidad de raciocinio y de reconocimiento de patrones ',
                '- Conocimiento -> ya con la información a nuestra disposición podemos actuar en base a esta, ',
                ' - tomar decisiones especificas, o responder interrogantes de manera practica ',
                '- Sabiduria -> generalmente se refiere a la capacidad de pensar y analizar las situaciones, ',
                ' - que se nos presenten, además de la capacidad para abstracción a otros contextos ',
            ]),
        new Item('gestionDeExpectativas',
            [
                '- Lo más probable es que estas esten formadas por diferentes factores y experiencias pasadas ',
                '- Muchas cosas pueden salir mal en un proyecto pero estas son algunas maneras de solucionarlo ',
                '',
                ' - Asumiendo lo obvio -> siempre hay diferencias entre lo que una persona escucha y lo que otra dice, ',
                '  - además de que hablamos de lo que consideramos importante y evitamos las obviedades, ',
                '  - sin comprender que estas no lo son para todos ',
                '',
                ' - Evitar el riesgo -> generalmente no nos gusta hablar de posibles problemas, ',
                '  - y si hay riesgos intentamos evitarlos hasta que sean inevitables, aunque esto nos traera problemas ',
                '  - en un futuro casi inmediato, preveer los problemas nos hace profesionales más confiables ',
                '',
                ' - Información incorrecta -> cuando vas al medico esperas una explicación a fondo de tus sintomas, ',
                '  - no simplemente un medicamento para calmarlos; puede que funcionen o solo enmascarar algo peor ',
                '  - en terminos de un equipo esto significa mantener a todos los involucrados al tanto ',
                '',
                ' - Reuniones sin agenda -> las reuniones no son de agrados de todos, y menos cuando estas son sorpresa, ',
                '  - además de que no se suele estar preparado para estas generando generando frustaciones, ',
                '  - lo mejor para evitar esto es simplemente agendarlas con anterioridad ',
                '',
                ' - Realización de contratos -> la negociación es importante pero para segurar que todo funcione ',
                '  - es importante generar acuerdos y dejarlos por escrito, asi demostrar alguna equivocación, ',
                '  - y quien es el responsable o que este obligado a resolver el problema',
            ])
    ];

export const POO =
    [
        new Item('poo',
            [
                '- Alta integridad, Bajo acoplamiento',
                '- Mejora la abstracción de los problemas al acercarlos a lo cotidiano ',
                ' - Clases      -> abstracciones de la realidad, convertidas en plantillas ',
                ' - Objetos     -> instancia de una clase, con propiedades unicas ',
                ' - Propiedades -> atributos o caracteristicas de un objeto',
                ' - Metodos     -> comportamientos o acciones de un objeto',
            ]),
        new Item('pooPilares',
            [
                '- Encasulapción -> todas las propiedades del objeto son solo del objeto ó de la clase ',
                '- Abstracción   -> las acciones son publicas pero su complejidad esta oculta; todos necesitan el que, más no interesa el como ',
                '- Herencia      -> los hijos tienen acceso a los metodos y atributos del padre, además de las propias, pero el padre no conoce a sus hijos ',
                '- Polimorfismo  -> cada objeto se puede comportar diferente, aunque tenga una misma base, solamente cambiando la instancia ',
            ]),
        new Item('herencia',
            [
                '- Propiedad de que una clase pueda ser creada a partir de otra ya existente ',
                '- Todo comportamiento heredado puedo ser sobrescrito por cualquiera de los hijos, dando lugar al polimorfismo ',
                '- Es usada para la reutilización de codigo, definir jerarquias, y obtener comportamientos especializados ',
                '- Puede ser de diferentes tipos: ',
                ' - Simple -> cada hijo SOLO puede heredar de una clase padre ',
                ' - Multiple -> las clases pueden heredar a partir de una o más clases, esto puede traer problemas si hay atributos o metodos con nombres iguales ',
                ' - Implementación -> los metodos pueden ser sobreescritos, y usarse tal cual vengan del padre o modificarlos para cambiar el comportamiento ',
                ' - Interfaz -> los metodos son heredados, pero su implementación no, esta es propia de cada hijo ',
            ]),
        new Item('composicion',
            [
                '- En los diagramas UML se suele representar por medio de un diamante con o sin relleno, ubicado en la clase contenedora ',
                '',
                ' - Agregación -> Indica que una clase es parte de otra, y que los componentes pueden ser compartidos por otros ',
                '  - La destrucción del compuesto no necesariamente indica la destrucción de todos los formantes ',
                '  - Se suele representar mediante un diamante sin relleno en UML',
                '  - Cualquier Empresa Tiene 0..* Clientes, los clientes y la empresa pueden vivir independientemente el uno del otro ',
                '',
                ' - Composición -> La clase contenida y el contenedor deben tener los mismmos ciclos de vida ',
                '  - Los objetos contenidos son solamente del objeto contenedor, si este se destruye, todos sus componentes tambien ',
                '  - Su representación en UML se da mediante un diamante con relleno ',
                '  - Una Empresa tiene 1..* Empleados, si NO existe una empresa, NO pueden existir sus empleados ',
                '',
                '- En cuestion de codigo ambas relaciones no se diferencian entre si (en la mayoria de lenguajes) ',
                '- La principal diferencia es a nivel conceptual, donde esta si puede ayudar a entender mejor el problema y su modelado ',
            ]),
        new Item('pooStatic',
            [
                '- Metodos o atributos que pertenecen a la clase y no a un objeto como tal',
                '- Son accesibles de manera global, por lo que hay que tener cuidado con su uso ',
                '- No necesitan ser instanciados para ser usados',
            ]),
        new Item('sobrecarga',
            [
                '- Algunos lenguajes permite sobrecargar los metodos y constructores',
                '- El nombre sera el mismo pero pueden recibir diferente numero de parametros o de tipos',
                '- Deben tener diferencias entre si, de lo contrario el compilador interno se da cuenta de esto y sacara error ',
            ]),
        new Item('acoplamiento',
            [
                '- Aferente -> hace referencia a una clase con un alto grado de responsabilidad y una jerarquia bastante alta',
                ' - Esto es indicativo de la herencia, por lo que es pertinente modificarla con cuidado debido a posibles efectos colaterales ',
                ' - Este tipo de clases solo usa atributos y metodos principalmente de las clases padre ó propios y poco o nada de entidades externas ',
                '',
                '- Eferente -> es un paquete o clase con un alto grado de dependencia, esto condiciona el comportamiento de la clase ',
                ' - siendo casi totalmente dependiente de las entidades externas, por lo que es más suceptible a efecto colaterales por cambios en estas ',
                '',
                '- Idealmente se debe evitar el acoplamiento Eferente y buscar el Aferente, ya que este conlleva una mejor estabilidad y mantenimiento ',
            ]),
        new Item('contratos',
            [
                '- Mejora la compresión de POO al mejorar la especificación de los elementos ',
                '- Tambien puede servir como documentación, al mismo tiempo que se programa ',
                '- Uso eficaz de la herencia y la reutilización ',
                '- Las Responsabilidades estan previamente definidas y estas no se deben romper ',
                '- Se manejan los conceptos de precondiciones y postcondiciones con mayor importancia ',
                '- Ademas de incluir el concepto de inmutabilidad, al entrar como al salir ',
            ]),
        new Item('descomposicion',
            [
                '- La descomposición funcional Se refiere al proceso de resolución de las funciones de las partes consituyentes, ',
                ' - de tal manera que la función original se pueda reconstruir ',
                '- Este proceso se lleva a cabo con la idea de desmenuzar la realidad en sus partes constitutivas más elementales ',
                ' - esto ayuda a la modularización del diseño, y a la definición de responsabilidades unicas ',
                '- Se debe realizar de manera responsable y bien planeada, ya que su abuso puede resultar en un antipatron, ',
                ' - donde el costo de integración entre elementos es demasiado elevado, no es partir porque si, es hacerlo donde se debe ',
            ]),
        new Item('polimorfismo',
            [
                '- El polimorfismo es la capacidad de adoptar diferentes comportamientos dependiendo de si se es un hijo o un padre ',
                '- Es una relajación de los tipos en lenguajes tipados y uno de los efectos de la herencia como especialización ',
            ]),
        new Item('herVScomp',
            [
                '        Caso             Diseño basado en herencia                            Diseño basado en composición               ',
                '- Inicio del desarrollo       Más rapido                                           Más lento                             ',
                '- Diseño del software         Facil pero pobre                                     Más complejo                          ',
                '- Efectos no deseados         Propicia                                             Reducidos                             ',
                '- Adaptabilidad               Más niveles más complejidad                          Facil de cambiar (instancias)         ',
                '- Testing                     Entre más sobre escritura más dificil de cambiar     Piezas acotadas y fronteras claras    ',
                '- Extension                   Debe hacerse con cuidado de no extender "basura"     Facil incorporación de piezas nuevas  ',
                '- Polimorfismo                No es necesario ningun mecanismo extra               Se puede lograr mediante interfaces   ',
            ]),
        new Item('enlaces',
            [
                '- La asociación entre la definición de los metodos y variables, se suele dar de 2 maneras, durante tiempo de ejecución y de compilación ',
                '- Todo lo se pueda conocer en tiempo de compilación, y que es necesario para que el programa se pueda ejecutar se conoce como enlace estatico ',
                '- Las cosas de las cuales es necesario ejecutar el programa para conocer su valor y su comportamiento, se conoce como enlace dinamico ',
            ]),
        new Item('acoplamientoComponentes',
            [
                '- Los componentes deberian estar estructurados de manera jerarquica, y de manera que tengan poca complejidad entre sus relaciones, ',
                ' - además de la menor dependencia entre si que sea posible',
                '- Existen varios principios a tener en cuenta: ',
                '',
                '- Principio de dependencia aciclicas -> ADP',
                ' - Las dependencias circulares no deberian existir ',
                ' - Si estan existen, deberian convertirse en un solo componente para no afectar al resto ',
                ' - A mayor tamaño del software, más problemas en cuanto a relaciones y la compilación de este ',
                ' - Utilizar la inversion de dependencias para evitar relaciones arbitrarias y/o acopladas ',
                ' - Separar y tener claro que puede ser volatil y que es más constante ',
                '',
                '- Principio de dependencias estables -> SDP',
                ' - Un componentes dificl de cambiar (estable) no deberia depender de un componente volatil ',
                ' - Esta relación se puede calcular sabiendo quienes son dependientes y de quien depende el componente ',
                ' - Dependencias entrantes: quienes estan afuera y dependen de este (interno) ',
                ' - Dependencias salientes: quien esta adentro y dependen de otros (externos) ',
                '  - 0   == estabilidad       esto se calcula mediante la siguiente formula: ',
                '  - 0-1 == intermedio        inestabilidad =        salidas       ',
                '  - 1   == inestable                         (entradas + salidas) ',
                '',
                '- Principio de abstracciones estables -> SAP ',
                ' - Los componentes deben abstraerte hasta el grado de estabilidad deseado ',
                ' - Los partes criticas de nuestro sistema deberian ser estables y de alto nivel ',
                ' - Las partes volatiles deben poder ser cambiadas con gran facilidad, con minimas afectaciones a los demás ',
                ' - Las clases abstractas e interfaces son indicativos de estabilidad ',
            ])
    ];

export const BASES_DE_DATOS =
    [
        new Item('sql',
            [
                '- Es lenguaje de consultas estandar para manipular la información en una base de datos ',
                '- Cada motor de base de datos tiene sus particularidades pero todos usan SQL',
                '- Las columnas son los datos a guardar y las filas son los registros almacenados',
                '- Las tablas estan compuestas de columnas y registros con información de un tipo en especifico ',
                '- Toda tabla deberia tener una clave primaria, para mejorar la indexación de contenido',
                '- La información deberia estar normalizada para evitar valores duplicados',
            ]),
        new Item('dbms',
            [
                '- Se encargan de almacenar, administrar, manipular y resguardar los datos ',
                '',
                '- Las BD guardan diferentes tipos de datos como: ',
                ' - texto, numeros, binarios, temporales, documentos, imagenes, geograficos, etc... ',
                '',
                '- Un buen DBMS deberia tener las siguientes caracteristicas: ',
                ' - Reducción de la redundancia -> Los duplicados en las BD se reducen al tener un unico lugar donde almacenar los datos ',
                ' - Mantenimiento -> tener todos los datos en solo lugar permite que se administren con más eficiencia ',
                ' - Mantenimiento -> tener todos los datos en solo lugar permite que se administren con más eficiencia ',
                ' - Seguridad -> define quien y con que privilegios puede acceder a la informacón ',
                ' - Consistencia -> se maneja un estandar para todos los datos de todas las BD ',
                ' - MultiUsuario -> el acceso concurrente de varios usuarios es un tema comun para las BD ',
            ]),
        new Item('crud',
            [
                '- Son las 4 operaciones basicas a la hora de gestionar los datos de una BD ',
                '- No solo es aplicable para SQL, tambien tiene su equivalencia en HTTP ',
                '- La mayoria de frameworks tienen estos metodos ya implementados y listos para consumirse ',
                '',
                '  Operación      SQL          HTTP, Restful     ',
                '  Create        INSERT        POST              ',
                '  Read          SELECT        GET, HEAD         ',
                '  Update        UPDATE        PUT, PATCH        ',
                '  Delete        DELETE        DELETE            ',
            ]),
        new Item('dl',
            [
                '- DDL -> Lenguaje de Definición de Datos ',
                '- Permite Crear y Modificar la estructura de la BD ',
                ' - CREATE -> creación de campos, tablas e indices ',
                ' - ALTER -> modificacion de tablas ó sus campos ',
                ' - DROP -> eliminación de tablas e indices ',
                ' - TRUNCATE -> elimina los registros de una tabla ',
                ' - RENAME -> renombra objetos ',
                '',
                '- DML -> Lenguaje de Manipulación de Datos ',
                '- Permite ejecutar las operaciones de un CRUD en los datos de la BD ',
                ' - SELECT -> consulta una tabla de la BD de manera general ó con filtros ',
                ' - INSERT -> inserción de datos en una tabla ',
                ' - UPDATE -> actualización de campos ó registros que cumplan los criterios especificados ',
                ' - DELETE -> elimina registros de una tabla ',
                '',
                '- DCL -> Lenguaje de Control de Datos ',
                ' - Permite crear roles, permisos y conceder/denegar el acceso a los datos ',
                ' - GRANT -> otorga privilegios de acceso a los usuarios ',
                ' - REVOKE -> retira los privilegios previamente otorgados ',
                '',
                '- TCL -> Lenguaje de Control de Transacciones ',
                ' - COMMIT -> guarda los cambios realizados ',
                ' - ROLLBACK -> deshace el ultimo cambio hecho ',
            ]),
        new Item('integridad',
            [
                ' - Son las reglas que garantizan que la información que la información sea inmutable hasta que se decida lo contrario ',
                ' - Tambien protege los datos de posibles errores a la hora de modificarlos ',
                ' - Esta es una de las principales diferencias entre las BD relacionales y NO relacionales ',
                ' - Las BD relacionales cumplen esto mediante el esquema ACID ',
                ' - Las DB NO relacionales no garantizan el 100% de la integridad de los datos, aunque la mayoria son muy fiables ',
            ]),
        new Item('erd',
            [
                '- Demuestra como las entidades (generalmente de una BD) se relacionan entre si ',
                '- Es una manera de desarrollar BD relacionales de acuerdo al modelo de negocio',
                '- Demuestra como las entidades (generalmente de una BD) se relacionan entre si ',
                '- Tambien tienen una relación que denota la cardinalidad 1-1, 1-n, 1-0, m-n',
            ]),
        new Item('normalizacion',
            [
                '- La normalización en la base de datos hace que la información sea más facil de estructurar ',
                '- Evita gastar espacio en datos redundantes y elimina imposible inconsistencias',
                '',
                '  - Primera forma -> identificar datos agrupables en tablas individuales',
                '  - Primera forma -> asigne cada conjunto con una clave primaria',
                '',
                '  - Segunda forma -> crear tablas independientes para valores que sean aplicables a otros registros ',
                '  - Segunda forma -> asigne claves foraneas que se puedan relacionar con otras tablas',
                '',
                '  - Tercera forma -> trasladar valores que sean independientes de las claves a tablas separadas',
                '  - Tercera forma -> no siempre es conveniente hacerlo, puede ser costoso en terminos de rendimiento ',
                '',
                '  - Cuarta forma  -> rara vez se aplican pero hay casos donde es practico hacerlo',
            ]),
        new Item('nosql',
            [
                '- Nacieron de los problemas para escalar las BD relacionales',
                '- Existes proyectos propios de grandes empresas y de codigo libre accesibles para la comunidad',
                '- La principal diferencia respecto a SQL es la falta de una estructura definida para almacenar los datos ',
                '- Esta falta de estructura hace posible que se pueda guardar cualquier tipo de dato',
                '- El rendimiento es mayor independientemente de la cantidad de datos',
                '- La fiabilidad de los datos no esta garantizada',
                '- No hay un estandar para las operaciones, cada motor tiene su sintaxis diferente',
                '- Existen diferentes formas de guardar la información ',
            ]),
        new Item('tiposBD',
            [
                '- Clave-Valor -> cada elemento tiene una llave unica, asociada a un valor ',
                '- Documentos -> la información se guarda en documentos con IDs unicos, y en formatos simples como JSON o XML ',
                '- Grafos -> se basan en nodos, relacionados mediante aristas, es necesario de la teoria de grafos para recorrerlas ',
                '- Objetos -> los datos se manejan mediante Objetos, tal y como en la Programación Orientada a Objetos ',
            ]),
        new Item('acid',
            [
                '- Son 4 propiedades que garantizan la confiabilidad de las operaciones y consecuentemente en los datos de las BD ',
                '  - Atomicidad -> todas las operaciones deben ser todo o nada, si una falla la información no debe sufrir cambios ',
                '  - Consistencia -> toda operación iniciada debe ser valida para poderse efectuarse, constraints, cascades, etc.. ',
                '  - Aislamiento -> toda operación debe ser ejecutada indeferentemente de las demás, respetando el orden',
                '  - Persistencia -> toda transacción que se haya realizado debe ser perdurable en el tiempo, sin importar que suceda ',
            ]),
        new Item('orm',
            [
                '- El Mapeo Objeto-Relacional permite convertir los objetos convencionales en objetos persistentes ',
                '- Permite generar esquemas para guardar la información independientes de cualquier Motor de Base de Datos ',
                '- Todas las operaciones basicas del CRUD son facilmente implementables ',
                '- Los cambios en las BD se hacen mucho más rapidos de hacer y de probar ',
                '- El rendimientos para operaciones muy complicadas es ligeramente menor ',
            ]),
        new Item('consistenciaEventual',
            [
                '- Garantiza la calidad de los servicios, con una gran disponibilidad y escalabilidad ',
                '- Esto se aplica solamente para bases de datos relacionales ',
                '- Cuando la concurrencia es demasiado alta, las peticiones pueden resultar en peticiones bloqueantes ',
                '- Cuando un sistema transaccional se bloquea, generalmente lo hace por un instante breve de tiempo, ',
                '  - si esto no se maneja de manera correcta, puede resultar en bloqueos fatales para la aplicación ',
                '- La consistencia eventual permite garantizar la disponibilidad y escalabilidad de las aplicaciones, ',
                '  - mediante cientos de nodos distribuidos y la promesa de retorno de toda operación ',
            ]),
        new Item('algebraRelacional',
            [
                '- Este tipo de algebra toma un conjunto de datos y realiza operaciones sobre estos, para generar un nuevo conjunto ',
                '- Tambien soporta el concepto de anidación al usar un resultado para una operación y generar otro resultado ',
                '',
                '- UNION -> une 2 tablas iguales, sin registros repetidos ',
                '- INTERSECCIÓN -> une 2 tablas iguales donde los registros sean iguales, evitando la repetición ',
                '- DIFERENCIA -> opera en tablas y devuelve el contenido que se encuentre en la primera tabla pero no en la segunda ',
                '- PRODUCTO -> toma 2 tablas y devuelve una tercera con el contenido de acuerdo a las posibles combinaciones, ya sean iguales o diferentes ',
                '- SELECCION -> toma 2 ó más tablas, iguales o diferentes, y devuelve los campos donde se cumplan las condiciones dadas ',
                '- PROYECCIÓN -> opera igual que la selección, pero aca se pueden especificar que columnas se quieren tener ',
                '- REUNIÓN -> opera sobre 2 ó más tablas y devuelve todos los campos deseados, que esten relacionados mediante alguna condición ',
                '- DIVISIÓN -> opera sobre 2 tablas donde el resultado no existe en la primera tabla, y todas las filas tengan esta relación ',
                '- ASIGNACIÓN -> cambia los valores de las columnas donde se cumplan las condicones dadas ',
                '',
                '- equivalencias en SQL (respectivamente)                           ',
                '- SELECT * FROM A     UNION     SELECT * FROM B                     ',
                '- SELECT * FROM A   INTERSECT   SELECT * FROM B                      ',
                '- SELECT * FROM A    EXCEPT     SELECT * FROM B                       ',
                '- SELECT * FROM A, B                                                   ',
                '- SELECT * FROM A WHERE X&lt;50                                         ',
                '- SELECT X, Z FROM A WHERE X&lt;50                                       ',
                '- SELECT A.W, B.Y FROM A JOIN B ON (A.V=B.X AND Z>10)                     ',
                '- no hay equivalencia directa, pero se puede lograr combinando operaciones ',
                '- UPDATE A SET indice="100%" WHERE codigo>2000                            ',
            ]),
        new Item('n+1selects',
            [
                '- Es un problema cuando se manejan ORM',
                '- Dado una colección de objetos, que a su vez pueden tener otras colecciones objetos como atributos ',
                '- Entonces para obtener un objeto inicial, hay que tener todos los objetos asociados a este, aunque no se necesiten ',
                '- Actualmente la mayoria de ORM usan o proveen estrategias para evitar este comportamiento ',
                '- Generalmente esto no es un problema de rendimiento, pero si ha de convertirse en uno,  ',
                ' - hay maneras de solventarlo como cambiar la forma de consultar las entidades o usar objetos en memoria ',
            ]),
        new Item('indices',
            [
                '- Es una manera de optimizar las consultas y mejorar la eficiencia de una BD ',
                '- Esto se logra mediante estructuras binarias asociadas a cada registro de la BD ',
                '- La indexación puede presentar un problema para la inserción, modificación y borrado de los datos, ya que esto  ',
                ' - significa la actualización de los indices asociados ',
                '- Tener demasiados indices tambien es contraproducente ya que pueden retrasar el procesamiento de los datos ',
                '- Cada motor puede manejar de diferentes maneras los indices, y esto a su vez afectar el rendimiento de cada tipo ',
            ]),
        new Item('boyceCodd',
            [
                '- El modelo relacional fue introducido en los años 60 por Edgar Frank Codd e IBM, ',
                ' - despues fue incrementado su popularidad poco a poco hasta ser el principal modelo hoy en dia ',
                '- En este modelo se definen los siguientes objetivos: ',
                ' - Independencia fisica -> la forma de almacenar los datos, no debe influir en su manipulación ',
                ' - Independencia logica -> los datos almacenados no deben ser modificados si se cambia el motor de la bd ',
                ' - Flexibilidad -> la bd deberia ofrecer distintas vistas en funcion del usuario que la necesite ',
                ' - Sencillez -> la estructura logica deberia estar normalizada, hasta la 3ra forma normal, ',
                '  - o la 4ta forma normal Boyce-Codd',
                '',
                '- Normalmente casi todas las tablas que estan en la 3FN no suelen infrigir la FNBC ',
                '- No existe una regla definida para corregir de la 3ra a la 4ta forma normal ',
                '- En ciertos casos no es indicado hacerlo ya que la descomposición puede hacer perder la semantica de la relación ',
                '',
                ' Se tiene la siguiente tabla en 3FN        La FNBC serian las siguientes tablas: ',
                ' <strong>CodPostal Direccion    Ciudad             CodPostal  Direccion       CodPostal  Ciudad </strong>',
                ' 3000      las flores   Merida             3000       las flores      3000       Merida ',
            ])
    ];

export const PRINCIPIOS =
    [
        new Item('solid',
            [
                ' S -> Responsabilidad única',
                ' - Una cosa x solo deberia hacer y conocer cosas de su competencia, de resto se tendria un acoplamiento indeseado ',
                ' O -> Abierto/Cerrado',
                ' - Siempre sera mejor añadir nuevos comportamientos o funciones que modificar los existentes ',
                ' L -> Sustitución de Liskov',
                ' - Todo objeto hijo es remplazable por sus padres, sin alterar el funcionamiento del sistema ',
                ' I -> Segregación de interfaces ',
                ' - Es mejor tener interfaces especializadas, que interfaces genericas con metodos que no se usaran ',
                ' D -> Inversión de dependencias ',
                ' - las implementaciones pueden cambiar, pero las abstracciones no, por lo que el sistema se debe basar en estas ',
            ]),
        new Item('kiss',
            [
                '- Código entendible',
                '- Mantener muchos modulos y metodos pequeños en vez de uno grande ',
                '- Código autocomentado, nombres claros para las variables',
                '- Divide y venceras, dividir el problema en subproblemas',
                '- No abusar de los comentarios, y mantenerlos actualizados',
                '- Implementa código reutilizable, evitar el copiar y pegar',
            ]),
        new Item('yagni',
            [
                '- No lo añadas hasta que no lo necesites',
                '- Define prioridades, evita trabajo innecesario y que no aporta valor ',
            ]),
        new Item('occam',
            [
                '- Preferir siempre la solución más simple, asi se evita agregar complejidad arbitraria ',
                '- En igualdad de condiciones la solución más optima prevalecera',
            ]),
        new Item('dry',
            [
                '- Evita repertir código siempre que sea posible y que no se genere acoplamiento',
                '- Incrementa la mantenibilidad del código, modularizando y haciendo partes pequeñas ',
                '- Facilita la refactorización, y la creación de partes pequeñas e independientes ',
            ]),
        new Item('hollywood',
            [
                '- Se basa en la inversion de dependencias para crear la inversion de control ',
                '- Esto logra obtener las referencias y datos necesarios para funcionar mediante una entidad externa (frameworks)',
                '- Generalmente las entidades externas son los frameworks que ejecutan el codigo del usuario ',
                '- Las instancias se crean y se eliminan de manera más eficiente, mejorando el rendimiento ',
            ]),
        new Item('tellDontAsk',
            [
                '- La responsabilidad debe ser delegada al objeto correspondiente, en lugar de extraerla en un componente afuera ',
                '- En lugar de pedir los datos a los objetos, debemos decirles que hacer y esperar el resultado de la operación ',
                '- Esto es un refuerzo del concepto de encapsulación, propio de la orientación a objetos ',
            ]),
        new Item('stupid',
            [
                ' S -> Patron singleton ',
                ' - Es el unico patron que mal usado puede convertirse en un antipatron, no lo uses si no es necesario ',
                ' T -> Acoplamiento indebido ',
                ' - Sucede cuando un cambio afecta más partes de las debidas, esto indica una mala modularización ',
                ' U -> Inestabilidad',
                ' - El software no deberia ser dificil de testear, ni de modificar ',
                ' P -> Optimización prematura ',
                ' - Un codigo eficiente, por lo general es ilegible, por lo que optimizarlo sin necesidad solo trae complejidad innecesaria ',
                ' I -> Nombres indescriptivos ',
                ' - El ideal de todo codigo es que sea autocomentado, por lo que nombrar mal las cosas hace inalcanzable este ideal ',
                ' D -> Duplicación ',
                ' - El codigo duplicado deberia evitarse siempre que se pueda, aplicando DRY & KISS, además de otras practicas ',
            ])
    ];

export const PRUEBAS_AVANZADAS =
    [
        new Item('cajaNegraBlanca',
            [
                '- Caja blanca -> este tipo de testing se realiza sabiendo la estructura del codigo, funcionamiento, ',
                ' - estructura, arquitectura, etc.. con todo esto en mente se realizan las pruebas ',
                '- Caja negra -> en este metodo solo se conoce las entradas y las salidas del proceso, ',
                ' - teniendo su funcionamiento interno oculto ',
                '',
                '- Por lo general los tests de caja blanca son realizados por los desarrolladores del proyecto, ',
                ' - y los de caja negra por las personas que conocen del negocio ',
                '',
                '- Tambien se suelen mencionar los test de Caja gris, que se considerarian un punto medio, ',
                ' - donde la persona encargada conoce del negocio y de su implementación, más no con una gran profundidad ',
            ]),
        new Item('valorLimite',
            [
                '- Esta tecnica se basa en la heuristica de que los errores son más probables en los valores extremos de las entradas ',
                '- Los valores escogidos son aquellos que se encuentran por encima o debajo de las clases de equivalencia ',
                '- Dependiendo del tipo de dato de la entrada se suele escoger las pruebas para que cumplan los siguientes escenarios: ',
                ' - (n-1) valor cercano al limite minimo ',
                ' - (n)   valor encontrado en el rango normal de los datos ',
                ' - (n+1) valor cercano al limite maximo ',
                '- Los valores limite se pueden considerar una especie de frontera entre el comportamiento normal del sistema y ',
                ' - un punto de error conocido o desconocido para el sistema ',
                '',
                '- Si tomamos como ejemplo los dias de la semana se podrian dar los siguientes casos: ',
                '',
                '                          Dias de la semana validos                            ',
                '    Otro   Domingo  Lunes  Martes  Miercoles  Jueves  Viernes  Sabado    Otro  ',
                '    Error  Limite                rango normal                  Limite    Error ',
                '           inferior                                            Superior        ',
            ]),
        new Item('clasesEquivalencia',
            [
                '- Esta tecnica considera que todas las entradas del programa se pueden clasificar en 2 tipos: ',
                ' - Efectos negativos -> entradas que inducen al error ó casos no cobijados durante el desarrollo ',
                ' - Efectos positivos -> entradas que no deberian provocar ningun error ó mal funcionamiento del sistema ',
                '',
                '- Todos los elementos de una clase de equivalencia teoricamente se deben comportar igual, ',
                ' - por lo que solo basta escoger uno del grupo y probar con este elemento ',
                '- Las clases de equivalencia puende ser de distintos tipos: ',
                ' - Rangos, valores especificos, conjuntos de valores, condiciones binarias, etc.. ',
                '',
                '- De acuerdo a cada tipo se deberia sacar las clases de equivalencias validas e invalidas ',
                '- Si se da el caso, tambien se deberian probar los valores limite del sistema ',
            ]),
        new Item('grafosCausaEfecto',
            [
                '- Estos grafos representan una relación logica entre distinas causas y sus posibles efectos ',
                '- Donde una causa (entradas) pueden generar en diversos efectos (salidas) ',
                '- Estas entradas y salidas tambien se pueden combinar para elaborar complejas reglas de negocio ',
            ]),
        new Item('tiposDePruebas',
            [
                '- Alfa -> estan enfocadas a identificar posibles problemas antes de un release (lanzamiento) ',
                '- Aceptación -> realizadas por el cliente con el proposito de aceptar, o no el producto ',
                '- Ad-hoc -> no tienen ninguna base o referencia por lo que su impredecibilidad puede romper las cosas ',
                '',
                '- Beta -> se realizan en un ambiente real, desde la perspectiva de un usuario para satisfacer a los clientes ',
                '- Compatibilidad(software) -> se prueba que el software actual soporte las versiones previas ',
                '- Compatibilidad(Hardware) -> se prueban diferentes entornos de hardware para saber donde y como puede correr ',
                '',
                '- Componentes -> aca se prueban la union de las diferentes partes de la aplicación y su funcionamiento en conjunto ',
                '- Extremo a extremo -> se prueba todo el sistema como un todo, su funcionamiento general y no particular ',
                '- GUI -> aca se prueba la interfaz grafica del usuario y que esta se adapte al publico enfocado, además de que funcione ',
                '',
                '- Camino feliz -> aca solo se crean casos que se conocen y que no deberian fallar ',
                '- Integración -> se juntan partes especificas y se prueban como un grupo en especifico ',
                '- Carga -> tienen el objetivo de averiguar cuanta carga de trabajo puede manejar un sistema sin degradaciones importantes ',
                '',
                '- Recuperación -> valida la capacidad del sistema para recuperarse de posibles fallos ',
                '- Regresión -> cualquier cambio de una funcionalidad no debe afectar lo que ya estaba funcionando ',
                '- Estres -> la intención es saber en que punto un sistema deja de funcionar y porque ',
                '',
                '- Internalización -> que tambien se adapta un sistema para su uso en diferentes contextos geograficos ',
                '- Unitarias -> son pruebas de funciones especificas del sistema que se pueden tomar como una parte individual de la generalidad ',
                '- Humo -> se concentran en verificar que con cada cambio que se haga el sistema siga funcionando bien de manera general ',
            ]),
        new Item('outsideInside',
            [
                '- En el TDD se suelen encontrar 2 enfoques diferentes ',
                '',
                '- Escuela clasica (Inside-out) ',
                ' - Tiene en cuenta conceptos originales de Kent Beck, Stephen Freeman y Nat Pryce como: ',
                ' - Triangulación -> que se basa en obtener varios casos especificos, con los cuales se pueda implementar una solución generica ',
                ' - Verificación -> que se centra en usar los objetos reales previamente configurados, con interacciones reales ',
                '',
                '- Escuela de Londres (Outside-in) ',
                ' - Su proposito sigue siendo el mismo pero la manera de alcanzarlo es diferente ',
                ' - Verificar el comportamiento y las interacciones de los objetos más que sus estados ',
                ' - Asi se puede ahorrar todo el trabajo de la creación de los objetos y solo usar dobles ',
            ])
    ];

export const REFACTORIZACION =
    [
        new Item('codigolimpio',
            [
                '- Menos es Más, el poder de la simplicidad hecho codigo',
                '- Es más facil de entender para otros, y a traves del tiempo ',
                '- Es más facil de mantener a lo largo del tiempo ',
                '- El codigo duplicado se reduce considerablamente ',
                '- Los tests son satisfactorios de manera regular ',
            ]),
        new Item('deudatecnica',
            [
                '- Todo desarrollador desea crear un buen codigo pero las omisiones o errores crecen sigilosamente ',
                '- La mala modularización del codigo puede hacer que los cambios tengan un gran impacto',
                '- Apurar el desarrollo puede crear soluciones rapidas pero incompletas',
                '- La falta de pruebas puede tener efectos colaterales inmesamente destructivos',
                '- La Documentación siempre sera necesaria, y omitirla entorpecera futuros cambios',
                '- Sin comunicación o interacciones incompletas pueden generar pequeñas islas dentro de la empresa ',
                '- Tambien existe el elemento humano cuando el desarrollador es inexperto o incompetente',
            ]),
        new Item('tiposDeudaTecnica',
            [
                '- No realizar los cambios necesarios con premura hara que en el futuro sea más dificil y costoso refactorizar ',
                '',
                '                            Deuda imprudente                       Deuda prudente          ',
                '',
                '                       -Falta de tiempo/presupuesto          -Prioridad de funcionalidades ',
                'Deuda deliberada       -Refactor descuidado                   con la promesa de mejora     ',
                '                       -Insuficiencia de pruebas             -Minimo de pruebas a hacer    ',
                '',
                '                       -Falta de conocimiento                -El refactor constante evita  ',
                'Deuda involuntaria     -Sobreingenieria                       estos problemas, mientras se ',
                '                       -Anti patrones de diseño               aprende de los errores       ',
            ]),
        new Item('comentarios',
            [
                '- Comentar el codigo es sumamente util para determinar los segementos que necesitan correciones ',
                '- La mayoria de IDEs admiten comentarios con etiquetas como:  ',
                ' - TODO -> lugares que se pueden mejorar, ya sea legilibilidad, complejidad, etc.. ',
                ' - FIXME -> porción de codigo que falla en circuntancias especificas y debe ser revisada ',
                ' - NOTE -> funcionamiento interno ó posibles problemas no documentadas ',
                ' - KLUDGE -> codigo ineficiente, complejo ó insondable ',
            ]),
        new Item('cuandorefactorizar',
            [
                '- Cuando se inicia a duplicar codigo, eventualmente sera necesario refactorizarlo',
                '- Cuando se empieza se arregla un error es una excelente oportunidad para hacerlo',
                '- Cuando se hagan revisiones, siempre hay espacio para la mejora',
                '- Cuando se agregan nuevas funciones, tambien se pueden refactorizar las existentes ',
            ]),
        new Item('comorefactorizar',
            [
                '- El resultado debe ser mejor que lo anterior, de lo contrario sera tiempo perdido ',
                '- No se deben crear nuevas funciones, eso es estrictamente en tiempo de desarrollo ',
                '- Los tests deben seguir pasando tal y como antes de empezar',
            ]),
        new Item('tecnicasRefactoring',
            [
                '- Composicion de metodos -> Se base en descomponer metodos grandes en, ',
                ' - metodos más pequeños y manejables evitando metodos innecesariamente largos y complejos ',
                ' - PROS -> los metodos se hacen más entendibles y se eliminan variables de poca utilidad',
                ' - CONTRAS -> la complejidad cognitiva puede ser mayor de la inicial, ',
                '   además de pequeñas afectaciones al rendimiento ',
                '',
                '- Mover funciones entre clases -> Aunque un sistema se encuentre bien diseñado, ',
                ' - habra clases con más responsabilidades que otras, ',
                ' - con la posibilidad de que estas no les correspondan ',
                ' - PROS -> se hace un mejor reparto de las responsabilidades ',
                ' - CONTRAS -> si se abusan de estos se pueden convertir en code smells ',
                '',
                '- Organización de los datos -> Esto ayuda a pensar en clases y funciones, ',
                '  - en vez de operaciones con datos primitivos ',
                ' - Mejora la encapsulacion y el manejo de los datos ',
                ' - PROS -> permite aprovechar mejor los conceptos de POO ',
                ' - CONTRAS -> la complejidad del codigo puede crecer ',
                '',
                '- Simplificación de condiciones -> las condiciones siempre tienden a crecer, ',
                '  - por lo que siempre se deben revisar y evitar bolas de nieve ',
                ' - Se reduce la complejidad cognitiva resultando en un codigo más entendible ',
                ' - PROS -> se reduce la complejidad y se aumenta la mantenibilidad ',
                ' - CONTRAS -> en ciertos casos se debe implementar más codigo ',
                '',
                '- Simplificación de metodos -> los metodos deben ser dicientes en cuanto a lo que hacen ',
                ' - Mejora el manejo de las excepciones, en vez de que se usen como condiciones del flujo ',
                ' - PROS -> un metodo diciente es más facil de comprender ',
                ' - CONTRAS -> los metodos se pueden volver más largos o hacer más llamados ',
                '',
                '- Lidiar con la generalización -> Abstraer las generalidades del codigo, ',
                '  - como creacion de interfaces, cambios de jerarquias, remover o modificar la herencia ',
                ' - Se mejora la defición de atributos y comportamientos al tratar con la herencia ',
                ' - PROS -> se mejora el diseño de las clases y se disminuye el acoplamiento ',
                ' - CONTRAS -> se debe realizar un analisis más profundo del porque y su solución ',
            ])
    ];

export const REQUISITOS =
    [
        new Item('funcionales',
            [
                '- Son la declaración de los servicios y funciones que tendra la aplicación ',
                '- Estos se basan en una serie de requerimientos del software previamente realizada ',
                '- Gran parte del exito del producto depende de que este proceso sea realizado efectivamente ',
                '- La ambiguedad es normal, pero debe ser reducida al minimo ',
                '- Las Historias de Usuario son una gran ayuda en este ambito, aun asi estas tambien pueden equivocarse ',
                '- Los requisitos deben ser coherentes, sin contradicciones entre si, más no significa que no puedan cambiar ',
            ]),
        new Item('NOfuncionales',
            [
                '- No son caracteristicas que son expresadas directamente por el cliente ',
                '- Son una declaración de como se debe comportar el sistema, de que propiedades son importantes ',
                '- Tambien pueden contar con restricciones como, sistema operativo, dispositivos compatibles, paleta de colores, etc... ',
                '',
                ' - Requisitos del producto -> especifican que debe cumplir el producto (rapido, bonito, confiable, etc...) ',
                ' - Requisitos del producto -> estos criterios, y otras más son terriblemente ambiguos, por lo que deben ser previamente acordados ',
                '',
                ' - Requisitos organizacionales -> se derivan de politicas y procedimientos de la empresa ya existentes ',
                ' - Requisitos organizacionales -> como lenguajes a usar, documentación a entregar, etc... ',
                ' - Requisitos organizacionales -> tales como la interoperabilidad, leyes a seguir, etc... ',
                '',
                ' - Requisitos externos -> son afectados directamente por factores externos al software ',
            ]),
        new Item('negocio',
            [
                '- Es el impacto real de una funcionalidad en el software, por lo que es subjetivo y depende de quien lo este visualizando ',
                '- Generalmenete son responsabilidad del Product Owner y de los analistas, si se trabaja con metodologias agiles ',
                '- Es necesario definir objetivos a cumplir, para tener una meta clara y visualizar un camino ',
                '- Adoptar formas de medir el progreso y hacerlo de manera periodica ',
                '- Cuestionarse a si mismos, conforme va avanzando el proyecto las cosas pueden cambiar y con estas nuestros objetivos ',
                '- Es necesario definir objetivos a cumplir, para tener una meta clara y visualizar un camino ',
            ]),
        new Item('ambiguedad',
            [
                '- Menos es Más, una frase bastante diciente pero que es más facil decirla que aplicarla ',
                '- La redacción debe ser clara y concisa, ya que muchas personas en diferentes ambitos leeran los requisitos y todos deben entenderlos ',
                '- Los detalles son importantes, pero estos no deben ser abrumadores ni irrelevantes ',
                '- Si una requisito es demasiado extenso este puede ser desglosado en otros más pequeños y concisos ',
                '- Igual que las Historias de Usuario pueden tener criterios de aceptación ',
                '- Se puede incluir lenguaje tecnico y escenarios especificos, si estos ayudan a definir un contexto ',
            ]),
        new Item('calidad',
            [
                '- Es una propiedad medible del sistema que indica si el sistema satisface una caracteristica en especifico ',
                '- Dependiendo de la complejidad, un sistema puede cumplir una o varias de las siguentes caracteristicas ',
                '  - Compatibilidad -> capacidad de los sistemas para intercambiar información ó compartir software/hardware ',
                '    - subcaracteristicas -> interoperabilidad, coexistencia ',
                '  - Usabilidad -> capacidad del producto para ser entendido, que sea usado y que sea atractivo ',
                '    - subcaracteristicas -> idoneidad, aprendizaje, manejo de errores, accesiblidad, estetica ',
                '  - Confiabilidad -> capacidad para cumplir con las funciones especificadas en un ambiente predispuesto ',
                '    - subcaracteristicas -> madurez, disponibilidad, tolerancia a fallos, recuperación ',
                '  - Eficiencia -> desempeño del sistema y cuanto recursos consume ',
                '    - subcaracteristicas -> comportamiento temporal, recursos usados, capacidad ',
                '  - Seguridad -> protección de los datos, ya sea de intromisiones externas o internas ',
                '    - subcaracteristicas -> confidencialidad, integridad, responsabilidad, autenticidad ',
                '  - Portabilidad -> capacidad para ser trasladado de un ambiente a otro, ya sea hardware o software ',
                '    - subcaracteristicas -> adaptabilidad, instalación, sustitución ',
                '  - Mantenibilidad -> capacidad de que pueda cambiar a traves del tiempo ',
                '    - subcaracteristicas -> modularidad, reusabilidad, analisable, modificable, testeable ',
            ]),
        new Item('tradeoff',
            [
                '- Que un software cumpla con lo que se necesitaba no significa que sea agradable o facil de usar',
                '- Un producto excelente no se limita a hacer lo que tiene que hacer, es aquel que da un poco más al usuario ',
                '- Existe una gran cantidad de atributos que todo software de "calidad" puede cumplir, no todos son necesarios, ',
                ' - pero si es importante saber cuales son los más necesitados ',
                '-Esto tambien depende de cuales atributos son necesariamente criticos, y cuales son ideales, por lo que se requiere, ',
                ' - un analisis previo para realizar un buen diseño y asi sopesar los pro y los contra ',
                '- Tambien se ha de tener en cuenta que hay requsitos que siempre estaran se afectaran de manera negativa entre si, ',
                ' - por lo que no se podran escoger ambos, si se quiren cumplir ambos de manera idonea ',
                '',
                '-El siguiente recuadro nos enseña un pequeño resumen de los principales atributos de calidad de cualquier sistema ',
                ' - Por cada fila existen 2 posibilidades: ',
                '  (+) -> afecta positivamente el atributo de esa columna ',
                '  (-) -> afecta negativamente el atributo de esa columna ',
                '',
                'Disponibilidad-> +confiabilidad  +robustez',
                'Eficiencia    -> +disponible  -interoperable  -modificable    +rendimiento   -portable      -robustez     +escalable   -usabilidad   ',
                'Instalabilidad-> +disponible  +fiabilidad                                                                                            ',
                '',
                'Integridad    -> -instalable  -interoperable  -rendimiento    -reusabilidad  +seguridad     -usabilidad   -verificable               ',
                'Interoperable -> +disponible  -instalable     -integridad     -rendimiento   +portable      +fiabilidad   +robustez    -seguridad    ',
                'Modificable   -> +disponible  -instalable     -rendimiento    +fiabilidad    +reutilizable  +escalable    +verificable               ',
                '',
                'Rendimiento   -> +eficiencia  -interoperable  -modificable    -portable      -robusto       -escalable    -usabilidad                ',
                'Portabilidad  -> -eficiencia  +interoperable  -modificable    -rendimiento   +reusabilidad  -seguridad    -usabilidad  -verificable  ',
                'Fiabilidad    -> +disponible  -eficiencia     +integridad     +modificable   -rendimiento   +robustez     +seguridad   +usable      +verificable       ',
                '',
                'Reusabilidad  -> -eficiencia  -integridad     +interoperable  +modificable   -rendimiento   +portable     +verificable               ',
                'Robustez      -> +disponible  -eficiencia     +instalable     +integridad    +interoperable -rendimiento  +fiabilidad  +seguridad   +escalable +usable ',
                'Seguridad     -> +integridad  -rendimiento    +robustez       -usabilidad    -verificable                                            ',
                '',
                'Escalabilidad -> +disponible  +eficiencia     +integridad     +rendimiento   +portable      +fiabilidad   +robustez                  ',
                'Usabilidad    -> -eficiencia  +instalable     -rendimiento    -portable      +fiabilidad    +robustez     -verificable               ',
                'verificable   -> +disponible  +instalable     +integridad     +modificable   +fiabilidad    +reusable     +robustez    +seguridad   +usabilidad        ',
                '',
                '(nota) el atributo de seguridad se puede entender de 2 maneras, por lo que en este caso solo se considera que cumplen aquellos que,   ',
                '  afecten negativamente o positivamente a ambos; la seguridad de los datos y el acceso a estos ',
            ])
    ];

export const SEGURIDAD =
    [
        new Item('firewall',
            [
                '- Tiene la función de denegar ó permitir el acceso a nuestra red privada',
                '- El trafico debe cumplir con una serie de reglas previamente definidas para su libre circulación ',
                '- Se puede implementar por medio de Hardware, Software, ó ambos ',
                '- Estas son algunas de sus funciones: ',
                '',
                ' - Bloquear accesos no permitidos',
                ' - Evitar accesos no autorizados, estando dentro de la red privada ',
                ' - Supervisar el trafico interno ',
                ' - Posibilidad de bloquear aplicaciones peligrosas ',
                ' - Advertir de posibles accesos malintencionados ',
            ]),
        new Item('protocolos',
            [
                '- SSL -> capa de sockets seguros ',
                ' - Es una tecnologia para mantener segura una conexión de internet ',
                ' - Esto protege toda la información privada que se envia entre 2 sistemas, (cliente-servidor)',
                '',
                '- TSL -> una versión más actual y segura de SSL ',
                ' - La principal difirencia es el algoritmo de cifrado ',
                '',
                '- HTTPS -> Hyper Text Transfer Protocol Secure o protocolo seguro de transferencia de hipertexto ',
                ' - Basicamente indica si una conexion es segura, por medio de un certificado de TSL ó SSL ',
            ]),
        new Item('proxy',
            [
                '- Son un puente entre el origen y el destino de una petición ',
                ' - Pueden servir para controlar el acceso, segun los usuarios que intenten acceder ',
                ' - Filtrar el contenido segun las politicas de la empresa ',
                ' - Almacenar en cache el contenido de las paginas que hayan sido accesadas previamente ',
                '',
                '- Pueden ser inversos, conviertiendose en un puente entre el destino y el origen ',
                ' - Los proxies inversos pueden ser usados como balanceadores de carga ',
            ]),
        new Item('estatico',
            [
                '- El analisis de codigo estatico permite corregir vulnerabilidades, errores y bugs, ',
                '  - que no se encuentran a simple vista, pero pueden conllevar a problemas en el futuro ',
                '',
                ' - PROS',
                '  - Tambien ayuda a la reducción de la deuda tecnica y detectar code smells ',
                '  - Fomenta el uso de buenas practicas y la mejora continua ',
                '',
                ' - CONTRAS ',
                '  - Se debe hacer con herramientas especializadas, y consume tiempo de desarrollo ',
                '  - No hay estandares concretos, cada lenguaje tiene especificaciones diferentes entre si ',
                '',
                ' - Algunas tecnicas de analisis ',
                '  - Analisis grep -> analiza el codigo con expresiones regulares para encontrar: ',
                '    - Contraseñas expuestas, metodos mal nombrados, variables incompresibles, etc... ',
                '  - Identación -> cerrar y abrir llaves correctamente, evitando problemas al ejecutar ',
                '  - SataFlow -> se analiza desde un punto de partida hasta un punto final ',
                '  - AliasAnalisis -> analiza los punteros, para los lenguajes que funcionan con estos ',
                '',
                ' - Posibles defectos ',
                '  - Bugs -> es cuando un programa difiere de lo que debe hacer, esto es más subjetivo que objetivo,  ',
                '    - por lo que son errores que son más faciles de encontrar por humanos ',
                '  - Violación -> son errores de codificación entre lo que se pueda considerar "ideal", ',
                '    - en el marco del lenguaje y lo realizado por el programador ',
                '  - Vulnerabilidad -> son comportamientos errores que a la larga pueden llevar a posibles problemas, ',
                '    - de rendimiento ó de seguridad, más no son son considerados problemas graves ',
            ]),
        new Item('ciberSeguridad',
            [
                '- Es la practica de defender toda la infraestructura fisica y logica necesaria para nuestra negocio ',
                '- Aplica desde diferentes ramas de negocios, hasta los dispositivos moviles ',
                '',
                '- Categorias comunes',
                ' - De red: Consiste en proteger una red informatica de ataques dirigidos o malware oportunista ',
                ' - De aplicaciones: Se enfoca en mantener el software libres de amenazas o vulnerabilidades ',
                ' - De la información: Protege la integridad y la privacidad de los datos ',
                ' - Operativa: Incluye los procesos y decisiones de que recursos son accesibles y a quienes ',
                ' - Recuperación ante desastres: Ya sea un evento natural o un incidente de ciberseguridad, ',
                '  - la empresa ha de tener planes de recuperación, para garantizar la continuidad del negocio ',
                ' - Usuarios: El eslabon más debil de la cadena casi siempre han de ser los usuarios, ',
                '  - estos son impredecibles y pueden ser atacados de diversas maneras ',
                '',
                '- Tipos de ciberamenazas',
                ' - Delito cibernetico: incluye agentes individuales o grupos que atacan sistemas para, ',
                '  - obtener beneficios financieros o causar interrupciones en sistemas criticos ',
                ' - Ciberataques: recopilan información para exponer y dañar organizaciones ',
                ' - Ciberterrorismo: debilitar o destruir sistemas electronicos para causar panico o terror ',
                '',
                '- Metodos usados',
                ' - Malware: software malicioso creado para interrumpir o dañar los equipos de los usuarios, ',
                '  - suelen ser propagados mediante archivos infectados, ya sean descargas o correos electronicos ',
                ' - Virus: programa capaz de reproducirse y extenderse por todo un sistema ',
                ' - Troyanos: es un malware que se disfraza de software legitimo para recopilar datos de los usuarios ',
                ' - Spyware: registra todas las operaciones de los usuarios para robar información personal y sensible ',
                ' - Ransomware: bloquea los archivos y datos del usuario hasta que no se pague un rescate ',
                ' - Adware: software publicitario que puede difundir malware ',
                ' - Botnets: redes de equipos infectadas y que son usadas por los cibercriminales sin autorizacion previa ',
                '',
                '- Ataques',
                ' - Inyección de SQL: se puede usar para robar datos o tomar el control de bases de datos, ',
                '  - por medio de comandos maliciosos especificos que la base de datos ejecutara ',
                ' - Phishing: Son correos electronicos que aparentan ser legitimos, ',
                '  - pero solo buscan robar información personal, entregada por el mismo usuario ',
                ' - Man-in-the-middle: es la interceptación de comunicaciones entre 2 dispositivos, ',
                '  - por ejemplo una red publica y un dispositivo conectado a esta ',
                ' - Ataque de denegación de servicio(DoS): ',
                '  - se impide que un sistema pueda satisfacer a sus usuarios al sobrecargar e inutilizar ',
                '  - los servidores mediante inmensas cantidades de trafico ',
                '',
                '- Protecciones',
                ' - Mantenga actualizado su sistema operativo ',
                ' - Use software antivirus de su preferencia ',
                ' - Utilizar contraseñas seguras y cambiarlas con periocidad ',
                ' - No abrir archivos adjuntos de fuentes desconocidas ',
                ' - No hacer clic en los vinculos de remitentes desconocidos ',
                ' - Evitar el uso de redes wifi publicas',
            ]),
        new Item('cia',
            [
                '- Esta triada es tan fundamental para la seguridad, a tal punto que cada filtración de datos que se produce, ',
                ' - significa la violación de alguno de estos principios ',
                '- Los profesionales y las organizaciones evaluan las amenazas y vulnerabilidades basandose en el impacto, ',
                ' - que pueda causar en alguna de estas caracteristicas, para implementar planes y soluciones que minimicen el riesgo ',
                '',
                '- Confidencialidad -> esfuerzo que emplean las organizaciones para mantener sus datos privados, o en su defecto restringidos ',
                ' - una de las maneras para lograr esto es controlar el acceso a las personas ',
                ' - realizar capacitaciones para dar a entender la importancia de los datos ',
                ' - encriptación y/o autenticación para acceder a estos ',
                '',
                '- Integridad -> hace referencia a la garantia de que los datos no hayan sido manipulados ni alterados ',
                ' - encriptación de los datos por medio de funciones hash ',
                ' - firmas digitales y certificados digitales de autoria ',
                ' - control de versiones y control de acceso ',
                '',
                '- Accesibilidad -> los datos no tienen valor si no se pueden usar o consultar cuando sean necesarios ',
                ' - para garantizar el acceso a estos se puede tener servidores en redundancia ',
                ' - parches y actualizaciones regulares al software ',
                '',
                '- No todas las organizaciones necesitan las mismas caracteristicas, pero si todas deben cumplir las 3 en cierto grado ',
                '- Darle prioridad a alguna sobre las otras no significa su descuido, ',
                ' - solo es una elección consciente sobre cual es las más importante para el negocio ',
            ]),
        new Item('noRepudio',
            [
                '- Es un principio fundamental en lo que concierne a la seguridad informatica ',
                '- Garantiza que todo mensaje haya sido originado por el emisor y que este no haya sido suplantado ',
                '- Igual que todo mensaje debe ser recibido por el receptor, y por nadie más ',
                '- Es la capacidad para demostrar la paticipación de todas las partes involucradas ',
                '',
                '- Para garantizar esto, se pueden seguir 2 mecanismos basicos para este fin: ',
                ' - Identificación -> proceso o mecanimos para identificar a un usuario ',
                ' - Autenticación -> permite verificar la identidad del usuario y su acceso al sistema ',
                '',
                '- Tipos de repudio: ',
                ' - En origen -> el remitente no puede negar haberlo enviado ya que hay evidencia por parte del destinatario de haberlo enviado ',
                ' - En destino -> se avala que se recibio el mensaje y no se podra rebatir ya que el remitente tiene evidencia de haberlo recibido ',
                '',
                '- Firmas electronicas ',
                '- Es una manera de afirmar que cada persona es unica y que tiene una manera de identificarse, ',
                ' - esta solo debe ser conocida por la persona y su organización, tanto la clave publica como la privada ',
                '',
                '- Esto se puede dar de diversas maneras: ',
                ' - Simple -> solo se rechaza o acepta el contenido del documento ',
                ' - Avanzada OTP -> se recibe un codigo mediante un canal diferente al usado, con un codigo para ser verificado ',
                ' - Biometria -> es necesario una firma fisica o una identificación tangible de que es quien se dice ser ',
                ' - Certificado digital -> documento cifrado mediante un algoritmo hash que cuenta con una llave publica y una privada ',
                '  - este hash puede ser cifrado y descifrado por ambas partes y debe ser igual para ambos, garantizando la integridad del mensaje ',
                '  - previo a esta operación ambas partes deben haber compartido una clave publica y cada quien tener su clave privada ',
            ]),
        new Item('matrizDeRiesgo',
            [
                '- Permite identificar de manera rapida y visual las probabilidades de accidentes, riesgos y peligros ',
                '- Esto ayuda al proceso de tomas de decisiones y saber si estan controlados, si no, saber cuales se deben priorizar ',
                '',
                '- Probabilidad: ',
                ' - Alta -> [50% , 100%] posibilidades de que ocurra a menudo en circunstancias similares ',
                ' - Media -> [10% , 50%) no pasa con frecuencia ',
                ' - Baja -> [1% , 10%) podria suceder, dandose el caso ',
                '- Impacto: ',
                ' - Grave -> consecuencias negativas en una o varias areas, impidiendo su funcionamiento o generando fallos ',
                ' - Moderado -> podria crear problemas que tengan consecuenias negativas para ciertos procesos o personas ',
                ' - Leve -> si se llegara a dar su impacto seria bajo en la organización ',
                '',
                '    P\I    Grave    Moderado  Leve ',
                '    Alta   Critico                 ',
                '    media           Moderado       ',
                '    Bajo                      Leve ',
            ]),
        new Item('condicionDeCarrera',
            [
                '- Sucede cuando varios subprocesos intentan acceder a un recurso compartido, de manera simultanea ',
                '- Esto es indeseable ya que puede alterar los datos, o dañar la secuencia de las operaciones provocando errores ',
                '- A nivel de codigo pueden suceder algunos de los siguientes escenearios',
                '  - Bloqueo del ordenador',
                '  - Operaciones ilegales ',
                '  - Apagado del programa ',
                '  - Errores al leer o escribir datos ',
                '',
                '- Estos errores se pueden solventar al manejar los hilos y subprocesos de manera correcta, ',
                '  - más no se pueden eliminar totalmente, debido a la naturaleza multihilos y procesos de la informatica ',
            ]),
        new Item('honeypot',
            [
                '- Son una forma de defensa para vectores de ataque, phishing, exploits y malware, funcionando como un sebo para los atacantes, ',
                ' - resguardando la información valiosa, al desviar el trafico de los atacantes hacia esfuerzos inutiles ',
                '- No son una medida infalible ya que si el atacante se da cuenta lo evitara, ',
                ' - por lo que se deben tener más medidas de seguridad internas, externas y perimetrales ',
                '- Tambien es necesario tener en cuenta que pueden ser un arma de doble filo al servir como distracción para un ataque, ',
                ' - o como punto de acceso hacia nuestro sistema; aun asi siguen siendo una gran opción para reforzar nuestra seguridad ',
            ]),
        new Item('zeroDayExploit',
            [
                '- Son vulnerabilidades de software recien descubiertas sin medidas para solucionarlas ',
                '- Estos ataques suceden antes o recien sean descubiertas las vulnerabilidades por lo que se han tenido "cero dias" para arreglarlo ',
                '- Debido a que no se tienen registros de estos problemas, es comun que los ataques tengan exito hasta que el sistema sea parchado ',
                '',
                '- Esta tactica es usada generalmente por: ',
                ' - Hacktivistas -> quienes visibilizan los ataques para llamar la atención por una causa ',
                ' - Cibercriminales -> hackers cuyo objetivo es tener ganancias o destruir sistemas ',
                ' - Espionaje corporativo -> hackers de empresas atacando a la competencia ',
                ' - Guerra informatica -> paises o entidades politicas que atacan la infraestructura cibernetica de otro pais ',
                '',
                '- Blancos comunes: ',
                ' - Sistemas operativos',
                ' - Navegadores web',
                ' - Aplicaciones de oficina',
                ' - Codigo abierto ',
                ' - Hardware, firmware e Internet de las cosas (IoT)',
                '',
                '- Identificar ataques del dia 0: ',
                ' - Debido a su mutabilidad y a su desconocimiento no hay medidas infalibles para detectarlos',
                ' - Se recomienda usar bases de datos de malware existentes ya que estas se actualizan con relativa rapidez ',
                ' - Puede ser util examinar la interacción de los archivos entrantes con el sistema en vez de su codigo, ',
                '  - y asi detectar si su comportamiento es malicioso ',
                ' - Aprendizaje automatico basandose en datos y situaciones previas del sistema ',
                '',
                '- Formas de protección: ',
                ' - Actualizaciones constantes del software y de los sistemas operativos ',
                ' - Evitar usar aplicaciones de terceros que no sean necesarias ',
                ' - Educación basica para los usuarios y asi evitar errores comunes ',
                ' - Usar software antivirus ',
            ])
    ];

export const SMELLS_CODES =
    [
        new Item('codesmells',
            [
                '- Son cosas en el codigo que se pueden hacer de una mejor manera, o que a la larga se convertiran en malas practicas ',
                '- Aunque no son un problema prioritario, estos haran crecer la deuda tecnica e inclusive podran crear fallos en el futuro ',
                '- Que el codigo funcione no significa que sea tecnicamente correcto ',
                '- No todos los smells codes son malos, hay casos donde se pueden ignorar debido al efecto cobra ',
            ]),
        new Item('tiposSmellCodes',
            [
                '- Bloaters -> metodos y clases que han incrementado su tamaño a proporciones gigantezcas ',
                ' - estos se suelen dar por descuidos y más cuando nadie se ocupa de esto hasta que son un problema ',
                '',
                '- Object-Orientation Abusers -> este se da cuando los principios de POO son mal aplicados ó se cumplen a medias ',
                '',
                '- Changue Preventers -> sucede cuando se realiza un cambio y este requiere más modificaciones de las pensadas ',
                ' - resultando más complejo y costoso de lo necesario ',
                '',
                '- Dispensables -> se puede considerar cualquier cosa que no sea necesaria, y que pueda ser cambiada o removida ',
                ' - haciendo un codigo más limpio y facil de entender ',
                '',
                '- Couplers -> surgen de un acoplamiento excesivo entre los componentes, o en su defecto por una delegación excesiva ',
            ]),
        new Item('desglose',
            [
                '- Bloaters ',
                ' - Long Method -> es aquel metodo que contiene demasiadas lineas, tantas que es dificil seguir el proceso que realiza ',
                ' - Large Class -> aquella clase que contiene demasiados metodos, atributos ó lineas de codigo ',
                ' - Primitive Obsession -> se da cuando todos los datos se quieren manejar con tipos primitivos, en vez de clases especializadas ',
                ' - Long Parameter List -> sucede cuando un metodo recibe demasiados parametros, generalmente empieza con más de 4 ',
                ' - Data Clumps -> pasa cuando diferentes parte del codigo tienen grupos identicos de variables, que se pueden agrupar en una sola clase ',
                '',
                '- Object-Orientation Abusers ',
                ' - Switch Statements -> sucede cuando se tiene un switch o una secuencia de if demasiado grandes, en vez de usar polimorfismo ',
                ' - Temporary Field -> son valores que son usados en circunstancias especificas, y de resto son instancias vacias ',
                ' - Refused Bequest -> sucede cuando la herencia se aplica mal y las clases hijas heredan metodos o atributos que no van a usar ',
                ' - Alternative classes -> clases con funciones identicas, pero metodos diferentes ',
                '',
                '- Changue preventers ',
                ' - Divergent Change -> sucede cuando una clase requiere demasiados cambios, sean grandes o pequeños ',
                ' - Shotgun Surgery -> surge cuando una modificacón requiere hacer muchos cambios individuales, en diferentes lugares ',
                ' - Parallel Inheritance Hierarchies -> siempre que se necesite una subclase cuando se cree una clase, y se aplique para otras clases ',
                '',
                '- Dispensables ',
                ' - Comments -> los comentarios surgen de metodos y clases mal nombrados o con complejidad arbitraria ',
                ' - Duplicate Code -> fragmentos de codigo que son casi identicos y no estan centralizados ',
                ' - Lazy Class -> es el costo de mantener clases que no tienen utilidad, solo porque pueden o tuvieron utilidad ',
                ' - Data Class -> clases que solo contienen metodos para acceder a las propiedades, sin algun otro comportamiento util ',
                ' - Dead Code -> cualquier cosa que no se usa más, generalmente se vuelven obsoletos ',
                ' - Speculative Generality -> es codigo realizado para soportar futuras funcionalidades, que no tiene uso actual alguno ',
                '',
                '- Couplers ',
                ' - Feature Envy -> metodos y clases que usan los atributos y propiedades de otros, más que los propios ',
                ' - Intimidad inapropiada -> clases que usan atributos y metodos que no son propios como si lo fueran ',
                ' - Message Chains -> sucede cuando el codigo tiene una gran pila de llamados ',
                ' - Middle Man -> la delegación de responsabilidades es importante, más no debe ser la unica responsabilidad de una clase ',
            ]),
        new Item('casos',
            [
                '- Algunos Smells codes se pueden ignorar, debido a que su solución conlleva a problemas peores, o simplemente es demasiado esfuerzo ',
                ' - Si el rendimiento es esencial para la aplicación, algunas soluciones pueden aumentar el tiempo de ejecución y empeorarlo ',
                ' - Si la solución conlleva a un acoplamiento indeseado entre varias clases ',
                ' - Cuando el smells code tiene un alcanze muy pequeño y su cambio puede afectar el comportamiento general del sistema ',
                ' - Hace parte de la implementación de un patron ',
                ' - Puede incluir mayor complejidad de la que habia anteriormente ',
                ' - Cuando hay motivos validos e importantes para mantenerlos ',
                ' - Si el desarrollo va a ser corto plazo y se delinio una linea a seguir ',
                ' - El uso de ciertos frameworks puede traer condiciones de uso ',
                ' - Cuando la solución de un smell code crea otro ',
            ]),
        new Item('payoff',
            [
                '- Generalmente la solución de estos problemas siempre tiene consecuencias positivas sobre la calidad del software ',
                ' - Simplifica clases y mejora la asignación de responsabilidades ',
                ' - El codigo suele ser más flexible y facil de modificar ',
                ' - La duplicación de codigo se reduce, mejorando la mantenibilidad ',
                ' - La legibilidad aumenta, haciendo que futuros cambios sean más rapidos ',
                ' - Mejora la organización y la abstracción ',
                ' - Reduce el tamaño del codigo ',
            ])
    ];

export const UML =
    [
        new Item('uml',
            [
                '- Desarrollado para ayudar a todos los involucrados en el desarrollo y modelado de un sistema ',
                '- Pueden servir como planos para la codificación ó como documentación despues de la etapa de desarrollo ',
                '- El nivel de detalle que puede llegar a ser superficial ó increiblemente complejo ',
                '- Es un lenguaje independiente de la plataforma de desarrollo, por lo cual depende de la capacidad de abstracción ',
            ]),
        new Item('clase',
            [
                ' - Esta orientado al modelo y se basa especialmente en la programación orientada a objetos ',
                ' - Representan las interacciones y las clases que conforman el sistema ',
                ' - Se pueden diagramar los modificadores de acceso, la multiplicidad, los atributos, relaciones, etc.. ',
            ]),
        new Item('componentes',
            [
                ' - Pueden representar la agrupación de modulos que componen cualquier función de la aplicación ',
                ' - Se centra en la relación entre las partes a alto nivel, más que en los detalles de la implementación ',
                ' - Tambien se puede mezclar con el diagrama de paquetes ',
                ' - Las interfaces muestran como componentes separados se comunican entre si, por medio de un protocolo en comun ',
                ' - Cuando un componente necesita de otro, se considera que hay una relación de dependencia ',
            ]),
        new Item('despliegue',
            [
                ' - Permite identificar los nodos que usara el sistema una vez sea funcional, externos e internos ',
                ' - Expone de manera clara la arquitectura fisica de la red, dando una idea global del sistema ',
                ' - Las interfaces cobran especial relevancia en este, ya que indican como se comunican los componentes ',
            ]),
        new Item('secuencia',
            [
                ' - Representa el intercambio de mensajes entre los diferentes componentes del sistema para lograr una funcionalidad ',
                ' - El tiempo es importante ya que un mensaje debe terminar para que otro empieze (generalmente) ',
                ' - Los objetos que interactuan puede ser simple clases, hasta modulos y sistemas completos ',
            ]),
        new Item('actividades',
            [
                ' - Representa el flujo de control que se puede llegar a dar, con enfasis en la secuencia y las condiciones del flujo ',
                ' - Por lo general tienen un punto inicial y final ',
                ' - Modelan un flujo de trabajo sin dar mucho enfasis a la peculiaridad de cada subsistema ',
                ' - Estos diagrama se pueden encandenar entre si para crear secuencias más complejas ',
            ]),
        new Item('paquetes',
            [
                ' - Representa la estructura basica de los componentes del sistema ',
                ' - Paquete -> conjunto de elementos concretos que contienen una función especifica ',
                ' - Pueden representar la dependencia de paquetes entre si ',
            ]),
        new Item('estados',
            [
                ' - Representa el fluir de una situación a otra del sistema ',
                ' - Pueden tener condiciones externas, o simplemente ser inherente al sistema ',
                ' - Se conforma por el estado inicial, los estados del sistema, los estados finales (uno ó varios) ',
                '  - y las transiciones de un estado a otro ',
            ]),
        new Item('usos',
            [
                ' - Representan los requisitos funcionales de manera grafica ',
                ' - Especifica que actores y como pueden involucrarse con el sistema ',
                ' - Pueden ser un punto de partida para desarrollar los sistemas, aunque demasiada complejidad es contraproducente ',
                ' - La comunicación entre el cliente y el desarrollador puede ser más eficiente, más no es garantia de esto ',
            ]),
        new Item('vista',
            [
                '- Modelo diseñado para describir la arquitecturas de los sistemas basados en distintas vistas concurrentes ',
                '',
                '  - Vista Logica -> describe la estructura y la funcionalidad del sistema  ',
                '  - Vista Logica -> se pueden usar diagramas de clase, comunicacion, secuencia  ',
                '',
                '  - Vista Desarrollo -> esta enfocada a la administración del software y sus componentes, generalmente desde la perspectiva del desarrollador ',
                '  - Vista Desarrollo -> se pueden usar diagramas de componentes, paquetes ',
                '',
                '  - Vista Proceso -> trata los aspectos dinamicos del sistema, como se comunican los componentes entre si y su comportamiento ya en ejecución ',
                '  - Vista Proceso -> se puede usar el diagrama de actividad ',
                '',
                '  - Vista Fisica -> trata los aspectos que son tangibles del sistema, como la infraestructura, las redes, y como estan desplegadas en la realidad ',
                '  - Vista Fisica -> se puede usar el diagrama de despliegue ',
                '',
                '  - Escenarios -> estos describen la secuencia de interacciones entre objetos y procesos ',
                '  - Escenarios -> generalmente son los casos de uso, aun se usan pero han perdido relevancia frente al agilismo y las HU ',
                '',
                '|     Vistas|   Escenarios    Diseño    Procesos    Implementación    Despliegue        ',
                '|  Diagramas|                                                                           ',
                '',
                '      Clases                    X          X                                            ',
                '     Objetos                    X          X                                     estruc ',
                ' Componentes                                              X                      turales',
                '  Despliegue                                                              X             ',
                '',
                'Casos de Uso        X                                                                   ',
                '   Secuencia                    X                                         X      Compor ',
                'Colaboración                    X                                         X      tamen  ',
                '     Estados        X           X          X                              X      tales  ',
                '   Actividad        X           X          X                              X             ',
            ])
    ];

export const VERSIONAMIENTO =
    [
        new Item('git',
            [
                '- El control de versiones ayuda a mantener una trazabilidad de todos los cambios en una aplicación ',
                '- El más conocido es GIT pero tambien existen otros como Mercurial',
                '- GIT puede ser usado en repositorios locales o distribuidos en la nube, permitiendo la colaboración entre desarrolladores ',
                '- Permite crear ramificaciones para trabajar de manera aislada sin afectar a todo el flujo en general',
                '- Tambien se pueden crear etiquetas para marcar commits y que sean más faciles de encontrar',
            ]),
        new Item('dependencias',
            [
                '- Los gestores de dependencias son ampliamente usados ya que evitan dolores de cabeza al manejar codigo de terceros o externos ',
                '- Son herramientas, plugins, librerias, frameworks, necesarios para desarrollar aplicaciones de gran envergadura ',
                '',
                ' - NPM   -> nacido sobre NodeJs se ha convertido en uno de los principales y más grandes repositorios de dependencias y modulos ',
                ' - Bower -> hecho con NPM tiene menos funcionalidades, pero su apuesta principal es la ligereza y la optimización ',
                ' - JAM   -> es un gestor de paquetes que funciona directamente en el navegador, por lo que mantener y actualizar es más sencillo ',
                ' - Composer -> Similar a NPM pero para las librerias de PHP, incluso algunos frameworks como laravel lo manejan por defecto ',
            ]),
        new Item('gradlevsmaven',
            [
                '- Maven -> es una forma de manejar proyectos en entornos JAVA ',
                ' - La configuración se base en un archivo XML ',
                ' - Maneja los jars necesarios para la ejecución del programa, ya sea de manera fisica o descargalos de repositorios ',
                ' - Gestiona las dependencias y las declaraciones que necesiten los jars para funcionar',
                '',
                '- Gradle -> esta basada en varios conceptos de Apache Maven por lo que tiene varias mejores frente a este ',
                ' - Se basa en un lenguaje DSL, siendo más mantenible en el tiempo ',
                ' - Tambien puede gestionar los ciclos de vida, igual que Maven ',
                ' - Su rendimiento es mayor en comparación directa con Maven ',
            ]),
        new Item('versionamiento',
            [
                '- Las versiones se pueden dar por numero o por estabilidad ',
                '- No existe una regla que indique que siempre se deben manejar asi, pero es util conocer las convenciones ',
                '',
                ' - Numeros ->  X.Y.Z',
                '  - El primero numero -> indica la version principal del software ',
                '  - El segundo numero -> indica nuevas funcionalidades en la version mayor ',
                '  - El tercero numero -> es la correción de fallas, parches de seguridad, cambios menores, etc... ',
                '',
                ' - Estabilidad -> &alpha;, &beta;, RC',
                '  - Alpha -> version inestable que probablemente contenga errores y deba ser corregida ',
                '  - Beta -> una version más estable que alpha y a la que se le deben hacer pruebas para verificarla ',
                '  - Release Candidate -> son los ultimos toques previos para poder ser lanzada oficialmente ',
            ]),
        new Item('licencias',
            [
                '- Software libre &ne; Software gratuito ',
                ' - Software libre -> puede ser usado como quiera el usuario, sin ninguna restricción ',
                ' - Software gratuito -> aunque este no requiera de un pago, el usuario esta limitado en su actuar ',
                '',
                '- Licencias GPL -> el desarrollador conserva los derechos de autor, pero permite su libre distribucion, modificacion y uso, ',
                ' - siempre y cuando la nueva version se cobije bajo el mismo tipo de licencia ',
                '- Licencia BSD -> es una licencia permisiva donde se puede vender sin dar acceso al codigo fuente ',
                '- Licencia Apache -> esta licencia permite la modificación y distribución del original en cualquier modalidad, ',
                ' - siempre y cuando se especifique el codigo fuente de terceros usado, presente en la distribución ',
                '',
                '- Licencias Creative Commons: ',
                ' - Atribucion -> se debe dar credito al autor para poder ser usada, expuesta, distribuida, etc... ',
                ' - No comercial -> su uso esta prohibido para fines comerciales ',
                ' - No derivadas -> la obra no puede ser modificada ',
                ' - Compartir igual -> las derivaciones solo se permiten manteniendo la licencia original y con permiso del autor ',
            ])
    ];

export const WEB =
    [
        new Item('spa',
            [
                '- Es una aplicación web donde todo el contenido se muestra en una sola sin regargar el navegador ',
                '- Los componentes son segmentos individuales de HTML que juntos dan la impresión de unidad ',
                '- Este tipo de paginas tambien maneja las url para cambiar entre vistas ',
                '- La transición entre las paginas es fluida y el rendimiento es mayor en general ',
                '- Los frameworks actuales trabajan de esta manera ',
            ]),
        new Item('pwa',
            [
                '- Estas aplicaciones nacen de paginas web normales para parecerse a aplicaciones nativas de telefonos moviles ',
                '  - NO se necesita descargar nada desde una tienda de aplicaciones, solo tener acceso a un navegador con internet ',
                '  - Aunque necesitan internet para actualizaciones de la información, tambien puede funcionar sin este ',
                '  - Bastante acorde con el enfoque mobile-first, que le da prioridad al movil que al escritorio ',
            ]),
        new Item('seo',
            [
                '- La indexación de contenido es una gran herramienta para buscar lo que se necesita ',
                '- El contenido de calidad es una de las mejores formas de aumentar el trafico del sitio web ',
                '- La accesibilidad al contenido y la experiencia del usuario tambien son importantes ',
                '- Saber como funcionan los motores de busqueda, permite optimizar el sitio para que sea más "visible" para estos ',
            ]),
        new Item('espacio',
            [
                '- Es el espacio que se encuentra alrededor del objeto en cuestión, bastante util para crear diseños simples pero atractivos ',
                '- El uso del espacio positivo y negativo puede dar pie a ilustraciones con mensajes directos pero sutiles ',
                '- Un gran artista sabe manejar estos conceptos, e imprimirles su toque unico, como en el articulo fuente se denota ',
            ]),
        new Item('diseno',
            [
                '- El diseño grafico es importante en la programación debido a que este sera la cara visible de tu producto ',
                '- Es importante contestar respuestas previamente como: ¿ cual es tu objetivo ? & ¿ cual es tu producto ? ',
                '- NO descuides el color, tener una paleta de colores es tener una identidad ',
                '- Además de la identidad es importante saberlos combinar y tener un buen contraste y legibilidad entre si ',
                '- El uso de las imagenes y las fuentes tipograficas son más importantes de lo que parecen ',
            ]),
        new Item('interfacesUsuario',
            [
                'Principios para el diseño de una UI',
                ' - Familiaridad con el usuario -> utilizar conceptos y la experiencia del usuario para que le sea más "facil" de usar ',
                ' - Consistencia -> las operaciones del mismo tipo deberian hacerse del mismo modo siempre ',
                ' - Minima sorpresa -> el comportamiento del sistema no debe provocar sorpresa en el usuario ',
                ' - Recuperabilidad -> los usuarios deben tener mecanismos para recuperase en caso de error ',
                '  -  para este apartado se pueden usar confirmaciones o recursos para deshacer opciones ',
                ' - Guia al usuario -> cuando un error ocurra, la interfaz debe ayudar al usuario a entenderlo ',
                '',
                'Prototipos de una UI',
                ' - Estaticos -> No permiten la alteración de sus componentes, pero si dan un bosquejo inicial ',
                ' - Dinamicos -> Estos diseños involucran un poco más de detalle tecnico, como especificaciones de rendimiento ',
                ' - Robustos -> Ya presentan caracteristicas dinamicas, como validación de errores y edición de datos ',
                '',
                'Interacción del usuario en la UI',
                ' - Manipulación directa -> interacción directa con los objetos de la pantalla ',
                ' - Selección de menus -> se limitan las opciones, a cambio de ser más lenta y menos propensa a errores ',
                ' - Formularios -> introducción de datos, por parte del usuario ',
                ' - Comandos -> los usuarios emiten comandos y sus parametros asociados para realizar acciones más complejas ',
                ' - Lenguaje -> usar un lenguaje natural que el usuario comprenda, lo hara accesible a más tipos de usuarios ',
                '',
                'Pautas de evaluación de una UI',
                ' - Semejanza con el mundo real ',
                ' - Consistencia y estandarización ',
                ' - Estetica y diseño minimalista ',
                ' - Reconocimiento, manejo y recuperración de errores ',
                ' - Flexibilidad, control y libertad para el usuario ',
                ' - Reconocimiento de acciones y ayudas ',
            ]),
        new Item('experienciasUsuario',
            [
                '- Es la percepción del usuario al interactuar con un producto ',
                '- Una buena UX se logra cuando el producto a la hora de usar el producto sea util y usable por el cliente ',
                '- La UX no es lo mismo que la usabilidad, ya que esta la contiene además de otras caracteristicas ',
                '- Este objetivo no se logra agregando funcionalidades, si no, estando en el lugar de un cliente ',
                '',
                '- Para esto es necesario tener en cuenta: ',
                ' - Necesidades del cliente ',
                ' - Objetivos del negocio ',
                ' - Limitaciones tecnicas ',
                '',
                '- Tambien es necesario realizar investigaciones tales como: ',
                ' - Investigacion de los grupos de mercado y entrevistas con stakeholders ',
                ' - Pruebas de usabilidad y analisis de datos ',
                ' - Manejo y estructuración de la información presente ',
                '',
                '- Además se deben tener habilidades blandas como: ',
                ' - Estudios en Psicologia, Sociologia o Antropologia ',
                ' - Conocimientos en Comunicación , Marketing, y experiencia en ventas ',
                ' - Diseño industrial o grafico, y conocimientos en tecnologias ',
            ]),
        new Item('logos',
            [
                '- Isotipo -> parte reconocible de una marca sin presencia de texto ',
                '- Isologo -> el texto y el icono son parte de un mismo conjunto, no funcionan por separado ',
                '- Logotipo -> texto que representa la marca y es la parte reconocible de esta ',
                '- Imagotipo -> combinación de imagen y texto, que tambien pueden separarse y ser efectiva ',
            ]),
        new Item('gestalt',
            [
                '- Es una manera de encontrar sentido en como nuestras mentes perciben las cosas ',
                ' - como un todo y no solo como los elementos que lo forman ',
                '- <em>El todo es mayor que la suma de sus partes </em>',
                '',
                '- Aparición -> surge cuando se percibe un objeto a partir de información previa que conozcamos ',
                '- Cosificación -> los objetos se pueden reconocer incluso cuando hace falta parte de ellos, ',
                ' - Nuestro cerebro hace coincidir lo que se ve con patrones familiares en nuestra memoria ',
                '- Multiestabilidad -> Se basa en que los objetos ambiguos pueden ser interpretados de diferentes maneras, ',
                ' - y que dado esto se puedan ver varias formas, sin tener certeza de la verdadera ',
                '- Invariabilidad -> los objetos simples pueden ser reconocidos independientemente de, ',
                ' - su escala, rotación, traslación o perspectiva ',
                '',
                '- Leyes de Gestalt aplicadas al diseño grafico ',
                '',
                '- Principio de semejanza -> si elementos que esten proximos entre si, y son similares ',
                ' - tenderemos a verlos como parte de un grupo, ya sea por color, tamaño o textura ',
                '- Principio de continuidad -> el ojo puede crear visualmente la continuidad de una linea, ya que el ojo ',
                ' - va a seguir el camino visual más suave, menos forzado y coherente ',
                '- Principio de cierre -> cuando una figura no esta cerrada o delimitada por lineas, nuestra mente ',
                ' - tiende a transmitir una sensación de cierre, rellenando las formas ',
                '- Principio de proximidad -> teoriza como tendemos a agrupar los elementos visuales proximos entre si ',
                ' - estos deben compartir alguna caracteristica en comun como forma, color, textura, tamaño ',
                '- Figura y fondo -> Usando el espacio negativo y la tendencia de ver un objeto separado de lo que lo rodea ',
                '- Principio de Simetria y Orden -> si los elementos cuentan con cierta simetria y orden ',
                ' - son percibidos como parte del mismo grupo ',
                '- Dirección comun -> los elementos que parecen contruir un patron o flujo continuo y en la misma dirección ',
                ' - son a su vez percibidos como parte de un grupo mayor ',
            ])
    ];
