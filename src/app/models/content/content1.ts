import { Item } from "../models";

export class Content1 {

    public temas: Item[] = [
        ...AGILES,
        ...ARQUITECTURAS,
        ...CALIDAD,
        ...META_CARACTERISTICAS,
        ...CONTENEDORES,
        ...FRAMEWORKS,
        ...HARDWARE,
        ...WEB,
        ...META_ESTRUCTURAS,
        ...PARADIGMAS,
        ...PERSONAS,
        ...OTROS,
        ...BASES_DE_DATOS,
        ...BASE_DE_DATOS_AVANZADO
    ];

}

export const AGILES =
    [
        new Item('moscow',
            [
                '- Es una tecnica para la priorización de requisitos y funciones para lograr un alcance especificado ',
                '',
                '- <strong>M</strong>ust Have   -> Debe tener:    Este requisito debe estar implementado si ó si, si no, el producto es un fracaso ',
                '- <strong>S</strong>hould have -> Deberia tener: Requisito de alta prioridad que en la medida de lo posible deberia quedar en el producto final ',
                '- <strong>C</strong>ould have  -> Podria tener:  Caracteristica deseable, pero que no es necesaria y solo sera implementada si hay posibilidades ',
                '- <strong>W</strong>on´t have  -> No tendra:     Son requisitos que estan descartados por esta vez, pero seran incluidos a futuro ',
            ]),
        new Item('scoring',
            [
                '- Permite determinar la prioridad de las funcionalidades, basandose en diferentes criterios, que a su vez ',
                ' - constan con diferentes pesos, cada caracteristica de la Historia de Usuario tendra un valor ',
                '- Determinar el peso de las caracteristicas es más facil ya que se hace en base a una comparación, ',
                ' - donde previamente se ha tomado una HU como punto base y las demás se miden con esta base ',
            ]),
        new Item('muda',
            [
                '- El desperdicio en las empresas viene del termino japones MUDA, que es todo lo inutil, superfluo, despilfarro, residuos, ocioso ',
                '',
                '<strong>- Sobreproducción:</strong> Producir más de lo demandado, esperando que el mercado lo necesite es una mala praxis, ',
                ' - que despilfarra recursos que pudieron ser usados en otras areas ',
                '<strong>- Esperas:</strong> Son los famosos cuellos de botella, donde un proceso alenta a los demás, haciendoles perder tiempo ',
                '<strong>- Transporte:</strong> Todo movimiento innecesario de elementos que no aporta valor debe ser minimizado ',
                '<strong>- SobreProcesos:</strong> Son procesos que aunque pueden ser utiles, no van a volver ser usados, por eso su realización es un desperdicio ',
                '<strong>- Exceso de inventario:</strong> Puede conllevar a perdidad monetarias a la empresa, debido a que se pueden volver obsoletos, o nunca usarse ',
                '<strong>- Movimientos innecesarios:</strong> Todo movimiento que no aporte valor al producto es un despedicio, hasta caminar al trabajo puede serlo ',
                '<strong>- Defectos:</strong> Todo error consume tiempo para ser resuelto, independientemente de su tamaño, además de la insatisfacción del cliente ',
            ]),
        new Item('5s',
            [
                '- Seiri, Seiton, Seiso, Seiketsu, Shitsu ke; la base de la mejora continua ',
                '',
                '<strong>- Seieri:</strong> Clasifica y organizar de manera apropiada, retirarando del area todo aquello que no es necesario ',
                '<strong>- Seiton:</strong> Orden, organizar los elementos necesarios de manera que sean de facil acceso ',
                '<strong>- Seiso:</strong> Limpieza, ya con un orden establecido y areas limpias, es más facil detectar malas practicas ',
                '<strong>- Seiketsu:</strong> Estandares, este estado solo se obtiene cuando la limpieza y la organización se mantienen constantes ',
                '<strong>- Shitsuke:</strong> Disciplina, es la creación de habitos que eviten el rompimiento de los conceptos anteriores ',
                '',
                '- ¿ Porque no la aplican algunas empresas ? ',
                '',
                '<strong>- La maquinaria no puede parar:</strong> Los cronogramas no dan tiempo de mantenimiento de la maquinaria ',
                '<strong>- La limpieza como perdida de tiempo:</strong> Algunos empleadores pagan para trabajar, no para limpiar su area de trabajo ',
                '<strong>- Costumbre:</strong> Crear nuevos habitos y cambiar los viejos es un cambio fuerte y prolongado de paradigma ',
                '',
                '- Beneficios ',
                ' - Mayor seguridad de los empleados ',
                ' - Reducción de las perdidas y mermas por defectos ',
                ' - Mayor calidad, y menos tiempo de respuesta ',
                ' - Genera una cultura organizacional ',
            ]),
        new Item('muda#1',
            [
                '<strong>- Trabajo hecho a medias:</strong> Desplegar sin probar y tener errores conocidos más no solucionados, ',
                '  - daran problemas a futuro, de manera que aveces es mejor un nuevo desarrollo que corregir lo existente ',
                '<strong>- Funcionalidad extra:</strong> Toda funcionalidad que no haya sido pedida significa, recursos gastados sin redito alguno ',
                '<strong>- Reaprendizaje:</strong> Nuestra memoria no es absoluta, por lo que inevitablemente olvidaremos cosas, ',
                '  - y gastaremos tiempo volviendolas a aprender, tambien aplica para personas expertas ',
                '  - que ya tienen el conocimiento, pero nos empeñamos por aprenderlo nosotros mismos, sumando tiempo al desperdicio ',
            ]),
        new Item('muda#2',
            [
                '<strong>- Transferencia de conocimiento:</strong> Todo proceso de comunicación es ineficiente ya que, ',
                '  - durante el proceso se suelen perder datos u omitir detalles importantes, y asi entre más niveles ',
                '  - haya que permear, de las mejores manera para evitar esto son la comunicación cara a cara ',
                '<strong>- Retrasos:</strong> Algunas funcionalidades requieren que sean lineales, por lo que si la etapa previa se retrasa, ',
                '  - las etapas subsiguientes tambien lo haran, por lo que estas situaciones deben ser evitadas lo más posible ',
                '<strong>- Cambios de contexto:</strong> Cuando tenemos varias cosas por hacer de manera inmediata, tendemos a ser multitarea, ',
                '  - esto no es más que un cambio de contexto que requiere tiempo y esfuerzo, y que entre más se hagan, más desperdicio habra ',
                '<strong>- Defectos:</strong> Uno de los más peligrosos, ya que entre más tarde se encuentre un error, más costoso sera corregirlo ',
                '  - estos errores se pueden disminuir por medio de las pruebas, e integración continua ',
            ]),
        new Item('planningPoker',
            [
                '- Las estimaciones son de mucha ayuda, para definir tiempo, costos y esfuerzos, en base a la información disponible ',
                '- Independientemente de la certeza, con que se hayan realizado, generalmente casi nunca se cumplen ',
                '- Ayuda a visualizar desde diferentes puntos de vista, esto es bastante util para analizar un problema ',
                '- Los riesgos pueden ser detectados de manera previa, además de prever posibles obstaculos ',
                '- Todo el equipo involucrado deberia estar presente en este evento, ya que todos pueden aportar desde sus areas ',
                '',
                '<strong>- Material necesario:</strong> ',
                '- Cada participante debe tener su propia baraja ',
                '- La baraja en si es una secuencia de Fibonacci modificada, junto a ciertas cartas especiales: ',
                ' - Infinito   -> Es una HU que es demasiado grande para ser estimada, por lo que debera ser dividida y reorganizada ',
                ' - Cero       -> Significa que la HU ya fue realizada ',
                ' - Coffee cup -> Puede significar una actividad de esfuerzo minimo o simplemente la necesidad de realizar una pausa ',
                '',
                '<strong>- Trabajo previo:</strong> ',
                ' - es necesario indicar que indica cada numero antes de realizar el ejercicio, (horas, dias, esfuerzo, etc...)',
                ' - indicar que incluye y que no la HU, documentación, tests unitarios, tests de integración ',
                '',
                '<strong>- Dinamica:</strong> ',
                ' - se especifica todo lo que se va a estimar y se hacen las preguntas y respuestas pertinentes ',
                ' - se leen la historia de usuario y se vota por medio de la baraja ',
                ' - si no hay consenso se abre una breve discusión y se vuelve a votar, ',
                '  - si no vuelve a haber concenso se podra realizar un promedio o escoger un extremo ',
                ' - se repite el proceso hasta completar todas las HU ',
            ]),
        new Item('manifestAgil',
            [
                '- Nace con el proposito de reformar el desarrollo de software para hacerlo más eficiente y eficaz ',
                '- Son 4 principios que toda metodologia agil lleva a cabo para mejorar el desarrollo ',
                '',
                ' - Individuos e interacciones <strong>SOBRE</strong> procesos y herramientas ',
                ' - Software funcionando <strong>SOBRE</strong> documentación extensiva ',
                ' - Colaboración con el cliente <strong>SOBRE</strong> negociación contractual ',
                ' - Respuesta ante el cambio <strong>SOBRE</strong> seguir un plan ',
            ]),
        new Item('principlesAgile',
            [
                ' 1 - La maxima prioridad es satisfacer al cliente mediante la entrega temprana y continua de software de valor ',
                ' 2 - Los requisitos cambiantes son bienvenidos, estos se aprovechan para la ventaja competitiva del cliente ',
                ' 3 - Entrege software funcional, con frecuencia y a en la menor escala posible ',
                ' 4 - El negocio y los desarrolladores deben trabajar juntos, constatemente durante el proyecto ',
                ' 5 - Construir proyectos en torno a personas motivadas, y confie en ellas para hacer el trabajo ',
                ' 6 - El metodo más eficiente para transmitir información, siempre sera una conversación cara a cara ',
                ' 7 - Software que funciona es la medida principal del progreso ',
                ' 8 - Los procesos agiles promueven el desarrollo sostenible, todas las partes involucradas deberian ser constantes ',
                ' 9 - Atención continua a la excelencia tecnica, un buen diseño y la mejora continua ',
                '10 - La simplicidad es el arte de maximizar el trabajo no realizado es esencial ',
                '11 - Las mejores arquitecturas, requisitos y diseños surgen de equipos colaborativos y autoorganizados ',
                '12 - Regularmente, el equipo reflexiona en como volverse más efectivo, luego sintoniza y ajusta su comportamiento ',
            ]),
        new Item('spike',
            [
                '- Es un termino que viene desde Xtreme Programing y que esta rodeado por la incertidumbre ',
                '- Este es un elemento del backlog del producto, que tiene bastante incertidumbre tecnica o funcional, ',
                ' - y por lo tanto no se puede planificar o estimar ',
                '',
                '- <strong>Spike tecnico: </strong> Son ocasiones donde no se conoce la tecnologia a usar o hace falta profundizar en ella, ',
                ' - buscar información o aprender de la documentación, con el fin de tomar deciones tecnicas ',
                '- <strong>Spike funcional: </strong> Hace falta conocer más sobre los requisitos y/o alcance, como que se va a incluir, ',
                ' - documentar escenarios, entrevistar a un experto del negocio, revision de codigo ',
            ]),
        new Item('deming',
            [
                '- Es un sistema que busca la optimización constante de las actividades empresariales, constando de 4 etapas ciclicas ',
                '- Tambien es conocido como ciclo PDCA por sus etapas <em>Plan, Do, Check, Act </em>',
                '',
                '<strong> Planificar </strong> 1 etapa, Donde se identifican los problemas, se crean objetivos para solucionarlos y se asignan deberes',
                '<strong> Hacer      </strong> 2 etapa, Se empiezan a trabajar en los cambios, de manera supervisada, para lograr lo planteado ',
                '<strong> Verificar  </strong> 3 etapa, Despues de un periodo de tiempo previamente definido se evaluan los resultados, ',
                ' - en base a los KPI seleccionados para cada objetivo, determinando la eficiencia y eficacia ',
                '<strong> Actuar     </strong> 4 etapa, Se toman decisiones en base a los aprendizajes obtenidos, ',
                ' - ya sea tomando acciones correctivas si hubo fallas, ó documentando e integrando nuevos cambios si los resultados fueron optimos ',
                '',
                '- Generalmente este ciclo es usado para mejorar la logistica de las empresas, pero tambien es aplicable a otras areas ',
                '',
                '<strong>- Ventajas </strong>',
                ' - Mejorar continua: Mejorando las areas debiles y manteniendo fuertes las ya existentes ',
                ' - Incremento de la productividad: Al reducir tiempos muertos, y procesos tardios ',
                ' - Ilimitado: Al ser un ciclico, puede ser aplicado cuantas veces sea necesario, e incluir otras areas tambien ',
                '',
                '<strong>- Desventajas </strong>',
                ' - Lentitud: La ejecución de las etapas debe ser metodica, y no es aplicable para situaciones a corto plazo, como emergencias ',
                ' - Suceptible a imprevistos: Su efectividad depende de que el ambiente sea favorable y sin contratiempos ',
            ]),
    ];

export const ARQUITECTURAS =
    [
        new Item('definicion',
            [
                ' - Representa la estructura que conforma al sistema completo ',
                ' - Define y limita cada una de Las responsabilidades de cada una de las partes ',
                ' - La organización y jerarquización de sus componentes ',
                ' - Las propiedades visibles externamente y las relaciones a nivel interno ',
                ' - Son independientes de las tecnologias, aunque su implementación pueda cambiar ligeramente entre una y otra ',
            ]),
        new Item('inicioArquitectura',
            [
                '- La arquitectura de software es importante ya que la estructura del proyecto tiene impacto directo sobre la capacidad de este ',
                '- Tambien afecta la satisfacción de atributos de calidad como el rendimiento y la mantenibilidad, además de otros ',
                '',
                '<strong>- Etapas:</strong> ',
                '<strong> - Requerimientos:</strong> Captura, documentación y priorización de requisitos funcionales y No funcionales ',
                '<strong> - Diseño:</strong> Compleja y muy importante, aca se definen las estructuras del proyecto , uso de patrones, ',
                '  - que tecnologias, con el fin de satisfacer de la mejor manera posible lo pactado en la etapa anterior ',
                '<strong> - Documentación:</strong> Antes y durante del desarrollo, es importante documentar el diseño del proyecto y el porque de las decisiones, ',
                '  - esto con el fin de acelerar el entendimiento del proyecto y/o realizar cambios de manera más efectiva ',
                '<strong> - Evaluación:</strong> Dado a su complejidad no esta mal visto revisar lo anteriormente hecho para encontrar posibles fallas y/o mejoras, ',
                '  - entre más temprano se encuentren los defectos, menos costo e implicaciones negativas tendra la solución ',
                '',
                '<strong>- Rol de arquitecto:</strong> ',
                '- Las actividades descritas anteriormente son responsabiliad de un arquitecto que además de todo esto debe: ',
                ' - Conocer un amplio espectro de tecnologias ',
                ' - Excelentes habilidades de comunicación, tanto a nivel tecnico como a nivel formal e informal ',
                ' - Tener experiencia previa en el desarrollo de sus funciones y manejo de las etapas',
            ]),
        new Item('conceptosArquitectura',
            [
                '- Esto puede ser ambiguo, y se puede referir a multiples cosas, tales como: ',
                ' - Detalles de la implementación: Estructura de las carpetas y localización de componentes ',
                ' - Diseño de la implementación:   Decisiciones como, Server side ó Client side rendering, BD SQL ó NoSQL, entre otras ',
                ' - Tecnologias:                   Rest ó GraphQl, Node con Express ó Java con Spring, y muchas más opciones ',
                ' - Diseño del sistema:            Monolito ó Micro servicios ',
                ' - Infraestructura:               Un host autoadministrado ó un Proveedeor en la nube ',
                '',
                '<strong>- Conceptos importantes, que hay que conocer previamente:</strong>',
                ' - Client Server render ',
                '  - Que es una API y algunos de sus tipos (REST, SOAP, GraphQl), Protocolo HTTP y sus formatos (Json, XML)',
                ' - Modularización de codigo ',
                '  - ¿ Esta bien dividida, de acuerdo a caracteristicas o comprensión ?, ¿ Que tan independientes, son las partes dividas ?',
                '',
                '<strong>- ¿ Como es su infraestructura ?</strong>',
                ' - Monolitos ó Microservicios: Con microservicios, uno de los grandes problemas sera, que la comunicación con las paginas web sera más complicada ',
                '  - Normalmente esto se puede resolver con una capa intermedia que sabe como y a cual micro servicio redireccionar cada petición ',
                ' - Balanceadores de carga: Cuando el trafico es demasiado, hay que crecer, y esto se puede hacer de manera vertical ó horizontal ',
                '  - Si hace horizontalmente (software), Es necesario que el trafico se reparta de manera equitativa, con ayuda de estos ',
                '',
                '<strong>- ¿ Donde vive su infraestructura ?</strong>',
                ' - Administración propia: Permitiendo un control total sobre sus servicios, pero requiere tiempo, dinero y mantenimiento ',
                ' - En la nube: ',
                '  - Tradicional: Se paga alguna configuración especifica, de acuerdo a las necesidades ',
                '  - Elastico: La capacidad del hardware crecera ó decrecera de acuerdo a la demanda, tambien puede ser vertical ó horizontalmente ',
                '  - Sin Servidor: Esta opción solo es usada bajo demanda, y solo se paga lo que se consuma, desapareciendo despues de su cometido ',
                '',
                '<strong>- Organización de las carpetas:</strong>',
                ' - Capas: Divide funciones y responsabilidades en carpetas relacionadas y restringe cuanto y quienes se conocen entre si ',
                ' - MVC:   Modelo-Vista-Controlador, funciona como otra perspectiva de las capas, además de que incluye una UI (interfaz de usuario) ',
                '',
                '- Por lo tanto, una arquitectura puede ser una de estas secciones ó una combinación, todo <strong>depende</strong> de que se necesite ',
                '- Para ahondar en estos y otros temas, visita la publicación original ó mediante otras secciones propias ',
            ]),
        new Item('principiosArquitecturas',
            [
                '- Cualquier programador con cierto recorrido conoce el nombre de Robert Martin o su libro acerca de Clean Code',
                '',
                '<strong>- Clean Code:</strong> Buenas practicas de programación como: ',
                ' - Codigo autocomentado ',
                ' - Testing unitario y de integración ',
                ' - Estructura comprensible ',
                ' - Implementanción de los principios SOLID y uso de patrones',
                '',
                '- Cohesion y Acoplamiento, a nivel de arquitectura',
                '',
                '- Cohesion: ',
                '<strong> - Principio de equivalencia al Lanzar/Reutilizar:</strong> Esto nos dice que los componentes debe ser desplegados ',
                '  - de manera independiente sin afectar a los demás ',
                '<strong> - Principio de cierre comun:</strong> Es la apliación de la S de SOLID a nivel de paquetes, donde se agrupan clases ',
                '  - que puedan cambiar por motivos en comun, todas en un mismo lugar ',
                '<strong> - Principio común de reutilización:</strong> Evitar la dependencia de componentes que no se necesiten ',
                '  - para que solo se use lo realmente necesario',
                '',
                '- Conseguir el cumplimiento de estos 3 principios al mismo tiempo es dificil, por lo que se suele, sacrificar alguno más que otro ',
                '',
                '- Acoplamiento: ',
                '<strong> - Principio de dependencias acíclicas:</strong> Cuando un cambio significa que se deben modificar más componentes, ',
                '  - y esto a su vez desencadena más cambios en el componente inicial, la estabilidad del sistema se ve comprometida ',
                '<strong> - Principio de dependencias estables:</strong> Todo sistema tiene la tendencia natural de cambiar y evolucionar, ',
                '  - por lo que componentes volatiles deberian depender de componentes más estables pero no muy dificiles de cambiar ',
                '<strong> - Principio de abstracciones estables:</strong> Los componentes estables que tienen poca variación deberian contar con ',
                '  - interfaces y clases abstractas, de esta manera es más extensible, sin tantas afectaciones en general ',
                '',
                '- Una Arquitectura limpia tambien cumple las siguientes caracteristicas: ',
                ' - Son independientes de los frameworks en la mayor medida posible, ya que estos son herramientas y no obligaciones ',
                ' - La logica de la aplicación es testeable y no depende de otras partes para esto ',
                ' - La interfaz grafica depende de nuestra aplicación, no al contrario, los cambios en esta solo son relevantes para los usuarios ',
                ' - La capa de persistencia, es agnostica, por lo que nuestra aplicación es minimamente afectada por la BD que este usando ',
                ' - Los cambios externos, no deben afectar a los componentes internos ',
                '',
                '- Partes de una arquitectura limpia (de mas interna a externa) ',
                '<strong> - Entidades:</strong> Continen la logica de nuestra aplicación y solo deben cambiar si estrictamente necesario ',
                '<strong> - Casos de uso:</strong> Reglas de negocio que son variables de acuerdo a las condiciones que se den ',
                '<strong> - Adaptadores:</strong> Estas interfaces son las encargas de transformar los datos de capas internas, a los usados por las más externas ',
                '<strong> - Frameworks:</strong> Es la capa más externa, donde van los detalles, como las tecnologias usadas, frameworks, bases de datos, etc...',
                '',
                '- Definición de fronteras',
                ' - Es una separación acerca que de puede y que no puede hacer un componente, para evitar acoplamientos indeseados entre componentes ',
                ' - Un ejemplo de esto es, de quien es la responsabilidad de guardar la información, de la logica de negocio o de la base de datos ',
                ' - Esto nos ayuda a pensar nuestra aplicación como una serie de elementos intercambiables, con minimas afectaciones en los demás ',
                ' - Hacer esto es laborioso y tiene un nivel de complejidad y esfuerzo alto, por lo que en ciertos casos solo se hace de manera parcial ',
            ]),
        new Item('arquitecturasLimpias',
            [
                'Frameworks & Drivers      Interface Adapters     Aplication Rules     Enterprise rules ',
                ' Servicios                                                                             ',
                ' Bases de datos            Controladores                                               ',
                ' Web                 -->   Puertas de enlace  -->  Casos de uso   -->    Entidades     ',
                ' Interfaz de usuario       Presentación                                                ',
                ' Interfaces externas                                                                   ',
                'De más externo, A más interno                                                          ',
            ]),
        new Item('capas',
            [
                ' - Se basa en la distribución de roles y responsabilidades de forma jerarquica en cada capa ',
                ' - Puede tener n - capas, generalmente son 3, de la cual se desprende MVC ',
                ' - La abstracción se mejora al definir la responsabilidad de cada capa ',
                ' - Se aumenta la reutilización, al tener componentes especializados ',
                ' - El desacople y la integración mejoran como resultado de una adecuada abstracción y definición de responsabilidades ',
                ' - Con un alto grado de abstracción se pueden aislar ciertas capas y hacerlas independientes de las tecnologias ',
                ' - Los cambios tienen bajo impacto y la matenibilidad es más eficiente de hacer ',
            ]),
        new Item('cliente',
            [
                ' - Existen 3 elementos principales y es una de las arquitecturas más usadas debido a su simplicidad ',
                '',
                ' Servidor -> Encargado de responder las peticiones, gestionar la concurrencia y la persistencia de los datos ',
                ' Red      -> Medio para la comunicación entre ambas partes ',
                ' Cliente  -> Dispositivos que hacen solicitudes, para crear/manipular/eliminar información ',
            ]),
        new Item('microServiciosFundamentals',
            [
                '- Los monolitos y los microservicios son de las arquitecturas más usadas, debido a que son conceptualmente simples ',
                ' - y que pueden ser adaptadas con facilidad a multiples contextos y necesidades',
                '- Pero los microservicios aunque son una opción muy prometedora, no siempre deben ser usados, ya que en ciertos casos, ',
                ' - suelen ser contraproducentes y van en contravia de lo que se necesita ',
                '',
                '- Para entender mejor cuando usarse, y cuando no, se daran unas pequeñas pautas para un mejor discernimiento ',
                '',
                '           <strong>Fortalezas</strong>                                         <strong>Debilidades</strong>           ',
                ' - Componentes independientes                    - Desarrollo y diseño más complejo         ',
                ' - Agiliza el conocimiento del negocio           - Dificultad para realizar testing         ',
                ' - Escalabilidad a la medida                     - Complejidad para el Monitoreo y registro ',
                '',
                '        <strong> Monolitico cuando</strong>                                 <strong>Microservicios cuando</strong>          ',
                ' - Equipo pequeño o inexperto                    - Equipo con experiencia y manejo de la nube ',
                ' - Aplicación simple y pocos requerimientos      - Se puede y se sabe descomponer el negocio  ',
                ' - Rapidez para lanzar el MPV                    - Aplicación compleja y con miras a crecer   ',
                '',
                '<strong>- Escalabilidad:</strong>',
                ' - De acuerdo al libro <em>The Art of Scalability</em>, se puede expresar como un cubo donde:',
                ' <strong>Eje X:</strong> Duplicación horizontal, Donde la carga se distribuye entre n instancias creadas ',
                '  - Si n instancias son insuficientes, siempre se pueden crear más, teniendo en cuenta que el crecimiento no siempre es lineal ',
                ' <strong>Eje Z:</strong> Partición de datos: El codigo fuente es identico en cada copia, pero la base de datos esta segmentada ',
                '  - Por lo tanto debe haber un componente capaz de enrutar las solicitudes, a quien tenga los datos indicados ',
                ' <strong>Eje Y</strong> Descomposición funcional: La aplicación se divide en subsistemas más pequeños, que sean independientes entre si ',
                '  - Asi se puede escalar solamente las partes que tengan una alta demanda, sin aumentar todo innecesariamente ',
            ]),
        new Item('servicios',
            [
                ' - Se pasa de un nucleo central y robusto a diferentes partes más pequeñas y ligeras ',
                ' - Las partes se intercomunican entre si y funcionan de manera separada, aumentando la tolerancia a fallos ',
                ' - Los servicios pueden ser independientes de las tecnologias, además de que tambien se pueden subdividir ',
                ' - Tambien se pueden escalar de manera individual optimizando el uso de recursos ',
            ]),
        new Item('hexagonal',
            [
                ' - Aisla el dominio de las tecnologias, permitiendo que los cambios entre tecnologias sean superfluos o minimos ',
                ' - La comunicación entre componentes internos/llamados externos se da por medio de puertos(interfaces) ',
                ' - Cualquier dispositivo/usuario/sistema podra consultar de forma homogonea la información y esta sera consistente ',
                ' - Las capas que se hayan definido son idependientes entre si, sin estar totalmente aisladas ',
                ' - Hay una definición clara de responsabilidades, permitiendo hacer testing más facilmente ',
                ' - El termino hexagonal solo se da para resaltar la naturaleza similar de los puertos, no la cantidad de estos ',
            ]),
        new Item('noHexagonal',
            [
                '- Este modelo es una buena propuesta donde se circunscriben buenas practicas ya conocidas',
                '- En el sentido estricto de la palabra el desacoplamiento jamas sera mal visto en el desarrollo de software, ',
                ' - pero tomar conceptos ya existentes y renombrarlos de manera pretenciosa no los hace nuevos ',
                '',
                '- La arquitectura hexagonal no esta totalmente pensada desde cero, toma conceptos de otras arquitecturas como: ',
                ' - Arquitectura a capas -> La separación de capas con funcionalidades especificas y que estas solo conozcan a sus vecinos adyacentes ',
                ' - Arquitectura MVC -> La importancia de separar estrictamente la presentación de los datos, la logica del negocio, ',
                '  - y la logica de control que efectua la función de intermediario',
                ' - Pipes y Filters -> Las tranformacion de los datos no pueden depender del estado interno, estas deben ser congruentes en todo momento ',
                '',
                '- El hexagono que no lo es -> El uso de puertos y adaptadores no solo se limita a un hexagono (6 lados), ',
                ' - es estrictamente dependiente de nuestras necesidades; persistencia, autenticación, visualizacion, archivos, web, etc...',
                '',
                '- Cumple los principios SOLID, pero estos ya existian desde antes ',
            ]),
        new Item('mvc',
            [
                '- Es una de las aquitecturas más conocidas, debido a su simpleza y a su enfasis de separar la visualización de los datos, de estos ',
                '- Esta separación de funciones, nos permite tener un menor acoplamiento y mejorar el mantenimiento ',
                '',
                '- Partes: ',
                ' - Modelo -> maneja los datos y la logica del negocio',
                ' - Vista -> Se encarga de la interacción con el usuario y la presentación de los datos ',
                ' - Controlador -> Enruta los comandos entre la vista y el modelo ',
                '',
                '- Anteriormente esta arquitectura solo se consideraba en el lado del servidor, pero frameworks como Angular han demostrado lo contrario',
                '- Esta adaptación para la web, se ha dado con ciertas diferencias ya que todos los conceptos no son totalmente aplicables '
            ]),
        new Item('mvpMvc',
            [
                '- Este patron es una derivación de MVC y es ampliamentes usado para construir aplicaciones en Android',
                '',
                '- Principales diferencias: ',
                '',
                '- La principal diferencia entre MVP & MVC es que aca el presentador además de comunicar la vista y modelo, ',
                ' - contiene toda la logica de la presentación y en algunos casos logica simple de negocio ',
                '- Tambien hay diferencias como que en MVC el modelo puede notificar directamente a la vista de los cambios, ',
                ' - en MVP el modelo y la vista no se conocen, solo el presentador ejerce la función de "puente" entre ambos ',
                '- En MVC la vista tiene algo de logica para entender la comunicación con el modelo, ',
                ' - pero en el MVP esta es totalmente "estupida", solo se encarga de mostrar lo que se le indique',
            ]),
        new Item('otrasArquitecturas',
            [
                '<strong>- Bus de Eventos:</strong> Una fuente emite eventos donde un bus los direcciona a los receptores indicados ',
                '<strong>- Tuberia:</strong> Es un flujo donde los datos son transformados a medida que van desde su origen hasta su destino ',
                '<strong>- Maestro-esclavo:</strong> Existe un componente maestro, que distribuye todo el trabajo entre otros componentes esclavos ',
                '<strong>- Interprete:</strong> Dado un recurso X y su contexto, este deba ser convertido a su equivalente, pero en Y con otro contexto',
                '<strong>- Intermediario:</strong> Un componente central, es el encargado de administrar los componentes solicitados ',
            ]),
        new Item('monolitos',
            [
                '  Caracteristica                 MONOLITO                        MICROSERVICIOS                         MICROLITOS         ',
                ' ',
                ' Separación de            Acoplamiento alto y mayor        Entregadas por la plataforma          Acoplamiento alto y mayor ',
                ' funciones tecnica        dependencia del framework        usada, reduce el acoplamiento         dependencia del framework ',
                ' ',
                ' Latencia                 Casi nula                        Puede ser alta                        casi nula ',
                ' ',
                ' Consistencia             Transaccional                    Eventual, requiere más atención       Eventual ',
                ' ',
                ' Evolución                Complicada por proceso           Sencilla por proceso                  Sencilla ',
                ' ',
                ' Especialización          Alta variedad de                 Alta especialización,                 Alta especialización,    ',
                ' de los equipos           conocimientos                    conocimiento del negocio              conocimiento del negocio ',
                ' ',
                ' Automatización           Pocos despliegues                Muchos despliegues                    pocos despliegues ',
                ' ',
                ' Tamaño                   Grande                           Pequeño                               Pequeño ',
                ' ',
                ' Observalidad             Relativamente facil              Más complicada                        Punto intermedio ',
                ' ',
                ' Monitarización           Complicado separar               Sencillez para identificar            Sencillez para identificar ',
                ' tecnica                  los problemas                    problemas de rendimiento              problemas de rendimiento ',
            ]),
        new Item('stylesArchitecture1',
            [
                '- Un estilo de arquitectura, es una estrategia de alto nivel que proporciona un marco abstracto, para una familia de sistemas, ',
                ' - resolviendo problemas frecuentes de maneras reutilizables ',
                '- Un patron, en cambio, son de naturaleza concreta y especifica, para abordar problemas o modulos particulares, ya a nivel del sistema, ',
                ' - describiendo como los componentes y las interacciones deben organizarse, para una función particular ',
                ' - y resolverlo de una manera estructurada, son similares a los patrones, pero fucionan a un mayor nivel de abstración ',
                '',
                '<strong>Arquitectura a capas:</strong> ',
                ' - Principio:    Separa los componentes en diferentes capas, un ejemplo tipico es el MVC ',
                ' - Fortalezas:   Facil de mantener y desarrollar, los cambios son independientes entre capas',
                ' - Debilidades:  Puede causar sobrecargas de rendimiento, los cambios que involucran varias capas, pueden ser muy extensos ',
                ' - Usos:         Aplicaciones web y empresariales',
                ' - Antipatrones: Dependencias circulares, Saltos entre capas',
                '',
                '<strong> - N-tier:</strong> No solo existen 3 capas, se pueden agrupar y crear más, de acuerdo a las necesidades',
                '<strong> - Clean/Onion:</strong> Enfatiza la separación de responsabilidades, de manera concentrica, donde el modelo del dominio es el centro, y este se rodea',
                '  - de más capas externas, promoviendo que los cambios de cada capa, afecte mayormente a la exterior y no a la interior ',
                '',
                '<strong>Arquitectura basada en componentes:</strong>',
                ' - Principio:    Organiza el sistema, como componentes reutilizables, acoplados libremente',
                ' - Fortalezas:   Mucha reutilización, flexibilidad y mantenimiento',
                ' - Debilidades:  Complejidad de los componentes y sus relaciones',
                ' - Usos:         Aplicaciones web, de escritorio y sistemas distribuidos',
                ' - Antipatrones: Clases Dios, Redundancia',
                '',
                '<strong> - Patron Orientado a Objetos:</strong> Cumple los mismos requisitos que POO',
                '<strong> - Micro Kernel:</strong> El nucleo con las funcionalidades minimas, se aisla, y se usan complementos para crecer ',
                '<strong> - Patron Plugin:</strong> Permite agregar nuevas funcionalidades, a travez de interfaces, para ampliar y personalizar, como en un navegador',
                '',
                '<strong>Arquitectura orientada a servicios:</strong>',
                ' - Principio:    Diseña aplicaciones como una colección de servicios, que se comunican a travez de una red',
                ' - Fortalezas:   Flexibilidad, Escalabilidad, Reutilización',
                ' - Debilidades:  Complejidad, Dependencia de la red, problemas de rendimiento',
                ' - Usos:         Sistemas empresariales, microservicios',
                ' - Antipatrones: Ignorar las necesidades, Usarse donde no es necesario',
                '',
                '<strong> - Orientación a servicios:</strong> Se diseñan multiples servicios, para que convivan de manera separada, teniendo responsabilidades bien definidas ',
                '<strong> - Patron Broker:</strong> Los componentes se comunican a traves de un intermediario, que coordina la comunicación, el envio de solicitudes, ',
                '  - el manejo de excepciones, retransmision de respuestas, de manera que pueda ser un sistema distribuido',
                '<strong> - Microservicios:</strong> Tambien se diseñan multiples servicios, de manera que sean los más independientes posibles, y que se comuniquen ',
                '  - a traves de un protocolo ligero, de manera que las partes sean reutilizables e intercambiables',
                '<strong> - Serverless:</strong> Un patron exclusivo de la nube, donde no hay servidores que administrar, y los recursos se autoadministran, generalmente ',
                '',
                '<strong>Arquitectura de sistemas distribuidos:</strong>',
                ' - Principio:    Involucra multiples sistemas que trabajan juntos mediante una red, para dar la impresión de un solo sistema más grande y complejo ',
                ' - Fortalezas:   Escalabilidad, Tolerancia a fallos',
                ' - Debilidades:  Complejidad, Coherencia de los datos',
                ' - Usos:         Bases de datos distribuidas, Computación en la nube, telecomunicaciones',
                ' - Antipatrones: No funciona sin red, Problemas de consistencia',
                '',
                '<strong> - Basado en el espacio:</strong> Diseñado para evitar cuellos de botella, distribuyendo uniformemente recursos y servicios, en multiples servidores ',
                '<strong> - Punto a punto:</strong> Cada participante de la red, actua como cliente y servidor, teniendo comunicación directa entre nodos ',
                '',
                '<strong>Arquitecturas Domain-Driven:</strong>',
                ' - Principio:    Se centra en el dominio, donde se concentra la logica en un modelo que sera usado por toda la aplicación',
                ' - Fortalezas:   Mejora la compresión del negocio, fomenta la comunicación entre diversos equipos ',
                ' - Debilidades:  Entre mayor sea el dominio, mayor su complejidad, requiere buena compresion del negocio',
                ' - Usos:         Sistemas empresariales, Software empresarial',
                ' - Antipatrones: Ignorar el lenguaje obicuo, No inlcuir expertos en el negocio',
                '<strong> Hexagonal:</strong> Separa la logica empresarial, de capas externas como la persistencia y la comunicación, usando puertos y adaptadores ',
                '  - con los cuales es posible acoplarse a nuevas partes, o que esta sea consumida por otros ',
                '<strong> Domain-Driven:</strong> Ideal para sistemas complejos, con reglas y procedimientos intrincados y que cambian constantemente ',
            ]),
        new Item('stylesArchitecture2',
            [
                '<strong>Arquitecturas orientadas a eventos:</strong>',
                ' - Principio:    Se impulsa por eventos, como acciones de usuario, salidas de sensores, alertas, mensajes, etc...',
                ' - Fortalezas:   Escalable, Flexible, información en tiempo real o muy cercano a este',
                ' - Debilidades:  La programación asyncrona, puede ser compleja y de depurar ',
                ' - Usos:         Aplicaciones GUI, Analsis en tiempo real, procesamiento de eventos',
                ' - Antipatrones: Mal manejo de la información, falta de persistencia y/o acciones ',
                '<strong> - Event-Driven:</strong> Una o varias parte envian eventos, mientras que otra u otras, consumen y procesas estos eventos',
                '<strong> - Publicador-Subscriptor:</strong> Patron de mensajeria, donde se publica información en uno o varios topicos, y estos a su vez pueden ser escuchados ',
                '  - de manera que las partes solo publican o se suscriben a los topicos de su interes, bastante util en sistemas asincronos ',
                '',
                '<strong>Arquitecturas de separación de conceptos:</strong>',
                ' - Principio:    Diferentes areas de la aplicación son manejadas, por parte separadas e independientes ',
                ' - Fortalezas:   Mejora la compresión y la modularidad, promueve la modularidad',
                ' - Debilidades:  Mayor complejidad, requiere más comunicación entre modulos',
                ' - Usos:         Aplicable a casi todos los tipos de software',
                ' - Antipatrones: Acoplamiento indeseado, Falta de limites claros',
                '<strong> - Patron MVVC:</strong> Facilita la separación de las interfaces graficas, de la logica y de los servicios ',
                '<strong> - Patron MVP:</strong> Derivado del patron MVC, donde el "presentador" funciona de intermediario entre la vista y el modelo, la comunicación ',
                '  - solo se da a traves de este componente, estos 2 nunca se conocen, por lo que cambiarlos implica menos cambios asociados ',
                '',
                '<strong>Arquitecturas de Interprete</strong>',
                ' - Principios:   Las instrucciones se ejecutan de manera facil, sin necesidad de convertirlas a lenguaje maquina ',
                ' - Fortalezas:   Facil de depurar y de probar ',
                ' - Debilidades:  No es tan rapido como los lenguajes compilados, un mayor uso de recursos ',
                ' - Usos:         Creacion de scripts y lenguajes de alto nivel, compiladores y transpiladores ',
                ' - Antipatrones: Usarse, donde el rendimiento es un requisito fundamental ',
                '',
                '<strong> - Patron interprete:</strong> Especifica como evaluar oraciones en un idioma, respetando y ejecutando el arbol sintactico de una oración ',
                '',
                '<strong>Arquitecturas para concurrencia</strong>',
                ' - Principios:   Las partes de un programa se ejecutan de manera independiente, posiblemente tambien de manera simultanea ',
                ' - Fortalezas:   Mejorar el rendimiento, especialmente en sistemas multinucleo ',
                ' - Debilidades:  Corregir problemas relacionados a bloqueos y condiciones de carrera, puede ser complejo ',
                ' - Usos:         Sistemas en tiempo real, Computación de alto rendimiento, servidores web',
                ' - Antipatrones: Ignorar problemas de sincronización, administrar mal los recursos compartidos ',
                '',
                '<strong> - Patron orquestador:</strong> Un controlador, define y controla el flujo de la aplicación, especialmente, si se trata de operaciones complejas ',
                '<strong> - Patron de coreografia:</strong> Crea un sistema descentralizado y altamente desacoplado, donde solo se interactua mediante eventos ',
                '<strong> - Patron Primario-Secundario:</strong> Existen 2 tipos de componentes, el principal distribuye el trabajo, y los secundarios ',
                '  - que hacen los calculos pertinentes, para despues ser agrupados por el principal ',
                '<strong> Patron Pipeline:</strong> Implica una cadena de elementos de procesamiento, organizados de manera secuencial, ',
                '  - donde la salida de una pieza, pueda ser la entrada de otro elemento, y asi continuar la cadena ',
                '',
                '<strong>Arquitecturas centradas en datos:</strong>',
                ' - Principios:   Todas las interacciones ocurren a travez de la BD, la cual es el centro',
                ' - Fortalezas:   Proporciona coherencia, integridad y fiabilidad de los datos',
                ' - Debilidades:  Puede crear cuellos de botella, afectando la escalabilidad',
                ' - Usos:         Aplicaciones empresariales, Sistemas CRM y ERP',
                ' - Antipatrones: Ignora posibles problemas de rendimiento, dificil de escalar ',
                '',
                '<strong> - Patron CQRS:</strong> Separa las operaciones de lectura de las de escritura, ideal en casos, donde la cantidad de operaciones es bastante dispareja ',
                '<strong> - Patron Event-Sourcing:</strong> Modela los cambios de estado, como una secuencia inmutable o registro de eventos, para su procesamiento ',
                '<strong> - Patron Kappa:</strong> No utiliza una BD como un almacenamiento convenciona, si no que lo usa para mantener un registro inmutable ',
                '<strong> - Patron Lambda:</strong> Procesa metodos de procesamiento por lotes, y secuencias para manejar grandes cantidades de datos, como el BigData ',
            ])
    ];

export const CALIDAD =
    [
        new Item('artesanos',
            [
                '- Se puede considerar el siguiente nivel del desarrollo profesional, no solo mejorando nosotros mismo, sino a los demás, son 4 principios ',
                '',
                '- No sólo software que funciona, <strong>SINO</strong> también software bien diseñado',
                '- No sólo responder al cambio, <strong>SINO</strong> también agregar valor constantemente',
                '- No sólo individuos e interacciones, <strong>SINO</strong> también una comunidad de profesionales',
                '- No sólo colaboración con el cliente, <strong>SINO</strong> también asociaciones productivas',
            ]),
        new Item('metricas',
            [
                '- Además de revelar el desempeño del equipo de desarrollo, puede ser indicativo de la efectividad del equipo ',
                '<strong> Metricas de productividad</strong>',
                '<strong> - Tiempo de entrega:</strong> Tiempo que se tarda de inicio a fin para entregar un proyecto ',
                '<strong> - Cantidad de codigo:</strong> Lineas de codigo de la aplicación, esto puede ser un indicativo de la productividad, más no de la calidad ',
                '<strong> - Trabajo en curso:</strong> Trabajo empezado y que se compara con lo anteriormente hecho para tener una idea del progreso ',
                '<strong> - Velocidad agil:</strong> Basandose en los sprints previos y cuantos puntos se han hecho, se puede estimar el proximo sprint ',
                '<strong> - Tasa de exito:</strong> Calcula el porcentaje de exito del sprint, esto no significa necesariamente completar los puntos, pero si las tareas ',
                '<strong> - Numero de versiones:</strong> Los equipos agiles dan prioridad a las nuevas versiones con nuevas caracteristicas que den valor ',
                '',
                '<strong> Metricas de rendimiento</strong>',
                '<strong> - Rendimiento:</strong> Cantidad de unidades que procesa un sistema en un periodo de tiempo ',
                '<strong> - Tiempo de respuesta:</strong> Tiempo que se tarda en responder a una consulta ',
                '<strong> - Fiabilidad y disponibilidad:</strong> Capacidad del software para cumplir con sus especificaciones ',
                '',
                '<strong> Metricas de defectos</strong>',
                '<strong> - Cobertura de codigo:</strong> Proporcion del codigo que cubren las pruebas en relación a toda su extension ',
                '<strong> - Deteccion de defectos:</strong> Es un porcentaje calculado entre los defectos encontrados antes y despues del lanzamiento ',
                '<strong> - Deuda tecnica:</strong> Es el costo de ignorar problemas que a la larga se podran convertir en errores ',
                '<strong> - Vulnerabilidades de seguridad:</strong> Entre menos brechas y defectos se encuentren, más seguro sera la aplicación ',
                '<strong> - Incidentes de seguridad:</strong> Recuento de las veces en que una aplicación fue vulnerada y la gravedad del ataque ',
                '',
                '<strong> Metricas de usabilidad</strong>',
                '<strong> - UX:</strong> Suelen ser cualitativas e incluyen las respuestas objetivas y subjetivas del usuario ',
                '<strong> - Usabilidad:</strong> Mide que tan bien el software permite alcanzar sus objetivos ',
                '<strong> - Net Promoter Score:</strong> Es la voluntad de un cliente para recomendar la aplicación a otros ',
            ]),
        new Item('metricasEnCodigo',
            [
                '- Aplicar estas metricas suele ser un tema complejo, ya que estas dependen de las necesidades especificas de la aplicación ',
                '- Pero esto trae grandes beneficios para las aplicaciones al permitir conocer el estado actual y las acciones para mejorar nuestro codigo ',
                '',
                '<strong> - Acoplamiento:</strong> Todo modulo debe ser lo suficientemente independiente para ser modificado y afectar en lo minimo posible a los demás ',
                '  - demasiado acoplamiento significa que esto conllevara a efectos en cascada no deseados al realizar modificaciones en el codigo ',
                '',
                '<strong> - Cohesion:</strong> Es el grado de relación entre las partes, y va muy de la mano con el principio de responsabilidad unica ',
                '  - un codigo poco integrado se vuelve complejo, dificil de mantener y poco reutilizable ',
                '',
                '<strong> - Complejidad:</strong> Un algoritmo debe ser eficaz y facil de entender, de esta se diferencia 2 tipos de complejidad ',
                '  - Complejidad Cognitiva -> Es la dificultad para entender intuitivamente el codigo ',
                '  - Complejidad Ciclomatica -> Es la dificultad para probar determinado segmento de codigo ',
                '',
                '<strong> - Code Churn:</strong> Frecuencia con que altera el codigo a traves del tiempo, a mayor numero de modificaciones, más posibilidad de error ',
                '',
                '<strong> - Cobertura:</strong> Porcentaje de codigo cubierto por las pruebas, a mayor cobertura, menor es la posibilidad de defectos ',
                '',
                '<strong> - Codigo muerto:</strong> Es codigo que nunca es ejecutado, no siempre es facil de encontrar y no hay metodos infalibles para esto ',
                '',
                '<strong> - Duplicación:</strong> Este codigo es producto del desconocimiento general del proyecto, replicando codigo que ya existe ',
            ]),
        new Item('cleanCode',
            [
                '- La calidad de codigo es un estandar que siempre se debe perseguir, hasta el codigo más limpio puede verse afectado por malas practicas ',
                '- El proceso de degradación en todo proyecto es inevitable, más no incontrolable ',
                '- Los parches pueden ser reparaciones o adiciones rapidas y funcionales, sin embargo puedan estar en contravia directa de la calidad ',
                '',
                '- Para soluciones limpias y bien estructuradas se deberian seguir los siguientes pasos: ',
                '<strong> - Analisis de caracateristicas:</strong> Toda nueva funcionalidad debe ser analizada e implementada de manera que, ',
                '  - el mayor numero de inquietudes este resuelto antes de iniciar la solución o durante, entre más tiempo sera peor ',
                '<strong> - Analisis del codigo base:</strong> Sabiendo la solución se debe analizar el codigo base para causar el menor impacto posible, ',
                '  - para tener claro que se puede modificar, reutilizar, que se debe crear, e incluso si hasta puede llegar generar efectos segundarios',
                '<strong> - Desarrollo y Refactorización:</strong> No solo es desarrollar nuevos componentes y modificar los existentes, ',
                '  - tambien puede haber lugar para refactorizaciones, evitando la degradación del codigo ',
                '<strong> - Desarrollo y Testing:</strong> Además de verificar el funcionamiento del sistema, tambien nos ayudan a mantener el modelo, ',
                '  - completo y detallado de la arquitectura, definiendo las entradas y las salidas internamente, y en algunos casos hasta como documentación ',
                '',
                '',
                '- Si estos pasos se realizan de manera adecuada, con la calidad del codigo en la mente, la degeneración de nuestro codigo puede ser aceptable ',
            ]),
        new Item('costOfQuality',
            [
                '- En un nivel operacional las tecnicas de gestión de calidad deben identificar desperdicios, resolver problemas y optimizar procesos ',
                '- Generalmente enfocado a la prevención, pero tambien enfocado a la solución reactiva ',
                '',
                '<strong>- Costos libres de errores:</strong> No tienen relación con la planificación, control, correción y mejora de la calidad, ',
                ' - considenrando que todo salga bien ',
                '<strong>- Costos de la calidad:</strong> Relacionados a los problemas encontrados, estos pueden desaparecer si el proceso fuera libre de errores ',
                '<strong>- Costos de conformidad:</strong> Asociados a prevención y evaluación de la conformidad con los requisitos ',
                '<strong>- Costos de NO conformidad:</strong> Han de ver con las fallas ya sean internas y/o externas no detectadas y que terminan afectando al cliente ',
            ]),
        new Item('qualityGates',
            [
                '- Son politicas de calidad de las organizaciones, para cumplir con el objetivo de realizar un nuevo despliegue ',
                '- Suelen ser politicas para garantizar la calidad, fiabilidad, y reducción de errores, facilitando aspectos como el CD/CI',
                '- Estos requisitos pueden variar y ser más flexibles o más estrictos de acuerdo a las necesidades de cada proyecto ',
                '',
                '<strong> Algunas politicas de calidad comunes</strong>',
                '<strong> - Cobertura:</strong> Este porcentaje indica cuanto del codigo de producción esta cobijado mediantes tests unitarios o de integración ',
                '<strong> - Duplicación:</strong> Las lineas duplicadas no solo violan el principio de DRY, si no que dificultan directamente la mantenibilidad ',
                '<strong> - Fiabilidad:</strong> Directamente relacionada con la cantidad de bugs encontrados y que tan graves son ',
                '<strong> - Vulnerabilidades:</strong> Riesgos de seguridad potenciales y especificos para cada lenguaje ',
                '<strong> - Deuda tecnica:</strong> Pequeños errores, omisiones, sin tests, codigo mal estructurado, soluciones desprolijas, todo va sumando ',
                '',
                '<strong>Valores generales (SonarQube) ',
                '  Cobertura<strong> >=80%</strong>   Duplicación<strong> <=3%</strong>   Fiabilidad <strong>A</strong>   Vulnerabilidades <strong>A</strong>    Deuda tecnica<strong> <=5%</strong> '
            ]),
        new Item('qualityMetrics',
            [
                '- Casi todas esta metricas varian en cuanto al lenguaje en el que se apliquen, haciendo que sean congruentes entre si, más no iguales ',
                '',
                '<strong>- Complejidad ciclomatica: </strong> Esta se calcula en base a los caminos que se puedan dar debido al uso y el orden de las estructuras de control ',
                '<strong>- Complejidad ciclomatica: </strong> Relacionado a la dificultad para entender el flujo de control del codigo, usando un modelo matematico especifico ',
                '<strong>- Duplicación: </strong> Lineas de codigo duplicado, ignorando la sangria y el formato, tambien aplica para archivos, metodos y clases',
                '<strong>- Mantenibilidad: </strong> Metrica relacionada directamente con la cantidad y la dificultad de los code smells presentes ',
                '<strong>- Fiabilidad: </strong> Cantidad de errores y/o bugs presentes, la calificación dependera de que tantos hallan y que tan criticos sean ',
                '<strong>- Seguridad: </strong> Vulnerabilidades encontradas, y/o problemas del lenguaje ',
                '<strong>- Tamaño: </strong> Clases muy grandes pueden conllevar a smell codes y problemas de mantenibilidad, incluyendo los comentarios ',
                '<strong>- Pruebas y cobertura: </strong> Además de evaluar la cantidad y el exito de las pruebas unitarias, se evaluara cuantos caminos estan cubiertos ',
            ]),
        new Item('codeReviews',
            [
                '- Es un proceso que data desde la epoca de los 80s, dado que Hewlett Packard (HP) buscaba mejorar su codigo base y procesos internos ',
                '- Despues de varios procesos, la revision por pares fue uno de los intentos más fructiferos ',
                '- Tambien valga la acotación de que en ese entonces la practicas de desarrollo no estaban tan estandarizadas ',
                '',
                '- 5 practicas para maximizar su valor: ',
                '',
                '<strong>Realizar un checklist</strong> Con un conjunto predeterminado de preguntas y reglas a seguir, el cual puede incluir: ',
                ' <strong>- Legibilidad del codigo</strong> Y si tiene comentarios, que estos aporten algun valor ',
                ' <strong>- Seguridad</strong> Que no se exponga el sistema a posibles ciber ataques',
                ' <strong>- Coberturas de pruebas</strong> Si es la adecuada o es necesario probar más casos ',
                ' <strong>- Arquitectura</strong> Que no se incumpla la estructura del proyecto, o si se implemento algun patron, este bien implementado ',
                ' <strong>- Principios</strong> Como DRY, SOLID, GRASP, YAGNI; entre otros no se deberian incumplir ',
                '',
                '<strong>Metricas de revisión del codigo</strong> No se puede corregir, si no se mide primero de manera objetiva ',
                ' - <strong>Tasa de inspección:</strong> Velocidad conque el equipo revisa una cantidad espeficica de codigo ',
                '  - lineas de codigo <strong>/</strong> horas de inspección ',
                '  - Si esto toma demasiado tiempo, es posible que haya problemas de legibilidad que se deban tratar ',
                ' - <strong>Tasa de defectos:</strong> Frecuencia con que se identifican defectos, ayudando a la efectividad del procedimientos ',
                '  - recuento de defectos <strong>/</strong> horas de inspección ',
                '  - Si este proceso es tardado, tal vez los desarrolladores deban usar mejores herramientas de prueba ',
                ' - <strong>Densidad de defectos:</strong> Cantidad de defectos encontrados, en una porción especifica de codigo ',
                '  - recuento de defectos <strong>*</strong> miles de lineas de codigo ',
                '  - Ayudando a identificar que componentes son más propensos a ser vulnerables ',
                '',
                '<strong>Los comentarios realizados, deben justificar la postura que se tome</strong> No solo sugerir lo que se deba arreglar, ',
                ' - explicando el porque del cambio y diferentes opciones para realizarlo es más constructivo ',
                ' - Esto con el fin de compartir conocimiento, lo que ayudara abordar problemas similares en el futuro ',
                '',
                '<strong>Revisiones pequeñas</strong> Revisar más de 400 lineas, puede tener un aspecto adverso para encontrar errores ',
                ' - Además de que estadisticamente hablando, estos se encuentran frecuentemente en las primeras 200 lineas ',
                ' - Esto en base a los datos recopilados por un estudio realizado por Cisco, enlace disponible en el articulo original ',
                '',
                '<strong>Mejorar o complementar la automatización</strong> Planificar las revisiones, identificar a los revisores indicados ',
                ' - de manera que esto no se convierta en una carga impositiva, si no que sea un espacio colaborativo y de aprendizaje ',
                ' - y que el proceso se pueda convertir en punto de referencia para detectar y corregir errores antes de que su costo aumente ',
            ]),
        new Item('linting',
            [
                '- Son una ayuda para encontrar errores y falencias en nuestro codigo durante la etapa de desarrollo',
                '- Estos errores pueden ser: ',
                ' - Errores de sintaxis            - Codigo innecesariamente complejo ',
                ' - Uso de malas practicas         - Estilos de codificación inconsistentes ',
                '',
                '- Estas herramientas no solo nos muestran los posibles errores, tambien pueden dar sugerencias de posibles soluciones ',
                '- Tambien permiten la configuración de nuevas reglas para cuando se trabaja en equipo y mantener la consistencia ',
            ]),
        new Item('analystQA',
            [
                '- Es una forma de asegurar la calidad de los productos y los servicios que se utilizan a diario, un analista en esta area, ',
                ' - es el encargado de garantizar la calidad final del producto, servicio, hardware, etc.. entre muchas más cosas',
                '',
                'Las funciones pueden variar de la complejidad y del tamaño del producto, pero generalmente son: ',
                '<strong>- Planificar y Ejecutar Pruebas:</strong> Con el fin de detectar fallos, comportamiento inesperados, mediante diversas tecnicas como: ',
                ' pruebas manuales, pruebas automatizadas, pruebas unitarias, de sistema, de aceptación, entre otras formas',
                '<strong>- Documentar errores y validar correciones:</strong> Cualquier error que se detecte, debe ser documentado de forma clara y detallada, ',
                ' para que pueda ser replicado, analizado y consecuentemente corregido, ya sea mediante capturas de pantalla, o otras evidencias ',
                '<strong>- Colaboración:</strong> Estos profesionales, trabajan de forma estrecha con diferentes equipos, como desarrollo, marketing, diseño, ',
                ' para asegurarse que el proyecto cumpla con todos los requisitos ',
                '</strong>- Automatización de pruebas:</strong> Tambien pueden escribir y ejecutar scripts que ejecuten prueba de manera repetible y consistente ',
                '',
                '<strong>Competencias de un analista:</strong>',
                '- Conocimientos en informatica y programación                              ',
                '- Habilidades blandas y comunicación entre equipos                         ',
                '- Dominar metodologias agiles y sus herramientas, (Jira, Kanba, SCRUM, etc)',
                '- Manejo de herramientas de testing, (Selenium, Junit, Mocca, etc)         ',
                '- Habilidades de analisis y resolución de problemas',
                '',
                '<strong>Porque es importante:</strong>',
                '- Garantiza a mantener y elevar los requisitos y expectativas de los usuarios ',
                '- Reduce el riesgo de errores, y la incidencia de problemas ',
                '- Ayuda a mejorar la calidad, el rendimiento, la seguridad y la usabilidad de los productos ',
                '- Ayuda a mejorar la reputación de la empresa, al tener una area comprometida con la calidad y el servicio ',
            ]),
        new Item('codeReviewPyramid',
            [
                '- Aveces cuando se hace una revisión de codigo, se hace hincapie en asuntos mundados del software como ortografia, formato y estilo de codificación ',
                '- Aspectos que en grandes niveles pierden importancia, como retrocompatibilidad, es eficaz ?, cumple con lo pactado ? ',
                '',
                '      <strong>Code</strong>                                                Cumple con el formato del proyecto ?',
                '      <strong>Style</strong>                                               Se adhiere a las convenciones del lenguajes ?',
                '                                                          Usa DRY y/o otros patrones ',
                '                                                          El codigo es entendible y mantenibles ?',
                '',
                '                                                      Todos los tests siguen pasando ?',
                '                                                      La nueva funcionalidad esta debidamente testeada ? ',
                '      <strong>Tests</strong>                                           Incluye casos anomalos o casos especificos de falla ?',
                '                                                      Tiene test de integración, o son si quiera necesarios ?',
                '                                                      Incluye tests no funcionales (NFR), como rendimiento entre otros ?',
                '',
                '                                                  La nueva funcionalidad, esta debidamente documentada ?',
                '                                                  Se documentan los puntos relevantes y/o importantes ?',
                '      <strong>Documentación</strong>                               Incluye guias de usuario y/o manuales ?',
                '                                                  La documentación es entendible para el publico que esta orientada ?',
                '                                                  Errores gramaticales o de semantica ? ',
                '',
                '                                            Se satisface el requerimiento original ?',
                '                                            La logica esta correcta y no tiene complejidad agregada ?',
                '      <strong>Semantica de la</strong>                       Resiliente y robusto ante errores ? ',
                '      <strong>Implementación</strong>                        Contiene problemas de rendimiento ?',
                '                                            Es seguro, o revela vulnerabilidades del sistema ?',
                '                                            Puede ser observado y/o medido (metricas, logs, alertas)',
                '                                            Agrega nuevas dependencias, y siendo el caso que licencias usan ',
                '',
                '                                    El tamaño es el adecuado, o se puede reducir ?',
                '                                    Se puede hacer de diferentes maneras, y siendo asi, esta es la mejor ?',
                '      <strong>Semantica</strong>                     Es una función general y reutilizable o es especifica ?',
                '      <strong>del Api</strong>                       Como es la división a nivel interno del codigo ?',
                '                                    Hay Breaking changues, y si hay cual es su impacto ?',
                '                                    Es coherente y sigue el principio de la minima sorpresa, además cualquiere otro que aplique',
                '',
                '- Entre más abajo se encuentre en la piramide, es donde se deberia hacer la mayor cantidad de esfuerzo posible ',
                '- Entre más problemas se hallen en la partes bajas, mayor sera el esfuerzo para cambiarlo y/o corregirlo ',
                '- Las parte más altas, son las más propensas a automatización ',
            ])
    ];

export const META_CARACTERISTICAS =
    [
        new Item('metaDatos',
            [
                '- Literalmente son datos de los datos ',
                '- Estan estructurados para describir caracteristicas de los datos como cantidad y contenido ',
                '- Actualmente se usan para gestionar y recolectar información de interes ',
                '- Facilitan la estandarización y la gestion de los cambios ',
                '- Pueden facilitar el desarrollo al tener un menor cambio de costo entre plataformas ',
            ]),
        new Item('metaClase',
            [
                '- Normalmente se considera una clase de clases ',
                '- Es una caracteristica propia del sistema por lo que el usuario jamas la llegara a ver ',
                '- Esta caracteristica permite añadir y modificar comportamientos del programa, ',
                ' - Sin llegarlo a afectar directamente ',
                '- Este concepto es ampliamente usado para realizar testing, por medio de anotaciones, dobles y otros conceptos, ',
                ' - Un ejemplo de esto son Junit y Mockito, frameworks para realizar pruebas en java, que se basan en estas caracteristica ',
            ]),
        new Item('reflexion',
            [
                '- Capacidad de un codigo para observar un programa para observarse y cambiar su estructura a alto nivel ',
                '- Puede ser dinamica o estatica, y es más comun en los lenguajes que usan maquinas virtuales para ejecutarse, como JAVA ',
                '- Cuando el codigo fuente se compila normalmente pierde su estructura al pasar a un lenguaje de un nivel más bajo, pero ',
                ' - si este sistema permite la reflexión esta estructura se preserva como metadatos ',
                '- La reflexión permite conseguir un codigo aun más flexible, a cambio de perder rendimiento ',
                '',
                '- Esta caracteristica permite realizar acciones como: ',
                ' - Descubrir y modificar secciones de codigo en tiempo de ejecución ',
                ' - Evaluar una cadena como si fuera una sentencia de código fuente en tiempo de ejecución ',
                ' - Flexibilizar el tipado en lenguajes fuertemente tipados ',
            ]),
        new Item('asserts',
            [
                '- Todo codigo contiene algun tipo de restriccion, si estas no se documentan bien pueden inducir a errores ',
                '- La documentación extensiva tampoco es una buena idea ya que modificar codigo conlleva a modificar la documentación tambien ',
                '- Las aserciones son predicados que se evaluan como ciertos o falsos en tiempo de ejecución ',
                '- Estas comprobaciones favorecen el proceso de detectar errores y garantizar las condiciones de funcionamiento ',
                '- Son una opción a considerar si se quiere evitar la programación defensiva ',
                '- Existen diferentes librerias para su implementanción pero se desaconseja el uso de los "asserts" propios de Java en entornos productivos '
            ]),
        new Item('excepciones',
            [
                '- Es la indicación de que se produjo un error en la ejecución del programa ',
                '- Estas pueden ser situaciones esperadas, inesperadas e incluso pueden se provocadas ',
                '- Las exepciones son objetos especializados con toda la información del error ',
                '- Estos objetos pueden ser atrapados por la instrucción try-catch y evitar que se detenga el programa, ',
                ' - o simplemente ser lanzados y terminar el programa de manera abrupta ',
                '- El manejo de excepciones es fundamental para conseguir programas robustos y confiables, por esto es ideal definir, ',
                ' - responsabilidades acerca de quienes pueden lanzar excepciones y quienes pueden atraparlas ',
            ]),
        new Item('cache',
            [
                '- La cache existe para diminuir la latencia e incrementar el rendimiento en operaciones costosas ',
                '- Esta es recomendable usarla en los casos donde el rendimiento no es el esperado, ',
                '  - o si son recursos poco mutables y muy solicitados ',
                '- Esto significa que el sistema soporte operaciones de datos con consistencia eventual ',
                '',
                '- Tipos de cache: ',
                '- Local -> almacenamiento en memoria, ideal cuando la información es poca, predecible y poco mutable ',
                '  - esto puede conllevar a inconsistencias de los datos si hay diferentes instancias y problemas de rendimiento en la ejecución ',
                '- Centralizado -> se almacena de manera externa y este siempre esta en concordancia con las demás ',
                '  - al ser externa depende directamente de la latencia del medio en que este, y de su disponibilidad, además de su manejo ',
                '- Distribuida -> esta particionada y administrada por diferentes nodos que se comunican entre si ',
                '  - su manejo implica más complejidad ',
            ]),
        new Item('hilos',
            [
                '- Un hilo es una secuencia de control dentro de un proceso que ejecuta sus procesos de forma independiente ',
                '- Un proceso es una acción continua o serie de cambios, tareas que ocurren de manera definida ',
                '- El ciclo de vida de un proceso es el siguiente: ',
                '  Creacion -> Listo &larr;&rarr; Ejecución -> Terminado',
                '                            &darr;                     ',
                '                &uarr;	Bloqueado                       ',
            ]),
        new Item('argumentos',
            [
                '- En java los argumentos siempre se pasan por valor, esto significa que siempre se pasa el valor de la variable, ',
                ' - y no la referencia en memoria de la variable, por lo que siempre es una copia del original ',
                '- Las copias se pueden hacer del valor para datos primitivos, o una copia con la dirección de memoria si es un objeto ',
                '- Esto no modifica la variable original, ya sea un tipo primitivo o un objeto ',
                '- Algunas clases son inmutables por lo que los objetos originales nunca son modificados, ',
                ' - solo se devuelve una nueva instancia con los cambios en vez de la original ',
            ]),
        new Item('concurrenciaParalelismo',
            [
                '- Concunrrencia -> es la capacidad de realizar muchas tareas a la vez, con ó sin una secuencia especifica ',
                '- Paralelismo -> es la capacidad de ejecutar 2 ó más acciones de manera simultanea ',
                '',
                '- Para implementar concurrencia se recomienda usar Hilos, en cambio ',
                '- Para implementar paralelismos se optara por usar Procesos ',
                '',
                '- Aunque la programación concurrente tiene problemas en cuanto a la coherencia de los datos, ',
                ' - es bastante util para resolver problemas de rendimiento ',
                '- En cambio si el orden de las tareas es importante y tanto el inicio como el fin tambien, ',
                ' - la programación paralela es mejor debido a su aislamiento inherente ',
            ]),
        new Item('ortogonalidad',
            [
                '- Basicamente significa que cuando hacemos una accion esta no debe modificar lo que no le respecta ',
                '- Tambien se puede interpretar de manera que cuando se ejecute una instrucción solo se ejecute esta y nada más ',
            ]),
        new Item('boilerPlate',
            [
                '- Este hace referencia a codigo repetitivo que no siempre es util, pero si requerido, aun aveces cuando no vaya a ser usado ',
                '- Esto tambien aplica para fragmentos de codigo propios, ya que se reutiliza codigo, con solo copiar y pegar ',
                '- El boiler plate es diferente del scafolding, ya que este primero es más de copiar y pegar, ',
                ' - en cambio el segundo esta relacionado con mantener estandares y formas de uso ',
                '- Un ejemplo de esto es el uso de getters y setters en POO para modificar los objetos, ',
                ' - aunque estos cambian de acuerdo al objeto, su función y su forma son casi siempre identicas ',
            ]),
        new Item('recursividad',
            [
                '- Es una tecnica de programación para ejecutar codigo un cierto numero de veces ',
                '- Esto es posible a la caracteristica de cualquier lenguaje de permitir que los metodos se llamen a si mismas ',
                '- La recursividad tiene que tener un condición de salida, de lo contrario se convertira, ',
                ' - en una pila de llamados infinita a si mismo ',
                '- Es una alternativa y en ocasiones más eficiente de realizar tareas que requieren ser repetitivas ',
                '',
                '- A continuación un ejemplo con la función factorial ',
                '   public int factorial(int n) { ',
                '       return (n == 0) ? 1 : n * factorial(n - 1);',
                '   }',
            ]),
        new Item('backtracing',
            [
                '- Es una estrategia para encontrar soluciones que satisfagan restricciones ',
                '- De una manera basica esto se asemeja a un recorrido en profundidad dentro de un grafo que no contega ciclos ',
                '- Durante todo el recorrido se va construyendo la solución del problema, todo esto para que al final si se tiene exito, ',
                ' - todas estas soluciones parciales se junten y conformar una solución completa ',
                '- Si el recorrido no tiene exito y tampoco se puede completar, se eliminaran todos los elementos construidos previamente ',
                '- Este proceso suelen implementarse mediante algoritmos recursivos para evitar busquedas profundas, ',
                ' - y asi evitar desperdicio de recursos infructuosamente ',
                '- Tambien se pueden hacer optimizaciones donde se evalua el peso de las ramas o se acotan los caminos posibles ',
                ' - mediante subrutinas para podar el arbol y mejorar su eficiencia ',
                '- Esta estrategia es usada en los analisis sintacticos de los compiladores y en la inteligencia artificial, ',
                ' - dando lugar a nuevos algoritmos de busqueda como el A*',
            ]),
        new Item('rawTypes',
            [
                '- Hacen referencia al uso de tipos genericos, sin especificar el tipo a usar',
                '- Esto se debe a que versiones previas de Java no se tenia soporte para uso de Genericos, pero este debia seguir siendo retrocompatible ',
                '- Actualmente es posible usarlos, pero deben ser evitados ya que: ',
                ' - pueden sacar errores en tiempo de ejecución, que no esta presentes o pasan desapercibidos en tiempo de compilación ',
                ' - Su uso atenta en contra del codigo autocomentado además de la legibilidad y la mantenibilidad ',
                ' - Se necesitan casteos para su uso, consumiendo recursos extras para su uso ',
                '- Por Ejemplo: List es un raw type, mientras que List<String> es un tipo parametrizado '
            ]),
        new Item('memoryAndGarbage',
            [
                '- Una fuga de memoria es el deterioro gradual del rendimiento del sistema en el transcurso del tiempo, ',
                ' - como resultado del uso y de la fragmentacion de la memoria RAM del dispositivo',
                '- Esto se puede dar, debido a aplicaciones mal programadas o comportamientos inusuales del sistema',
                '',
                '- <strong>Recolección de basura</strong>',
                ' - Liberar estos bloques de memoria para evitar bloqueos, es una preocupación de los SO o los lenguajes propiamente ',
                ' - Esta limpieza constante de la memoria parece provenir del lenguaje Lisp y adaptado por algunos SO, ',
                '  - con el fin de detectar problemas antes de que los programas fallen ',
                ' - Algunos lenguajes como Java tambien lo proporcionan, siendo una gran ventaja para el programador, ',
                '  - ya que el desarrollador no debe preocuparse de un proceso que ocurre de manera silenciosa y constante ',
            ]),
        new Item('footprint',
            [
                '- Es la cantidad de Memoria RAM que utiliza el software cuando se ejecuta, las instrucciones del programa, los datos ',
                '- Tambien puede reservar para instrucciones adicionales, o acciones que se soliciten ',
                '',
                '<strong>- Sistemas embedidos:</strong>',
                ' - Con la proliferación de dispositivos portatiles y de productos cada vez más electronicos con necesidades para procesar datos ',
                ' - Se requieren programas con poca memoria que se ajusten a cantidades del orden de kilobytes o megabytes, ',
                '  - en comparación con los servidores que disponen de gigabytes, esto suele ser un desafio con nuevas posibilidades y problemas ',
            ])
    ];

export const CONTENEDORES =
    [
        new Item('lxc',
            [
                '- Los contenedores de aplicaciones en linux buscaban mejorar la asignación de recursos a los procesos por medio de una interfaz de espacio de usuario ',
                '- Esto con el objetivo de mejorar mejorar el rendimiento de las maquinas virtuales y el uso de recursos de estas ',
                '- El uso de maquinas virtuales y el software de supervisor obligaban a tener un uso de recursos fijo que en ocasiones era desperdiciado ',
                '- En estos contenedores no hay emulación de hardware por lo que solo ejecutaba con lo que necesitaba obteniendolo directamente del host ',
                '- Pero los ambientes no estaban completamente aislados, por lo que compartir el mismo host podia conllevar problemas si habian aplicaciones similares ',
                '- Tambien se ha de tener en cuenta que este ambiente solo estaba disponible en un SO Linux como base, por lo que es poco portable ',
                '- Aunque Docker inicialmente implementaba lxc, este se modifico volviendose muy popular, al punto de ser un estandar en la industria del software ',
                '- Ya sea lxc, Docker o kubernetes, los contenedores solucionaron muchos problemas de compatibilidad facilitando el desarrollo en muchos ambitos ',
            ]),
        new Item('docker',
            [
                '- Esta basado en el Kernel de Linux y su proposito es segregar los procesos de manera que sean independientes ',
                '- Reduce el consumo de recursos al solo tener lo necesario para ejecutar los procesos ',
                '- Desde su aparición las maquinas virtuales han perdido relevancia ',
                '- El uso de los contenedores y todos sus beneficios fue una gran revolución en el desarrollo del software ',
                '- Los contenedores son entornos de ejecución completos haciendolos independientes del sistema anfitrión ',
                '- Los servicios se pueden unir para generar aplicaciones de más complejidad y eficiencia ',
            ]),
        new Item('images',
            [
                '- Son los elementos necesarios para crear instancias de lo que se necesite ',
                '- Estas imagenes pueden ser oficiales ó personalizadas, especificamente para nuestros requerimientos ',
                '- Existen repositorios en la nube donde se pueden descargar o guardar estas imagenes, uno de los principales es DockerHub ',
                '- Toda imagen tiene un tag asociado, para poder diferenciar las versiones entre si, por defecto este tag es latest ',
                '- Las imagenes tambien pueden ser privadas, por lo que se requirira de una autenticación para que se puedan usar ',
                '',
                '- Estas se pueden crear y personalizar de varias maneras: ',
                ' - Creando un contenedor a partir de una imagen base y manipularlo manualmente, para crear una imagen a la medida',
                ' - Mediante un archivo DockerFile: Donde se crea una secuencia de comandos, que a su vez, indica una capa, ',
                '  - las cuales se van apilando y modificando entre si para construir algo más complejo ',
                ' - Tambien existen herramientas automatizadas, configurables y que cumplen los estandares y especificaciones de la OCI'
            ]),
        new Item('containers',
            [
                '- Son las instancias de las imagenes descargadas o creadas previamente, que pueden estar ejecutadonse o estar inactivas ',
                '- <strong>docker ps</strong> Contenedores ejecutandose ',
                '- <strong>docker ps -a</strong> Todos los contenedores existentes, indifirentemente de su estado ',
                '- <strong>docker exec</strong> Para ejecutar comandos dentro del contenedor, sin entrar en el ',
                '- <strong>docker start [nombre_contenedor]</strong> Inicia el contenedor ',
                '- <strong>docker stop [nombre_contenedor]</strong> Detiene  el contenedor ',
                '- <strong>docker restart [nombre_contenedor]</strong> Reinicia el contenedor ',
                '- <strong>docker rm [nombre_contenedor]</strong> Elimina el contenedor ',
                '- para estos comandos tambien se puede usar las id de los contenedores ',
            ]),
        new Item('file',
            [
                '<strong>- FROM</strong> Indica el SO base de la imagen ',
                '<strong>- COPY</strong> Añade archivos del directorio actual a la imagen ',
                '<strong>- RUN</strong> Ejecuta comandos dentro del contenedor necesarios para crear la imagen ',
                '<strong>- CMD</strong> Ejecuta comandos directamente en la consola ',
                '<strong>- LABEL</strong> Son etiquetas del proyecto para dar a conocer información, como licencias ',
                '<strong>- EXPOSE</strong> Indica que puertos estaran abiertos en la imagen para que la aplicación pueda comunicarse con el host',
                '<strong>- ENV</strong> Define las variables de entorno, sirve para ayudar en la configuración de la imagen ',
                '<strong>- ADD</strong> Funciona igual que COPY pero se diferencia a la manera de extraer los archivos de sus ubicaciones ',
                '<strong>- ENTRYPOINT</strong> Establece el comando principal de la imagen, suele ser el comando iniciador de la aplicación ',
                '<strong>- VOLUME</strong> Es para enlazar directorios o archivos entre el host y el contenedor, de manera que se pueda ',
                ' persistir la información aunque se borre el contenedor, como archivos de configuracion o logs generados ',
                '<strong>- USER</strong> Este cambia el usuario del contenedor a uno diferente, el usuario por defecto suele ser root ',
                '<strong>- WORKDIR</strong> Indica el directorio donde trabajara la aplicación, y se recomienda el uso de rutas absolutas para este ',
                '<strong>- ONBUILD</strong> Son comandos que se ejecutaran una vez terminada la construcción de la imagen principal ',
            ]),
        new Item('volumes',
            [
                '- Un volumen es un directorio o fichero que estara asociado a los contenedores, ',
                '- Estos son independientes de los contenedores y no son afectados por la efimeridad de estos ',
                '',
                '- Se crean añadiendo la opción -v al crear un contenedor <strong>docker run -it --name contenedor -v /path imagen:tag bash</strong>',
                '',
                '- Se pueden crear mediante volumenes o como simples directorios, por ejemplo <strong>docker run -it --name contenedor -v vol:/path imagen:tag bash</strong>',
                '',
                '- Todo contenedor crea un volumen con un nombre aleatorio por defecto, estos se pueden consultar mediante 2 formas ',
                ' <strong>- docker inspect [nombre_contenedor]</strong> Mostrando todas las caracteristicas del contenedor en cuestion ',
                ' <strong>- docker volume ls</strong> Enseña todos los contenedores existentes, pero sin sus asociaciones ',
            ]),
        new Item('network',
            [
                '- Cada contenedor de docker tiene una IP asociada, en base a la ip del Host, existen 5 tipos de redes ',
                '',
                '<strong>- Bridge</strong>  Red por defecto de los contenedores cuando no se les especifica una ',
                '<strong>- Host</strong>    El contenedor usara la misma IP del host en el que este ',
                '<strong>- None</strong>    Se le indica al contenedor que no tiene una red asignada ',
                '<strong>- Overlay</strong> Crea multiples redes superpuestas permitiendo la comunicación de servicios en enjambre ',
                '<strong>- Macvlan</strong> Permiten asignar una dirección MAC a un contenedor, apareciendo como un dispositivo fisico en la red ',
                '',
                '<strong> docker network create --driver bridge [nombre_red]</strong> Crea una nueva red, de tipo bridge, cada red creada, creara otra subred ',
                '',
                '<strong> docker run -d -P --name [nombre_contenedor] --network [nombre_red]</strong> Especifica una red cuando estos se crean ',
                '',
                '<strong> docker network connect --link [nombre_contenedor]:[alias] [nombre_red] [nombre_contenedor]</strong> Tambien se puede cambiar despues de la creación ',
            ]),
        new Item('compose',
            [
                '- Docker Compose permite simplificar y administrar los contenedores por medio de archivos YAML ',
                '- Esto permite conectar y administrar a los contenedores y sus puertos, volumenes, configuraciones, etc.. ',
                '- Se puede usar con Dockerfiles previamente creados, o especificar todo directamente en el archivo ',
            ]),
        new Item('kubernetes',
            [
                '- Es una plataforma de codigo abierto para administrar cargas de trabajo y servicios por medio de contenedore ',
                '- Es un proyecto liberado por Google en 2014 que ha crecido con la comunidad y sus buenas practicas ',
                '- Este orquesta la infraestructura redes y almacenamiento, sin intervención de los usuarios ',
                '- Esto ofrece la simplicidad de un PaaS y la flexibilidad de un IaaS ',
                '',
                '- Kubernetes no despliegua ni compila tu aplicación, eso se hacer por medio CI/CD ',
                '- No provee servicios de capa de aplicación como midleware, bases de datos, cache, mensajes ni monitoreo automatico ',
                '',
                '<strong>- Al usar contenedores, con su debida orquetación, se pueden tener las siguientes mejoras:</strong> ',
                ' - Mayor agilidad y velocidad de despliegue de aplicaciones ',
                ' - Consistencia en los entornos de desarrollo, producción y pruebas sin importar las caracteristicas de la maquina fisica ',
                ' - Posibilidad de Microservicios y las ventajas que esto conlleva ',
                ' - Aislamiento de recursos y una mejor administración de estos ',
                '',
                '- El nombre de kubernetes proviene del griego "<i>κυβερνήτης</i>" que significa timonel, de ahi su logo '
            ]),
        new Item('containerOrchestation',
            [
                '- Debido a lo escalable y populares que son los contenedores, es imperativo tener una manera de manejarlos y automatizarlos ',
                '',
                '<strong> - Kubernetes:</strong> Plataforma de codigo abierto, para la gestion y automatización de cargas de trabajo y servicios en contenedores ',
                '<strong> - OpenShift:</strong> Es un PaaS que ayuda en la automatización en entornos de Nube hibrida a nivel empresarial ',
                '<strong> - Nomad:</strong> Orquestador de cargas, simple, flexible y ligero, utilizando Infraesctructura como Codigo(Iac); sin limitarse a contenedores ',
                '<strong> - Docker Swarm:</strong> Utiliza un modelo declarativo para definir un estado deseado, para que Docker mantenga ese estado, mediante nodos ',
                '  - encargados de la administración y de los trabajos, en la versión empresarial es compatible con Kubernetes ',
                '<strong> - Docker Compose:</strong> Define y ejecuta aplicaciones para que funcionen en conjunto, mediante archivos YAML',
                '<strong> - Cloudify:</strong> Orquestación en la nube de contenedores y microservicios, compatible con otros orquestadores basados en Docker como Swarm y Kubernetes ',
                '<strong> - GKE:</strong> Administra los contenedores proveidos por Google Cloud Platform y puede interactuar con la CLI de Kubernetes ',
                '<strong> - AKS:</strong> Es un servicio de Kubernetes autoadministrado, ofrecido por Azure, solamente configurando los nodos de agentes ',
                '<strong> - AWS EKS:</strong> Es un servicio tambien autoadministrado, pero por Amazon, y que usa el potencial de la computación sin servidor (serverless) ',
                '',
                '- Para ver otras opciones o conseguir los enlaces oficiales de cada tecnologia, puedes seguir leyendo el articulo original ',
            ]),
        new Item('openContainer',
            [
                '- Es una proyecto de gobernanza abierta y liviana, formada bajo el auspicio de la Fundación Linux ',
                '- Fue creada en el 2015 por Docker, CoreOs y otros lideres en la industria de contenedores ',
                '- Con el proposito expreso de crear estandares abiertos de la industria en torno a los formatos y especificaciones de ',
                '',
                '- Especificación de tiempo de ejecución <strong>(runtime-spec)</strong>',
                '- Especificación de las imagenes <strong>(image-spec)</strong>',
                '- Especificación de distribución <strong>(distribution-spec)</strong>',
                '',
                '- La especificación de tiempo de ejecución describe como ejecutar un "paquete de sistema de archivos" presente en el disco, ',
                ' - otra implementación descargaria la imagen, se desempaqueta para ser ejecutado, sin argumentos o procesos adicionales para cada paso ',
                '',
                '- Para que las UX el formato de la OCI contiene suficientes especificaciones para usar comandos, variables de entorno, argumentos, etc ',
                '- Para las imagenes construidas, se encuentra generamente un manifiesto de la imagen, las capas, y la configuración ',
                '- Para el ambiente de ejecución, Docker dono su formato de contenedores y su ejecución, para que sirviera como base ',
                '',
                '- Para encontrar los links originales a cada especificación, ademas de otros datos y la comunidad del proyecto, puede revisar la fuente ',
            ])
    ];

export const FRAMEWORKS =
    [
        new Item('frameworks',
            [
                ' - Son marcos de trabajo con la finalidad de acelerar y aumentar la calidad del codigo desarrollado ',
                ' - Evitan perder tiempo desarrollando funciones que el propio entorno ya tiene ',
                ' - Aumentan la productividad y la reutilización de codigo ',
                ' - Existen infinidad de frameworks tanto para back como front, desarrollo movil, persistencia, etc... '
            ]),
        new Item('ioc',
            [
                ' - La inversion de control es la implementación del principio de Hollywood en la que se basan muchos frameworks para funcionar ',
                ' - El framework es quien toma el control de la ejecución del codigo del usuario modificando el ciclo de vida como tal ',
                ' - Permite añadir nuevas funciones prefabicadas sin tener que modificar el codigo por medio de la inyección de dependencias ',
            ]),
        new Item('iod',
            [
                ' - La inyección de dependencias Permite modificar y extender nuestro codigo mucho más facil ',
                ' - Solo es especificar que funcionalidades queremos añadir y estaran disponibles de manera transversal ',
                ' - El codigo modificado se vuelve más reutilizable, compacto y manejable '
            ]),
        new Item('scafolding',
            [
                '- Es la generación automatica de codigo funcional, archivos, carpetas, configuraciones, interfaces graficas, etc... ',
                '- Generalmente se basa en la creación de las operaciones CRUD, basandose en un modelo de datos previo ',
                '- Algunos frameworks pueden ayudar en este sentido, e incluso existen aplicaciones con este proposito ',
            ]),
    ];

export const HARDWARE =
    [
        new Item('escalamiento',
            [
                '- Capacidad de un software para crecer de acuerdo a la demanda ',
                '',
                '<strong> Vertical:</strong> La más facil de realizar pero la más costosa',
                '<strong> vertical:</strong> Esta depende directamente de la capacidad de la infraestructura',
                '<strong> vertical:</strong> Las fallas en la infraestructura pueden conllevar a errores colapsantes ',
                '',
                '<strong> Horizontal:</strong> Esta es más dificil de realizar pero es practicamente ilimitada',
                '<strong> Horizontal:</strong> Se basa en tener varios nodos trabajando en paralelo de manera coordinada ',
                '<strong> Horizontal:</strong> Soporta el balanceo de cargas y tiene una disponibilidad muy alta ',
                '<strong> Horizontal:</strong> El mantenimiento se incrementa considerablemente',
            ]),
        new Item('cli',
            [
                '- Es una interfaz de usuario basada en texto ',
                '- Antes de la invención del mouse, la unica interacción posible con el Sistema Operativo era mediantes comandos ',
                '- Los comandos no son universales, algunos son reconocibles solo por aplicaciones ó Sistemas Operativos especificos ',
                '- Pueden funcionar con o sin argumentos, los argumentos son maneras de especificar detalles y/o configuraciones ',
                '- Son rapidas y más eficientes ya que no necesitan interfaces graficas para funcionar ',
                '- Tambien son más complejas de usar, ya que se basan en la memoria del usuario ',
            ]),
        new Item('virtualizacion',
            [
                '- Es un entorno virtual que funciona con su propia CPU, memoria, red, y almacenamiento, que se crea dentro de un sistema de hardware fisico ',
                '- Esto se da mediante un software llamado hipervisor encargado de separar y gestionar los recursos ',
                ' - de la maquina real para que la VM pueda utilizarlos de manera adecuada ',
                '- Las VM estan aisladas del host, y este a su vez puede contener las VM que soporte ',
                '- Una VM permite que se ejecuten diferentes Sistemas Operativos dentro de la misma maquina ',
                '',
                '- Ventajas ',
                ' - Una ventaja es que permiten aprovechar mejor los recursos de una maquina que no se esten usando ',
                ' - Dado su aislamiento se puede ejecutar software que no es de confianza sin peligro de que dañe al host ',
            ]),
        new Item('nubeVSvirtualizacion',
            [
                '- Ambos conceptos hacen referencia a la creación de entornos utiles a partir de recursos abstractos, bajo diferentes conceptos ',
                '- La virtualización nos permite esto teniendo recursos especificos y de manera fisica ',
                '- La nube es un entorno de TI que agrupa, extrae y comparte recursos ajustables en una red ',
                '',
                '                           Virtualización                    Nube                     ',
                '- Definición                 Tecnologia                   Metodologia                 ',
                '',
                '- Proposito               Multiples entornos,           Agrupar recursos              ',
                '                        un solo sistema fisico        Con alta disponibilidad         ',
                '',
                '- Uso                Entregar recursos especificos  Entregar variedad de recursos     ',
                '                         a usuarios especificos        con multiples fines            ',
                '',
                '- Configuración          Basado en imagenes            Basado en plantillas           ',
                '',
                '- Duracion                  largo plazo                  Mediano plazo                ',
                '',
                '- Escalabilidad               vertical                    horizontal                  ',
            ]),
        new Item('rendering',
            [
                '<strong>- Server-side:</strong> Esta funciona convirtiendo archivos estaticos HTML en información utilizable por el navegador ',
                ' - Este proceso no cuenta con un modo de cache, por lo que cada vez que se necesite, este sera pedido al servidor ',
                ' - Su velocidad no solo depende del servidor, si no de la optimización del sitio web, personas conectadas, etc.. ',
                ' - Generalmente cada vez que hay un cambio se vuelve a pedir todo el contenido y no solo lo que se modifico ',
                ' - El lado positivo de este metodo es el SEO ya que es mucho más eficiente y facil para los motores de busqueda ',
                ' - Este enfoque es ideal para contenido estatico, que no se requiera para una interactividad continua con el usuario ',
                '',
                '<strong>- Client-side:</strong> Esta forma funciona mediante Javascript que obtendra el documento basico de HTML, ',
                ' - y que despues ejecutara el resto del sitio usando al navegador ',
                '- Este enfoque es más reciente y es utilizado por las librerias y frameworks de Javascript como Vue y Angular ',
                '- Mediante esto el servidor solo se encarga de responder con los datos, el resto se hace en el navegador ',
                '- Las paginas se cargan más rapido ya que solo se modifica lo que se necesite y no todo el archivo ',
                '- Debido a que se necesitan todos los archivos para una carga correcta de la pagina, la conexión a internet puede afectar la carga inicial ',
                '- Generalmente se requiere de varias a muchas dependencias de terceros, incluyendo los problemas que esto puede tener ',
            ]),
        new Item('modelOSI',
            [
                '- Es un modelo conceptual que permite la comunicación entre diversos sistemas usando un protocolo estandar ',
                '- Este consta de 7 <strong>Capas</strong> abstractas apiladas verticalmente ',
                '',
                '<strong> 7 Aplicación:</strong>      Interacción hombre-maquina donde las aplicaciones pueden acceder a servicios de red ',
                '<strong> 6 Presentación:</strong>    Garantiza que los datos tengan un formato utilizable, además se encriptan los datos si es necesario ',
                '<strong> 5 Sesión:</strong>          Mantiene las conexiones y es el responsable de controlar puertos y sesiones ',
                '<strong> 4 Transporte:</strong>      Transmite los datos mediante protocolos de transmision, incluidos TCP y UDP ',
                '<strong> 3 Red:</strong>             Decide la ruta fisica que seguiran los datos, ya sea en la misma o en otra red ',
                '<strong> 2 Enlace de datos:</strong> Define el formato de los datos en la red, además de controlar errores de flujo ',
                '<strong> 1 Fisica:</strong>          Transmite el flujo de bits sin procesar a traves del medio fisico, y que estos sepan diferenciar el 1 y el 0 ',
                '',
                '- Esta organización de capas permite una mejor depuración de errores, ',
                ' - a la vez que cada capa tiene una responsabilidades bien definidad a la hora de recibir o enviar información ',
            ]),
        new Item('monitoreo',
            [
                '- Es un software que nos permite monitorizar y descubrir problemas a nivel de aplicación que pueden ser optimizados ',
                '- Para esto, es necesario recoger y cuantificar valores como: ',
                ' - Errores de la aplicación, especificando cuales y cuantas veces sucedieron ',
                ' - Tiempo de respuesta de la aplicación ',
                ' - Identificación de trazas lentas ',
                ' - Tiempo de ejecución de querys en la base de datos ',
                ' - Tiempo de respuesta de llamados externos ',
                '',
                '- Mediante esto es posible encontrar errores como: ',
                ' - Consultas a bases de datos que pueden ser optimizadas ',
                ' - Problemas con el Garbage Collector o la JVM ',
                ' - Manejo erroneo de problemas ',
            ]),
        new Item('vmVsContainers',
            [
                '                    <strong>Virtualización</strong>                                        <strong>Contenedores</strong>               ',
                '         - Reduce los costos asociados al hardware             - Requieren menos recursos y son más livianos                           ',
                '           al utilizar recursos desperdiciados                 - Más eficientes y escalables                                           ',
                '<strong>Pros</strong>     - Aislamiento de las aplicaciones                     - Son más congruentes y simplifican el CD/CI           ',
                '         - Menos espacio en equipos fisicos                    - Son más portatiles e interoperables                                   ',
                '                                                                                                                                       ',
                '                                                                                                                                       ',
                '         - Se encuentran limitados por los recursos del host   - No siempre tienen mejor rendimiento                                   ',
                '<strong>Contras</strong>  - Arranque lento, dependiente del host                - No son idoneos para administrar dispositivos fisicos ',
                '         - Pueden ser infectadas por el host                   - No esta 100% estandarizado, entre provedores                          ',
                '                                                               - Las aplicaciones graficas no funcionan bien                           ',
            ]),
        new Item('falseSharing',
            [
                '- Suele suceder cuando varias aplicaciones intentan acceder a la misma region de memoria logica y ',
                ' - cada programa/subprograma a su vez ha almacenado un copia de este valor, en su propio cache',
                '- Cada vez que este sufre alguna modificación, esto hace que las demás partes sean invalidas y deban consultar el valor actual ',
                '- El problema del "falso compartir", radica cuando los datos afectados por un programa, no son usados por los otros; ',
                ' - si no que estan situados en la misma linea del cache',
                '- Obligando a realizar consultas innecesarias en memoria, que afectan el rendimiento',
                '- Este es un problema dificil de detectar, debido a que es inherente a la arquitectura de los componentes fisicos ',
                '- Esto tambien suele suceder cuando se paralelizan procesos, invalidando bloques comunes constatemente, aunque no este compartidos ',
                '',
                '- Suelen haber contramedidas, desde alto nivel hasta bajo nivel',
                ' - Colocar espacios en blancos, antes o depues de los datos, a manera de que queden en lineas de cache separadas ',
                ' - Modificar la velocidad de lectura/escritura del cache para reducir la periocidad ',
                ' - Cambiar la administración del cache del componente fisico ',
                ' - Alterar como el SO administra el uso compartido',
            ]
        )
    ];

export const WEB =
    [
        new Item('spa',
            [
                '- Es una aplicación web donde todo el contenido se muestra en una sola sin regargar el navegador ',
                '- Los componentes son segmentos individuales de HTML que juntos dan la impresión de unidad ',
                '- Este tipo de paginas tambien maneja las url para cambiar entre vistas ',
                '- La transición entre las paginas es fluida y el rendimiento es mayor en general ',
                '- Los frameworks actuales trabajan de esta manera ',
            ]),
        new Item('pwa',
            [
                '- Estas aplicaciones nacen de paginas web normales para parecerse a aplicaciones nativas de telefonos moviles ',
                '  - NO se necesita descargar nada desde una tienda de aplicaciones, solo tener acceso a un navegador con internet ',
                '  - Aunque necesitan internet para actualizaciones de la información, tambien puede funcionar sin este ',
                '  - Bastante acorde con el enfoque mobile-first, que le da prioridad al movil que al escritorio ',
            ]),
        new Item('seo',
            [
                '- La indexación de contenido es una gran herramienta para buscar lo que se necesita ',
                '- El contenido de calidad es una de las mejores formas de aumentar el trafico del sitio web ',
                '- La accesibilidad al contenido y la experiencia del usuario tambien son importantes ',
                '- Saber como funcionan los motores de busqueda, permite optimizar el sitio para que sea más "visible" para estos ',
            ]),
        new Item('espacio',
            [
                '- Es el espacio que se encuentra alrededor del objeto en cuestión, bastante util para crear diseños simples pero atractivos ',
                '- El uso del espacio positivo y negativo puede dar pie a ilustraciones con mensajes directos pero sutiles ',
                '- Un gran artista sabe manejar estos conceptos, e imprimirles su toque unico, como en el articulo fuente se denota ',
            ]),
        new Item('diseno',
            [
                '- El diseño grafico es importante en la programación debido a que este sera la cara visible de tu producto ',
                '- Es importante contestar respuestas previamente como: ¿ cual es tu objetivo ? & ¿ cual es tu producto ? ',
                '- NO descuides el color, tener una paleta de colores es tener una identidad ',
                '- Además de la identidad es importante saberlos combinar y tener un buen contraste y legibilidad entre si ',
                '- El uso de las imagenes y las fuentes tipograficas son más importantes de lo que parecen ',
            ]),
        new Item('interfacesUsuario',
            [
                'Principios para el diseño de una UI',
                ' - Familiaridad con el usuario -> utilizar conceptos y la experiencia del usuario para que le sea más "facil" de usar ',
                ' - Consistencia -> las operaciones del mismo tipo deberian hacerse del mismo modo siempre ',
                ' - Minima sorpresa -> el comportamiento del sistema no debe provocar sorpresa en el usuario ',
                ' - Recuperabilidad -> los usuarios deben tener mecanismos para recuperase en caso de error ',
                '  -  para este apartado se pueden usar confirmaciones o recursos para deshacer opciones ',
                ' - Guia al usuario -> cuando un error ocurra, la interfaz debe ayudar al usuario a entenderlo ',
                '',
                'Prototipos de una UI',
                ' - Estaticos -> No permiten la alteración de sus componentes, pero si dan un bosquejo inicial ',
                ' - Dinamicos -> Estos diseños involucran un poco más de detalle tecnico, como especificaciones de rendimiento ',
                ' - Robustos -> Ya presentan caracteristicas dinamicas, como validación de errores y edición de datos ',
                '',
                'Interacción del usuario en la UI',
                ' - Manipulación directa -> interacción directa con los objetos de la pantalla ',
                ' - Selección de menus -> se limitan las opciones, a cambio de ser más lenta y menos propensa a errores ',
                ' - Formularios -> introducción de datos, por parte del usuario ',
                ' - Comandos -> los usuarios emiten comandos y sus parametros asociados para realizar acciones más complejas ',
                ' - Lenguaje -> usar un lenguaje natural que el usuario comprenda, lo hara accesible a más tipos de usuarios ',
                '',
                'Pautas de evaluación de una UI',
                ' - Semejanza con el mundo real ',
                ' - Consistencia y estandarización ',
                ' - Estetica y diseño minimalista ',
                ' - Reconocimiento, manejo y recuperración de errores ',
                ' - Flexibilidad, control y libertad para el usuario ',
                ' - Reconocimiento de acciones y ayudas ',
            ]),
        new Item('experienciasUsuario',
            [
                '- Es la percepción del usuario al interactuar con un producto ',
                '- Una buena UX se logra cuando el producto a la hora de usar el producto sea util y usable por el cliente ',
                '- La UX no es lo mismo que la usabilidad, ya que esta la contiene además de otras caracteristicas ',
                '- Este objetivo no se logra agregando funcionalidades, si no, estando en el lugar de un cliente ',
                '',
                '- Para esto es necesario tener en cuenta: ',
                ' - Necesidades del cliente ',
                ' - Objetivos del negocio ',
                ' - Limitaciones tecnicas ',
                '',
                '- Tambien es necesario realizar investigaciones tales como: ',
                ' - Investigacion de los grupos de mercado y entrevistas con stakeholders ',
                ' - Pruebas de usabilidad y analisis de datos ',
                ' - Manejo y estructuración de la información presente ',
                '',
                '- Además se deben tener habilidades blandas como: ',
                ' - Estudios en Psicologia, Sociologia o Antropologia ',
                ' - Conocimientos en Comunicación , Marketing, y experiencia en ventas ',
                ' - Diseño industrial o grafico, y conocimientos en tecnologias ',
            ]),
        new Item('logos',
            [
                '- Isotipo -> parte reconocible de una marca sin presencia de texto ',
                '- Isologo -> el texto y el icono son parte de un mismo conjunto, no funcionan por separado ',
                '- Logotipo -> texto que representa la marca y es la parte reconocible de esta ',
                '- Imagotipo -> combinación de imagen y texto, que tambien pueden separarse y ser efectiva ',
            ]),
        new Item('gestalt',
            [
                '- Es una manera de encontrar sentido en como nuestras mentes perciben las cosas ',
                ' - como un todo y no solo como los elementos que lo forman ',
                '- <em>El todo es mayor que la suma de sus partes </em>',
                '',
                '- Aparición -> surge cuando se percibe un objeto a partir de información previa que conozcamos ',
                '- Cosificación -> los objetos se pueden reconocer incluso cuando hace falta parte de ellos, ',
                ' - Nuestro cerebro hace coincidir lo que se ve con patrones familiares en nuestra memoria ',
                '- Multiestabilidad -> Se basa en que los objetos ambiguos pueden ser interpretados de diferentes maneras, ',
                ' - y que dado esto se puedan ver varias formas, sin tener certeza de la verdadera ',
                '- Invariabilidad -> los objetos simples pueden ser reconocidos independientemente de, ',
                ' - su escala, rotación, traslación o perspectiva ',
                '',
                '- Leyes de Gestalt aplicadas al diseño grafico ',
                '',
                '- Principio de semejanza -> si elementos que esten proximos entre si, y son similares ',
                ' - tenderemos a verlos como parte de un grupo, ya sea por color, tamaño o textura ',
                '- Principio de continuidad -> el ojo puede crear visualmente la continuidad de una linea, ya que el ojo ',
                ' - va a seguir el camino visual más suave, menos forzado y coherente ',
                '- Principio de cierre -> cuando una figura no esta cerrada o delimitada por lineas, nuestra mente ',
                ' - tiende a transmitir una sensación de cierre, rellenando las formas ',
                '- Principio de proximidad -> teoriza como tendemos a agrupar los elementos visuales proximos entre si ',
                ' - estos deben compartir alguna caracteristica en comun como forma, color, textura, tamaño ',
                '- Figura y fondo -> Usando el espacio negativo y la tendencia de ver un objeto separado de lo que lo rodea ',
                '- Principio de Simetria y Orden -> si los elementos cuentan con cierta simetria y orden ',
                ' - son percibidos como parte del mismo grupo ',
                '- Dirección comun -> los elementos que parecen contruir un patron o flujo continuo y en la misma dirección ',
                ' - son a su vez percibidos como parte de un grupo mayor ',
            ]),
        new Item('ssr-csr-ssg-isr',
            [
                '<strong>Server Side Rendering (SSR)</strong>',
                '- El HTML de la pagina es generado en el lado del servidor, ya sea mediante petición, o previamente ',
                '- Ventajas: ',
                ' - Mejora el SEO y la indexación del contenido ',
                ' - La carga inicial es más rapida al no tener que ejecutar nada más para mostrar el contenido ',
                ' - Puede funcionar, incluso si el Javascript dentro del navegador esta desactivado ',
                '- Desventajas: ',
                ' - Mala capacidad de respuesta si la conectividad a internet es baja o nula ',
                ' - Mayor carga al servidor, al tambien ser responsable de generar o entregar el HTML a mostrar ',
                '',
                '<strong>Client Side Rendering (CSR)</strong>',
                '- Ya es responsabilidad del navegador, y mediante Javascript se manipula el DOM para construir los nodos HTML ',
                '- Ventajas: ',
                ' - Rapido y con una mayor capacidad de interactividad con solo la carga inicial ',
                ' - Se puede escoger que partes del DOM se pueden actualizar para mostrar nueva información ',
                '- Desventajas: ',
                ' - La carga inicial es más lenta al tener que esperar para ejecutar javascript ',
                ' - Inutil si javascript esta deshabilitado en el navegador ',
                ' - El SEO se puede ver dificultado por el contenido inicial en blanco ',
                '',
                '- Desde la creación de NodeJs, se abrio la posibilidad de crear paginas hibridas, que comparte caracteristicas de ambos mundos ',
                '- Creando contenido inicial en el lado del servidor que no este completamente vacio y agregarle más funcionalidades en el navegador ',
                '- El proceso de agregar más interactividad a estos sitios estaticos se conoce generalmente como "Hidratación" ',
                '',
                '<strong>Static Site Generators(SSG)</strong>',
                ' - Estos ejecutan el codigo SPA en el momento de la compilación, y generan previamente el HTML en el servidor ',
                ' - Algunos frameworks como NextJs, Gatsby, NuxtJs, VuePress usan estas estrategias, ',
                ' - sin de dejar de ofrecer las caracteristicas de React y Vue en los cuales estan basados ',
            ]),
        new Item('esqueumorfismo',
            [
                '- Es un termino proveniente del griego <em>skeuos</em>, que significa vasija ó herramienta; y <em>morfo</em>, que significa forma ',
                '- La aplicación más reciente y generalizada esta ligada al primer Iphone, ya que cada icono intentaban evocar a su contraparte fisica ',
                '- Todo esto buscaba ser amigable con el usuario, además de jugar con el color y las sombras para acercarse aun más ',
                '',
                '<strong>- Flat Design:</strong> Con el paso del tiempo, los usuarios nos acostumbramos a usar y hasta diseñar interfaces, ',
                ' por lo que la necesidad de tener un icono el cual fuera una copia exacta fue perdiendo relevancia en el tiempo ',
                '- Esto con el fin de tener más relevencia en otras areas como el rendimiento y la funcionalidad ',
                '- Este tipo de diseño apuesta por iconos más abstractos y simples, de manera que llegan a carecer de colores, sombras y bordes ',
                '',
                '<strong>- Diseño neomorfico:</strong> Como el arte mismo, el diseño avanza, y esta evolución no significa que las corrientes mueran ',
                '- Este diseño se puede considerar una fusión de los 2 estilos anteriores ',
                '- Se mantienen los iconos realistas sin caer en un exceso de detalles que sobrecarguen la experiencia ',
                '- A su vez se usan colores mezclas y degradados bastante expresivos, que van más alla de la cotidianidad ',
            ]),
        new Item('menorSorpresa',
            [
                '- Es una guia de diseño para las interfaces de usuario, donde cada componente debe comportarse  ',
                ' - de la manera que la mayoria de los usuarios se comporte o ya esten acostumbrados ',
                '- Los comportamientos deberian poder anticiparse, basandose en experiencias previas, con sistemas similares ',
                '- Esto garantiza que la aplicación sea intuitiva y facil de usar, en cierto modo ',
                '',
                '- Esto tambien aplica para el diseño de las APIs, si esta se comporta diferente y sorprende al usuario, se deberia pensar en rediseñarla ',
                '- El patron de Segregación de consultas y queries(CQRS), va de la mano con este principio, ',
                ' - separando los metodos que cambian un objeto(comando), de los que hacen preguntas(consultas)',
            ])
    ];

export const META_ESTRUCTURAS =
    [
        new Item('scope',
            [
                '- Se puede definir como el alcance que tendran las variables en tu codigo ',
                '',
                '<strong>- Scope Local:</strong> Las variables seran accesibles solamente en el ambito declarado como lo puede ser:  ',
                ' - dentro de una función, dentro de una clase, dentro de una sentencia de control ',
                '',
                '<strong>- Scope Global:</strong> Se pueden acceder desde cualquier parte de tu codigo, más aun asi no se recomiendan ',
                ' - En el caso de Javascript se recomienda usar <strong>let</strong> y <strong>const</strong>, ya que el <strong>var</strong> puede traer bugs consigo ',
            ]),
        new Item('precedencia',
            [
                '- los operadores en las expresiones tienen una jeararquia predeterminada que determina el orden de evaluación ',
                ' - Operadores con igual prioridad se evaluan de izquierda a derecha ',
                ' - Operadores logicos y de operación bit a bit de izquierda a derecha ',
                ' - Operadores matematicos, se respeta la jeararquia matematica, a menos que se involucren parantesis ',
                ' - Los parentesis afectan el orden de evaluación, al mismo tiempo que permiten asociar expresiones ',
                ' - La precedencia puede cambiar de lenguaje a lenguaje, por lo que se recomienda saber las especificaciones de cada uno ',
            ]),
        new Item('verticalAndHorizontal',
            [
                '- Una buena estructura es primordial para todo proyecto, sin embargo no siempre debe reflejar la arquitectura del proyecto',
                '',
                '<strong>- Estructura horizontal:</strong> Estaba fuertemente ligado al modelo en cascada, donde se realizaban capas transversales ',
                ' - a todo el sistema, de manera que todo los componentes estaban separados entre si ',
                '- Esta estructura suele ser compleja de entender si no se entiende el negocio, además de que no todos necesitan las mismas partes para funcionar ',
                '',
                '    Products       Orders                  Customers                   ',
                '-------&darr;-------------&darr;-----   Views      -----&darr;---------',
                '-------&darr;-------------&darr;-----  Presenter   -----&darr;---------',
                '-------&darr;-------------&darr;-----   Domain     -----&darr;---------',
                '------ &darr;-------------&darr;-----  Services    -----&darr;---------',
                '-------&darr;-------------&darr;-----  Entities    -----&darr;---------',
                '-------&darr;-------------&darr;----- Repositories -----&darr;---------',
                '-------&darr;-------------&darr;-----  DataSource  -----&darr;---------',
                '',
                '<strong>- Estructura vertical:</strong> En esta organización prima el dominio, por lo que cada capa esta aislada entre si ',
                ' - toda la estructura de un componente es independiente entre si, y más facil de modificar ',
                '',
                '    Products           Orders            Customers        ',
                '|    Views     |   |    Views     |   |    Views     |    ',
                '|   Presenter  |   |   Presenter  |   |   Presenter  |    ',
                '|    Domain    |   |    Domain    |   |    Domain    |    ',
                '|   Services   |   |   Services   |   |   Services   |    ',
                '|   Entities   |   |   Entities   |   |   Entities   |    ',
                '| Repositories |   | Repositories |   | Repositories |    ',
                '|  DataSource  |   |  DataSource  |   |  DataSource  |    ',
            ]),
        new Item('expresionesRegulares',
            [
                '- Una expresion regular es una forma de buscar coincidencias o patrones de manera optimizada ',
                '- No solo permite encontrar coincidencia, tambien permite modificar lo que se haya encontrado ',
                '- Las expresiones regulares se basan en diagramas de estado, ya que todas las transiciones se deben cumplir, ',
                ' - para que el texto a evaluar cumpla con la condicion dada de la expresion ',
                '- Estas expresiones en si se escriben igual, y son independientes del lenguaje que se use ',
                '- Los compiladores de muchos lenguajes se basan en analizadores sintacticos, para analizar el codigo copiado, ',
                ' - estos a su vez se basan en expresiones regulares para saber si se cumplen con las condiciones del lenguaje ',
            ]),
        new Item('estructurasDatos',
            [
                '- Es un concepto general que comparten muchos lenguajes de programación ',
                '- Que a su vez cambia segun el lenguaje, dependiendo de cada implementación ',
                '- Una estructura es una colección de valores organizados, sobre los cuales se pueden administrar y hacer operaciones con ellos ',
                '- Tambien existe una manera estandarizada o implementada por el mismo lenguaje para acceder a los datos, y suelen ser de distintos tipos: ',
                '',
                '<strong>- Contiguamente asignadas:</strong> Compuestas por bloques de memorias unicos e incluyen a: <em>Arrays, Matrices, Heaps, Hash Tables</em>',
                '<strong>- Estructuas enlazadas:</strong> Son distintos fragmentos de memoria unidos por punteros e incluyen: <em>Listas, Arboles y Grafos </em>',
                '<strong>- Contenedores:</strong> Permiten almacenar y recuperar datos en un orden determinado y contienen: <em>Pilas y colas</em>',
                '',
                '- Existen más tipos de estructuras, pero estas son de las más comunes y usadas generalmente ',
            ]),
        new Item('estructurasDatos2',
            [
                '<strong>- Arrays:</strong> Colección de elementos de una o varias dimensiones con un tamaño fijo y de un tipo especifico ',
                '<strong>- Aplicaciones:</strong>',
                ' - Resultados de busquedas             - Sistemas GPS                 - Calendarios',
                '',
                '<strong>- Colas:</strong> Siguen la estructura <em>FIFO</em>; primero en entrar, primero en salir ',
                '<strong>- Aplicaciones:</strong>',
                ' - Atención de usuarios                - Mensajeria                   - Impresiones ',
                '',
                '<strong>- Listas enlazadas:</strong> Son elementos separados formados de manera lineal, pero cada elemento contiene algun enlace del siguiente elemento, ',
                ' - tambien pueden enlazarse con el elemento anterior si son del tipo doblemente enlazadas ',
                '<strong>- Aplicaciones:</strong>',
                ' - Reordenación                        - Eliminación                  - Inserción ',
                '',
                '<strong>- Pilas:</strong> Sigue la estructura <em>LIFO</em>; ultimo en entrar, primero en salir, aca solo se puede ingresar o eliminar elemento, no permite busquedas ',
                '<strong>- Aplicaciones:</strong>',
                ' - Acciones tipo Undo/Redo             - Evaluación de expresiones    - Backtracing ',
                '',
                '<strong>- Arboles:</strong> Estructura de datos jerararquica, que consta de nodos conectados, y no hay relaciones ciclicas, ',
                ' - por lo que cada nodo solo tiene un camino de acceso, facilitando las busquedas y las modificaciones ',
                '<strong>- Aplicaciones:</strong>',
                ' - Sistemas de archivos                - Inteligencia Artificial      - Enrutamiento de redes',
                ' - Indexación de bases de datos        - Compiladores                 - Compresión de datos ',
                '',
                '<strong>- Grafos:</strong> Consta de Vertices(nodos) conectados mediante aristas que pueden ser caminos con una sola dirección o bidireccioneales, ',
                ' - convirtiendose en Grafos Dirigidos o No dirigidos respectivamente ',
                '<strong>- Aplicaciones:</strong>',
                ' - Modelado de relaciones              - Analisis de redes            - Redes sociales',
                ' - Sistemas de recomendación           - BD No relacionales '
            ]),
        new Item('homoiconicidad',
            [
                '- Es una propiedad que comparten algunos lenguajes de programación en los cuales el propio lenguaje, se puede manipular y comportarse como un dato más ',
                '- La representación primaria de esto tambien es una estructura de datos en un tipo primitivo del lenguaje ',
                '<strong>Ventajas:</strong> ',
                ' - Extender el lenguaje con nuevos conceptos es más sencillo ',
                ' - Los datos pueden ser pasados entre capas, como lo son la capa base y meta del programa ',
                ' - Permite realizar operaciones de manipulacion de codigo en tiempo de compilación en vez de ejecución ',
                ' - Se puede modificar el arbol de sintaxis del lenguaje ',
            ]),
        new Item('maquinaEstados',
            [
                '- Es una modelización conceptual en forma de diagrama de un problema ',
                '- En esta situación siempre se encuentra un inicio, el cual es la espera de un estimulo ',
                '- Esto nos da una base para modelar problemas que pueden ser sustancialmente complejos, además de extensos ',
                '',
                '<strong>Elementos de un diagrama</strong>',
                '<strong> - Estados:</strong> Posición o acción en la cual se encuentra actualmente y de la cual es posible ',
                '  - saltar a otro estado, o a si mismo, impulsado por una acción con un resultaod en concreto ',
                '<strong> - Entradas:</strong> Interacciones o acciones que pueden alterar un estado y hacerlo cambiar a otro ',
                '<strong> - Salidas:</strong> Acciones con las cuales el estado responde despues de ser previamente alterado ',
                '<strong> - Eventos:</strong> Son las acciones o interacciones que puede tener un estado, internas o externas ',
                '<strong> - Transiciones:</strong> Son los caminos, que se pueden tomar entre estados, estos deberian estar acotados ',
                '  - y comprobar que las condiciones se dan para realizar el cambio',
                '',
                '- Este sistema "simple", y en casos trivial, evoluciono para ser parte fundamental de la informatica ',
                '- Acualmente las maquinas de Mealy y de Moore son usadas para crear maquinas de estados finitos "FSM" ',
                '- Para realizar estos esquemas lo primero es definir las entradas, salidas y sus estados ',
                '- Despues se realiza una tabla donde se definen las relaciones entre estos',
                '- Finalmente se grafica teniendo en cuenta las entradas y salidas de cada estado ',
                '',
                '- Si los sistemas se llegan a complicar o extender demasiado, se pueden realizar simplificaciones mediante algebra de Boole',
            ]),
        new Item('sistemasComplejos',
            [
                '<strong>Caracteristicas:</strong>',
                '<strong> - Comportamiento impredecible:</strong> Son sensibles a las condiciones iniciales ',
                '<strong> - Conectividad:</strong> Los subsistemas se afectan mutuamente, aun sin conexión directa ',
                '<strong> - Auto organización:</strong> Tendencia constante de generar patrones de comportamiento ',
                '<strong> - Jerarquia:</strong> Cualquier cambio de una jerarquia, afectara a esta ',
                '<strong> - Historico-dependientes:</strong> El tiempo es un factor muy importante a tener en cuenta ',
                '<strong> - Irreductubilidad:</strong> La estructura o no se puede, o es muy dificil de reducir a estados más simples',
                '<strong> - Dialogicos:</strong> Los opuestos no se excluyen, se complementan ',
                '<strong> - Recursivos:</strong> Las causas y los resultados se alternan en el tiempo ',
                '<strong> - Hologrametricos:</strong> Hay identidad estructural entre las partes y su todo ',
                '',
                '<strong>Principios:</strong>',
                '<strong> - Equifinidad:</strong> Los estados finales son alcanzables sin importar las condiciones iniciales ',
                '<strong> - Heterogeneidad auto organizacional:</strong> La complejidad aumenta en medida que se interactua con la entropia del entorno ',
                '<strong> - Complejidad organizada:</strong> Los sistemas abiertos conjugan complejidad y orden ',
                '<strong> - Abundancia organizacional:</strong> Las estructuras complejas, son encontradas con facilidad ',
                '<strong> - Teleologico:</strong> Finalidades especificas dependen de sistemas especificos ',
                '<strong> - Retroalimentación:</strong> Se pueden tener feedbacks positivos y negativos ',
                '<strong> - Complejidad jerarquica:</strong> A mayor complejidad, mayor jerarquización ',
            ]),
        new Item('funcionesLambda',
            [
                '- Son una subrutina definida no enlazada a un identificador, tambien llamadas funciones anonimas o literales ',
                '- Suelen ser usadas como argumentos o contruir respuestas en funciones de orden superior ',
                '- Son comunes en los lenguajes funcionales y/o multiparadigma ',
                '- Pueden ser expresiones simples o tener varias instrucciones ',
                '',
                '<strong>- Sintaxis:</strong>',
                ' - Lambda de expression -> (parametros) => expression ',
                ' - Lambda de instruccion -> (parametros) => { sequencia de expresiones } ',
                '',
                '- Otra ventaja de las lambdas es que estas son capaces de inferir los tipos de los parametros de entrada ',
                '- Su sintaxis suele ser más concisa y combinada con otras caracteristicas como los Stream permiten el paradigma funcional en Java ',
            ]),
        new Item('valueObjects',
            [
                '- Es apliamente usado en <strong>DDD</strong> (Domain Driven Design)',
                '- Estos son una modelación de un concepto en nuestro sistema, como pueden ser fechas, precios, monedas, cantidades, etc.. ',
                '',
                '<strong>Caracteristicas</strong>',
                ' - Estan concebidos para medir o describir un concepto en nuestro dominio, no son simplemente valores, sino que cumplen alguna función ',
                ' - Son inmutables y su construcción no debe ser demasiado compleja ',
                ' - Siempre son validos, y si no lo son deben de lanzar una excepción, se pueden usar constructores semanticos para facilitar su creación ',
                ' - No poseen identidad, por lo que su comparación se basa solamente en sus valores ',
                '',
                '<strong>Testing</strong>',
                ' - Testear un VO esta relacionado directamente a la complejidad de los valores que represente ',
                ' - Generalmente solo se validan sus valores y que sus operaciones no incumplan la inmutabilidad (side-effects)',
            ]),
        new Item('dynamicProgramming',
            [
                '- Es una tecnica de programación informatica en la que un problema algoritmico se divide en subproblemas y los resultados se guardan, ',
                ' - y los subproblemas se optimizan para encontrar la solución general, generalmente relacionado con encontrar valores limites y optimizaciones ',
                '- Al tratarse de problemas largos y complicados almacenar los resultados en vez de calcularse cada vez es considerablemente más optimo ',
                '- Pero solo es aplicable cuando los problemas son dividibles y hay valores que se pueden repetir y/o necesitar en varios lugares (superpuestos)',
                '- La programación recursiva es una manera de optimizar algunos problemas que son solucionables mediante recursividad ',
                ' - sin contar con los problemas de esta, como el crecimiento desmedido de la pila de llamados y el uso de memoria poco optimizado ',
                '',
                '<strong>- Ventajas:</strong>',
                ' - Dividir los problemas más grandes en varios más pequeños y manejables',
                ' - Permite almacenar y reutilizar los subproblemas',
                ' - Facilita la depuración a la hora de buscar errores ',
                ' - Reduce la complejidad temporal al no usar recursividad y optimiza el uso de recursos',
                ' - Toma decisiones del alcance de los subproblemas, para que sean reutilizables y decide como se combinaran ',
                '',
                '<strong>- Algoritmos principales</strong>',
                ' <strong>- Algoritmos codiciosos:</strong> Son herramientas de optimización, optando por valores optimos locales que no necesariamente seran los globales ',
                ' <strong>- Floyd-Warshall:</strong> Encuentra la ruta más corta entre todos los vertices en un grafo con pesos, ya sean dirigidos o no dirigidos ',
                ' <strong>- Bellman Ford:</strong> Encuentra la ruta más corta entre desde un vertice fuente a un vertice destino ',
            ]),
        new Item('serializationDeserialization',
            [
                '- Son 2 conceptos importantes en la programación en general, que permiten que los objetos puedan ser almacenados, transmitidos y reconstruidos ',
                ' - ya sea para su persistencia, ser transmitidos a traves de una red o ser almacenados en un cache en memoria ',
                '',
                '<strong>Serialización:</strong> Un objeto tiene 3 caracteristicas principales, Identidad, estado y comportamiento, ',
                ' - La serialización es el proceso de convertir el estado(valor o datos) de un objeto en un flujo de bytes ',
                '',
                '<strong>Formatos:</strong> Se pueden usar diferentes formatos, como <em>Json</em> o <em>Xml</em> porque son formatos legibles y/o faciles de interpretar por otro sistema ',
                ' - o en cambio el <em>Binario</em> para temas de rendimiento al ser más rapidos de leer y escribir que aquellos basados en texto ',
                '',
                '<strong>Deserialización:</strong> Es justamente el proceso inverso, donde se toma este flujo de bytes y se convierte de nuevo en un objeto, como el original ',
                ' - para esto, existen librerias e implementaciones propias de los lenguajes',
                '',
                '<strong>Consideraciones:</strong> ',
                '<strong> - Rendimiento:</strong> Entre más complejo y/o grande sea el objeto, más costara Serializar o Deserializar para el sistema ',
                '<strong> - Plataformas y dependencias:</strong> Este proceso tambien depende en que se haga y que lenguaje, por lo que puede haber incompatibilidades ',
                '<strong> - Versiones:</strong> Los objetos cambian, se modifican con el tiempo, por lo que versiones más nuevas puede haber problemas entre versiones diferentes ',
                '<strong> - No serializables:</strong> En ciertos casos, hay objetos que no se pueden serializar, como identificadores de archivos o sockets ',
                '<strong> - Seguridad:</strong> Suplantar los flujos de bytes con fines malintencionados, puede exponer las vulnerabilidades de un programa ',
                '<strong> - Legibilidad:</strong> Los datos que se serializan generalmente no son legibles para los humanos, lo que dificulta la solución de problemas ',
                '  - directamente relacionados con los datos en este estado, ya sea en la transmision o el almacenamiento ',
            ])
    ];

export const PARADIGMAS =
    [
        new Item('imperativo',
            [
                '<strong>- Imperativo:</strong> Paradigma clasico de la programacion, secuencia ordenada de acciones a ejecutar',
                ' - intentando ser los más cercano a lenguaje maquina posible, siendo un enfoque compresible y que abarca otros 3 subordinados ',
                '',
                ' <strong>- Estructurado:</strong> Donde se incluyen sentencias de control y se contemplan las interrupciones, evitando ',
                '  - instrucciones de salto absolutas, que pueden introducir errores fatales y que son dificiles de mantener ',
                ' <strong>- Procedimental:</strong> Donde se empieza a crear funciones y metodos para no repetir código, que tambien pueden ser llamados ',
                '  - como subprogramas, rutinas, o procedimientos, dependiendo del lenguaje, creando fragmentos más manejables y claros',
                ' <strong>- Modular:</strong> Se agrupan segmentos más grandes de código independientes entre si, para facilitar la depuración, ',
                '  - similar el enfoque procedimental, pero con bloques más grandes y que pueden acoplarse entre si y crear aplicaciones ',
                '',
                '<strong>- Declarativo:</strong> Se describe el resultado de la operación y no el como, requiriendo una mayor abstracción con menos instrucciones, ',
                ' - resultando en acciones más precisas, cortas y entendibles, ayudando a la reutilización y con soporte por una gran cantidad de lenguajes ',
                '',
                ' <strong>- Funcional:</strong> La base son las funciones que se pueden concatenar para formar estructuras o usarse como parametros ',
                '  - Asimismo se pueden usar como resultados, esto tambien se ocupa de que no hayan asignaciones independientes de valores ',
                ' <strong>- Logica:</strong> La base es la matematica y su logica para predicar el resultado, aca en vez de tener una sucesión de instrucciones, ',
                '  - se tiene una recopilación de hechos y suposiciones a las que el interprete le aplica reglas para alcanzar el resultado '
            ]),
        new Item('funcional',
            [
                '- Las acciones son delegadas a funciones propias del lenguaje, o funciones personalizadas, con ayuda del propio lenguaje ',
                ' <strong>- Funciones Puras:</strong> Dada una entrada siempre van a tener la misma salida',
                ' <strong>- Composición:</strong> Se pueden juntar y crear una secuencia y resultado diferente ',
                ' <strong>- Estados compartidos:</strong> Son los cambios visibles fuera de la función llamada ',
                ' <strong>- Mutabilidad & Inmutabilidad:</strong> Son conceptos con una gran relevancia ',
                ' <strong>- Efectos secundarios</strong> Todo cambio de estado, que se de por fuera de la función llamada se evitan principalmente ',
            ]),
        new Item('scripting',
            [
                '- Son lenguajes no compilados y que se ejecutan directamente en el lado del cliente, aunque tambien existen en el lado del servidor ',
                '- El más famoso es Javascript, pero otros como Python y Ruby tambien lo son',
                '- Suelen ser menos eficientes al no ser compilados pero conllevan menos trabajo para el programador ',
                '- Generalmente son debilmente tipados, lo que da más flexibilidad al mismo tiempo que aumenta la posiblidad de errores',
                '- Estas caracteristicas los hace especialmente buenos para tareas especificas y más directas, pero malos para calculos intensivos y pesados'
            ]),
        new Item('reactiva',
            [
                '- Es un paradigma enfocado al trabajo con flujo de datos, generalmente debe ser: ',
                ' <strong>- Resilientes:</strong> Deben responder incluso cuando hay estados de error',
                ' <strong>- Elasticos:</strong> El aumento de la concurrencia no debe afectar las respuestas',
                ' <strong>- Comunicación:</strong> Minimo acoplamiento al hacer que todo se comunique mediante mensajeria ',
                ' <strong>- Operadores:</strong> Tener soporte hacia estos, y que permitan transformar el flujo de datos ',
                ' <strong>- Manejar el Backpressure:</strong> Para evitar saturar subscriptores lentos o limitar la cantidad de datos a procesar ',
                ' <strong>- Composición:</strong> Juntar diversas funciones asyncronas o sincronas, no debe ser un calvario ni volverser algo incomprensible'
            ]),
        new Item('marcado',
            [
                '- Son lenguajes relacionados con la presentación de contenido como HTML y XML',
                '- El primero se usa para estructurar contenido web y el segundo para almacenar y transportar datos estructurados ',
                '- Un sitio con HTML y ayudado con CSS, puede resultar en una vista bastante detallada y util, transformando los datos en información ',
            ]),
        new Item('aspectos',
            [
                '- Es un paradigma de programación que tiene como objetivo aumentar la modularidad del codigo ',
                '- Permite la separación de responsabilidades sin cambiar el comportamiento actual de la aplicación ',
                '- Esto permite añadir un comportamiento paralelo, sin afectar el comportamiento principal ',
                '- Un aspecto es aquel que puede ser transversal a multiples capas de la aplicación ',
                '',
                '<strong>Conceptos:</strong>',
                ' <strong>Objeto de negocio:</strong> Es una clase normal, que contiene una logica dada de negocio ',
                ' <strong>Aspecto:</strong> Un aspecto de esto es la modularización de una preocupación que abarca multiples clases',
                '- Estos se pueden encadenar y unir mediante un <strong>Joinpoint</strong>, que es un punto dado durante la ejecución, ',
                ' - son similares a las excepciones, y estos se ejecutaran si las condiciones interceptadas se dan ',
                '- Un <strong>Pointcut:</strong> Es un predicado dado, que puede hacer coincidir un <em>Advice</em> que sera aplicado por un <em>aspecto</em>, en un <em>Joinpoint</em> particular ',
                '- Un <strong>Advice:</strong> Es una accion realizada por un <em>aspecto</em> en un <em>Joinpoint</em> particular, existen diferentes tipos como: ',
                ' - "around", "before" y "after", esto se puede realizar mediante anotaciones(AspectJ) o XML(Spring)',
            ]),
        new Item('logica',
            [
                '- Al ser parte del paradigma declarativo, esta programación se concentra en el resultado, más que en el proceso ',
                '- Mediante la logica se plantean los problemas y el control sobre las reglas de inferencia, para alcanzar una solución automatica ',
                ' <strong>- De orden cero:</strong>    Logica proposicional ',
                ' <strong>- De primer orden:</strong>  Logica predictiva ',
                ' <strong>- De segundo orden:</strong> Donde se agregan variables y relaciones ',
                ' - Cada orden se base en el anterior para crear nuevos conceptos y formas de evaluación, mediante el uso extensivo de la logica matematica ',
                '',
                '<strong> Caracteristicas:</strong>',
                ' <strong>- Basada en la logica:</strong> Por lo que usara simbolos como <em>and</em>, <em>or</em>, <em>not</em> para describir las relaciones ',
                ' <strong>- No determinista:</strong> El orden y las operaciones a usar para las soluciones, no esta provisto de antemano, siempre se busca la más adecuada ',
                ' <strong>- Basada en reglas:</strong> El programador define las reglas que describen las relaciones, entre los hechos y los objetos',
                '  - solicitando al programa encontrar una solución al problema en particular ',
                ' <strong>- Recursividad:</strong> Las reglas definicias pueden invocarse a si mismas, si esto es necesario para encontrar la solución final ',
                ' <strong>- Inferencia:</strong> Se pueden deducir nuevos conocimientos en base a los datos existentes, mediante la aplicación de reglas y logica ',
                '',
                '<strong> Algunos sistemas en los que se puede aplicar:</strong>',
                ' - Inteligencia artificial ',
                ' - Sistemas expertos (toma de decisiones)',
                ' - Reconocimiento y procesamiento de lenguaje natural ',
                ' - Motores de bases de datos relacionales ',
                ' - Simulación y Analisis estadisticos '
            ]),
        new Item('estructurada',
            [
                '- Es un conjunto de tecnicas para desarrollar algoritmos faciles de escribir, leer, modificar y verficar ',
                '<strong> - Diseño descendente:</strong> Se diseñan por etapas, partiendo de lo general a lo particular, y es completado por el diseño modular ',
                '<strong> - Recursos abstractos:</strong> En cada descomposición de una acción compleja, se supone que todas las partes ya estan resueltas ',
                '<strong> - Estructuras basicas:</strong> Los algoritmos solo deben ser escritos usando 3 tipos de estructuras: <em>Secuencial</em>, <em>Selectiva</em>, <em>Repetetiva</em>',
                '',
                '<strong>- Teorema de Böhm y Jacopini</strong>',
                ' - Para que un programa se defina como propio si se cumplen las siguientes caracteristicas: ',
                '  - Tiene un solo punto de entrada y uno de salida ',
                '  - Todo el camino del algoritmo es accesible, existiendo al menos un camino que va desde el inicio, hasta el final del algoritmo ',
                '  - No posee lazos o ciclos infinitos ',
                '',
                '<strong>- Control de flujo de un programa</strong>',
                '<strong> - Secuencial:</strong> Es aquella en la cual una acción se ejecuta detras de otra y coincide con las acciones fisicas ',
                '<strong> - Selectiva:</strong> Se pueden ejecutar una acción o otra, dependiendo de una determinada condición ',
                '<strong> - Repetitiva:</strong> Las acciones que estan dentro del bucle, se realizan, siempre que la condicion sea cierta, verificando antes o despues la afirmación ',
                '<strong> - Anidamiento:</strong> Las estructuras Selectivas y repetitivas, pueden ser anidadas una dentro de la otra ',
            ])
    ];

export const PERSONAS =
    [
        new Item('personasYprocesos',
            [
                '- Las personas, los procesos y las tecnologias son el sostenimiento de toda empresa ',
                '- El personal, siempre sera necesario para pensar, planear y ejecutar ',
                '- La tecnologia, que ayuda a las personas a llevar estos procesos ',
                '- Y finalmente los procesos, que ofrecen un valor agregado al cliente ',
                '- Llegar a un equilibrio de estos elementos es un equilibrio dificl de lograr ',
                '- Cualquier cambio de estas partes traera efectos secundarios sobre las demas ',
                '',
                '- Algunos de los objetivos de tener este equilibrio son: ',
                ' - Transformar los datos en conocimiento e información ',
                ' - Permitir que el conocimiento se accesible para todos y generable por todos ',
                ' - Mejora continua de los procesos y aumentar la productividad ',
            ]),
        new Item('gestionDeServicios',
            [
                '- Es una metodologia que pone su foco en el cliente y como mejorar su atención ',
                '- Toda organización debe contar con personal competente en cuanto al uso de las tecnologias que se usen ',
                '- Los proveedores y los socios son partes importantes de toda empresa, no se pueden ignorar ',
                '- La creación de valor es importante para todo producto y servicio que se ofrezcan ',
                '',
                '- Estos son 7 principios para una correcta gestión ',
                ' - Se debe crear el mayor valor para los clientes a la vez que se perjudican lo menos posible ',
                ' - Siempre sera mejor revisar los procesos existentes y mejorarlos que empezar desde cero ',
                ' - Es mejor avanzar seguro y constante con un enfoque concreto ',
                ' - El trabajo en equipo es importante, todos deben ser visibles y colaborarse entre si ',
                ' - Tener una consciencia holistica, ya que todas las areas se afectan entre si de alguna manera ',
                ' - Entre más simple sea un proceso mejor ',
                ' - La automatización y la optimización siempre deben ser aspectos a alcanzar ',
            ]),
        new Item('gestionDeActivos',
            [
                '- Los elementos fisicos y no fisicos de las empresas tambien deben ser considerados como partes del negocio ',
                '- Esto se puede aplicar a todo software que la empresa use o desarrolle y los elementos necesarios para su funcionamiento ',
                '- Tener un inventario actualizado garantiza que siempre se maneje lo necesario ',
                '- En un contexto informatico esto se puede aplicar de varias formas, principalmente al manejo de archivos electronicos ',
                ' - además de las licencias que se usan y que se generan desde la misma empresa ',
                '',
                '- Algunos ejemplos de activos: ',
                ' <strong>- Hardware:</strong> Dispositivos de redes, centros de datos, servidores',
                ' <strong>- Infraestructura:</strong> Proporcionada por terceros, y dispositivos propios de la empresa usados por los usuarios finales ',
                ' <strong>- Datos:</strong> Digitales derivados de las operaciones internas ',
                '',
                '- Estos suelen tener un ciclo de vida ciclico, el cual es el siguiente: ',
                '  -> <strong>Planear</strong> ->         -> <strong>Adquirir</strong> ->    -> <strong>Asignación</strong> ->       -> <strong>Mantenimiento</strong> ->    -> <strong>Retiro</strong> ->',
                '  Como obtenerlos       Construcción,     Introducción al        prolongar la vida      Al final del          ',
                '  y como se usaran      compra,           ambiente productivo    util o mitigar los     este debe ser         ',
                '  además de analizar    arrendamiento     y definiciones de      riesgos de posibles    retirado y desechado  ',
                '  costos/beneficios     o licencias       procesos y usos        fallos                 o solo cancelado      ',
                '',
                '- Beneficios de esta gestión ',
                ' - Mejores decisiones en base a información actual y verificable ',
                ' - Continuidad del negocio al estar mejor preparados para las interrupciónes del negocio ',
                ' - Manejo oportuno de las licencias y suscripciones de la empresa ',
                ' - Costos totales de la empresa de manera global ',
                ' - Permite la estandarización de manera transversal en la empresa ',
            ]),
        new Item('fidelizacion',
            [
                '- Fidelizar a un cliente, garantiza que esta siempre permanecera comprando nuestos productos y servicios ',
                '- Segun la ley de pareto el 80% de las ventas son de los clientes actuales y 20% de los nuevos ',
                '- Es un error comun concentrarse en adquirir nuevos clientes y descuidar los viejos ',
                '- Un cliente satisfecho es la mejor publicidad, aun asi, esto no siginifica que sea un cliente fiel ',
                '- ',
                '- Algunas estrategias para fidelizar a los clientes: ',
                ' - Ser honestos en la justa medida, ya que no siempre todo sera una historia de exito ',
                ' - Mantener una comunicación constante, haciendo saber los resultados de manera regular ',
                ' - Preparar un plan a futuro que lo haga sentir importante ',
                ' - Comparte los momentos de exito, no solo los fracasos merecen atención ',
                ' - Solicita sus opiniones y hazlos sentir escuchados ',
                ' - Las relaciones son mejores cuando son reciprocas ',
                '',
                '- Clasificación de los clientes: ',
                '<strong> - Apostoles:</strong> Clientes fijos bastantes satisfechos y que recomendaran tu marca ',
                '<strong> - Leales:</strong> Cuentan igual de satisfechos que los apostoles, pero que no divulgan tu marca ',
                '<strong> - Mercenarios:</strong> Tienen satisfacción alta, pero solo compraran cuando esto les aporte algun beneficio ',
                '<strong> - Rehenes:</strong> No estan satisfechos con tu producto, pero tampoco estan dispuestos a migrar ni asummir más costos ',
                '<strong> - Indiferentes:</strong> Son neutrales frente a la marca, y aunque esten satisfechos solo haran compras ocasionales ',
                '<strong> - Terroristas:</strong> Además de estar insatisfechos, estos hablaran mal de la marca en sus circulos de influencia ',
            ]),
        new Item('modeloDIKW',
            [
                '- Es un sistema jerarquico donde cada capa le da soporte a las caracteristicas de la siguiente ',
                ' &uarr;',
                ' Contexto ',
                ' &uarr;                                     Sabiduria        &#35;     Union de todas las partes ',
                ' &uarr;                      Conocimiento                   &#35;&#35;&#35;    Se forman las partes de un todo ',
                '           Información                                &#35;&#35;&#35;&#35;&#35;   Conexión de las partes',
                ' &uarr;  Datos                                            &#35;&#35;&#35;&#35;&#35;&#35;&#35;  Reunion de todas las partes ',
                '   &rarr;      &rarr;    &rarr;  Comprension    &rarr;',
                '  Busqueda  Absorción     Practica     Reflexion',
                ' ',
                '<strong>- Datos:</strong> Son la materia prima para formar las siguientes capas, indeferentemente de la fuente ',
                '<strong>- Información:</strong> Es una construcción más avanzada a partir de acopio de simples datos, gracias a nuestro raciocinio y reconocimiento de patrones',
                '<strong>- Conocimiento:</strong> Ya con la información podemos actuar en base a esta, tomar decisiones especificas, o responder interrogantes de manera practica ',
                '<strong>- Sabiduria:</strong> Generalmente es la capacidad de pensar y analizar las situaciones, que se presenten, además de poder abstraerlo a otros contextos',
            ]),
        new Item('gestionDeExpectativas',
            [
                '- Lo más probable es que estas esten formadas por diferentes factores y experiencias pasadas ',
                '- Muchas cosas pueden salir mal en un proyecto pero estas son algunas maneras de solucionarlo ',
                '',
                '<strong> - Asumiendo lo obvio:</strong> Siempre hay diferencias entre lo que una persona escucha y lo que otra dice, ',
                '  - además de que hablamos de lo que consideramos importante y evitamos las obviedades, ',
                '  - sin comprender que estas no lo son para todos ',
                '',
                '<strong> - Evitar el riesgo:</strong> Generalmente no nos gusta hablar de posibles problemas, ',
                '  - y si hay riesgos intentamos evitarlos hasta que sean inevitables, aunque esto nos traera problemas ',
                '  - en un futuro casi inmediato, preveer los problemas nos hace profesionales más confiables ',
                '',
                '<strong> - Información incorrecta:</strong> Cuando vas al medico esperas una explicación a fondo de tus sintomas, ',
                '  - no simplemente un medicamento para calmarlos; puede que funcionen o solo enmascarar algo peor ',
                '  - en terminos de un equipo esto significa mantener a todos los involucrados al tanto ',
                '',
                '<strong> - Reuniones sin agenda:</strong> Las reuniones no son de agrados de todos, y menos cuando estas son sorpresa, ',
                '  - además de que no se suele estar preparado para estas generando generando frustaciones, ',
                '  - lo mejor para evitar esto es simplemente agendarlas con anterioridad ',
                '',
                '<strong> - Realización de contratos:</strong> La negociación es importante pero para segurar que todo funcione ',
                '  - es importante generar acuerdos y dejarlos por escrito, asi demostrar alguna equivocación, ',
                '  - y quien es el responsable o que este obligado a resolver el problema',
            ]),
        new Item('capa8',
            [
                '- Es un error relacionado directamente con el usuario final, ya sea por desconocimiento o por un mal diseño de la UX/UI',
                '- Esta capa no existe como tal, es una expresión para aludir la culpa al usuario ',
                '- El nombre viene del modelo OSI que consta de 7 capas, donde la septima capa es la aplicación, la que usa el usuario final ',
                '- Estos errores son de las principales fuente de error en las organizaciones y excelente puerta de entrada para los hackers ',
            ]),
        new Item('noNewsGoodNews',
            [
                '- Si no hay noticias son buenas noticias ',
                '- Tan simple como ejecutar un comando y este no devuelve un mensaje de error, si no que se ejecuto con exito ',
                '- Los codigos de error se establecieron para poner de acuerdo a desarrolladores y usuarios ',
                '- Usar los codigos de error para dar información es una manera util de entender los problemas ',
            ]),
        new Item('tiposHackers',
            [
                '- Un Hacker es aquel individuo que usa sus habilidades informaticas para violentar y penetrar la ciberseguridad ',
                '- Inicialmente solo existian 3 sombreros como clasificación, pero hay otros que han surgido con el tiempo ',
                '',
                '- <strong>Sombrero Blanco</strong>',
                ' - No importan su genero, nacionalidad, etnica, y demás caracteristicas, siempre defienden lo que es correcto ',
                ' - Protegen a los civiles y a las organizaciones en general encontrando y reportando vulnerabilidades ',
                ' - Trabajan en cargos como ingenieros de ciberseguridad, pruebas de penetración y otros puestos de seguridad ',
                ' - Tambien realizan tareas como:          - Escaneo de redes        - Configuracion de IDS (detección de intrusos) ',
                '                                          - Creación de honeypots   - Hackeo de equipos para encontrar vulnerabilidades ',
                '',
                '- <strong>Sombrero Gris</strong>',
                ' - Tambien defenden lo correcto, pero no siempre usaran metodos convencionales para hacerlo ',
                ' - Esto puede ser moralmente ambiguo por lo que este punto medio a veces se decanta más por un extremo (Negro o Blanco)',
                '',
                '- <strong>Sombrero Negro</strong>',
                ' - Realizan actividades ilegales para obtener algun tipo de redito, generalmente finaciero ',
                ' - Tambien suelen hacerlo por diversion, pero con fines de lucro, sin importar los daños que puedan generar ',
                ' - Tambien pueden:   - Instalar puertas traseras   - Mantener el acceso a los sistemas comprometidos ',
                '                     - Escalar en privilegios      - Descargar datos valiosos y/o sensibles ',
                '                     - Instalar malware            - Usar el Phishing ',
                '',
                '- <strong>Sombrero Verde</strong>',
                ' - Jovenes entusiastas, inexpertos y por lo tanto vulnerables al riesgo ',
                ' - Actualmente con tantas herramientas y facilidades es comun que se mentan en problemas ',
                ' - Que aprovechan para aprender de sus errores y convertirse en mejores hackers y cambiar de sombrero ',
                '',
                '- <strong>Sombrero Azul</strong>',
                ' - Son hackers experimentados que suelen ser vengativos y expondran tu vida digital ',
                ' - Suelen ser profesionales de seguridad externos en busca de vulnerabilidades antes de los lanzamientos ',
                '',
                '- <strong>Sombrero Rojo</strong>',
                ' - Además de ser vengativos, defienden lo correcto por lo que si eres un criminal no tendran piedad alguna ',
                ' - No solo desactivan las actividades delictivas permanentemente, tambien son temidos por otros hackers ',
                ' - Son tan experimentados que no tienen problemas en piratear sistemas con Linux ',
                ' - No se arrepienten y no dudan si su objetivo es destruir a los de sombreros negro ',
                '',
                '- Si quiere conocer sus equivalentes en los personajes de Marvel y DC, ó conocer casos famosos, ',
                ' - da click en el enlace original',
            ]),
        new Item('sindromesLaborales',
            [
                '- Un sindrome es una condición o sintoma caracteristico de una enfermedad, aunque en el contexto empresarial, es más metaforico que fisico ',
                ' - existen una gran variedad de sintomas y situaciones completamente relacionables ',
                '',
                '<strong>Sindrome de Burnout:</strong> Un trabajador quemado puede presentar depresión o ansiedad, asi como irritabilidad, ',
                ' - perdida de atención o falta de motivación, por muchas causas como, acoso laboral, exceso de responsabilidades, malos tratos, etc..',
                ' - la clave esta en la prevención mediante, incentivos laborales o estableciendo un mejor ambiente laboral ',
                '',
                '<strong>Sindrome de procusto:</strong> Las victimas son los subordinados, donde los jefes, se esfuerzan por degradar el trabajo, ',
                ' - de los mejores subordinados, ya sea por que se consideren una amenaza, o simples rencillas personales ',
                '',
                '<strong>Sindrome de Peter Pan:</strong> Las empresas no quieren crecer, ya que es un proceso dificil y lleno de riesgos ',
                '',
                '<strong>Sindrome del SuperHeroe:</strong> Los emprendedores pueden fracasar, ya que no saben o no quieren delegar, ',
                ' - y aunque saben que no pueden con todo, quieren tenerlo todo bajo su control, perdiendo valiosas alianzas y colaboradores ',
                '',
                '<strong>Sindrome de Abstinencia de ejecutivos:</strong> Cuando son forzados a tomarlas, pueden presentar sintomas fisicos y psicologicos, ',
                ' - como si de una droga real, para esto es preciso ayuda de profesionales',
                '',
                '<strong>Sindrome del Fundador:</strong> Todo pasa y se vincula directamente con el fundador, es una referencia inevitable, ',
                ' - una verdadera prueba de exito, es que la empresa sea capaz de sobrevivir y proliferar sin el fundador, mediante buenos colaboradores ',
                '',
                '<strong>Sindrome del Impostor:</strong> Algunos empresarios y profesionales exitosos, no se creen merecedores de su exito y se subestiman, ',
                ' - por esto es necesario un ambiente que no descarte buenas opciones y que los impulse a creer en sus posibilidades ',
                '',
                '<strong>Efecto Dunin-Kruger:</strong> Hay personas son incapaces de comprender su incompetencia, creyendose mejores de lo que son, ',
                ' - con un desempeño pobre e inconscientes de este hecho; por eso se insta a realizar una autocritica constructiva ',
                '',
                '<strong>Sindrome de Hamlet:</strong> Directivos que no solo viven en un estado de duda constante, cuando son necesarios para decisiones importantes, ',
                ' - suelen fracasar y tener excusas del porque, por eso es habitual tenerlos en areas poco jerarquicas, con procesos más analiticos ',
                '',
                '<strong>Sindrome de Persona Alfa:</strong> Constantemente persiguen el liderazgo y los logros, suelen tener bastantes aspectos positivos, ',
                ' - pero se pueden convertir en amenazas si tienen estilos despoticos y agresivos para liderar, es importante que los objetivos, ',
                ' - no sobrepasen ciertos limites, ni pongan en riesgo a alguien debido a sus actos ',
                '',
                '<strong>Sindrome de Codigo Hamurabi:</strong> Se establecen complejas y extensas normas internas, que obstaculizan la comunicación ',
                ' - y generan cuellos de botella, para esto es necesario flexibilizar procesos o encontrar alternativas más eficientes ',
                '',
                '<strong>Sindrome de Estocolmo:</strong> Aca existe un trabajador perjudicado, pero que se encuentra emocionalmente vinculado, ',
                ' - por lo que se niega a abandonar, para esto es necesario tener un espacio de reflexión y toma de conciencia ',
                '',
                '<strong>Sindrome de Plena actividad:</strong> Donde siempre es necesario estar haciendo algo, o si no es esta desaprovechando el tiempo, ',
                ' - aca se menosprecia el tiempo para estrategias y planes, solo para concentrarse en el atareado ahora, ',
                ' - aca se deben hacer mejores esfuerzos en la planificación y un mejor control de los recursos, tanto humanos como fisicos ',
                '',
                '<strong>Principio de Peter:</strong> Los empleados pueden ascender y lo hacen, hasta el limite de sus competencias, llegados a ese punto es necesario ',
                ' - evitar que se conviertan en obstaculos, ya sea cambiando entre areas, mejorando la formación o fortaleciendo equipos, entre otras acciones ',
                '',
                '<strong>Sindrome de Oficina Enferma:</strong> En este caso existe una influencia directa del ambiente, tal como edificios mal ventilados, con poca iluminación ',
                ' - mucho ruido o con poca movilidad, afectando directamente la salud de los empleados, haciendo necesario analizar, cambiar el espacio o mudarse',
                '',
                '<strong>Sindrome de No Inventado aqui:</strong> Un rechazo frontal y categorico, a toda solución que sean ajenas, aunque sean más simples o eficientes, ',
                ' - prefiriendo gastar recursos innecesariamente, que abrirse a nuevas oportunidades y conocimientos, que podrian mejorar las cosas ',
            ]),
        new Item('icebergIgnorance',
            [
                '- En 1989 Sidney Yoshida desarrollo la teoria de "Iceberg de la ignorancia", que refleja algunos datos ',
                ' - contundentes sobre el funcionamiento de las organizaciones',
                '',
                '- El <strong>4%</strong> de los problemas son conocidos por la Alta Dirección ',
                '- El <strong>9%</strong> de los problemas son conocidos por los mandos medios ',
                '- El <strong>74%</strong> de los problemas son conocidos por los supervisores ',
                '- El <strong>100%</strong> de los problemas son conocidos por los operarios de linea ',
                '',
                '- En otras palabras, entre mayor sea el rango, mayor sera el desconocimiento de los problemas, afectando multiples aspectos como: ',
                ' - toma de decisiones de manera inadecuadas, ineficaz asignación de recursos, fugas de talento, ineficiencia, entre otras ',
                '- Debido a factores, como falta de comunicación, liderazgo inadecuado, miedos a las consecuencias de los errores, fugas de información ',
                '',
                '<strong>Como conectar las altas jerarquias, con la primera linea</strong>',
                '- Escuchar con atención y preguntar con curiosidad                     - Fomentar el sentido de pertenencia ',
                '- Mostrar humildad y nunca dudar en solicitar ayuda                    - Entender porque y como se puede mejorar como equipo',
                '- Crear espacios de integración y colaboración                         - Delegar de manera real y a conciencia ',
                '- Que toda la jerarquia participe, a la hora de buscar soluciones      - Desterrar el miedo a las represalias',
            ]),
        new Item('ubicuo',
            [
                '- El lenguaje Ubicuo, es un termino usado por <em>Eric Evans</em> usa en el <em>Domain Driven Design</em> para la practica de tener un lenguaje comun ',
                ' - entre desarrolladores y usuarios, además de otras personas que tambien esten involucradas ',
                '- Esto hace parte de una estandarización profesional, que se refiere a la adopción de las mejores practicas y patrones de la industria ',
                '- Y asi poder hablar un mismo idioma, para que la comunicación sea efectiva y eficiente, mediante estandares compartidos ',
                '- De esta manera tener conversaciones entre congeneres y transmitir ideas, es algo que beneficia a todos los involucrados y no se pierde tiempo ',
                ' - al tener que explicar conceptos y metodologias que se usan en la ingenieria y que son transversales ',
            ])
    ];

export const OTROS =
    [
        new Item('scraping',
            [
                '- Es una forma de buscar contenido de las paginas en internet ',
                '- Algunos buscadores como Google hacen esto para indexar contenido ',
                '- Son tipos especiales de Bots que buscan terminos especificos de busqueda ',
                '- Se puede dar manera de automatica (software de  analisis sintactico) y manual (copiar y pegar) ',
                '- Esto puede conllevar a una ventaja sobre tu competencia al comparar su contenido con el tuyo ',
                '- Puede violar las leyes de derechos de autor, por lo que puede llegar a ser ilegal ',
                '- Tambien se puede bloquear por medio de software ó dificultarles la extracción de los datos (imagenes) ',
            ]),
        new Item('mvp',
            [
                '- Es el conjunto minimo de funcionalidades precisas para que un software pueda atraer clientes potenciales ',
                '- Esto ayuda a crear productos apegados a la realidad ',
                '- Da retroalimentación a tiempo y util para el negocio ',
                '- Todo mvp es una apuesta orientada a conseguir un maximo de aprendizaje con la menor inversion posible ',
                '- A veces puede ser reutilizable o desechable, eso depende de su exito inicial ',
            ]),
        new Item('turingComplete',
            [
                '- Es un concepto usado para denotar aquellos lenguajes que teniendo recursos infinitos (teoricamente), ',
                ' - son capaces de realizar cualquier tipo de calculo, independientemente de los recursos usados ',
                '- Tambien son capaces de usar y reutilizar estructuras complejas ',
                '- Que un lenguaje o herramienta sea turing complete no garantiza su eficiencia ',
            ]),
        new Item('ingenieriaInversa',
            [
                '- Un concepto sencillo pero muy potente, basicamente consta de desmontar y volver a montar algo, para ver como funciona ',
                '- Esto se da con la intención de mejorar o duplicar ese algo mediante una simple observación ',
                '- Su nacimiento se da durante la segunda guerra mundial, pero hoy en dia es aplicable hasta para el software ',
                '- Uno de los primeros casos de esta practica fue el nacimiento del Tu-4 (sovietico) copia del B-29 (Estadounidense) ',
            ]),
        new Item('dsl',
            [
                '- Un DSL es un lenguaje de programación con un nivel superior de abstracción ',
                '- Estos lenguajes son menos complejos que los lenguajes de alto nivel y proposito general, como Java, C, etc.. ',
                '- Tambien son diseñados por expertos en el campo que se van a usar, para ser usados ',
                ' - por personas versadas en el tema, pero sin experiencia en la programación ',
                '- Esto desemboca en un paradigma donde se especifica lo que se requiere, y se usa el lenguaje más adecuado para lograr el objetivo ',
                '- Este concepto desemboca en la programación poliglota o programación orientada al lenguaje ',
                '- Otro concepto importante es que los DSL pueden nacer y extenderse, con ó sin bases previas ',
            ]),
        new Item('reglasInferencia',
            [
                '- Las leyes de inferencia nos permiten demostrar la validez de los argumentos mediante la correcta aplicación de las reglas ',
                '- Teniendo una premisa ya definida, podemos sacar una conclusión, para probar o negar alguna proposición deseada ',
                '',
                '        Nombre              Premisas    Conclusion          Nombre            Premisas    Conclusion',
                ' Modus Ponendo Ponens        p -> q         q             Silogismo            p -> q               ',
                '                                                          Hipotetico           q -> r      p -> r   ',
                ' Modus Tollendo Ponens       p || q                                                                 ',
                '                             ¬p             q             Morgan             ¬(p && q)    ¬p || ¬q  ',
                '                                                                             ¬(p || q)    ¬P && ¬q  ',
                ' Modus Tollendo Tollens      p -> ¬q       ¬p                                                       ',
                '                                                          Doble negación       ¬(¬p)       p        ',
                ' Dilema                      p || q                                                                 ',
                ' Constructivo                p -> r                       Conjunción            p                   ',
                '                             q -> s      r || s                                 q          p && q   ',
            ]),
    ];

export const BASES_DE_DATOS =
    [
        new Item('sql',
            [
                '- Es lenguaje de consultas estandar para manipular la información en una base de datos ',
                '- Cada motor de base de datos tiene sus particularidades pero todos usan SQL',
                '- Las columnas son los datos a guardar y las filas son los registros almacenados',
                '- Las tablas estan compuestas de columnas y registros con información de un tipo en especifico ',
                '- Toda tabla deberia tener una clave primaria, para mejorar la indexación de contenido',
                '- La información deberia estar normalizada para evitar valores duplicados',
            ]),
        new Item('dbms',
            [
                '- Se encargan de almacenar, administrar, manipular y resguardar los datos ',
                '',
                '- Las BD guardan diferentes tipos de datos como: ',
                ' - texto, numeros, binarios, temporales, documentos, imagenes, geograficos, etc... ',
                '',
                '- Un buen DBMS deberia tener las siguientes caracteristicas: ',
                '<strong> - Redundancia:</strong>   Los duplicados en las BD se reducen al tener un unico lugar donde almacenar los datos',
                '<strong> - Mantenimiento:</strong> Tener todos los datos en solo lugar permite que se administren con más eficiencia ',
                '<strong> - Seguridad:</strong>     Define quien y con que privilegios puede acceder a la informacón ',
                '<strong> - Consistencia:</strong>  Se maneja un estandar para todos los datos de todas las BD ',
                '<strong> - MultiUsuario:</strong>  El acceso concurrente de varios usuarios es un tema comun para las BD ',
            ]),
        new Item('crud',
            [
                '- Son las 4 operaciones basicas a la hora de gestionar los datos de una BD ',
                '- No solo es aplicable para SQL, tambien tiene su equivalencia en HTTP ',
                '- La mayoria de frameworks tienen estos metodos ya implementados y listos para consumirse ',
                '',
                ' <strong>Operación       SQL         HTTP, Restful</strong>     ',
                '  Create        INSERT        POST              ',
                '  Read          SELECT        GET, HEAD         ',
                '  Update        UPDATE        PUT, PATCH        ',
                '  Delete        DELETE        DELETE            ',
            ]),
        new Item('dl',
            [
                '<strong>- DDL</strong> Lenguaje de Definición de Datos, Permite Crear y Modificar la estructura de la BD ',
                '<strong> - CREATE:</strong>   Creación de campos, tablas e indices ',
                '<strong> - ALTER:</strong>    Modificacion de los campos de las tablas ó redefinirlos ',
                '<strong> - DROP:</strong>     Eliminación de tablas e indices ',
                '<strong> - TRUNCATE:</strong> Elimina todos los registros de una tabla ',
                '<strong> - COMMENT:</strong>  Utilizado para agregar comentarios al diccionario de datos ',
                '<strong> - RENAME:</strong>   Renombra objetos ',
                '',
                '<strong>- DML</strong> Lenguaje de Manipulación de Datos, Permite ejecutar las operaciones de un CRUD en los datos de la BD ',
                '<strong> - SELECT:</strong> Consulta una tabla de la BD de manera general ó con filtros ',
                '<strong> - INSERT:</strong> Inserción de datos en una tabla ',
                '<strong> - UPDATE:</strong> Actualización de campos ó registros que cumplan los criterios especificados ',
                '<strong> - DELETE:</strong> Elimina registros de una tabla ',
                '',
                '<strong>- DCL</strong> Lenguaje de Control de Datos, Permite crear roles, permisos y conceder/denegar el acceso a los datos ',
                '<strong> - GRANT:</strong>  Otorga privilegios de acceso a los usuarios ',
                '<strong> - REVOKE:</strong> Retira los privilegios previamente otorgados ',
                '',
                '<strong>- TCL</strong> Lenguaje de Control de Transacciones ',
                '<strong> - COMMIT:</strong>   Guarda los cambios realizados ',
                '<strong> - ROLLBACK:</strong> Deshace el ultimo cambio hecho ',
            ]),
        new Item('integridad',
            [
                ' - Son las reglas que garantizan que la información sea inmutable hasta que se decida lo contrario ',
                ' - Tambien protege los datos de posibles errores a la hora de modificarlos/eliminarlos ',
                ' - Esta es una de las principales diferencias entre las BD relacionales y NO relacionales ',
                ' - Las BD relacionales cumplen esto mediante el esquema ACID ',
                ' - Las DB NO relacionales no garantizan el 100% de la integridad de los datos, aunque la mayoria son muy fiables ',
            ]),
        new Item('erd',
            [
                '- Demuestra como las entidades (generalmente de una BD) se relacionan entre si ',
                '- Es una manera de desarrollar BD relacionales de acuerdo al modelo de negocio',
                '- Demuestra como las entidades (generalmente de una BD) se relacionan entre si ',
                '- Tambien tienen una relación que denota la cardinalidad 1-1, 1-n, 1-0, m-n',
            ]),
        new Item('normalizacion',
            [
                '- La normalización hace la información más facil de estructurar, sin gastar espacio en datos redundantes, y elimina posibles inconsistencias',
                '',
                '<strong> - Primera forma:</strong> Identificar datos agrupables en tablas individuales',
                '<strong> - Primera forma:</strong> Asigne cada conjunto con una clave primaria',
                '',
                '<strong> - Segunda forma:</strong> Crear tablas independientes para valores que sean aplicables a otros registros ',
                '<strong> - Segunda forma:</strong> Asigne claves foraneas que se puedan relacionar con otras tablas',
                '',
                '<strong> - Tercera forma:</strong> Trasladar valores que sean independientes de las claves a tablas separadas',
                '<strong> - Tercera forma:</strong> No siempre es conveniente hacerlo, puede ser costoso en terminos de rendimiento ',
                '',
                '<strong> - Cuarta forma:</strong> Rara vez se aplican pero hay casos donde es practico hacerlo',
            ]),
        new Item('acid',
            [
                '- Son 4 propiedades que garantizan la confiabilidad de las operaciones y consecuentemente en los datos de las BD ',
                '<strong> - Atomicidad:</strong>   Todas las operaciones deben ser todo o nada, si una falla la información no debe sufrir cambios ',
                '<strong> - Consistencia:</strong> Toda operación iniciada debe ser valida para poderse efectuarse, constraints, cascades, etc.. ',
                '<strong> - Aislamiento:</strong>  Toda operación debe ser ejecutada indeferentemente de las demás, respetando el orden',
                '<strong> - Persistencia:</strong> Toda transacción que se haya realizado debe ser perdurable en el tiempo, sin importar que suceda ',
            ]),
        new Item('indices',
            [
                '- Es una manera de optimizar las consultas y mejorar la eficiencia de una BD ',
                '- Esto se logra mediante estructuras binarias asociadas a cada registro de la BD ',
                '- La indexación puede presentar un problema para la inserción, modificación y borrado de los datos, ya que esto  ',
                ' - significa la actualización de los indices asociados ',
                '- Tener demasiados indices tambien es contraproducente ya que pueden retrasar el procesamiento de los datos ',
                '- Cada motor puede manejar de diferentes maneras los indices, y esto a su vez afectar el rendimiento de cada tipo ',
            ]),
        new Item('joins',
            [
                '- La instrucción del Join es usada, para enlazar 2 tablas relacionadas, generalmente mediante un campo en comun(foreing key)',
                '- Una manera de entenderlos es usando la teoria de conjuntos ',
                '',
                '<strong> - Cross Join:</strong> Es el Join más simple, donde se genera un producto cartesiano, uniendo una fila de una tabla con cada fila de la otra ',
                '<strong> - Inner Join:</strong> El join por defecto, solo devuelve los registros donde haya una coincidencia, entre ambas tablas',
                '  - donde el valor del campo <strong>A</strong> se une con la coincidencia respectiva de la tabla <strong>B</strong>',
                '<strong> - Left outer Join:</strong>  Son todas las filas para las que haya coincidencia más el contenido de la tabla <strong>A</strong> que no coincida ',
                '<strong> - Right outer Join:</strong> El mismo resultado, pero con el contenido de la tabla <strong>B</strong> aunque suene redundante, puede ayudar a la compresion de la consulta ',
                '<strong> - Full outer join:</strong>  Es la suma de los 2 anteriores, donde se quieren las filas de <strong>A</strong> y <strong>B</strong>, haya coincidencias o no',
                '',
                '- Tambien hay otros tipos de Joins, que son combinaciones de estos anteriores para reducir la información entre las tablas ',
            ]),
        new Item('constraints',
            [
                '- Son especificaciones de Reglas sobre la información de una tabla',
                '- Estas se usan para limitar el tipo de datos que pueden incluirse en una tabla, esto garantiza la precisión y la confiabilidad ',
                '- Si se intentarara crear o actualizar un registro que viola la restricción, la acción se cancela ',
                '- Las restricciones pueden ser a nivel de columna o a toda la tabla ',
                '- Existen restricciones comunes y estas se pueden combinar, para crear combinaciones mas complejas, a continuación algunos ejemplos: ',
                '',
                '<strong>Not Null:</strong> Garantiza que la columna no contenga valores nulos ',
                '<strong>Unique:</strong> Garantiza que los valores de una columna sean diferentes ',
                '<strong>Primary Key:</strong> Combinación de los 2 anteriores, para tener un identificador unico en cada tabla ',
                '<strong>Foreign Key:</strong> Previene acciones que destruirian relaciones entre tablas ',
                '<strong>Check:</strong> Satisface que los valores de una columna cumplan una condición especifica ',
                '<strong>Default:</strong> Establece un valor predeterminado para una coluna si no se especifica algun valor ',
                '<strong>Create Index:</strong> Se utiliza para agilizar la crear y consultar datos rapidamente, pero puede ralentizar las actualizaciones y borrados ',
            ])
    ];

export const BASE_DE_DATOS_AVANZADO =
    [
        new Item('nosql',
            [
                '- Nacieron de los problemas para escalar las BD relacionales, existen proyectos privados y de codigo libre, accesibles para la comunidad',
                '- La principal diferencia respecto a SQL es la falta de una estructura definida para almacenar los datos ',
                '- Esta falta de estructura hace posible que se pueda guardar cualquier tipo de dato',
                '- El rendimiento es mayor independientemente de la cantidad de datos',
                '- La fiabilidad de los datos no esta garantizada',
                '- No hay un estandar para las operaciones, cada motor tiene su sintaxis diferente',
                '- Existen diferentes formas de guardar la información ',
            ]),
        new Item('tiposBD',
            [
                '<strong>- Clave-Valor:</strong> Cada elemento tiene una llave unica, asociada a un valor ',
                '<strong>- Documentos:</strong>  La información se guarda en documentos con IDs unicos, y en formatos simples como JSON o XML ',
                '<strong>- Grafos:</strong>      Se basan en nodos, relacionados mediante aristas, es necesario de la teoria de grafos para recorrerlas ',
                '<strong>- Objetos:</strong>     Los datos se manejan mediante Objetos, tal y como en la Programación Orientada a Objetos ',
            ]),
        new Item('orm',
            [
                '- El Mapeo Objeto-Relacional permite convertir los objetos convencionales en objetos persistentes ',
                '- Permite generar esquemas para guardar la información independientes de cualquier Motor de Base de Datos ',
                '- Todas las operaciones basicas del CRUD son facilmente implementables ',
                '- Los cambios en las BD se hacen mucho más rapidos de hacer y de probar ',
                '- El rendimientos para operaciones muy complicadas es ligeramente menor ',
            ]),
        new Item('consistenciaEventual',
            [
                '- Garantiza la calidad de los servicios, con una gran disponibilidad y escalabilidad, esto aplica solamente para BD relacionales ',
                '- Cuando la concurrencia es demasiado alta, las peticiones pueden resultar en peticiones bloqueantes ',
                '- Cuando un sistema transaccional se bloquea, generalmente lo hace por un instante breve de tiempo, ',
                ' - si esto no se maneja de manera correcta, puede resultar en bloqueos fatales para la aplicación ',
                '- La consistencia eventual permite garantizar la disponibilidad y escalabilidad de las aplicaciones, ',
                ' - mediante cientos de nodos distribuidos y la promesa de retorno de toda operación ',
            ]),
        new Item('algebraRelacional',
            [
                '- Este tipo de algebra toma un conjunto de datos y realiza operaciones sobre estos, para generar un nuevo conjunto ',
                '- Tambien soporta el concepto de anidación al usar un resultado para una operación y generar otro resultado ',
                '',
                '<strong>- UNION:</strong>        Une 2 tablas iguales, sin registros repetidos ',
                '<strong>- INTERSECCIÓN:</strong> Une 2 tablas iguales donde los registros sean iguales, evitando la repetición ',
                '<strong>- DIFERENCIA:</strong>   Opera en tablas y devuelve el contenido que se encuentre en la primera tabla pero no en la segunda ',
                '<strong>- PRODUCTO:</strong>     Toma 2 tablas y devuelve una tercera con el contenido de acuerdo a las posibles combinaciones, ya sean iguales o diferentes ',
                '<strong>- SELECCION:</strong>    Toma 2 ó más tablas, iguales o diferentes, y devuelve los campos donde se cumplan las condiciones dadas ',
                '<strong>- PROYECCIÓN:</strong>   Opera igual que la selección, pero aca se pueden especificar que columnas se quieren tener ',
                '<strong>- REUNIÓN:</strong>      Opera sobre 2 ó más tablas y devuelve todos los campos deseados, que esten relacionados mediante alguna condición ',
                '<strong>- DIVISIÓN:</strong>     Opera sobre 2 tablas donde el resultado no existe en la primera tabla, y todas las filas tengan esta relación ',
                '<strong>- ASIGNACIÓN:</strong>   Cambia los valores de las columnas donde se cumplan las condicones dadas ',
                '',
                '- equivalencias en SQL (respectivamente)                           ',
                '- SELECT * FROM A     UNION     SELECT * FROM B                     ',
                '- SELECT * FROM A   INTERSECT   SELECT * FROM B                      ',
                '- SELECT * FROM A    EXCEPT     SELECT * FROM B                       ',
                '- SELECT * FROM A, B                                                   ',
                '- SELECT * FROM A WHERE X&lt;50                                         ',
                '- SELECT X, Z FROM A WHERE X&lt;50                                       ',
                '- SELECT A.W, B.Y FROM A JOIN B ON (A.V=B.X AND Z>10)                     ',
                '- no hay equivalencia directa, pero se puede lograr combinando operaciones ',
                '- UPDATE A SET indice="100%" WHERE codigo > 2000                            ',
            ]),
        new Item('n+1selects',
            [
                '- Es un problema cuando se manejan ORM, dado una colección de objetos, que a su vez pueden tener otras colecciones objetos como atributos ',
                '- Entonces para obtener un objeto inicial, hay que tener todos los objetos asociados a este, aunque no se necesiten ',
                '- Actualmente la mayoria de ORM usan o proveen estrategias para evitar este comportamiento ',
                '- Generalmente esto no es un problema de rendimiento, pero si ha de convertirse en uno,  ',
                ' - hay maneras de solventarlo como cambiar la forma de consultar las entidades o usar objetos en memoria ',
            ]),
        new Item('boyceCodd',
            [
                '- El modelo relacional fue introducido en los años 60 por Edgar Frank Codd e IBM, ',
                ' - despues fue incrementado su popularidad poco a poco hasta ser el principal modelo hoy en dia ',
                '- En este modelo se definen los siguientes objetivos: ',
                '<strong> - Independencia fisica:</strong> La forma de almacenar los datos, no debe influir en su manipulación ',
                '<strong> - Independencia logica:</strong> Los datos almacenados no deben ser modificados si se cambia el motor de la bd ',
                '<strong> - Flexibilidad:</strong>         La BD deberia ofrecer distintas vistas en funcion del usuario que la necesite ',
                '<strong> - Sencillez:</strong>            La estructura logica deberia estar normalizada, hasta la 3ra forma normal, o la 4ta forma normal Boyce-Codd',
                '',
                '- Normalmente casi todas las tablas que estan en la 3FN no suelen infrigir la FNBC ',
                '- No existe una regla definida para corregir de la 3ra a la 4ta forma normal ',
                '- En ciertos casos no es indicado hacerlo ya que la descomposición puede hacer perder la semantica de la relación ',
                '',
                ' Se tiene la siguiente tabla en 3FN        La FNBC serian las siguientes tablas: ',
                ' <strong>CodPostal Direccion    Ciudad             CodPostal  Direccion       CodPostal  Ciudad </strong>',
                ' 3000      las flores   Merida             3000       las flores      3000       Merida ',
            ]),
        new Item('sqlVsNosql',
            [
                '- Si ya se conoce SQL y se manejan bien las relaciones y la normalización, intentar replicar esto en NoSql es un gran error ',
                '- Contrario a lo que se pensaria las BD NoSql no tienen problema alguno con la redundancia ',
                '- A continuación se expondran algunos puntos para definir que BD es más idonea, de acuerdo a las necesidades ',
                '',
                '                         <strong>SQL                                NoSql</strong>                 ',
                '- Integridad       Estructura rigida                 Las estructuras son                           ',
                '  de datos         pero garantizada                  altamente mutables                            ',
                '',
                '                   Las tablas y sus relaciones       Cualquiera puede cambiar                      ',
                '- Atomicidad       evitan cambios no aceptados,      lo que sea, permitiendo una                   ',
                '                   es un todo o nada (rollback)      condición de carrera                          ',
                '',
                '                   No es imposible, solo es más      Ya que no tiene integridad,                   ',
                '- Escalabilidad    costoso y puede tener problemas   crecer es facil y más rapido                  ',
                '                   con la integridad de datos                                                      ',
                '',
                '- Velocidad        Los Joins pueden ser lentos       El volumen no es un problema,                 ',
                '                   debidos a la cantidad de datos    siempre y cuando no hayan relaciones          ',
                '',
                '- Consistencia     Siempre se garantiza y más si     La redundancia es algo totalmente normal      ',
                '  vs Redundancia   esta normalizada                  y esto puede conllevar a datos inconsistentes ',
                '',
                '                   SQL es maduro,                    su flexibilidad le permite ser más            ',
                '- Desarrollo       con una gran comunidad,           rapido para realizar cambios sin              ',
                '                   documentación extensiva,          grandes consecuencias                         ',
                '                   estandares bien definidos                                                       ',
                '',
                '<strong>- Escoger una BD Relacional si...</strong>',
                ' - Se necesita consistencia y transacciones atomicas, con un minimo de errores ',
                ' - Hay datos con relaciones y se buscaran en base a estos ',
                ' - Se debe introducir gente rapidamente al desarrollo ',
                ' - El apoyo de la comunidad es necesario y la estabilidad es un requisito ',
                '',
                '<strong>- Escoger una BD No Relacional si...</strong>.',
                ' - La velocidad de lectura/escritura es prioridad sobre la consistencia ',
                ' - Se sabe poco del desarrollo y lo más probable es que cambie constantemente ',
                ' - La escalabilidad es una meta a tener en el tiempo ',
                ' - No se necesitan estructuras o simplemente se necesitan guardar los datos y nada más ',
                '',
                '<strong>- Escoger ambos si...</strong>',
                ' - Ya que ambos pueden coexistir en los sistemas complejos que necesiten ambas ventajas ',
                ' - Información muy consultada y de poca edición puede usarse con NoSql ',
                ' - Operaciones criticas y que requieran consistencia con SQL por tradición ',
            ]),
        new Item('locking',
            [
                '- En entornos de alta concurrencia es inevitable que hayan conflictos o colisiones, por lo que en las BD se suelen usar 2 estrategias ',
                '',
                '- Detectar y volver a intentar, como lo hace <strong>Ethernet</strong> ',
                '- Bloqueando a otros transmisiones concurrentes, como lo hace el <strong>Wifi</strong>',
                '',
                '<strong>- La anomalia perdida</strong>',
                '- Consideremo una actualizacón perdida, algo que puede ocurrir en cualquier base de datos, que se ejecute aisladamente con una lectura confirmada ',
                '- Donde varios usuarios acceden al mismo recurso de manera concurrente y lo modifican de manera alternada, generando inconsistencias y problemas ',
                '',
                '<strong>- Bloqueo Pesimista:</strong>',
                '- Aca el primer usuario que tome el recurso lo bloqueara, hasta que hayan terminado todas las operaciones sobre este ',
                '- Es ideal realizarlo cuando es demasiado costoso solucionar y/o encontrar conflictos ',
                '',
                '<strong>- Bloqueo Optimista:</strong>',
                '- Aca se permite que el bloqueo suceda, pero se necesita detectarlo para reintentar y/o hacer rollback si es necesario ',
                '- Esto permite evitar bloquear operaciones de lectura y escritura entre si, y revertir las operaciones que presenten errores ',
                '',
                '<strong>- Transacciones a nivel de la aplicación</strong>',
                '- Hoy en dia la concurrencia y la formas de conexión se han incrementado, por esto no todo se da necesariamente en una misma transacción ',
                '- Tampoco se garantiza que una ejecución los procesos de manera serial, mantenga las cosas en orden ',
                '- Debido a esto, motores como Oracle, PostgreSQL y MySQL utilizan el control de la concurrencia, basandose en un bloqueo optimista ',
            ]),
        new Item('sqlOrderExecution',
            [
                '<strong> Como se ve el Query                 Como se ejecuta                      Porque pasa de esta manera</strong> ',
                '',
                '      SELECT                              FROM                       Lugar o lugares de donde se tomaran los datos ',
                '',
                '      FROM                                WHERE                      Filtrado de los registros ',
                '',
                '      WHERE                               GROUP BY                   Se verifica si existen agrupaciones por columnas',
                '',
                '      GROUP BY                            HAVING                     Se aplica si se tiene un GROUP BY',
                '',
                '      HAVING                              SELECT                     Se retornan las columnas que se quieren ver, sean normales o calculadas',
                '',
                '      ORDER BY                            ORDER BY                   Ordena los datos entregados ',
                '',
                '      LIMIT                               LIMIT                      Se limita la cantidad de registros entregados',
            ]),
        new Item('sargeable',
            [
                '- <strong>SARGABLE</strong> significa "<strong>S</strong>earched <strong>ARGU</strong>ment <strong>ABLE</strong>", referiendose a consultas que pueden hacer uso de los indices, siguiendo algunas indicaciones',
                '',
                '- Utiliza funciones y argumentos que puedan aprovechar los indices, como igualdad(=), desigualdad(<>, !=), Rango(BETWEEN), Pertenencia(IN)',
                '- No utiliza funciones que evitan los indices o requieren de un full scan, como Negación(NOT), comodines(LIKE), Operaciones aritmeticas(+, -, *, /)',
                '',
                '<strong>- Tambien hay pautas como:</strong> ',
                ' - Usar los tipos correctos de los datos, para evitar conversiones implicitas que puedan afectar el uso de los indices',
                ' - Evitar usar Operaciones de ordenamiento y agrupamiento, solo se debe de usar cuando son requeridas ',
                ' - Usar columnas derivadas o valores precalculadas, en vez de usar operaciones sobre las columnas, y menos en las que estan indexadas ',
                ' - Siempre intente usar el WHERE, como una manera de reducir los datos, para todos los pasos subsiguientes ',
                ' - Intente usar LIMIT, para mejorar el rendimiento y la cantidad de datos a procesar ',
                ' - Escoja los JOINS indicados, no siempre sera necesario, tener toda la información de todas las tablas'
            ]),
        new Item('MVCC',
            [
                '- Es una tecnica de optimización de BD que crea copias duplicadas de registros, para que los datos puedan leerse y actualizarse de forma segura ',
                '- Evitando que las lecturas y las escrituras se bloqueen entre si y que puedan formen cuellos de botella ',
                '- cuando es implementado correctamente, puede traer beneficios como: ',
                '',
                ' - Menor necesidad de bloqueos relacionados a transacciones ',
                ' - Menos problemas relacionados a contención ',
                ' - Mejor rendimiento en la lectura de datos ',
                ' - Aislamiento de registros para operaciones de escritura y actualizaciones ',
                '',
                '- Cada DBMS es libre de implementar sus versiones, pero casi todas funcionan de la siguiente manera: ',
                '',
                '1. Cada registro en BD tiene un numero de versión ',
                '2. Las lecturas simultaneas, se realizan con el numero de versión más alto ',
                '3. Las operaciones de escritura siempre operan con una copia, no con el registro en si ',
                '4. Los usuarios siempre leeran copias, hasta que las actualizaciones no hayan finalizado ',
                '5. Si la operación es exitosa, se incrementa la versión, esto descarta las copias, creando tuplas muertas ',
                '6. Las siguientes lecturas, siempre se realizaran con la versión más actualizada ',
                '7. Con cada actualización, se repite el ciclo',
                '',
                '- A diferencia de un DBMS tradicional, aca no se bloquean los registros, se prefiere crear copias y trabajar con ellas, ',
                ' - hasta que la operación haya finalizado correctamente ',
                '',
                '- Para lidiar con los problemas de que cada actualización o borrado incrementa el tamaño de la BD sigilosamente ',
                '- Se han implmentado estrategias de limpieza, como el VACCUM en PostgreSQL, que identifica y elimina estos residuos ',
                '- Pero esto tampoco es una solución final, si este proceso no se realiza periodicamente o se realiza de manera errada, ',
                ' - la BD puede fallar por falta de espacio, o bloquear de manera fatal el acceso y la manipulación de los datos ',
                ' - obligando a que se interrumpa la operación y a un mantenimiento forsozo del DBMS ',
            ])
    ];
