import {
    HARDWARE_PROTOCOLS, PARADIGMAS_PARADIGMA_DATOS, PEOPLE_PROCESS_BLOAT, PERSISTENCY_ADVANCED_ORM, PERSISTENCY_ADVANCED_SCALING_DB,
    PERSISTENCY_ADVANCED_WAL, PERSISTENCY_DBMS, PERSISTENCY_OPTIMIZE_SLOW_QUERIES
} from "../linkReferencia";
import { Item } from "../models";

export class Content1 {

    public temas: Item[] = [
        ...CALIDAD,
        ...HARDWARE,
        ...WEB,
        ...PARADIGMAS,
        ...PEOPLE,
        ...OTROS,
        ...BASES_DE_DATOS,
        ...BASE_DE_DATOS_AVANZADO
    ];

}

export const CALIDAD =
    [
        new Item('metricas',
            [
                '- Además de revelar el desempeño del equipo de desarrollo, puede ser indicativo de la efectividad del equipo ',
                '- Las organizaciones se basan en una gran variedad de KPI para comprender el progreso en la ingenieria de software, en 4 categorias ',
                '',
                '<strong>Metricas de productividad</strong>',
                '<strong>- Tiempo de entrega:</strong> Tiempo que se tarda de inicio a fin para entregar un proyecto ',
                '<strong>- Cantidad de codigo:</strong> Lineas de codigo de la aplicación, esto puede ser un indicativo de la productividad, ',
                ' - más no de la calidad ni de la eficiencia, lo que puede conllevar a futuras refactorizaciones ',
                '<strong>- Trabajo en curso:</strong> Trabajo empezado y que se compara con lo anteriormente hecho para tener una idea del progreso ',
                '<strong>- Velocidad agil:</strong> Basandose en los sprints previos y cuantos puntos se han hecho, se puede estimar el proximo sprint ',
                '<strong>- Tasa de exito:</strong> Calcula el porcentaje de exito del sprint, esto no significa necesariamente completar los puntos, pero si las tareas ',
                '<strong>- Numero de versiones:</strong> Los equipos agiles dan prioridad a las nuevas versiones con nuevas caracteristicas que den valor ',
                '',
                '<strong>Metricas de rendimiento</strong>',
                '<strong>- Desempeño:</strong> Evaluan la escalabilidad, estabilidad, velocidad, entre otras caracteristicas',
                '<strong>- Rendimiento:</strong> Cantidad de datos que procesa un sistema en un periodo de tiempo ',
                '<strong>- Tiempo de respuesta:</strong> Tiempo que se tarda en responder a una consulta ó acción ',
                '<strong>- Fiabilidad y disponibilidad:</strong> Capacidad del software para cumplir con sus especificaciones ',
                '',
                '<strong>Metricas de defectos</strong>',
                '<strong>- Densidad de defectos:</strong> Cantidad de defectos por cantidad de lineas de codigo, evaluando la frecuencia de los defectos ',
                '<strong>- Cobertura de codigo:</strong> Proporcion del codigo que cubren las pruebas en relación a toda su extension, identificando areas sin cobertura ',
                '<strong>- Deteccion de defectos:</strong> Porcentaje calculado entre los defectos encontrados antes y despues del lanzamiento ',
                '<strong>- Deuda tecnica:</strong> Es el costo de ignorar problemas que a la larga se podran convertir en errores ',
                '<strong>- Vulnerabilidades de seguridad:</strong> Entre menos brechas y defectos se encuentren, más segura sera la aplicación ',
                '<strong>- Incidentes de seguridad:</strong> Recuento de las veces en que una aplicación fue vulnerada y la gravedad del ataque ',
                '<strong>- Tiempos de detección, fallos, reparación:</strong> Tiempos se tarda en notarse un error, que la aplicación falle, y que se corrija ',
                '',
                '<strong>Metricas de usabilidad</strong>',
                '<strong>- UX:</strong> Suelen ser cualitativas e incluyen las respuestas objetivas y subjetivas del usuario ',
                '<strong>- Usabilidad:</strong> Mide que tan bien el software permite alcanzar los objetivos del usuario ',
                '<strong>- Net Promoter Score(NPS):</strong> Puntaje que representa la voluntad de un cliente para recomendar la aplicación a otros ',
            ]),
        new Item('metricasEnCodigo',
            [
                '- La calidad del software es relativa y multidimensional, ligada a expectativas y caracteristicas, como restricciones y compromisos ',
                '- Algo que siempre se va a notar es la mala calidad de un software, mientras que la calidad suele pasar desapercibida y se da por sentada ',
                '- Aplicar estas metricas suele ser un tema complejo, ya que estas dependen de las necesidades especificas de la aplicación ',
                '- Pero esto trae grandes beneficios para las aplicaciones al permitir conocer el estado actual y las acciones para mejorar nuestro codigo ',
                '',
                '<strong>Acoplamiento:</strong> Todo modulo debe ser lo suficientemente independiente para ser modificado y afectar en lo minimo posible a los demás ',
                ' - demasiado acoplamiento significa que esto conllevara a efectos en cascada no deseados al realizar modificaciones en el codigo ',
                '',
                '<strong>Cohesion:</strong> Es el grado de relación entre las partes, y va muy de la mano con el principio de responsabilidad unica ',
                ' - un codigo poco integrado se vuelve complejo, dificil de mantener y poco reutilizable ',
                '',
                '<strong>Complejidad:</strong> Un algoritmo debe ser eficaz y facil de entender, de esta se diferencia 2 tipos de complejidad, ',
                ' - estudios y metricas, han mostrado una correlación directa entre la complejidad y la cantidad de <em>bugs</em> y las lineas de codigo ',
                '<strong> Complejidad Cognitiva:</strong>   Dificultad para entender intuitivamente el codigo ',
                '<strong> Complejidad Ciclomatica:</strong> Dificultad para probar determinado segmento de codigo ',
                '',
                '<strong>Code Churn:</strong> Frecuencia con que altera el codigo a traves del tiempo, a mayor numero de modificaciones, más posibilidad de error ',
                '',
                '<strong>Cobertura:</strong> Porcentaje de codigo cubierto por las pruebas, a mayor cobertura, menor es la posibilidad de defectos ',
                '',
                '<strong>Codigo muerto:</strong> Codigo que nunca es ejecutado, no siempre es facil de encontrar y no hay metodos infalibles para esto ',
                '',
                '<strong>Duplicación:</strong> Se da por del desconocimiento general del proyecto, replicando codigo que ya existe ',
            ]),
        new Item('cleanCode',
            [
                '- La calidad de codigo es un estandar que siempre se debe perseguir, hasta el codigo más limpio puede verse afectado por malas practicas ',
                '- El proceso de degradación en todo proyecto es inevitable, más no incontrolable ',
                '- Los parches pueden ser reparaciones o adiciones rapidas y funcionales, sin embargo puedan estar en contravia directa de la calidad ',
                '- Una de las principales causas de esta degradación, es la calidad inicial del codigo base, entre mejor sea, más se ralentizara ',
                '',
                '- Para soluciones limpias y bien estructuradas se deberian seguir los siguientes pasos: ',
                '',
                '<strong>Analisis de caracteristicas:</strong> Toda nueva funcionalidad debe ser analizada e implementada de manera que, ',
                ' - el mayor numero de inquietudes este resuelto antes de iniciar o durante, entre más tiempo y correciones se hagan, sera peor',
                '<strong>Analisis del codigo base:</strong> Sabiendo la solución se debe analizar el codigo base para causar el menor impacto posible, ',
                ' - para tener claro que se puede modificar, reutilizar, que se debe crear, e incluso si hasta puede llegar generar efectos segundarios',
                '<strong>Desarrollo y Refactorización:</strong> No solo es desarrollar nuevos componentes, o modificar los existentes, ',
                ' - tambien puede haber lugar para refactorizaciones, evitando degradaciónes y parches mal estructurados ',
                '<strong>Testing:</strong> Además de verificar el funcionamiento del sistema, tambien ayudan a mantener el modelo, completo y detallado ',
                ' - de la arquitectura, definiendo las entradas y las salidas internamente, y en algunos casos hasta como documentación ',
                '',
                '- Realizados de manera adecuada, con la calidad del codigo en la mente, la degeneración de nuestro codigo puede ser aceptable ',
            ]),
        new Item('artesanos',
            [
                '- Se puede considerar el siguiente nivel del desarrollo profesional, mejorando nosotros mismos, y a los demás ',
                '',
                '- No sólo software que funciona, <strong>SINO</strong> también software bien diseñado',
                '- No sólo responder al cambio, <strong>SINO</strong> también agregar valor constantemente',
                '- No sólo individuos e interacciones, <strong>SINO</strong> también una comunidad de profesionales',
                '- No sólo colaboración con el cliente, <strong>SINO</strong> también asociaciones productivas',
            ]),
        new Item('costOfQuality',
            [
                '- En un nivel operacional las tecnicas de gestión de calidad deben identificar desperdicios, resolver problemas y optimizar procesos ',
                '- Generalmente enfocado a la prevención, pero tambien enfocado a la solución reactiva ',
                '',
                '<strong>Costos libres de errores:</strong> Sin relación con la planificación, control, correción y mejoras de la calidad, considerando que todo salga bien ',
                '<strong>Costos de la calidad:</strong> Relacionados a los problemas encontrados, estos pueden desaparecer si el proceso fuera libre de errores ',
                '<strong>Costos de conformidad:</strong> Asociados a prevención y evaluación de la conformidad con los requisitos ',
                '<strong>Costos de NO conformidad:</strong> Han de ver con las fallas ya sean internas y/o externas no detectadas y que terminan afectando al cliente ',
            ]),
        new Item('qualityGates',
            [
                '- Son politicas de calidad de las organizaciones, para cumplir con el objetivo de realizar un nuevo despliegue ',
                '- Suelen ser politicas para garantizar la calidad, fiabilidad, y reducción de errores, facilitando aspectos como el CD/CI',
                '- Estos requisitos pueden variar y ser más flexibles o más estrictos de acuerdo a las necesidades de cada proyecto ',
                '',
                '<strong>Algunas politicas de calidad comunes</strong>',
                '<strong>- Cobertura:</strong>        Este porcentaje indica cuanto del codigo de producción esta cobijado mediantes tests unitarios o de integración ',
                '<strong>- Duplicación:</strong>      Las lineas duplicadas no solo violan el principio de DRY, si no que dificultan directamente la mantenibilidad ',
                '<strong>- Fiabilidad:</strong>       Directamente relacionada con la cantidad de bugs encontrados y que tan graves son ',
                '<strong>- Vulnerabilidades:</strong> Riesgos de seguridad potenciales y especificos para cada lenguaje ',
                '<strong>- Deuda tecnica:</strong>    Pequeños errores, omisiones, sin tests, codigo mal estructurado, soluciones desprolijas, todo va sumando ',
                '',
                '<strong>Valores generales</strong>(<em>SonarQube</em>) Cobertura<strong> >=80%</strong>   Duplicación<strong> <=3%</strong>   Fiabilidad <strong>A</strong>   Vulnerabilidades <strong>A</strong>    Deuda tecnica<strong> <=5%</strong> '
            ]),
        new Item('qualityMetrics',
            [
                '- Casi todas esta metricas varian en cuanto al lenguaje en el que se apliquen, haciendo que sean congruentes entre si, más no iguales ',
                '',
                '<strong>Complejidad ciclomatica:</strong> Esta se calcula en base a los caminos que se puedan dar debido al uso y el orden de las estructuras de control ',
                '<strong>Complejidad cognitiva:</strong> Relacionado a la dificultad para entender el flujo de control del codigo, usando un modelo matematico especifico ',
                '<strong>Duplicación:</strong> Lineas de codigo duplicado, ignorando la sangria y el formato, tambien aplica para archivos, metodos y clases',
                '<strong>Problemas:</strong> Cantidad de problemas presente en el codigo, ya sean abiertos/cerrados, segun la gravedad o problemas confirmados/iniciales ',
                '<strong>Mantenibilidad:</strong> Metrica relacionada directamente con la cantidad y la dificultad de los code smells presentes, además de la deuda tecnica ',
                '<strong>Fiabilidad:</strong> Cantidad de errores y/o bugs presentes, la calificación dependera de que tantos hallan y que tan criticos sean ',
                '<strong>Seguridad:</strong> Vulnerabilidades encontradas, y/o problemas del lenguaje ',
                '<strong>Tamaño:</strong> Clases muy grandes pueden conllevar a smell codes y problemas de mantenibilidad, incluyendo los comentarios ',
                '<strong>Pruebas y cobertura:</strong> Además de evaluar la cantidad y el exito de las pruebas unitarias, se evaluara cuantos caminos estan cubiertos ',
            ]),
        new Item('codeReviews',
            [
                '- Es un proceso que data desde la epoca de los 80s, dado que Hewlett Packard (HP) buscaba mejorar su codigo base y procesos internos ',
                '- Despues de varios procesos, la revision por pares fue uno de los intentos más fructiferos ',
                '- Tambien valga la acotación de que en ese entonces la practicas de desarrollo no estaban tan estandarizadas ',
                '',
                '- 5 practicas para maximizar su valor: ',
                '',
                '<strong>Realizar un checklist</strong> Con un conjunto predeterminado de preguntas y reglas a seguir, el cual puede incluir: ',
                ' <strong>- Legibilidad del codigo</strong> Y si tiene comentarios, que estos aporten algun valor ',
                ' <strong>- Seguridad</strong> Que no se exponga el sistema a posibles ciber ataques',
                ' <strong>- Coberturas de pruebas</strong> Si es la adecuada o es necesario probar más casos ',
                ' <strong>- Arquitectura</strong> Que no se incumpla la estructura del proyecto, o si se implemento algun patron, este bien implementado ',
                ' <strong>- Reutilización</strong> Donde se utilizen componentes, funciones y servicios, que puedan ser reusados ',
                ' <strong>- Principios</strong> Como DRY, SOLID, GRASP, YAGNI; entre otros no se deberian incumplir ',
                '',
                '<strong>Metricas de revisión del codigo</strong> No se puede corregir, si no se mide primero de manera objetiva ',
                '<strong>- Tasa de inspección:</strong> Velocidad conque el equipo revisa una cantidad especifica de codigo, <em>lineas de codigo</em> <strong>/</strong> <em>horas de inspección</em>',
                ' - Si esto toma demasiado tiempo, es posible que haya problemas de legibilidad que se deban tratar ',
                '<strong>- Tasa de defectos:</strong> Frecuencia con que se identifican defectos, <em>defectos</em> <strong>/</strong> <em>horas de inspección</em>',
                ' - Si este proceso es tardado, tal vez los desarrolladores deban usar mejores herramientas de prueba ',
                '<strong>- Densidad de defectos:</strong> Defectos encontrados, en una porción especifica de codigo, <em>defectos</em> <strong>*</strong> <em>miles de lineas de codigo</em> ',
                ' - Ayudando a identificar que componentes son más propensos a ser vulnerables, y asignando recursos a donde son necesarios ',
                '',
                '<strong>Los comentarios realizados, deben justificar la postura que se tome</strong> No solo sugerir lo que se deba arreglar ',
                ' - Se debe explicar el porque del cambio y diferentes opciones para realizarlo es lo más constructivo ',
                ' - Esto con el fin de compartir conocimiento, lo que ayudara abordar problemas similares en el futuro ',
                ' - Este debe ser un espacio de mejora y crecimiento, no de evaluación, asi el proceso sera menos intimidante y más eficiente',
                '',
                '<strong>Revisiones pequeñas</strong> Revisar más de 400 lineas, puede tener un aspecto adverso para encontrar errores ',
                ' - Además de que estadisticamente hablando, estos se encuentran frecuentemente en las primeras 200 lineas ',
                ' - Esto en base a los datos recopilados por un estudio realizado por <em>Cisco</em>, enlace disponible en el articulo original ',
                '',
                '<strong>Mejorar o complementar la automatización</strong> Planificar las revisiones, identificar a los revisores indicados ',
                ' - de manera que esto no se convierta en una carga impositiva, si no que sea un espacio colaborativo y de aprendizaje ',
                ' - y que el proceso se pueda convertir en punto de referencia para detectar y corregir errores antes de que su costo aumente ',
            ]),
        new Item('linting',
            [
                '- Son una ayuda para encontrar errores y falencias en nuestro codigo durante la etapa de desarrollo, como:',
                '',
                ' - Errores de sintaxis            - Codigo innecesariamente complejo ',
                ' - Uso de malas practicas         - Estilos de codificación inconsistentes ',
                '',
                '- Estos errores suelen ser comunes, dado que suelen ser menos evidentes y generalmente poco graves, pero siguen estando ahi ',
                '- Estas herramientas no solo nos muestran los posibles errores, tambien pueden dar sugerencias de posibles soluciones ',
                '- Tambien permiten la configuración de nuevas reglas para cuando se trabaja en equipo y mantener la consistencia ',
            ]),
        new Item('analystQA',
            [
                '- Es una forma de asegurar la calidad de los productos y los servicios que se utilizan a diario, un analista en esta area, ',
                ' - es el encargado de garantizar la calidad final del producto, servicio, hardware, etc.. previniendo errores y defectos ',
                '',
                '<strong>Funciones generales:</strong>',
                '<strong>Planificar y Ejecutar Pruebas:</strong> Con el fin de detectar fallos, comportamiento inesperados, mediante diversas tecnicas como: ',
                ' - pruebas manuales, pruebas automatizadas, pruebas unitarias, de sistema, de aceptación, entre otras',
                '<strong>Documentar errores y validar correciones:</strong> Cualquier error que se detecte, debe ser documentado de forma clara y detallada, ',
                ' - para que pueda ser replicado, analizado y corregido, ya sea mediante capturas de pantalla, o otras evidencias ',
                '<strong>Colaboración:</strong> Estos profesionales, trabajan de forma estrecha con diferentes equipos, como desarrollo, marketing, diseño, ',
                ' - para asegurarse que el proyecto cumpla con todos los requisitos ',
                '<strong>Automatización de pruebas:</strong> Tambien pueden escribir y ejecutar scripts que ejecuten prueba de manera repetible y consistente ',
                '',
                '<strong>Competencias de un analista:</strong>',
                '- Conocimientos en informatica y programación                              ',
                '- Habilidades blandas y comunicación entre equipos                         ',
                '- Dominar metodologias agiles y sus herramientas, (Jira, Kanba, SCRUM, etc)',
                '- Manejo de herramientas de testing, (Selenium, Junit, Mocca, etc)         ',
                '- Habilidades de analisis y resolución de problemas',
                '',
                '<strong>Porque es importante:</strong>',
                '- Garantiza a mantener y elevar los requisitos y expectativas de los usuarios ',
                '- Reduce el riesgo de errores, y la incidencia de problemas ',
                '- Ayuda a mejorar la calidad, el rendimiento, la seguridad y la usabilidad de los productos ',
                '- Ayuda a mejorar la reputación de la empresa, al tener una area comprometida con la calidad y el servicio ',
            ]),
        new Item('codeReviewPyramid',
            [
                '- Aveces en una revisión de codigo, se hace hincapie en asuntos mundados del software como ortografia, formato y estilo de codificación ',
                '- Aspectos que en grandes niveles pierden importancia, como retrocompatibilidad, es eficaz ?, cumple con lo pactado ? ',
                '',
                '                                                         Cumple con el formato del proyecto ?',
                '      <strong>Code</strong>                                               Se adhiere a las convenciones del lenguajes ?',
                '      <strong>Style</strong>                                              Usa DRY y/o otros patrones ',
                '                                                         El codigo es entendible y mantenibles ?',
                '',
                '                                                     Todos los tests siguen pasando ?',
                '                                                     La nueva funcionalidad esta debidamente testeada ? ',
                '      <strong>Tests</strong>                                          Incluye casos anomalos o casos especificos de falla ?',
                '                                                     Tiene test de integración, o son si quiera necesarios ?',
                '                                                     Incluye tests no funcionales (NFR), como rendimiento entre otros ?',
                '',
                '                                                 La nueva funcionalidad, esta debidamente documentada ?',
                '                                                 Se documentan los puntos relevantes y/o importantes ?',
                '      <strong>Documentación</strong>                              Incluye guias de usuario y/o manuales ?',
                '                                                 La documentación es entendible para el publico que esta orientada ?',
                '                                                 Errores gramaticales o de semantica ? ',
                '',
                '                                           Se satisface el requerimiento original ?',
                '                                           La logica esta correcta y no tiene complejidad agregada ?',
                '      <strong>Semantica de la</strong>                      Resiliente y robusto ante errores ? ',
                '      <strong>Implementación</strong>                       Contiene problemas de rendimiento ?',
                '                                           Es seguro, o revela vulnerabilidades del sistema ?',
                '                                           Puede ser observado y/o medido (metricas, logs, alertas)',
                '                                           Agrega nuevas dependencias, y siendo el caso que licencias usan ',
                '',
                '                                   El tamaño es el adecuado, o se puede reducir ?',
                '                                   Se puede hacer de diferentes maneras, y siendo asi, esta es la mejor ?',
                '      <strong>Semantica</strong>                    Es una función general y reutilizable o es especifica ?',
                '      <strong>del Api</strong>                      Como es la división a nivel interno del codigo ?',
                '                                   Hay Breaking changues, y si hay cual es su impacto ?',
                '                                   Es coherente y sigue el principio de la minima sorpresa, además cualquiere otro que aplique',
                '',
                '- Entre más abajo se encuentre en la piramide, es donde se deberia hacer la mayor cantidad de esfuerzo posible ',
                '- Entre más problemas se hallen en la partes bajas, mayor sera el esfuerzo para cambiarlo y/o corregirlo ',
                '- Las parte más altas, son las más propensas a automatización ',
            ]),
        new Item('doraAndSpaceMetrics',
            [
                '<strong>DORA</strong> <em>DevOps Research and Assessments</em> es un conjunto de 4 metricas que evaluan el rendimiento en las entregas de software ',
                '',
                '<strong>- Frecuencia de desarrollo:</strong> Frecuencia con la que se pone el codigo a disposición de producción o se libera para el usuario final ',
                '<strong>- Tiempo de espera para los cambios:</strong> Cuanto tiempo transcurre desde la definición del codigo, hasta su uso exitoso en producción ',
                '<strong>- Tiempo medio de recuperación:</strong> Cuanto se tarda en restablecer el servicio si se produce una incidencia/defecto que afecte a los usuarios ',
                '<strong>- Tasa de error de los cambios:</strong> Porcentaje de cambios/entregas que provocan una degradación del servicio o que requieran de correcciones ',
                '',
                '<strong>SPACE</strong> Enfoque de productividad de los desarrolladores, elaborado por investigadores de <em>Github</em> y <em>Microsoft</em> donde se resumen 5 factores ',
                '',
                '<strong>- Satisfacción y Bienestar:</strong> ¿ Tus desarrolladores estan felices y sanos ?, ¿ Disfrutan de su trabajo ?, ¿ Se sienten apoyados ? ',
                '<strong>- Rendimiento:</strong> ¿ El software entregado cumple con normas de calidad ?, ¿ Cumple las expectativas de los clientes ?',
                '<strong>- Actividades:</strong> ¿ Cuanto trabajan los desarrolladores ?, ¿ Invierten el tiempo en tareas significativas ?, ¿ Evitan o sortean retrasos ?',
                '<strong>- Comunicación:</strong> ¿ Por que medio se comunican y colaboran entre si ?, ¿ Hay un intercambio eficaz de ideas ?',
                '<strong>- Eficacia:</strong> ¿ Con que fluidez trabajan los desarrolladores ?, ¿ Evitan las distracciones y/o cuellos de botella ?',
                '',
                '- Combinando ambas metricas se suele lograr una visión global, holistica y equilibrada del rendimiento del desarrollo de software ',
                '- Mientras que <em>DORA</em> capta aspectos tecnicos, <em>SPACE</em> se centra en factores humanos y sociales ',
                '- Obteniendo una mejor comprensión de los puntos fuertes y debiles de tu equipo, alineandose mejor con los objetivos y retos a enfrentar ',
            ]),
        new Item('goodCodingPrinciples',
            [
                '- Seguir las <strong>convenciones</strong> de la comunidad y las <strong>especificaciones</strong> del lenguaje, ayudando con la consistencia y la legibilidad ',
                '',
                '- <strong>Documentación y Comentarios</strong> Un buen codigo esta documentado, para explicar las decisiones de negocio, y el porque se tomaron, ',
                ' - en cuanto a los comentarios, no se deben abusar de ellos, y solo se deberian usar donde sean realmente necesarios, ',
                ' - además de que ambos, se deben mantener actualizados a la par de los cambios del software ',
                '',
                '- <strong>Robustez</strong> Un buen codigo debe ser capaz de manejar una gran variedad de situaciones inesperadas sin fallar, ',
                ' - o producir resultados impredecibles, existen enfoques como el manejo de excepciones o la programación defensiva ',
                '',
                '- Siga el principio de <strong>SOLID</strong> que junto con otros principios, son increiblemente utiles para crear un software escalable y mantenible ',
                '- <strong>Testing</strong> No solo se deben realizar pruebas unitarias, un buen codigo debe ser facil de probar, ya sea de manera unitaria o de otros tipos ',
                '',
                '- <strong>Abstracciones</strong> Para esto se requiere de extraer la logica central y ocultar la complejidad, de manera que se logre un equilibrio, ',
                ' - entre flexibilidad, sin estar sobrediseñado, ni cerrarse a las posibilidades de de crecimiento a largo plazo ',
                '',
                '- Usar <strong>Patrones de Diseño</strong> Sin abusar de ellos, cada patron tiene un escenario donde es aplicable, asi no se agrega complejidad innecesaria ',
                '- <strong>Reducir las dependencias globales</strong> Para evitar una gestión de estados innecesarias, y reducir efectos segundarios ',
                '- <strong>Refactorización</strong> La mantenibilidad se logra reduciendo la deuda tecnica reduciendo y solucionando problemas lo antes posible ',
                '- <strong>Seguridad</strong> Un buen codigo evita la mayor cantidad de vulnerabilidades posibles, en especial las comunes y de facil solución '
            ]),
        new Item('codeRot',
            [
                '- Inevitablemente todo codigo se degrada con el tiempo, pero esto solamente es un problema si no se contiene ',
                '- La deuda tecnica, suele ser un acto de negligencia, por parte de desarrolladores apresurados o inexpertos ',
                '- Esto se puede contener, siempre que se dedique recursos y tiempo, en tareas como calidad, analisis y refactor ',
                '- El daño realizado por estos desarrolladores puede ser devastador, si no es debidamente supervisado, el codigo se pudre ',
                '- Generalmente este proceso se da en los siguientes pasos: ',
                '',
                '<strong>Toma de Decisiones:</strong> Aca las empresas distribuyen, presupuestos a largo y corto plazo, de manera que la jerarquia y la politica toman relevancia ',
                '',
                '<strong>Administración:</strong> Aca se estiman los proyectos, recursos, personal, equipos, etc... y se comete el error de tomar estos datos como inamovibles ',
                ' - y lo ultimo que se quiere escuchar, es que las fechas se deben posponer por cosas como <em>calidad</em> y <em>deuda técnica</em>',
                '',
                '<strong>Plazos VS Realidad:</strong> Estos proyectos suelen estar vinculados directa o indirectamente a la financiación; Un proyecto de ingenieria ',
                ' - es como saltar de un avión; No puedes saber como es, hasta que realmente lo haces ',
                '',
                '<strong>Las areas grises:</strong> Cuando creas nuevo codigo, descubres lagunas, funcionalidades que no existen, servicios incongruentes, etc... ',
                ' - Puedes solicitar que el <em>propietario</em> haga los cambios pertinentes, si es posible, y siempre y cuando que haya disponibilidad ',
                ' - Solucionarlo uno mismo, siendo esta la opción más rapida y comun generalmente, si se es consciente, se hara lo minimo necesario para continuar, ',
                '  - con la mejor calidad posible, y verificando que el codigo existente no se haya dañado',
                '  - pero esto con el tiempo se expandira a este, además de otros proyectos, casi siempre que se necesite realizar algun cambio',
                '',
                '<strong>Codigo incorrecto:</strong> Los fragmentos de codigo incompletos son comunes, ya sea por requisitos incompletos ó conocimientos insuficientes, ',
                ' - como nadie es dueño de estos fragmentos, y su dominio no esta claro, empiezan a ser modificados a conveniencia de multiples equipos, ',
                ' - por lo que si alguien usaba algun servicio, de un momento a otro, empezaran a haber errores en multiples lugares, sin razon aparente ',
                '',
                '<strong>Colapso:</strong> Un Jardin descuidado, sera invadido por las malas hierbas, y no importa la calidad, las buenas practicas, el trabajo extra, etc.. ',
                ' - si no se define una propiedad real, el codigo se pudrira, y dejara de crecer, para ahora mantenerlo funcionando y solucionando errores, ',
                ' - hasta que sea insostenible y sea necesaria una nueva versión, a la cual le puede pasar lo mismo, si no se aprendieron las lecciones correspondientes',
            ])
    ];

export const HARDWARE =
    [
        new Item('virtualizacion',
            [
                '- Es un entorno virtual que funciona con su propia CPU, memoria, red, y almacenamiento, que se crea dentro de un sistema de hardware fisico ',
                '- Esto se da mediante un software llamado <em>hipervisor</em> encargado de separar y gestionar los recursos reales para que la VM pueda gestionarlos ',
                '- Las VM estan aisladas del host, y este a su vez puede contener las VM que soporte ',
                '- Una VM permite que se ejecuten diferentes Sistemas Operativos dentro de la misma maquina ',
                '',
                '<strong>Ventajas:</strong>',
                '- Permiten aprovechar mejor los recursos de una maquina desaprovechada, al permitir compatirlos entre diferentes SO de manera simultanea',
                '- Dado su aislamiento se puede ejecutar software que no es de confianza sin peligro de que dañe al host ',
                '- Ofrecen más formas de recuperación ante desastres, ante desastres permiten permiten la tolerancia a fallos y la redundancia '
            ]),
        new Item('cli',
            [
                '- Es una interfaz de usuario basada en texto ',
                '- Antes de la invención del mouse, la unica interacción posible con el Sistema Operativo era mediantes comandos ',
                '- Los comandos no son universales, algunos son reconocibles solo por aplicaciones ó Sistemas Operativos especificos ',
                '- Pueden funcionar con o sin argumentos, los argumentos son maneras de especificar detalles y/o configuraciones ',
                '- Son rapidas y más eficientes ya que no necesitan interfaces graficas para funcionar ',
                '- Tambien son más complejas de usar, ya que se basan en la memoria del usuario ',
            ]),
        new Item('escalamiento',
            [
                '- Capacidad de un software para crecer de acuerdo a la demanda ',
                '',
                '<strong>Vertical:</strong>',
                '- La más facil de realizar pero la más costosa, ya que solo implica comprar un hardware más potente',
                '- Esta depende directamente de la capacidad de la infraestructura, sin contar en que llegara un momento donde llegue a su limite',
                '- Las fallas en la infraestructura pueden conllevar a errores colapsantes ',
                '',
                '<strong>Horizontal:</strong>',
                '- Esta es más dificil de realizar pero es practicamente ilimitada',
                '- Se basa en tener varios nodos trabajando en paralelo de manera coordinada ',
                '- Soporta el balanceo de cargas y tiene una disponibilidad muy alta, además de que se puede combinar con un escalamiento vertical',
                '- El mantenimiento se incrementa considerablemente, además de que se requieren cambios en el software para poder trabajar como un conjunto'
            ]),
        new Item('nubeVSvirtualizacion',
            [
                '- Ambos conceptos hacen referencia a la creación de entornos utiles a partir de recursos abstractos, bajo diferentes conceptos ',
                '- La virtualización nos permite esto teniendo recursos especificos y de manera fisica ',
                '- La nube es un entorno de TI que agrupa, extrae y comparte recursos ajustables en una red ',
                '',
                '                           Virtualización                    Nube                     ',
                '- Definición                 Tecnologia                   Metodologia                 ',
                '',
                '- Proposito               Multiples entornos,           Agrupar recursos              ',
                '                        un solo sistema fisico        Con alta disponibilidad         ',
                '',
                '- Uso                Entregar recursos especificos  Entregar variedad de recursos     ',
                '                         a usuarios especificos        con multiples fines            ',
                '',
                '- Configuración          Basado en imagenes            Basado en plantillas           ',
                '',
                '- Duracion                  largo plazo                  Mediano plazo                ',
                '',
                '- Escalabilidad               vertical                    horizontal                  ',
            ]),
        new Item('rendering',
            [
                '<strong>Server-side:</strong> Esta funciona convirtiendo archivos estaticos HTML en información utilizable por el navegador ',
                '- Este proceso no cuenta con un modo de cache, por lo que cada vez que se necesite, este sera pedido al servidor ',
                '- Su velocidad no solo depende del servidor, si no de la optimización del sitio web, personas conectadas, etc.. ',
                '- Generalmente cada vez que hay un cambio se vuelve a pedir todo el contenido y no solo lo que se modifico ',
                '- El lado positivo de este metodo es el SEO ya que es mucho más eficiente y facil para los motores de busqueda ',
                '- Este enfoque es ideal para contenido estatico, que no se requiera para una interactividad continua con el usuario ',
                '',
                '<strong>Client-side:</strong> Esta funciona mediante Javascript que obtendra el documento basico de HTML, y despues ejecutara el resto del sitio usando al navegador ',
                '- Este enfoque es más reciente y es utilizado por las librerias y frameworks de Javascript como Vue y Angular ',
                '- Mediante esto el servidor solo se encarga de responder con los datos, el resto se hace en el navegador ',
                '- Las paginas se cargan más rapido ya que solo se modifica lo que se necesite y no todo el archivo ',
                '- Debido a que se necesitan todos los archivos para una carga correcta de la pagina, la conexión a internet puede afectar la carga inicial ',
                '- Generalmente se requiere de varias a muchas dependencias de terceros, incluyendo los problemas que esto puede tener ',
            ]),
        new Item('modelOSI',
            [
                '- Es un modelo conceptual que permite la comunicación entre diversos sistemas usando un protocolo estandar ',
                '- Este consta de 7 <strong>Capas</strong> abstractas apiladas verticalmente ',
                '',
                '<strong> 7 Aplicación:</strong>      Interacción hombre-maquina donde las aplicaciones pueden acceder a servicios de red ',
                '<strong> 6 Presentación:</strong>    Garantiza que los datos tengan un formato utilizable, además se encriptan los datos si es necesario ',
                '<strong> 5 Sesión:</strong>          Mantiene las conexiones y es el responsable de controlar puertos y sesiones ',
                '<strong> 4 Transporte:</strong>      Transmite los datos mediante protocolos de transmision, incluidos TCP y UDP ',
                '<strong> 3 Red:</strong>             Decide la ruta fisica que seguiran los datos, ya sea en la misma o en otra red ',
                '<strong> 2 Enlace de datos:</strong> Define el formato de los datos en la red, además de controlar errores de flujo ',
                '<strong> 1 Fisica:</strong>          Transmite el flujo de bits sin procesar a traves del medio fisico, y que estos sepan diferenciar el 1 y el 0 ',
                '',
                '- Esta organización de capas permite una mejor depuración de errores, ',
                ' - a la vez que cada capa tiene una responsabilidades bien definidad a la hora de recibir o enviar información ',
            ]),
        new Item('monitoreo',
            [
                '- Es un software que nos permite monitorizar y descubrir problemas a nivel de aplicación que pueden ser optimizados ',
                '- Para esto, es necesario recoger y cuantificar valores como: ',
                ' - Errores de la aplicación, especificando cuales y cuantas veces sucedieron ',
                ' - Tiempo de respuesta de la aplicación ',
                ' - Identificación de trazas lentas ',
                ' - Tiempo de ejecución de querys en la base de datos ',
                ' - Tiempo de respuesta de llamados externos ',
                '',
                '- Mediante esto es posible encontrar errores como: ',
                ' - Consultas a bases de datos que pueden ser optimizadas ',
                ' - Problemas con el Garbage Collector o la JVM ',
                ' - Manejo erroneo de problemas ',
            ]),
        new Item('vmVsContainers',
            [
                '                    <strong>Virtualización</strong>                                        <strong>Contenedores</strong>               ',
                '         - Reduce los costos asociados al hardware             - Requieren menos recursos y son más livianos                           ',
                '           al utilizar recursos desperdiciados                 - Más eficientes y escalables                                           ',
                '<strong>Pros</strong>     - Aislamiento de las aplicaciones                     - Son más congruentes y simplifican el CD/CI           ',
                '         - Menos espacio en equipos fisicos                    - Son más portatiles e interoperables                                   ',
                '                                                                                                                                       ',
                '                                                                                                                                       ',
                '         - Se encuentran limitados por los recursos del host   - No siempre tienen mejor rendimiento                                   ',
                '<strong>Contras</strong>  - Arranque lento, dependiente del host                - No son idoneos para administrar dispositivos fisicos ',
                '         - Pueden ser infectadas por el host                   - No esta 100% estandarizado, entre provedores                          ',
                '                                                               - Las aplicaciones graficas no funcionan bien                           ',
            ]),
        new Item('falseSharing',
            [
                '- Suele suceder cuando varias aplicaciones intentan acceder a la misma region de memoria logica y ',
                ' - cada programa/subprograma a su vez ha almacenado un copia de este valor, en su propio cache',
                '- Cada vez que este sufre alguna modificación, esto hace que las demás partes sean invalidas y deban consultar el valor actual ',
                '- El problema del "falso compartir", radica cuando los datos afectados por un programa, no son usados por los otros; ',
                ' - si no que estan situados en la misma linea del cache',
                '- Obligando a realizar consultas innecesarias en memoria, que afectan el rendimiento',
                '- Este es un problema dificil de detectar, debido a que es inherente a la arquitectura de los componentes fisicos ',
                '- Esto tambien suele suceder cuando se paralelizan procesos, invalidando bloques comunes constatemente, aunque no este compartidos ',
                '',
                '- Suelen haber contramedidas, desde alto nivel hasta bajo nivel',
                ' - Colocar espacios en blancos, antes o depues de los datos, a manera de que queden en lineas de cache separadas ',
                ' - Modificar la velocidad de lectura/escritura del cache para reducir la periocidad ',
                ' - Cambiar la administración del cache del componente fisico ',
                ' - Alterar como el SO administra el uso compartido',
            ]),
        new Item(HARDWARE_PROTOCOLS,
            [
                '- Son un conjunto de reglas que describen como los dispositivos conectados se comunican a traves de una red, para intercambiar información ',
                '- Sirven como un lenguaje en comun, para una comunicación facil y segura sin importar las diferencias de hardware o procesos internos ',
                '',
                '<strong>Protocolos de comunicación de red:</strong> Determinan las reglas y formatos para transferir datos a traves de redes',
                '<strong>- Protocolo de transferencia de hipertexto <em>(HTTP)</em></strong>: Protocolo de internet que permite la comunicación entre un servidor y un navegador ',
                '<strong>- Protocolo de control de transmisión <em>(TCP)</em></strong>: Protocolo confiable orientado a la conexión que ayuda en la transmisión ',
                ' - secuencial de paquetes de datos para garantizar que los datos lleguen al destino a tiempo sin duplicaciones ',
                '<strong>- Protocolo de Internet <em>(IP)</em></strong>: Facilita el enrutamiento de los paquetes de datos a traves de las redes, funciona junto con <em>TCP</em>',
                '<strong>- Protocolo de datagramas de usuario <em>(UDP)</em></strong>: Es un protocolo sin conexión que no garantiza una conexión entre la aplicación y el servidor ',
                ' - antes de transmitir un mensaje, es eficaz para casos de uso como transmisiones o <em>broadcasts</em> ó <em>multicast</em> ',
                '<strong>- Protocolo de transferencia de archivos <em>(FTP)</em></strong>: Permite compartir archivos entre servidores estableciendo 2 conexiones <em>TCP</em>, ',
                ' - una para datos y otra para control, para garantizar la recuperación en casos de perdida de datos ',
                '',
                '<strong>Protocolos de seguridad de red:</strong> Garantizan una transmisión segura de datos a traves de conexiones de red',
                '<strong>- Protocolo seguro de transferencia de archivos <em>(SFTP)</em></strong>: Transfiere archivos de forma segura a traves de la red mediante, ',
                ' - el uso de cifrado de clave publica, y la auntenticación entre el cliente y servidor ',
                '<strong>- Protocolo seguro de transferencia de hipertexto <em>(HTTPS)</em></strong>: Supera la limitación de <em>HTTP</em> garantizando la seguridad, ',
                ' - de los datos en transito, mediante un canal seguro cifrado ',
                '<strong>- Secure Socket Layer <em>(SSL)</em></strong>: Ayuda a proteger las conexiones de internet, mediante cifrado, tambien existe una versión más reciente y segura <em>TLS</em>',
            ])
    ];

export const WEB =
    [
        new Item('spa',
            [
                '- Es una aplicación web donde todo el contenido se muestra en una sola sin regargar el navegador ',
                '- Los componentes son segmentos individuales de HTML que juntos dan la impresión de unidad ',
                '- Este tipo de paginas tambien maneja las url para cambiar entre vistas ',
                '- La transición entre las paginas es fluida y el rendimiento es mayor en general ',
                '- Los frameworks actuales trabajan de esta manera ',
            ]),
        new Item('pwa',
            [
                '- Estas aplicaciones nacen de paginas web normales para parecerse a aplicaciones nativas de telefonos moviles ',
                '- NO se necesita descargar nada desde una tienda de aplicaciones, solo tener acceso a un navegador con internet ',
                '- Aunque necesitan internet para actualizaciones de la información, tambien puede funcionar sin este ',
                '- Bastante acorde con el enfoque mobile-first, que le da prioridad al movil que al escritorio ',
            ]),
        new Item('seo',
            [
                '- La indexación de contenido es una gran herramienta para buscar lo que se necesita ',
                '- El contenido de calidad es una de las mejores formas de aumentar el trafico del sitio web ',
                '- La accesibilidad al contenido y la experiencia del usuario tambien son importantes ',
                '- Saber como funcionan los motores de busqueda, permite optimizar el sitio para que sea más "visible" para estos ',
            ]),
        new Item('espacio',
            [
                '- Es el espacio que se encuentra alrededor del objeto en cuestión, bastante util para crear diseños simples pero atractivos ',
                '- El uso del espacio positivo y negativo puede dar pie a ilustraciones con mensajes directos pero sutiles ',
                '- Un gran artista sabe manejar estos conceptos, e imprimirles su toque unico, como en el articulo fuente se denota ',
            ]),
        new Item('diseno',
            [
                '- El diseño grafico es importante en la programación debido a que este sera la cara visible de tu producto ',
                '- Es importante contestar respuestas previamente como: ¿ cual es tu objetivo ? & ¿ cual es tu producto ? ',
                '- NO descuides el color, tener una paleta de colores es tener una identidad ',
                '- Además de la identidad es importante saberlos combinar y tener un buen contraste y legibilidad entre si ',
                '- El uso de las imagenes y las fuentes tipograficas son más importantes de lo que parecen ',
            ]),
        new Item('interfacesUsuario',
            [
                '<strong>Principios para el diseño de una UI</strong>',
                '<strong>- Familiaridad con el usuario:</strong> Utilizar conceptos y la experiencia del usuario para que le sea más "facil" de usar ',
                '<strong>- Consistencia:</strong> Las operaciones del mismo tipo deberian hacerse del mismo modo siempre ',
                '<strong>- Minima sorpresa:</strong> El comportamiento del sistema no debe provocar sorpresa en el usuario ',
                '<strong>- Recuperabilidad:</strong> Los usuarios deben tener mecanismos para recuperase en caso de error ',
                ' -  para este apartado se pueden usar confirmaciones o recursos para deshacer opciones ',
                '<strong>- Guia al usuario:</strong> Cuando un error ocurra, la interfaz debe ayudar al usuario a entenderlo ',
                '',
                '<strong>Prototipos de una UI',
                '<strong>- Estaticos:</strong> No permiten la alteración de sus componentes, pero si dan un bosquejo inicial ',
                '<strong>- Dinamicos:</strong> Estos diseños involucran un poco más de detalle tecnico, como especificaciones de rendimiento ',
                '<strong>- Robustos:</strong>  Ya presentan caracteristicas dinamicas, como validación de errores y edición de datos ',
                '',
                '<strong>Interacción del usuario en la UI',
                '<strong>- Manipulación directa:</strong> Interacción directa con los objetos de la pantalla ',
                '<strong>- Selección de menus:</strong> Se limitan las opciones, a cambio de ser más lenta y menos propensa a errores ',
                '<strong>- Formularios:</strong> Introducción de datos, por parte del usuario ',
                '<strong>- Comandos:</strong> Los usuarios emiten comandos y sus parametros asociados para realizar acciones más complejas ',
                '<strong>- Lenguaje:</strong> Usar un lenguaje natural que el usuario comprenda, lo hara accesible a más tipos de usuarios ',
                '',
                '<strong>Pautas de evaluación de una UI</strong>',
                '- Semejanza con el mundo real ',
                '- Consistencia y estandarización ',
                '- Estetica y diseño minimalista ',
                '- Reconocimiento, manejo y recuperación de errores ',
                '- Flexibilidad, control y libertad para el usuario ',
                '- Reconocimiento de acciones y ayudas ',
            ]),
        new Item('experienciaUsuario',
            [
                '- Es la percepción del usuario al interactuar con un producto ',
                '- Una buena UX se logra cuando el producto sea util y usable por el cliente a la hora de usarse',
                '- La UX no es lo mismo que la usabilidad, ya que esta la contiene además de otras caracteristicas ',
                '- Este objetivo no se logra agregando funcionalidades, si no, estando en el lugar de un cliente ',
                '',
                '<strong>Es necesario tener en cuenta:</strong>',
                ' - Necesidades del cliente ',
                ' - Objetivos del negocio ',
                ' - Limitaciones tecnicas ',
                '',
                '<strong>Tambien investigar cosas como:</strong> ',
                ' - Investigacion de los grupos de mercado y entrevistas con stakeholders ',
                ' - Pruebas de usabilidad y analisis de datos ',
                ' - Manejo y estructuración de la información presente ',
                '',
                '<strong>Habilidades blandas como:</strong>',
                ' - Estudios en Psicologia, Sociologia o Antropologia ',
                ' - Conocimientos en Comunicación , Marketing, y experiencia en ventas ',
                ' - Diseño industrial o grafico, y conocimientos en tecnologias ',
                '',
                '<strong>        UX Designer                                   UI Designer<strong>',
                ' Diseño de interacciones                       Diseño visual',
                ' Traza caminos para el usuario                 Elige colores y tipografias',
                ' Jerarquia y segmentación de la información    Planes esteticos ',
                ' Prototipos e investigación                    Maquetación y diseño grafico',

            ]),
        new Item('logos',
            [
                '<strong>- Isotipo:</strong>   Parte reconocible de una marca sin presencia de texto ',
                '<strong>- Isologo:</strong>   El texto y el icono son parte de un mismo conjunto, no funcionan por separado ',
                '<strong>- Logotipo:</strong>  Texto que representa la marca y es la parte reconocible de esta ',
                '<strong>- Imagotipo:</strong> Combinación de imagen y texto, que tambien pueden separarse y ser efectiva ',
            ]),
        new Item('gestalt',
            [
                '- Es una manera de encontrar sentido en como nuestras mentes perciben las cosas, como un todo y no solo como los elementos que lo forman ',
                '- <em>El todo es mayor que la suma de sus partes </em>',
                '',
                '<strong>Aparición:</strong> Surge cuando se percibe un objeto a partir de información previa que conozcamos ',
                '<strong>Cosificación:</strong> Los objetos se pueden reconocer incluso cuando hace falta parte de ellos, ',
                ' - Nuestro cerebro hace coincidir lo que se ve con patrones familiares en nuestra memoria ',
                '<strong>Multiestabilidad:</strong> Se basa en que los objetos ambiguos pueden ser interpretados de diferentes maneras, ',
                ' - y que dado esto se puedan ver varias formas, sin tener certeza de la verdadera ',
                '<strong>Invariabilidad:</strong> Los objetos simples pueden ser reconocidos independientemente de, su escala, rotación, traslación o perspectiva ',
                '',
                '- Leyes de Gestalt aplicadas al diseño grafico ',
                '',
                '<strong>Principio de semejanza:</strong> Si elementos que esten proximos entre si, y son similares ',
                ' - tenderemos a verlos como parte de un grupo, ya sea por color, tamaño o textura ',
                '<strong>Principio de continuidad:</strong> El ojo puede crear visualmente la continuidad de una linea, ya que el ojo ',
                ' - va a seguir el camino visual más suave, menos forzado y coherente ',
                '<strong>Principio de cierre:</strong> Cuando una figura no esta cerrada o delimitada por lineas, nuestra mente ',
                ' - tiende a transmitir una sensación de cierre, rellenando las formas ',
                '<strong>Principio de proximidad:</strong> Teoriza como tendemos a agrupar los elementos visuales proximos entre si ',
                ' - estos deben compartir alguna caracteristica en comun como forma, color, textura, tamaño ',
                '<strong>Figura y fondo:</strong> Usando el espacio negativo y la tendencia de ver un objeto separado de lo que lo rodea ',
                '<strong>Principio de Simetria y Orden:</strong> Si los elementos cuentan con cierta simetria y orden, son percibidos como parte del mismo grupo ',
                '<strong>Dirección comun:</strong> Los elementos que parecen contruir un patron o flujo continuo y en la misma dirección ',
                ' - son a su vez percibidos como parte de un grupo mayor ',
            ]),
        new Item('ssr-csr-ssg-isr',
            [
                '<strong>Server Side Rendering (SSR)</strong>',
                '- El HTML de la pagina es generado en el lado del servidor, ya sea mediante petición, o previamente ',
                '- Ventajas: ',
                ' - Mejora el SEO y la indexación del contenido ',
                ' - La carga inicial es más rapida al no tener que ejecutar nada más para mostrar el contenido ',
                ' - Puede funcionar, incluso si el Javascript dentro del navegador esta desactivado ',
                '- Desventajas: ',
                ' - Mala capacidad de respuesta si la conectividad a internet es baja o nula ',
                ' - Mayor carga al servidor, al tambien ser responsable de generar o entregar el HTML a mostrar ',
                '',
                '<strong>Client Side Rendering (CSR)</strong>',
                '- Ya es responsabilidad del navegador, y mediante Javascript se manipula el DOM para construir los nodos HTML ',
                '- Ventajas: ',
                ' - Rapido y con una mayor capacidad de interactividad con solo la carga inicial ',
                ' - Se puede escoger que partes del DOM se pueden actualizar para mostrar nueva información ',
                '- Desventajas: ',
                ' - La carga inicial es más lenta al tener que esperar para ejecutar javascript ',
                ' - Inutil si javascript esta deshabilitado en el navegador ',
                ' - El SEO se puede ver dificultado por el contenido inicial en blanco ',
                '',
                '- Desde la creación de NodeJs, se abrio la posibilidad de crear paginas hibridas, que comparte caracteristicas de ambos mundos ',
                '- Creando contenido inicial en el lado del servidor que no este completamente vacio y agregarle más funcionalidades en el navegador ',
                '- El proceso de agregar más interactividad a estos sitios estaticos se conoce generalmente como "Hidratación" ',
                '',
                '<strong>Static Site Generators(SSG)</strong>',
                ' - Estos ejecutan el codigo SPA en el momento de la compilación, y generan previamente el HTML en el servidor ',
                ' - Algunos frameworks como NextJs, Gatsby, NuxtJs, VuePress usan estas estrategias, ',
                ' - sin de dejar de ofrecer las caracteristicas de React y Vue en los cuales estan basados ',
            ]),
        new Item('esqueumorfismo',
            [
                '- Es un termino proveniente del griego <em>skeuos</em>, que significa vasija ó herramienta; y <em>morfo</em>, que significa forma ',
                '- La aplicación más reciente y generalizada esta ligada al primer Iphone, ya que cada icono intentaban evocar a su contraparte fisica ',
                '- Todo esto buscaba ser amigable con el usuario, además de jugar con el color y las sombras para acercarse aun más ',
                '',
                '<strong>Flat Design:</strong> Con el paso del tiempo, los usuarios nos acostumbramos a usar y hasta diseñar interfaces, ',
                ' - por lo que la necesidad de tener un icono el cual fuera una copia exacta fue perdiendo relevancia en el tiempo ',
                '- Esto con el fin de tener más relevencia en otras areas como el rendimiento y la funcionalidad ',
                '- Este tipo de diseño apuesta por iconos más abstractos y simples, de manera que llegan a carecer de colores, sombras y bordes ',
                '',
                '<strong>Diseño neomorfico:</strong> Como el arte mismo, el diseño avanza, y esta evolución no significa que las corrientes mueran ',
                '- Este diseño se puede considerar una fusión de los 2 estilos anteriores ',
                '- Se mantienen los iconos realistas sin caer en un exceso de detalles que sobrecarguen la experiencia ',
                '- A su vez se usan colores mezclas y degradados bastante expresivos, que van más alla de la cotidianidad ',
            ]),
        new Item('menorSorpresa',
            [
                '- Es una guia de diseño para las interfaces de usuario, donde cada componente debe comportarse  ',
                ' - de la manera que la mayoria de los usuarios se comporte o ya esten acostumbrados ',
                '- Los comportamientos deberian poder anticiparse, basandose en experiencias previas, con sistemas similares ',
                '- Esto garantiza que la aplicación sea intuitiva y facil de usar, en cierto modo ',
                '',
                '- Esto tambien aplica para el diseño de las APIs, si esta se comporta diferente y sorprende al usuario, se deberia pensar en rediseñarla ',
                '- El patron de Segregación de consultas y queries(CQRS), va de la mano con este principio, ',
                ' - separando los metodos que cambian un objeto(comando), de los que hacen preguntas(consultas)',
            ]),
        new Item('microFrontened',
            [
                '- El desarrollo de front es dificil, y escalarlo entre multiples equipos es aun más dificil ',
                '- La eficiencia de desarrollo se reduce proporcionalmente entre más equipos haya, debido a las multiples vias de comunicación ',
                '- Y más si solo se tienen una vista unica, para multiples micro servicios, ya que cada micro servicio, necesita cambios distintos ',
                '',
                '<strong>¿ Que es un microfrontend ?</strong>',
                '- Son una extensión del concepto de microservicios, aplicado al diseño web, Es un estilo arquitectonico y organizacional',
                '- Estos son micro aplicaciones autonomas, con dominios acotados, e independientes de la tecnologia o framework usado ',
                '- Para tener una mejor autonomia y eficiencia, lo mejor seria poseer una función de extremo a extremo, que se formaria en torno a un subdominio ',
                '- Los limites de cada microfrontend se establecen en función de los usuarios y no de los desarrolladores, por medio de <em>Domain Driven Design</em> (<strong>DDD</strong>)',
                '',
                '<strong>¿ Como funciona, el microfrontened ?</strong>',
                '- Existe una aplicación contenedora, que combina cada microfrontened y esta construida con HTML, CSS y Javascript minimos, tambien: ',
                ' - Representa los elementos en comun de la pagina, como encabezados, pies de pagina, menus, etc.. ',
                ' - Renderiza los microfronteneds bajo demanda',
                ' - Realiza cuestiones transversales como la autenticación, roles, permisos, manejo de rutas, etc.. ',
                '',
                '<strong>Aislamiento de CSS:</strong>',
                '- Existe el riesgo latente de que hayan estilos que se anulen entre si, al no tener espacios de nombres ni una adecuada encapsulación ',
                '- Esto se puede prevenir usando, preprocesadores, teniendo convenciones de nombres ó usando biblotecas de Css en Js',
                '',
                '<strong>Componentes compartidos:</strong>',
                '- Una biblioteca compartida ofrece coherencia visual y reutilizacón de codigo',
                '- Sin embargo deben ser componentes genericos, que no compartan logica empresarial, o se crearia un acoplamiento indeseado ',
                '- Deben ser manejados por un solo equipo, para lograr una mejor calidad, pero no puede estar cerrado a contribuciones y sugerencias de otros equipos ',
                '',
                '<strong>Arquitectura:</strong>',
                '- Deben ser modelados entorno al dominio empresarial',
                '- Descentralizados a traves de equipos autonomos ',
                '- Se deben poder automatizar su implementación ',
                '',
                '<strong>Comunicación entre microfrontends:</strong>',
                '- Estos no deben compartir su estado y solo comunicarse si es estrictamente necesario, para evitar el acoplamiento, se pueden comunicar por: ',
                ' - Eventos personalizados                                     - Workers',
                ' - Pasar devoluciones de llamadas (callbacks)                 - Enrutamiento a travez de la barra de direcciones',
                '',
                '<strong>Tipos segun la composición:</strong>',
                ' <strong>Tiempo de construcción:</strong> Se publica como un paquete, que es incluido por la aplicación contenedora, centralizando las versiones ',
                ' <strong>Tiempo de ejecución:</strong> Se puede realizar con iframes, Javascript y webcomponents, de manera que los cambios sean independientes entre si',
                '- Ambos tienen ventajas y deventajas, como necesitar un release completo para cambiar alguna parte o tener problemas con las rutas, respectivamente ',
                '',
                '<strong>Ventajas:</strong>',
                '- Ciclos de desarrollo y de entrega rapida, debido a implementaciones aisladas y una base de codigo más simple',
                '- Tiempo de carga inicial reducido, ya que se cargan bajo demanda',
                '- Mayor confiabilidad y mantenibilidad al tener equipos pequeños y debidamente enfocados',
                '- La experimentación y las reversiones son más faciles de realizar',
                '',
                '<strong>Desventajas:</strong>',
                '- Mayor complejidad debido a gastos operativos',
                '- Trabajo adicional, para crear estandares y mantener una Experiencia de usario consistente',
                '- Tiempos de cargas más lentos, al navegar por la aplicación y un mayor consumo de red al tener dependencias duplicadas ',
            ]),
        new Item('buenasPracticasFront',
            [
                '- El desarrollo web es bastante amplio, abarca desde el diseño y creacion de interfaces de usuario, hasta areas como la optimización ',
                '',
                '<strong>HTML Semantico</strong>',
                '- Proporciona una estructura, con un significado intrinseco, mejorando la accesibilidad y la optimización de los motores de busqueda <strong>SEO</strong> ',
                '',
                '<strong>Metodologias CSS</strong>',
                '- Metodologias como: <em>Block, Element, Modifier</em> <strong>BEM</strong> & <em>Scalable and Modular Architecture for CSS</em> <strong>SMACSS</strong>',
                '- Promueven la modularidad, reutilización y la mantenibilidad de las Hojas de estilo, al seguir convenciones y facilitar la colaboración ',
                '',
                '<strong>Diseño Responsive</strong>',
                '- Esto es esencial para garantizar que los sitios web se adapten al mayor numero de pantallas y dispositivos posibles',
                '- Usando Media Queries, layouts, y unidades porcentuales, entre otros metodos, permiten una correcta visualización sin importar la plataforma ',
                '',
                '<strong>Mejora Progresiva</strong>',
                '- Se empieza una base de codigo funcional, donde se va mejoran progresivamente la experiencia del usuario',
                '',
                '<strong>Optimización</strong>',
                '- Un aspecto crucial para ofrecer experiencias de usuario rapidas y eficientes, en diferentes tipos de redes y capacidades ',
                '- Existen tecnicas como la mimificación, la carga diferida, almacenamiento en cache, compresión de imagenes, etc... ',
                '',
                '<strong>Compatibilidad entre navegadores</strong>',
                '- Esto es importante debido a que se espera llegar a una audiencia diversa, y los navegadores no estan completamente estandarizados entre si ',
                '- Pruebas de depuración periodicas, en diferentes navegadores como Chrome, Firefox, Safari y Edge ayudan a identificar y resolver estos problemas ',
                '',
                '<strong>Estandares de Accesibilidad</strong>',
                '- Estandares descritos en el <em>Web Content Accessibility Guidelines</em> <strong>WCAG</strong>, promueven la inclusión y la usabilidad, ',
                ' - para usuarios con discapacidades, o que necesiten de tecnologias de asistencia ',
                '',
                '<strong>Multimedia optimizada</strong>',
                '- Una carga rapida de este tipo de contenido, reduce los tiempos de carga y su visualización, mejorando la experiencia general del usuario ',
                '',
                '<strong>Versionamiento</strong>',
                '- Manejar un sistema de control de versiones, como <em>Git</em> permite flujos de trabajo colaborativos y una manera simple de revertir cambios',
                '- Ademas de otros beneficios, como la experimentación, el manejo de ramas, sin desestabilizar entornos importantes como producción ',
                '',
                '<strong>Aprendizaje Continuo</strong>',
                '- Igual que muchas areas de la tecnologia, el desarrollo web constantemente cambia y evoluciona, ya sea por tendencias o por avances tecnologicos ',
                '- Mantenerse informado y seguir aprendiendo, permite ofrecer soluciones de vanguardia y mantener un perfil profesional competitivo ',
            ])
    ];

export const PARADIGMAS =
    [
        new Item('imperativo',
            [
                '<strong>Imperativo:</strong> Paradigma clasico de la programacion, secuencia ordenada de acciones a ejecutar',
                ' - intentando ser los más cercano a lenguaje maquina posible, siendo un enfoque compresible y que abarca otros 3 subordinados ',
                '',
                '<strong>- Estructurado:</strong> Donde se incluyen sentencias de control y se contemplan las interrupciones, evitando ',
                ' - instrucciones de salto absolutas, que pueden introducir errores fatales y que son dificiles de mantener ',
                '<strong>- Procedimental:</strong> Donde se empieza a crear funciones y metodos para no repetir código, que tambien pueden ser llamados ',
                ' - como subprogramas, rutinas, o procedimientos, dependiendo del lenguaje, creando fragmentos más manejables y claros',
                '<strong>- Modular:</strong> Se agrupan segmentos más grandes de código independientes entre si, para facilitar la depuración, ',
                ' - similar el enfoque procedimental, pero con bloques más grandes y que pueden acoplarse entre si y crear aplicaciones ',
                '',
                '<strong>Declarativo:</strong> Se describe el resultado de la operación y no el como, requiriendo una mayor abstracción con menos instrucciones, ',
                ' - resultando en acciones más precisas, cortas y entendibles, ayudando a la reutilización y con soporte por una gran cantidad de lenguajes ',
                '',
                '<strong>- Funcional:</strong> La base son las funciones que se pueden concatenar para formar estructuras o usarse como parametros ',
                ' - Asimismo se pueden usar como resultados, esto tambien se ocupa de que no hayan asignaciones independientes de valores ',
                '<strong>- Logica:</strong> La base es la matematica y su logica para predicar el resultado, aca en vez de tener una sucesión de instrucciones, ',
                ' - se tiene una recopilación de hechos y suposiciones a las que el interprete le aplica reglas para alcanzar el resultado '
            ]),
        new Item('funcional',
            [
                '- Las acciones son delegadas a funciones propias del lenguaje, o funciones personalizadas, con ayuda del propio lenguaje ',
                '<strong>- Funciones Puras:</strong> Dada una entrada siempre van a tener la misma salida',
                '<strong>- Composición:</strong> Se pueden juntar y crear una secuencia y resultado diferente ',
                '<strong>- Estados compartidos:</strong> Son los cambios visibles fuera de la función llamada ',
                '<strong>- Mutabilidad & Inmutabilidad:</strong> Indican si una variable puede ser modificada o no despues de su creación ',
                '<strong>- Efectos secundarios</strong> Todo cambio de estado, que se de por fuera de la función llamada, se evitan principalmente ',
            ]),
        new Item('scripting',
            [
                '- Son lenguajes no compilados y que se ejecutan directamente en el lado del cliente, aunque tambien existen en el lado del servidor ',
                '- El más famoso es Javascript, pero otros como Python y Ruby tambien lo son',
                '- Suelen ser menos eficientes al no ser compilados pero conllevan menos trabajo para el programador ',
                '- Generalmente son debilmente tipados, lo que da más flexibilidad al mismo tiempo que aumenta la posiblidad de errores',
                '- Estas caracteristicas los hace especialmente buenos para tareas especificas y más directas, pero malos para calculos intensivos y pesados'
            ]),
        new Item('reactiva',
            [
                '- Es un paradigma enfocado al trabajo con flujo de datos, generalmente debe ser: ',
                '<strong>- Resilientes:</strong> Deben responder incluso cuando hay estados de error',
                '<strong>- Elasticos:</strong> El aumento de la concurrencia no debe afectar las respuestas',
                '<strong>- Comunicación:</strong> Minimo acoplamiento al hacer que todo se comunique mediante mensajeria ',
                '<strong>- Operadores:</strong> Tener soporte hacia estos, y que permitan transformar el flujo de datos ',
                '<strong>- Manejar el Backpressure:</strong> Para evitar saturar subscriptores lentos o limitar la cantidad de datos a procesar ',
                '<strong>- Composición:</strong> Juntar diversas funciones asyncronas o sincronas, no debe ser un calvario ni volverser algo incomprensible'
            ]),
        new Item('marcado',
            [
                '- Son lenguajes relacionados con la presentación de contenido como HTML y XML, generalmente usados para codificar(redactar) documentos ',
                '- El primero se usa para estructurar contenido web y el segundo para almacenar y transportar datos estructurados ',
                '- El contenido del documento esta incorporado a las etiquetas ó anotaciones, que contienen información adicional relativa ',
                '- Un sitio con HTML y ayudado con CSS, puede resultar en una vista bastante detallada y util, transformando los datos en información ',
                '',
                '<strong>Tipos: </strong>',
                '<strong>- Presentación:</strong> Definen el formato(apariencia) del texto, suelen ocultar las etiquetas y solo mostrar el contenido al usuario ',
                ' - <strong>RTF</strong>(Formato de Texto Enriquecido)',
                ' - <strong>TeX</strong> Representa formulas matematicas complejas',
                '<strong>- Procedimientos:</strong> Tambien se orienta a la presentación, pero aca debe existir un programa que interprete para realizar las funciones indicadas ',
                ' - <strong>HTML</strong>(Lenguaje de Marcado de HiperTexto)',
                ' - <strong>LaTex</strong> Textos con alta calidad tipografica',
                '<strong>- Descriptivos o Semanticos:</strong> Describen las diferentes partes en que se estructura un documento, sin especificar como se debe presentar ',
                ' - <strong>XML</strong>(Lenguaje de Marcado Extensible)',
            ]),
        new Item('aspectos',
            [
                '- Es un paradigma de programación que tiene como objetivo aumentar la modularidad del codigo ',
                '- Permite la separación de responsabilidades sin cambiar el comportamiento actual de la aplicación ',
                '- Esto permite añadir un comportamiento paralelo, sin afectar el comportamiento principal ',
                '- Un aspecto es aquel que puede ser transversal a multiples capas de la aplicación ',
                '',
                '<strong>Conceptos:</strong>',
                ' <strong>Objeto de negocio:</strong> Es una clase normal, que contiene una logica dada de negocio ',
                ' <strong>Aspecto:</strong> Un aspecto de esto es la modularización de una preocupación que abarca multiples clases',
                '- Estos se pueden encadenar y unir mediante un <strong>Joinpoint</strong>, que es un punto dado durante la ejecución, ',
                ' - son similares a las excepciones, y estos se ejecutaran si las condiciones interceptadas se dan ',
                '- Un <strong>Pointcut:</strong> Es un predicado dado, que puede hacer coincidir un <em>Advice</em> que sera aplicado por un <em>aspecto</em>, en un <em>Joinpoint</em> particular ',
                '- Un <strong>Advice:</strong> Es una accion realizada por un <em>aspecto</em> en un <em>Joinpoint</em> particular, existen diferentes tipos como: ',
                ' - "around", "before" y "after", esto se puede realizar mediante anotaciones(AspectJ) o XML(Spring)',
            ]),
        new Item('logica',
            [
                '- Al ser parte del paradigma declarativo, esta programación se concentra en el resultado, más que en el proceso ',
                '- Mediante la logica se plantean los problemas y el control sobre las reglas de inferencia, para alcanzar una solución automatica ',
                ' <strong>- De orden cero:</strong>    Logica proposicional ',
                ' <strong>- De primer orden:</strong>  Logica predictiva ',
                ' <strong>- De segundo orden:</strong> Donde se agregan variables y relaciones ',
                '- Cada orden se base en el anterior para crear nuevos conceptos y formas de evaluación, mediante el uso extensivo de la logica matematica ',
                '',
                '<strong>Caracteristicas:</strong>',
                ' <strong>- Basada en la logica:</strong> Por lo que usara simbolos como <em>and</em>, <em>or</em>, <em>not</em> para describir las relaciones ',
                ' <strong>- No determinista:</strong> El orden y las operaciones a usar para las soluciones, no esta provisto de antemano, siempre se busca la más adecuada ',
                ' <strong>- Basada en reglas:</strong> El programador define las reglas que describen las relaciones, entre los hechos y los objetos',
                '  - solicitando al programa encontrar una solución al problema en particular ',
                ' <strong>- Recursividad:</strong> Las reglas definicias pueden invocarse a si mismas, si esto es necesario para encontrar la solución final ',
                ' <strong>- Inferencia:</strong> Se pueden deducir nuevos conocimientos en base a los datos existentes, mediante la aplicación de reglas y logica ',
                '',
                '<strong>Algunos sistemas en los que se puede aplicar:</strong>',
                ' - Inteligencia artificial ',
                ' - Sistemas expertos (toma de decisiones)',
                ' - Reconocimiento y procesamiento de lenguaje natural ',
                ' - Motores de bases de datos relacionales ',
                ' - Simulación y Analisis estadisticos '
            ]),
        new Item('estructurada',
            [
                '- Es un conjunto de tecnicas para desarrollar algoritmos faciles de escribir, leer, modificar y verficar ',
                '<strong> - Diseño descendente:</strong> Se diseñan por etapas, partiendo de lo general a lo particular, y es completado por el diseño modular ',
                '<strong> - Recursos abstractos:</strong> En cada descomposición de una acción compleja, se supone que todas las partes ya estan resueltas ',
                '<strong> - Estructuras basicas:</strong> Los algoritmos solo deben ser escritos usando 3 tipos de estructuras: <em>Secuencial</em>, <em>Selectiva</em>, <em>Repetetiva</em>',
                '',
                '<strong>Teorema de Böhm y Jacopini:</strong> Se defina como propio si se cumplen las siguientes caracteristicas ',
                ' - Tiene un solo punto de entrada y uno de salida ',
                ' - Todo el camino del algoritmo es accesible, existiendo al menos un camino que va desde el inicio, hasta el final del algoritmo ',
                ' - No posee lazos o ciclos infinitos ',
                '',
                '<strong>Control de flujo de un programa</strong>',
                '<strong>- Secuencial:</strong> Es aquella en la cual una acción se ejecuta detras de otra y coincide con las acciones fisicas ',
                '<strong>- Selectiva:</strong> Se pueden ejecutar una acción o otra, dependiendo de una determinada condición ',
                '<strong>- Repetitiva:</strong> Las acciones que estan dentro del bucle, se realizan, siempre que la condicion sea cierta, verificando antes o despues la afirmación ',
                '<strong>- Anidamiento:</strong> Las estructuras Selectivas y repetitivas, pueden ser anidadas una dentro de la otra ',
            ]),
        new Item(PARADIGMAS_PARADIGMA_DATOS,
            [
                '- Es un paradigma de programación destinado a simplificar el diseño, y la implementación de sistemas, donde la información esta en el centro ',
                '- En lugar de diseñar sistemas de información que combinan codigo y datos, <strong>DOP</strong> fomenta la separación entre codigos y datos ',
                '- En DOP, los datos se tratan como ciudadanos de primera clase, brindando una simplicidad para manipular datos, como si fuera un objeto ó una cadena',
                '- Para esto se deben cumplir 4 principios, que son totalmente aplicables a cualquier lenguaje y a cualquier paradigma(POO, Funcional, etc..)',
                '',
                '<strong>Separar el codigo de los datos:</strong> Se recomienda una separación clara entre el codigo(comportamiento) y los datos',
                ' - Cumplirlo En POO significa agregar el codigo como metodos de una clase estatica ',
                ' - Romperlo en PF significa ocultar el estado en el alcance lexico de una función ',
                '- Se obtiene un codigo más aislado y rehusable, a costa de una mayor cantidad de entidades que manejar ',
                '',
                '<strong>Representar datos con estructuras genericas:</strong> Se deben usar estructuras para representar los datos, como mapas y listas, o ',
                ' - otras no tan genericas como, colas, arboles, pilas, etc.. ',
                '- Esto conlleva a un modelo más flexible de datos, pero con penalizaciones en el rendimiento y casteos necesarios, en lenguajes estaticamente tipados ',
                '',
                '<strong>Los datos son inmutables:</strong> Cada modificación que se necesite, obligatoriamente se ha de crear una copia, ',
                ' - las referencias pueden cambiar, para hacer referencia a la nueva versión, pero nunca los valores de los datos',
                '- El codigo se vuelve más seguro ante la concurrencia y predecible, pero con problemas de rendimiento y de persistencia ',
                '',
                '<strong>Separar el esquema de datos, de su representación:</strong> Asi se puede decidir facilmente que esquema puede tener ciertos datos y cuales no ',
                '- Libertad para validar o no cualquier dato, campos opcionales y validaciones complejas, a costa de una conexión debil entre el esquema-datos ',
                '',
                'Para una mejor compresión del tema y visualizar los <em>ejemplos practicos</em>, se recomienda ir a las publicaciones originales',
            ])
    ];

export const PEOPLE =
    [
        new Item('personasYprocesos',
            [
                '- Las personas, los procesos y las tecnologias son el sostenimiento de toda empresa ',
                '- El personal, siempre sera necesario para pensar, planear y ejecutar ',
                '- La tecnologia, que ayuda a las personas a llevar estos procesos ',
                '- Y finalmente los procesos, que ofrecen un valor agregado al cliente ',
                '- Llegar a un equilibrio de estos elementos es un equilibrio dificl de lograr ',
                '- Cualquier cambio de estas partes traera efectos secundarios sobre las demas ',
                '',
                '- Algunos de los objetivos de tener este equilibrio son: ',
                ' - Transformar los datos en conocimiento e información ',
                ' - Permitir que el conocimiento se accesible para todos y generable por todos ',
                ' - Mejora continua de los procesos y aumentar la productividad ',
            ]),
        new Item('gestionDeServicios',
            [
                '- Es una metodologia que pone su foco en el cliente y como mejorar su atención ',
                '- Toda organización debe contar con personal competente en cuanto al uso de las tecnologias que se usen ',
                '- Los proveedores y los socios son partes importantes de toda empresa, no se pueden ignorar ',
                '- La creación de valor es importante para todo producto y servicio que se ofrezcan ',
                '',
                '- Estos son 7 principios para una correcta gestión ',
                ' - Se debe crear el mayor valor para los clientes a la vez que se perjudican lo menos posible ',
                ' - Siempre sera mejor revisar los procesos existentes y mejorarlos que empezar desde cero ',
                ' - Es mejor avanzar seguro y constante con un enfoque concreto ',
                ' - El trabajo en equipo es importante, todos deben ser visibles y colaborarse entre si ',
                ' - Tener una consciencia holistica, ya que todas las areas se afectan entre si de alguna manera ',
                ' - Entre más simple sea un proceso mejor ',
                ' - La automatización y la optimización siempre deben ser aspectos a alcanzar ',
            ]),
        new Item('gestionDeActivos',
            [
                '- Los elementos fisicos y no fisicos de las empresas tambien deben ser considerados como partes del negocio ',
                '- Esto se puede aplicar a todo software que la empresa use o desarrolle y los elementos necesarios para su funcionamiento ',
                '- Tener un inventario actualizado garantiza que siempre se maneje lo necesario ',
                '- En un contexto informatico esto se puede aplicar de varias formas, principalmente al manejo de archivos electronicos ',
                ' - además de las licencias que se usan y que se generan desde la misma empresa ',
                '',
                '- Algunos ejemplos de activos: ',
                ' <strong>- Hardware:</strong> Dispositivos de redes, centros de datos, servidores',
                ' <strong>- Infraestructura:</strong> Proporcionada por terceros, y dispositivos propios de la empresa usados por los usuarios finales ',
                ' <strong>- Datos:</strong> Digitales derivados de las operaciones internas ',
                '',
                '- Estos suelen tener un ciclo de vida ciclico, el cual es el siguiente: ',
                '  -> <strong>Planear</strong> ->         -> <strong>Adquirir</strong> ->    -> <strong>Asignación</strong> ->       -> <strong>Mantenimiento</strong> ->    -> <strong>Retiro</strong> ->',
                '  Como obtenerlos       Construcción,     Introducción al        prolongar la vida      Al final del          ',
                '  y como se usaran      compra,           ambiente productivo    util o mitigar los     este debe ser         ',
                '  además de analizar    arrendamiento     y definiciones de      riesgos de posibles    retirado y desechado  ',
                '  costos/beneficios     o licencias       procesos y usos        fallos                 o solo cancelado      ',
                '',
                '- Beneficios de esta gestión ',
                ' - Mejores decisiones en base a información actual y verificable ',
                ' - Continuidad del negocio al estar mejor preparados para las interrupciónes del negocio ',
                ' - Manejo oportuno de las licencias y suscripciones de la empresa ',
                ' - Costos totales de la empresa de manera global ',
                ' - Permite la estandarización de manera transversal en la empresa ',
            ]),
        new Item('fidelizacion',
            [
                '- Fidelizar a un cliente, garantiza que esta siempre permanecera comprando nuestos productos y servicios ',
                '- Segun la ley de pareto el 80% de las ventas son de los clientes actuales y 20% de los nuevos ',
                '- Es un error comun concentrarse en adquirir nuevos clientes y descuidar los viejos ',
                '- Un cliente satisfecho es la mejor publicidad, aun asi, esto no siginifica que sea un cliente fiel ',
                '- ',
                '- Algunas estrategias para fidelizar a los clientes: ',
                ' - Ser honestos en la justa medida, ya que no siempre todo sera una historia de exito ',
                ' - Mantener una comunicación constante, haciendo saber los resultados de manera regular ',
                ' - Preparar un plan a futuro que lo haga sentir importante ',
                ' - Comparte los momentos de exito, no solo los fracasos merecen atención ',
                ' - Solicita sus opiniones y hazlos sentir escuchados ',
                ' - Las relaciones son mejores cuando son reciprocas ',
                '',
                '- Clasificación de los clientes: ',
                '<strong> - Apostoles:</strong> Clientes fijos bastantes satisfechos y que recomendaran tu marca ',
                '<strong> - Leales:</strong> Cuentan igual de satisfechos que los apostoles, pero que no divulgan tu marca ',
                '<strong> - Mercenarios:</strong> Tienen satisfacción alta, pero solo compraran cuando esto les aporte algun beneficio ',
                '<strong> - Rehenes:</strong> No estan satisfechos con tu producto, pero tampoco estan dispuestos a migrar ni asummir más costos ',
                '<strong> - Indiferentes:</strong> Son neutrales frente a la marca, y aunque esten satisfechos solo haran compras ocasionales ',
                '<strong> - Terroristas:</strong> Además de estar insatisfechos, estos hablaran mal de la marca en sus circulos de influencia ',
            ]),
        new Item('modeloDIKW',
            [
                '- Es un sistema jerarquico donde cada capa le da soporte a las caracteristicas de la siguiente ',
                ' &uarr;',
                ' Contexto ',
                ' &uarr;                                     Sabiduria        &#35;     Union de todas las partes ',
                ' &uarr;                      Conocimiento                   &#35;&#35;&#35;    Se forman las partes de un todo ',
                '           Información                                &#35;&#35;&#35;&#35;&#35;   Conexión de las partes',
                ' &uarr;  Datos                                            &#35;&#35;&#35;&#35;&#35;&#35;&#35;  Reunion de todas las partes ',
                '   &rarr;      &rarr;    &rarr;  Comprension    &rarr;',
                '  Busqueda  Absorción     Practica     Reflexion',
                ' ',
                '<strong>- Datos:</strong> Son la materia prima para formar las siguientes capas, indeferentemente de la fuente ',
                '<strong>- Información:</strong> Es una construcción más avanzada a partir de acopio de simples datos, gracias a nuestro raciocinio y reconocimiento de patrones',
                '<strong>- Conocimiento:</strong> Ya con la información podemos actuar en base a esta, tomar decisiones especificas, o responder interrogantes de manera practica ',
                '<strong>- Sabiduria:</strong> Generalmente es la capacidad de pensar y analizar las situaciones, que se presenten, además de poder abstraerlo a otros contextos',
            ]),
        new Item('gestionDeExpectativas',
            [
                '- Lo más probable es que estas esten formadas por diferentes factores y experiencias pasadas ',
                '- Muchas cosas pueden salir mal en un proyecto pero estas son algunas maneras de solucionarlo ',
                '',
                '<strong>- Asumiendo lo obvio:</strong> Siempre hay diferencias entre lo que una persona escucha y lo que otra dice, ',
                ' - además de que hablamos de lo que consideramos importante y evitamos las obviedades, ',
                ' - sin comprender que estas no lo son para todos ',
                '',
                '<strong>- Evitar el riesgo:</strong> Generalmente no nos gusta hablar de posibles problemas, ',
                ' - y si hay riesgos intentamos evitarlos hasta que sean inevitables, aunque esto nos traera problemas ',
                ' - en un futuro casi inmediato, preveer los problemas nos hace profesionales más confiables ',
                '',
                '<strong>- Información incorrecta:</strong> Cuando vas al medico esperas una explicación a fondo de tus sintomas, ',
                ' - no simplemente un medicamento para calmarlos; puede que funcionen o solo enmascarar algo peor ',
                ' - en terminos de un equipo esto significa mantener a todos los involucrados al tanto ',
                '',
                '<strong>- Reuniones sin agenda:</strong> Las reuniones no son de agrados de todos, y menos cuando estas son sorpresa, ',
                ' - además de que no se suele estar preparado para estas, generando frustaciones y estres, ',
                ' - lo mejor para evitar esto es simplemente agendarlas con anterioridad ',
                '',
                '<strong>- Realización de contratos:</strong> La negociación es importante pero para segurar que todo funcione ',
                ' - es importante generar acuerdos y dejarlos por escrito, asi demostrar alguna equivocación, ',
                ' - y quien es el responsable o que este obligado a resolver el problema',
            ]),
        new Item('capa8',
            [
                '- Es un error relacionado directamente con el usuario final, ya sea por desconocimiento o por un mal diseño de la UX/UI',
                '- Esta capa no existe como tal, es una expresión para aludir la culpa al usuario ',
                '- El nombre viene del modelo OSI que consta de 7 capas, donde la septima capa es la aplicación, la que usa el usuario final ',
                '- Estos errores son de las principales fuente de error en las organizaciones y excelente puerta de entrada para los hackers ',
            ]),
        new Item('noNewsGoodNews',
            [
                '- Si no hay noticias son buenas noticias ',
                '- Tan simple como ejecutar un comando y este no devuelve un mensaje de error, si no que se ejecuto con exito ',
                '- Los codigos de error se establecieron para poner de acuerdo a desarrolladores y usuarios ',
                '- Usar los codigos de error para dar información es una manera util de entender los problemas ',
            ]),
        new Item('tiposHackers',
            [
                '- Un Hacker es aquel individuo que usa sus habilidades informaticas para violentar y penetrar la ciberseguridad ',
                '- Inicialmente solo existian 3 sombreros como clasificación, pero hay otros que han surgido con el tiempo ',
                '',
                '<strong>Sombrero Blanco</strong>',
                '- No importan su genero, nacionalidad, etnica, y demás caracteristicas, siempre defienden lo que es correcto ',
                '- Protegen a los civiles y a las organizaciones en general encontrando y reportando vulnerabilidades ',
                '- Trabajan en cargos como ingenieros de ciberseguridad, pruebas de penetración y otros puestos de seguridad, además de tareas como: ',
                '  - Escaneo de redes        - Configuracion de IDS (detección de intrusos) ',
                '  - Creación de honeypots   - Hackeo de equipos para encontrar vulnerabilidades ',
                '',
                '<strong>Sombrero Gris</strong>',
                '- Tambien defenden lo correcto, pero no siempre usaran metodos convencionales para hacerlo ',
                '- Esto puede ser moralmente ambiguo por lo que este punto medio a veces se decanta más por un extremo (Negro o Blanco)',
                '',
                '<strong>Sombrero Negro</strong>',
                '- Realizan actividades ilegales para obtener algun tipo de redito, generalmente finaciero ',
                '- Tambien suelen hacerlo por diversion, pero con fines de lucro, sin importar los daños que puedan generar, tambien pueden: ',
                '  - Instalar puertas traseras   - Mantener el acceso a los sistemas comprometidos ',
                '  - Escalar en privilegios      - Descargar datos valiosos y/o sensibles ',
                '  - Instalar malware            - Usar el Phishing ',
                '',
                '<strong>Sombrero Verde</strong>',
                '- Jovenes entusiastas, inexpertos y por lo tanto vulnerables al riesgo ',
                '- Actualmente con tantas herramientas y facilidades es comun que se mentan en problemas ',
                '- Que aprovechan para aprender de sus errores y convertirse en mejores hackers y cambiar de sombrero ',
                '',
                '<strong>Sombrero Azul</strong>',
                '- Son hackers experimentados que suelen ser vengativos y expondran tu vida digital ',
                '- Suelen ser profesionales de seguridad externos en busca de vulnerabilidades antes de los lanzamientos ',
                '',
                '<strong>Sombrero Rojo</strong>',
                '- Además de ser vengativos, defienden lo correcto por lo que si eres un criminal no tendran piedad alguna ',
                '- No solo desactivan las actividades delictivas permanentemente, tambien son temidos por otros hackers ',
                '- Son tan experimentados que no tienen problemas en piratear sistemas con Linux ',
                '- No se arrepienten y no dudan si su objetivo es destruir a los de sombreros negro ',
                '',
                '- Si quiere conocer sus equivalentes en los personajes de Marvel y DC, ó conocer casos famosos, puedes dar click en la fuente',
            ]),
        new Item('sindromesLaborales',
            [
                '- Un sindrome es una condición o sintoma caracteristico de una enfermedad, aunque en el contexto empresarial, es más metaforico que fisico ',
                ' - existen una gran variedad de sintomas y situaciones completamente relacionables ',
                '',
                '<strong>Sindrome de Burnout:</strong> Un trabajador quemado puede presentar depresión o ansiedad, asi como irritabilidad, ',
                ' - perdida de atención o falta de motivación, por muchas causas como, acoso laboral, exceso de responsabilidades, malos tratos, etc..',
                ' - la clave esta en la prevención mediante, incentivos laborales o estableciendo un mejor ambiente laboral ',
                '',
                '<strong>Sindrome de procusto:</strong> Las victimas son los subordinados, donde los jefes, se esfuerzan por degradar el trabajo, ',
                ' - de los mejores subordinados, ya sea por que se consideren una amenaza, o simples rencillas personales ',
                '',
                '<strong>Sindrome de Peter Pan:</strong> Las empresas no quieren crecer, ya que es un proceso dificil y lleno de riesgos ',
                '',
                '<strong>Sindrome del SuperHeroe:</strong> Los emprendedores pueden fracasar, ya que no saben o no quieren delegar, ',
                ' - y aunque saben que no pueden con todo, quieren tenerlo todo bajo su control, perdiendo valiosas alianzas y colaboradores ',
                '',
                '<strong>Sindrome de Abstinencia de ejecutivos:</strong> Cuando son forzados a tomar descansos, pueden presentar sintomas fisicos y psicologicos, ',
                ' - como si de una droga real, para esto es preciso ayuda de profesionales',
                '',
                '<strong>Sindrome del Fundador:</strong> Todo pasa y se vincula directamente con el fundador, es una referencia inevitable, ',
                ' - una verdadera prueba de exito, es que la empresa sea capaz de sobrevivir y proliferar sin el fundador, mediante buenos colaboradores ',
                '',
                '<strong>Sindrome del Impostor:</strong> Algunos empresarios y profesionales exitosos, no se creen merecedores de su exito y se subestiman, ',
                ' - por esto es necesario un ambiente que no descarte buenas opciones y que los impulse a creer en sus posibilidades ',
                '',
                '<strong>Efecto Dunin-Kruger:</strong> Hay personas son incapaces de comprender su incompetencia, creyendose mejores de lo que son, ',
                ' - con un desempeño pobre e inconscientes de este hecho; por eso se insta a realizar una autocritica constructiva ',
                '',
                '<strong>Sindrome de Hamlet:</strong> Directivos que no solo viven en un estado de duda constante, cuando son necesarios para decisiones importantes, ',
                ' - suelen fracasar y tener excusas del porque, por eso es habitual tenerlos en areas poco jerarquicas, con procesos más analiticos ',
                '',
                '<strong>Sindrome de Persona Alfa:</strong> Constantemente persiguen el liderazgo y los logros, suelen tener bastantes aspectos positivos, ',
                ' - pero se pueden convertir en amenazas si tienen estilos despoticos y agresivos para liderar, es importante que los objetivos, ',
                ' - no sobrepasen ciertos limites, ni pongan en riesgo a alguien debido a sus actos ',
                '',
                '<strong>Sindrome de Codigo Hamurabi:</strong> Se establecen complejas y extensas normas internas, que obstaculizan la comunicación ',
                ' - y generan cuellos de botella, para esto es necesario flexibilizar procesos o encontrar alternativas más eficientes ',
                '',
                '<strong>Sindrome de Estocolmo:</strong> Aca existe un trabajador perjudicado, pero que se encuentra emocionalmente vinculado, ',
                ' - por lo que se niega a abandonar, para esto es necesario tener un espacio de reflexión y toma de conciencia ',
                '',
                '<strong>Sindrome de Plena actividad:</strong> Donde siempre es necesario estar haciendo algo, o si no es esta desaprovechando el tiempo, ',
                ' - aca se menosprecia el tiempo para estrategias y planes, solo para concentrarse en el atareado ahora, ',
                ' - aca se deben hacer mejores esfuerzos en la planificación y un mejor control de los recursos, tanto humanos como fisicos ',
                '',
                '<strong>Principio de Peter:</strong> Los empleados pueden ascender y lo hacen, hasta el limite de sus competencias, llegados a ese punto es necesario ',
                ' - evitar que se conviertan en obstaculos, ya sea cambiando entre areas, mejorando la formación o fortaleciendo equipos, entre otras acciones ',
                '',
                '<strong>Sindrome de Oficina Enferma:</strong> En este caso existe una influencia directa del ambiente, tal como edificios mal ventilados, con poca iluminación ',
                ' - mucho ruido o con poca movilidad, afectando directamente la salud de los empleados, haciendo necesario analizar, cambiar el espacio o mudarse',
                '',
                '<strong>Sindrome de No Inventado aqui:</strong> Un rechazo frontal y categorico, a toda solución que sean ajenas, aunque sean más simples o eficientes, ',
                ' - prefiriendo gastar recursos innecesariamente, que abrirse a nuevas oportunidades y conocimientos, que podrian mejorar las cosas ',
            ]),
        new Item('icebergIgnorance',
            [
                '- En 1989 Sidney Yoshida desarrollo la teoria de <em>Iceberg de la ignorancia</em>, que refleja ciertos datos, sobre el funcionamiento de las organizaciones',
                '',
                '- El <strong>4%</strong>   de los problemas son conocidos por la alta dirección ',
                '- El <strong>9%</strong>   de los problemas son conocidos por los mandos medios ',
                '- El <strong>74%</strong>  de los problemas son conocidos por los supervisores ',
                '- El <strong>100%</strong> de los problemas son conocidos por los operarios de linea ',
                '',
                '- En otras palabras, entre mayor sea el rango, mayor sera el desconocimiento de los problemas, afectando multiples aspectos como: ',
                ' - Toma de decisiones de manera inadecuadas   - Ineficaz asignación de recursos',
                ' - Fugas de talento                           - Ineficiencia y errores costosos, entre otras',
                '- Debido a factores como:',
                ' - Falta de comunicación                       - Liderazgo inadecuado ',
                ' - Miedos a las consecuencias de los errores   - Fugas de información ',
                '',
                '<strong>Como conectar las altas jerarquias, con la primera linea</strong>',
                '- Escuchar con atención y preguntar con curiosidad                     - Fomentar el sentido de pertenencia ',
                '- Mostrar humildad y nunca dudar en solicitar ayuda                    - Entender porque y como se puede mejorar como equipo',
                '- Crear espacios de integración y colaboración                         - Delegar de manera real y a conciencia ',
                '- Que toda la jerarquia participe, a la hora de buscar soluciones      - Desterrar el miedo a las represalias',
            ]),
        new Item('ubicuo',
            [
                '- El lenguaje Ubicuo, es un termino usado por <em>Eric Evans</em> usa en el <em>Domain Driven Design</em> para la practica de tener un lenguaje comun ',
                ' - entre desarrolladores y usuarios, además de otras personas que tambien esten involucradas ',
                '- Esto hace parte de una estandarización profesional, que se refiere a la adopción de las mejores practicas y patrones de la industria ',
                '- Y asi poder hablar un mismo idioma, para que la comunicación sea efectiva y eficiente, mediante estandares compartidos ',
                '- De esta manera tener conversaciones entre congeneres y transmitir ideas, es algo que beneficia a todos los involucrados y no se pierde tiempo ',
                ' - al tener que explicar conceptos y metodologias que se usan en la ingenieria y que son transversales ',
            ]),
        new Item('hippoEfect',
            [
                '- <strong>La Opinion de la Persona Mejor Pagada</strong>, suele tener demasiado impacto cuando no se cuentan con datos para tomar decisiones ',
                '- Y es peor cuando se tienen los datos, pero estos no se toman en cuenta cuando prevalece la persona HIPPO en la habitación ',
                '- Esto ata a la organización a lo que esta persona quiere que se haga, y no lo que los datos indican que se debe hacer o ',
                ' - tenerlos en cuenta a la hora de visualizar el panorama ',
                '- Esto sucede cuando se debe tomar una decisión dificil, pero no hay datos o analisis suficientes, entonces el grupo a menudo cedera ',
                ' - ante este juicio, ya que suelen tener la mayor experiencia y poder en la sala, tanto que las voces disidentes no tienen lugar ',
                '- Esto es peligroso debido a que los humanos tienen una tendencia al sesgo de autoridad, ilustrado por el <em>Experimento de Milgram</em> de 1963',
                '- Resulta que las personas tienden a crear en aquello que dice o hace, aquellos que consideramos como expertos y no oponerse a sus ordenes ',
            ]),
        new Item('burnout',
            [
                '- Tener un enfoque sostenible dentro de la industria del software, es algo que cada vez es más importante, dentro de la industria del software ',
                '- Algunas reflexiones de como se puede obtener un enfoque sostenible dentro de la industria',
                '',
                '<strong>Reencuadre cognitivo:</strong> <em>El impedimento a la acción hace avanzar la acción. Lo que se interpone en el camino se convierte en el camino</em>. <strong>Marco Aurelio</strong>',
                '- Los impedimentos se pueden considerar algo procesable, con esta mentalidad, cada desafio se puede convertir en una oportunidad ',
                '- Las novedades y las experiencias, seran una gran fuente para enriquecer diferentes perspectivas',
                '- Pensar positivamente, enfocandose en lo bueno',
                '- Comprender los obstaculos impuestos por la naturaleza humana',
                '',
                '<strong>Orientación a la motivación:</strong> Esto se centra en como el trabajo esta ligado a la motivación personal, y como ',
                ' - el sentimiento de satisfacción esta bajo el propio auto-control, mientras que las recompensas extrínsecas estan fuera de nuestro control, ',
                ' - si se busca la validación externa, existe una mayor responsabilidad de que estas no se cumplan ',
                '- Es mejor orientar las recompensas en función de areas, que se alineen con los resultados que se estan logrando ',
                '- Escenarios donde todas las partes involucradas, tengan alguna experiencia o valor de crecimiento personal ',
                '- Retrasar compensaciones extrinsencas, como subroducto, de la produción de calidad, a traves de recompensas intrinsecas',
                '',
                '<strong>Planificación proactiva:</strong> Es la capacidad de anticipar eventos futuros, tomar iniciativa, y planificar el futuro ',
                '- Respirar profundamente y calmar la mente, recordando que el peligro no es fisico',
                '- Desacelere sus pensamientos, para evaluar lo que sabe y lo que no',
                '- Separe la planificación de la acción, su proximo paso es crear un plan, que tenga en cuenta el tiempo ',
                '',
                '<strong>Alegria & Felicidad:</strong> Un concepto fuertemente ligado a las areas de neurociencia y psicologia, tipos de sentimientos de recompensa: ',
                '<strong>- Hedonico(corto plazo):</strong>    Transitorio y ligado a experiencias momentaneas que traen alegria y satisfacción',
                '<strong>- Eudaimónico(largo plazo):</strong> Conectado con el crecimiento personal, la autorealización y la busqueda de autosuperación ',
                ' ',
                '         <strong>Endorfinas</strong>                <strong>Dopamina</strong>                         <strong>Serotonina</strong>                       <strong>Oxitocina</strong>',
                ' Los <em>Plazos</em>                La <em>Realización</em>                   El <em>Orgullo</em>                            El <em>Reconocimiento</em>',
                ' liberan endorfinas        de una tarea produce             por la calidad o el                   genera Oxitocina, ',
                ' preparando el cuerpo      dopamina para una sensación      crecimiento personal , incian la      para recompensarte al ',
                ' para realizar             momentanea de alegria            Serotonina, que genera                haber aportado algun ',
                ' los trabajos                                               satisfacción  a largo plazo           valor al equipo',
                '',
                '- En un ambiente desquilibrado, hay mayor presión de trabajo, y muchas tareas por realizar, ahora el orgullo y el crecimiento personal ',
                ' - pasan a un segundo plano, lo que resulta que las recompensas se orienten a factores extrinsencos, ',
                ' - teniendo una menor satisfacción en menor y mayor plazo ',
                '',
                '- Evalue su relación con el trabajo y como puede solucionar direfentes tipos de problemas',
                '- Motivación interna, para asegurar la priorización del cumplimiento, y la entrega de valor a largo plazo ',
                '- Reduzca el estres, evitando grandes cantidades de <strong>Cortisol</strong>, y generar una resiliencia hacia el estres cronico ',
            ]),
        new Item('ona',
            [
                '- En las empresas de creación de productos intelectuales, que manejan grupos y diferentes tipos de personal, ',
                ' - y que tienen estructuras jerarquicas tradicionales, han demostrado problemas debido a su complejidad y cambio constantes ',
                '',
                '- Esta herramienta ofrece una vision profunda de los patrones de las relaciones e interacciones, dentro de nuestras empresas ',
                ' - permitiendo visualiazar el flujo de la información y la colaboración entre areas ',
                '',
                '- <em>Rob Cross</em> uno de los pioneros en este campo, destaco como esta puede actuar como una radiografia de los entresijos organizacionales ',
                ' - revelando patrones invisibles que afectan directamente la efectividad de nuestra empresa, y como influye la participación de los empleados ',
                '',
                '- En muchas organizaciones, un analisis ONA, ayuda a las personas encargadas a diseñar y cambiar, la organización de las empresas, ',
                ' - de manera más rapidas y adaptable, enfocandose en las areas por mejorar '
            ]),
        new Item(PEOPLE_PROCESS_BLOAT,
            [
                '- En las etapas iniciales de un proyecto, el desarrollo es agil, la toma rapida de decisiones y el entusiasmo por ofrecer valor',
                '- Sin embargo en la medida que los proyectos ganan complejidad, muchos caen en antipatrones que disminuyen o matan la productividad',
                '- Uno de estos es poco conocido pero insidioso, este monstruo burocratico que obstaculiza la innovación y mata silenciosamente la productividad ',
                '- Esto inicia con el objetivo de optimizar las operaciones, mantener los estandares calidad y minimizar los riesgos ',
                '',
                '<strong>Cultura organizacional:</strong> Un proceso cauteloso puede instuir multiples capas de burocracia, suponiendo que más procesos equivalen a menos riesgos ',
                '<strong>Falta de confianza:</strong> Una dirección sin confianza en el equipo de desarrollo, puede imponer niveles de aprobación y documentación engorrosos',
                '<strong>Complejidad y escala:</strong> Crecer es sinonimo de complejidad, con más partes interesadas que a su vez tienen sus propios procesos <em>Leyes de Lehman</em>',
                '<strong>Equipaje heredado:</strong> A veces los procesos redundantes persisten simplemente, "Porque siempre ha sido asi"',
                '',
                '<strong>Consecuencias:</strong>',
                '<strong>- Productividad reducida</strong> Se dedica más tiempo al trabajo administrativo, que al desarrollo real',
                '<strong>- Sin innovación:</strong> La burocracia, apaga la creatividad y limita los esfuerzos experimentales o por mejorar ',
                '<strong>- Comercializacion retrasada:</strong> Más procesos y etapas, conducen a ciclos más largos, afectando la capacidad de respuesta hacia el mercado ',
                '<strong>- Disminución de la moral:</strong> La perdida de agilidad, y la monotonia de los procesos por cumplir, debilita la moral del equipo',
                '',
                '<strong>Ejemplos durante el desarrollo:</strong>',
                '- Revisiones excesivas de codigo, aun para cambios simples y monotonos',
                '- Emisión de tickets complicadas, llegando a extremos donde es más costoso registrar el problema que solucionarlo ',
                '- Informes obligatorios, tomando valioso tiempo para recopilar todas las tareas, y no en realizarlas ',
                '- Reuniones excesivas, la comunicación entre las partes involucradas es primordial, estos espacios deben ser efectivos y utiles ',
                '',
                '<strong>¿ Como combatirla ?',
                '- Auditorias periodicas, para evaluar la relevancia y eficacia de las acciones y procesos, asegurando que estas no contribuyan más al problema ',
                '- Principios <em>Lean</em> y <em>Agile</em>, Adopte y transforme metodologias que ayuden a dar valor, con la menor cantidad de gastos posibles ',
                '- Fomente la confianza y la autonomia en la medidad de lo posible',
                '- Mantenga los procesos en lo minimo viable, solo aquellos procesos que sean absolutamente necesarios para mantener la calidad ',
            ])
    ];

export const OTROS =
    [
        new Item('scraping',
            [
                '- Es una forma de buscar contenido de las paginas en internet ',
                '- Algunos buscadores como Google hacen esto para indexar contenido ',
                '- Son tipos especiales de Bots que buscan terminos especificos de busqueda ',
                '- Se puede dar manera de automatica (software de  analisis sintactico) y manual (copiar y pegar) ',
                '- Esto puede conllevar a una ventaja sobre tu competencia al comparar su contenido con el tuyo ',
                '- Puede violar las leyes de derechos de autor, por lo que puede llegar a ser ilegal ',
                '- Tambien se puede bloquear por medio de software ó dificultarles la extracción de los datos (imagenes) ',
            ]),
        new Item('mvp',
            [
                '- Es el conjunto minimo de funcionalidades precisas para que un software pueda atraer clientes potenciales ',
                '- Esto ayuda a crear productos apegados a la realidad ',
                '- Da retroalimentación a tiempo y util para el negocio ',
                '- Todo mvp es una apuesta orientada a conseguir un maximo de aprendizaje con la menor inversion posible ',
                '- A veces puede ser reutilizable o desechable, eso depende de su exito inicial ',
            ]),
        new Item('turingComplete',
            [
                '- Es un concepto usado para denotar aquellos lenguajes que teniendo recursos infinitos (teoricamente), ',
                ' - son capaces de realizar cualquier tipo de calculo, independientemente de los recursos usados ',
                '- Tambien son capaces de usar y reutilizar estructuras complejas ',
                '- Que un lenguaje o herramienta sea turing complete no garantiza su eficiencia ',
            ]),
        new Item('ingenieriaInversa',
            [
                '- Un concepto sencillo pero muy potente, basicamente consta de desmontar y volver a montar algo, para ver como funciona ',
                '- Esto se da con la intención de mejorar o duplicar ese algo mediante una simple observación ',
                '- Su nacimiento se da durante la segunda guerra mundial, pero hoy en dia es aplicable hasta para el software ',
                '- Uno de los primeros casos de esta practica fue el nacimiento del Tu-4 <em>sovietico</em> copia del B-29 <em>Estadounidense</em> ',
            ]),
        new Item('dsl',
            [
                '- Un DSL es un lenguaje de programación con un nivel superior de abstracción ',
                '- Estos lenguajes son menos complejos que los lenguajes de alto nivel y proposito general, como Java, C, etc.. ',
                '- Son diseñados por expertos al campo dirigido, para ser usados, por personas versadas en el tema, pero sin experiencia en programación ',
                '- Esto desemboca en un paradigma donde se especifica lo que se requiere, y se usa el lenguaje más adecuado para lograr el objetivo ',
                '- Este concepto desemboca en la programación poliglota o programación orientada al lenguaje ',
                '- Otro concepto importante es que los DSL pueden nacer y extenderse, con ó sin bases previas ',
            ]),
        new Item('reglasInferencia',
            [
                '- Las leyes de inferencia nos permiten demostrar la validez de los argumentos mediante la correcta aplicación de las reglas ',
                '- Teniendo una premisa ya definida, podemos sacar una conclusión, para probar o negar alguna proposición deseada ',
                '',
                '        Nombre              Premisas    Conclusion          Nombre            Premisas    Conclusion',
                ' Modus Ponendo Ponens        p -> q         q             Silogismo            p -> q               ',
                '                                                          Hipotetico           q -> r      p -> r   ',
                ' Modus Tollendo Ponens       p || q                                                                 ',
                '                             ¬p             q             Morgan             ¬(p && q)    ¬p || ¬q  ',
                '                                                                             ¬(p || q)    ¬P && ¬q  ',
                ' Modus Tollendo Tollens      p -> ¬q       ¬p                                                       ',
                '                                                          Doble negación       ¬(¬p)       p        ',
                ' Dilema                      p || q                                                                 ',
                ' Constructivo                p -> r                       Conjunción            p                   ',
                '                             q -> s      r || s                                 q          p && q   ',
            ]),
        new Item('etl&elt',
            [
                '- <strong>ETL</strong> & <strong>ELT</strong> Son 2 enfoques de procesamiento de datos para el analisis de cientos, miles de datos, desde multiples origenes',
                '- Ambos son secuencias de procesos que separan los datos para su posterior analisis, capturan, procesan y cargan datos para su analisis en 3 pasos ',
                '',
                '<strong>Extraccion:</strong> Es el primer paso en ambos procesos, consiste en recopilar datos sin procesar, de diferentes origenes, BD, archivos, apps, IoT, etc...',
                '<strong>Transformación:</strong> Este paso se centra en cambiar los datos sin procesar, de su estructura original a un formato que cumpla con los requisitos ',
                ' - Cambios de tipos, o de formatos                - Eliminación de la duplicación de datos',
                ' - Eliminación de datos incorehentes, inexactos   - Limmpieza y preparación de datos',
                '',
                '<strong>Carga:</strong> Se almacenan los datos en el destino, ya sean preparados o sin preparar, dependiendo del proceso que se este usando ',
                '',
                '<em>ETL</em> <strong>E</strong>xtract -> <strong>T</strong>ransform -> <strong>L</strong>oad',
                ' - Aca la transformación garantiza el cumplimiento de los requisitos estructurales del destino, donde se cargaran los datos ',
                '',
                '<em>ELT</em> <strong>E</strong>xtract -> <strong>L</strong>oad -> <strong>T</strong>ransform',
                ' - Los datos se cargan sin ninguna estructura especifica, ni importando su tipo, aca todas las transformaciones suceden en el destino ',
                '',
                '                                                                   <strong>Diferencias</strong>',
                '   <strong> Categoria</strong>                        <strong>ETL</strong>                                                        <strong>ELT</strong>',
                '                    Toma datos sin procesar,                                   Toma datos sin procesar, ',
                '   Procesamiento    los transforma en un formato predeterminado,               los carga el almacenamiento de datos del destino, ',
                '                    los carga en el almacenamiento de datos del destino        los transforma de acuerdo a los analisis a realizar ',
                '',
                '  Ubicaciones de ',
                ' transformaciones   La transformación se da en un servidor secundario          La transformación se da en el almacenamiento de destino',
                '     y carga',
                '',
                '    Velocidad       El proceso ETL es más lento                                El proceso ELT es más rapido',
                '',
                '                    La configuración y las herramientas a usar ',
                '     Costos         pueden ser costosas en función de lo que se utilice        Más rentable, segun la infraestructura utilizada ',
                '',
                '    Seguridad       Posiblemente se deban crear aplicaciones personalizadas    Se pueden usar las caracteristicas integradas de la BD destino ',
            ])
    ];

export const BASES_DE_DATOS =
    [
        new Item('sql',
            [
                '- Es lenguaje de consultas estandar para manipular la información en una base de datos ',
                '- Cada motor de base de datos tiene sus particularidades pero todos usan SQL',
                '- Las columnas son los datos a guardar y las filas son los registros almacenados',
                '- Las tablas estan compuestas de columnas y registros con información de un tipo en especifico ',
                '- Toda tabla deberia tener una clave primaria, para mejorar la indexación de contenido',
                '- La información deberia estar normalizada para evitar valores duplicados',
            ]),
        new Item(PERSISTENCY_DBMS,
            [
                '- Se encargan de almacenar, administrar, manipular y resguardar los datos ',
                '- Las BD guardan diferentes tipos de datos como: texto, numeros, binarios, temporales, documentos, imagenes, geograficos, etc... ',
                '',
                '- Un buen DBMS deberia tener las siguientes caracteristicas: ',
                '<strong>- Redundancia:</strong>   Los duplicados en las BD se reducen al tener un unico lugar donde almacenar los datos',
                '<strong>- Mantenimiento:</strong> Tener todos los datos en solo lugar permite que se administren con más eficiencia ',
                '<strong>- Seguridad:</strong>     Define quien y con que privilegios puede acceder a la informacón ',
                '<strong>- Consistencia:</strong>  Se maneja un estandar para todos los datos de todas las BD ',
                '<strong>- MultiUsuario:</strong>  El acceso concurrente de varios usuarios es un tema comun para las BD ',
            ]),
        new Item('crud',
            [
                '- Son las 4 operaciones basicas a la hora de gestionar los datos de una BD ',
                '- No solo es aplicable para SQL, tambien tiene su equivalencia en HTTP ',
                '- La mayoria de frameworks tienen estos metodos ya implementados y listos para consumirse ',
                '',
                ' <strong>Operación       SQL         HTTP, Restful</strong>     ',
                '  Create        INSERT        POST              ',
                '  Read          SELECT        GET, HEAD         ',
                '  Update        UPDATE        PUT, PATCH        ',
                '  Delete        DELETE        DELETE            ',
            ]),
        new Item('dl',
            [
                '<strong>DDL</strong> Lenguaje de Definición de Datos, Permite Crear y Modificar la estructura de la BD ',
                '<strong>- CREATE:</strong>   Creación de campos, tablas e indices ',
                '<strong>- ALTER:</strong>    Modificacion de los campos de las tablas ó redefinirlos ',
                '<strong>- DROP:</strong>     Eliminación de tablas e indices ',
                '<strong>- TRUNCATE:</strong> Elimina todos los registros de una tabla ',
                '<strong>- COMMENT:</strong>  Utilizado para agregar comentarios al diccionario de datos ',
                '<strong>- RENAME:</strong>   Renombra objetos ',
                '',
                '<strong>DML</strong> Lenguaje de Manipulación de Datos, Permite ejecutar las operaciones de un CRUD en los datos de la BD ',
                '<strong>- SELECT:</strong> Consulta una tabla de la BD de manera general ó con filtros ',
                '<strong>- INSERT:</strong> Inserción de datos en una tabla ',
                '<strong>- UPDATE:</strong> Actualización de campos ó registros que cumplan los criterios especificados ',
                '<strong>- DELETE:</strong> Elimina registros de una tabla ',
                '',
                '<strong>DCL</strong> Lenguaje de Control de Datos, Permite crear roles, permisos y conceder/denegar el acceso a los datos ',
                '<strong>- GRANT:</strong>  Otorga privilegios de acceso a los usuarios ',
                '<strong>- REVOKE:</strong> Retira los privilegios previamente otorgados ',
                '',
                '<strong>TCL</strong> Lenguaje de Control de Transacciones ',
                '<strong>- COMMIT:</strong>   Guarda los cambios realizados ',
                '<strong>- ROLLBACK:</strong> Deshace el ultimo cambio hecho ',
            ]),
        new Item('integridad',
            [
                '- Son las reglas que garantizan que la información sea inmutable hasta que se decida lo contrario ',
                '- Tambien protege los datos de posibles errores a la hora de modificarlos/eliminarlos ',
                '- Esta es una de las principales diferencias entre las BD relacionales y NO relacionales ',
                '- Las BD relacionales cumplen esto mediante el esquema ACID ',
                '- Las DB NO relacionales no garantizan el 100% de la integridad de los datos, aunque la mayoria son muy fiables ',
            ]),
        new Item('erd',
            [
                '- Demuestra como las entidades (generalmente de una BD) se relacionan entre si ',
                '- Es una manera de desarrollar BD relacionales de acuerdo al modelo de negocio',
                '- Demuestra como las entidades (generalmente de una BD) se relacionan entre si ',
                '- Tambien tienen una relación que denota la cardinalidad 1-1, 1-n, 1-0, m-n',
            ]),
        new Item('normalizacion',
            [
                '- La normalización hace la información más facil de estructurar, sin gastar espacio en redundancias y eliminado posibles inconsistencias',
                '- Este proceso conlleva 2 grandes ventajas, se salvaguarda espacio en disco al no tener duplicacion de datos y los procesos de busqueda ',
                ' - son más eficientes ya que no hay <em>dependencias inconsistentes</em>, los datos van a estar con su dependencia/relacion más fuerte ',
                '',
                '<strong>- Primera forma:</strong> Identificar datos agrupables en tablas individuales',
                '<strong>- Primera forma:</strong> Asigne cada conjunto con una clave primaria',
                '',
                '<strong>- Segunda forma:</strong> Crear tablas independientes para valores que sean aplicables a otros registros ',
                '<strong>- Segunda forma:</strong> Asigne claves foraneas que se puedan relacionar con otras tablas',
                '',
                '<strong>- Tercera forma:</strong> Trasladar valores que sean independientes de las claves a tablas separadas',
                '<strong>- Tercera forma:</strong> No siempre es conveniente hacerlo, puede ser costoso en terminos de rendimiento ',
                '',
                '<strong>- Cuarta forma:</strong> Rara vez se aplican pero hay casos donde es practico hacerlo',
            ]),
        new Item('acid',
            [
                '- Son 4 propiedades que garantizan la confiabilidad de las operaciones y consecuentemente en los datos de las BD ',
                '<strong>- Atomicidad:</strong>   Todas las operaciones deben ser todo o nada, si una falla la información no debe sufrir cambios ',
                '<strong>- Consistencia:</strong> Toda operación iniciada debe ser valida para poderse efectuarse, constraints, cascades, etc.. ',
                '<strong>- Aislamiento:</strong>  Toda operación debe ser ejecutada indeferentemente de las demás, respetando el orden',
                '<strong>- Persistencia:</strong> Toda transacción que se haya realizado debe ser perdurable en el tiempo, sin importar que suceda ',
            ]),
        new Item('indices',
            [
                '- Es una manera de optimizar las consultas y mejorar la eficiencia de una BD ',
                '- Esto se logra mediante estructuras binarias asociadas a cada registro de la BD ',
                '- La indexación puede presentar un problema para la inserción, modificación y borrado de los datos, ya que esto  ',
                ' - significa la actualización de los indices asociados, ralentizando las transacciones ',
                '- Tener demasiados indices tambien es contraproducente ya que pueden retrasar el procesamiento de los datos ',
                '- Cada motor puede manejar de diferentes maneras los indices, y esto a su vez afectar el rendimiento de cada tipo ',
            ]),
        new Item('joins',
            [
                '- La instrucción del Join es usada, para enlazar 2 tablas relacionadas, generalmente mediante un campo en comun(foreing key)',
                '- Una manera de entenderlos es usando la teoria de conjuntos ',
                '',
                '<strong>- Cross Join:</strong> Es el Join más simple, donde se genera un producto cartesiano, uniendo una fila de una tabla con cada fila de la otra ',
                '<strong>- Inner Join:</strong> El join por defecto, solo devuelve los registros donde haya una coincidencia, entre ambas tablas',
                ' - donde el valor del campo <strong>A</strong> se une con la coincidencia respectiva de la tabla <strong>B</strong>',
                '<strong>- Left outer Join:</strong>  Son todas las filas para las que haya coincidencia más el contenido de la tabla <strong>A</strong> que no coincida ',
                '<strong>- Right outer Join:</strong> El mismo resultado, pero con el contenido de la tabla <strong>B</strong> aunque suene redundante, puede ayudar a la compresion de la consulta ',
                '<strong>- Full outer join:</strong>  Es la suma de los 2 anteriores, donde se quieren las filas de <strong>A</strong> y <strong>B</strong>, haya coincidencias o no',
                '',
                '- Tambien hay otros tipos de Joins, que son combinaciones de estos anteriores para reducir la información entre las tablas ',
            ]),
        new Item('constraints',
            [
                '- Son especificaciones de Reglas sobre la información de una tabla',
                '- Estas se usan para limitar el tipo de datos que pueden incluirse en una tabla, esto garantiza la precisión y la confiabilidad ',
                '- Si se intentarara crear o actualizar un registro que viola la restricción, la acción se cancela ',
                '- Las restricciones pueden ser a nivel de columna o a toda la tabla ',
                '- Existen restricciones comunes y estas se pueden combinar, para crear combinaciones mas complejas, a continuación algunos ejemplos: ',
                '',
                '<strong>Not Null:</strong> Garantiza que la columna no contenga valores nulos ',
                '<strong>Unique:</strong> Garantiza que los valores de una columna sean diferentes ',
                '<strong>Primary Key:</strong> Combinación de los 2 anteriores, para tener un identificador unico en cada tabla ',
                '<strong>Foreign Key:</strong> Previene acciones que destruirian relaciones entre tablas ',
                '<strong>Check:</strong> Satisface que los valores de una columna cumplan una condición especifica ',
                '<strong>Default:</strong> Establece un valor predeterminado para una columna si no se especifica algun valor ',
                '<strong>Create Index:</strong> Se utiliza para consultar datos rapidamente, pero pueden ralentizar actualizaciones y borrados ',
            ]),
        new Item('dbDesign',
            [
                '- Un buen diseño de una BD es esencial para garantizar la integridad, coherencia y precisión de los datos, además de su eficiencia y confibilidad ',
                '- Hoy en dia se debe tener en cuenta que existe la nube y los micorservicios, por lo que no es extraño tener arquitecturas con multiples capas ',
                '- Resulta ventajoso diseñar una capa de acceso de datos, que este por encima del encargado directo de almacenar, pero por debajo de nustros servicios ',
                '- Aca cobran relevancia los <em>ORM</em> y los <em>DAO</em>, para abstraer y simplificar la extracción y manipulación de los datos ',
                '',
                '<strong>Consideraciones:</strong>',
                '<strong>- Tipos de datos:</strong> Es importante evaluar el formato, el tamaño, la complejidad, y las relaciones que tengan ',
                ' - los datos trasaccionales suelen encajar bien en bases de datos relacionales, mientras que datos con o sin estructura, puden beneficiarse de NoSQL',
                '<strong>- Frecuencia de operaciones:</strong> En sistemas con una gran cantidad de lecturas, pueden beneficiarse de usar un cache para datos frecuentes ',
                '<strong>- Disponibilidad:</strong> Esto es crucial para un optimo rendimiento, por lo que tecnicas como replicar, equilibrar la carga ',
                ' - y la conmutación por error son usadas para mantener una alta disponibilidad, además de que no es de sobra un plan para recuperase ante desastres ',
                '<strong>- Escalabilidad:</strong> Conforme crecen los volumenes de datos, el sistema debe ser capaz de manejarlos con relativa eficiencia, ',
                ' - antes de que se comprometa el rendimiento, aca se consideran tecnicas como las particiones y uso de clusters ',
                '<strong>- Seguridad:</strong> Un tema fundamental en la actualidad, para evitar fraudes y filtraciones de datos, por lo que son necesarios ',
                ' - controlar el acceso, el cifrado de datos y su auditoria, son vitales para mejorar la seguridad del sistema ',
                '<strong>- Consistencia:</strong> Uno de los principios de sistemas que manejan transacciones, y se consigue mediante mecanismo de bloqueo ',
                ' - y control de la concurrencia, aislamiento de transacciones, con el fin de evitar errores al intentar modificaciones simultaneas ',
                '',
                '<strong>Desafios:</strong>',
                '<strong>- Herramientas/tecnologias adecuadas:</strong> Se debe analizar las necesidades actuales y sus previsiones, para escoger la mejor opción ',
                ' - que satisfaga las necesidades de manera efectiva, y no este limitada para incrementar sus prestaciones',
                '<strong>- Persistencia poliglota:</strong> Usar multiples bases de datos no es extraño actualmente, como tampoco es combinar ',
                ' - Bases de datos SQL y NoSQL para una misma aplicación, sin dejar de manejar transacciones o grandes volumenes de datos ',
                '<strong>- Integraciones:</strong> Diferentes sistemas en convivencia, necesitan compartir información, lo que puede desencadenar ',
                ' - en duplicaciones o inconsistencias, por lo que armonizar y juntar los datos de manera efectiva, requiere una planificación integral ',
                '<strong>- Rendimiento:</strong> Una preocupación constante, que siempre se debe tener en cuenta con cada cambio, por esto es ideal que ',
                ' - se usen buenas practicas, usar particiones, se eviten procesos intensivos etc.. con el fin de evitar o mitigar posibles cuellos de botella',
            ]),
        new Item(PERSISTENCY_OPTIMIZE_SLOW_QUERIES,
            [
                '- Identificar y optimizar consultas lentas en cualquier gestor de Bases de Datos relacional es fundamental para un optimo rendimiento',
                '- Si es un desarrollador que usa poco los <em>ORM</em> como Hibernate la optimización no es un concepto ajeno ',
                '',
                '<strong>¿ Porque son dificiles de encontrar ?</strong>',
                '- Un gran volumen de consultas puede ocultarlas entre el ruido',
                '- Falta de herramientas de monitoreo, como <em>Digma, Grafana, Prometheus</em>',
                '- Consultas hechas con <em>ORM</em>, estas aceleran el desarrollo y disminuyen la necesidad de SQL nativo, a cambio de ocultar su funcionamiento',
                '',
                '<strong>¿ Porque se pueden dar ?</strong>',
                '- Falta de indices, en especial si hay consultas con uso de <em>WHERE, JOIN, GROUP BY, ORDER BY</em> que usan estas columnas ',
                '- La complejidad, como el uso de <em>JOIN, Subqueries</em> y <em>Agregaciones</em>',
                '- Abstracciones con fugas por parte de los <em>ORM</em>, ya que pueden traer consigo el problema de <strong>N + 1</strong> consultas ',
                '- Realizar consultas con <strong>*</strong> entre mayor sea la cantidad de campos mayor sera el tiempo para retornar un resultado del query ',
                '',
                '<strong>¿ Como se pueden optimizar ?</strong>',
                '- cada <em>RBDMS</em> cuenta con caracteristicas y optimizaciones unicas, por lo que es util conocerlas para implementarlas ',
                '- Utilizar consultas parametrizadas, evitando el esfuerzo de recompilar y optimizar los planes de consulta',
                '- Configure la DB para obtener las mejores prestaciones de acuerdo con cada caso, red, disco, memoria',
                '- Remueva indices no deseados, ya que estos alentan los <em>INSERT</em> y <em>UPDATE</em>',
                '- Verifique la tabla sobre la cual se estan haciendo los queries, es posible que se pueda normalizar o dividirse, reduciendo la cantidad de filas ',
                '- Use procedimientos almacenados si son consultas demasiado frecuentes y con poca complejidad, sin abusar de estos ',
            ])
    ];

export const BASE_DE_DATOS_AVANZADO =
    [
        new Item('nosql',
            [
                '- Nacieron de los problemas para escalar las BD relacionales, existen proyectos privados y de codigo libre, accesibles para la comunidad',
                '- La principal diferencia respecto a SQL es la falta de una estructura definida para almacenar los datos ',
                '- Esta falta de estructura hace posible que se pueda guardar cualquier tipo de dato',
                '- El rendimiento es mayor independientemente de la cantidad de datos',
                '- La fiabilidad de los datos no esta garantizada',
                '- No hay un estandar para las operaciones, cada motor tiene su sintaxis diferente',
                '- Existen diferentes formas de guardar la información ',
            ]),
        new Item('tiposBD',
            [
                '<strong>- Clave-Valor:</strong> Cada elemento tiene una llave unica, asociada a un valor ',
                '<strong>- Documentos:</strong>  La información se guarda en documentos con IDs unicos, y en formatos simples como JSON o XML ',
                '<strong>- Grafos:</strong>      Se basan en nodos, relacionados mediante aristas, es necesario de la teoria de grafos para recorrerlas ',
                '<strong>- Objetos:</strong>     Los datos se manejan mediante Objetos, tal y como en la Programación Orientada a Objetos ',
            ]),
        new Item(PERSISTENCY_ADVANCED_ORM,
            [
                '- El Mapeo Objeto-Relacional permite convertir los objetos convencionales en objetos persistentes ',
                '- Permite generar esquemas para guardar la información independientes de cualquier Motor de Base de Datos ',
                '- Todas las operaciones basicas del CRUD son facilmente implementables ',
                '- Los cambios en las BD se hacen mucho más rapidos de hacer y de probar ',
                '- El rendimientos para operaciones muy complicadas es ligeramente menor ',
            ]),
        new Item('consistenciaEventual',
            [
                '- Garantiza la calidad de los servicios, con una gran disponibilidad y escalabilidad, esto aplica solamente para BD relacionales ',
                '- Cuando la concurrencia es demasiado alta, las peticiones pueden resultar en peticiones bloqueantes ',
                '- Cuando un sistema transaccional se bloquea, generalmente lo hace por un instante breve de tiempo, ',
                ' - si esto no se maneja de manera correcta, puede resultar en bloqueos fatales para la aplicación ',
                '- La consistencia eventual permite garantizar la disponibilidad y escalabilidad de las aplicaciones, ',
                ' - mediante cientos de nodos distribuidos y la promesa de retorno de toda operación ',
            ]),
        new Item('algebraRelacional',
            [
                '- Este tipo de algebra toma un conjunto de datos y realiza operaciones sobre estos, para generar un nuevo conjunto ',
                '- Tambien soporta el concepto de anidación al usar un resultado para una operación y generar otro resultado ',
                '',
                '<strong>- UNION:</strong>        Une 2 tablas iguales, sin registros repetidos ',
                '<strong>- INTERSECCIÓN:</strong> Une 2 tablas iguales donde los registros sean iguales, evitando la repetición ',
                '<strong>- DIFERENCIA:</strong>   Opera en tablas y devuelve el contenido que se encuentre en la primera tabla pero no en la segunda ',
                '<strong>- PRODUCTO:</strong>     Toma 2 tablas y devuelve una tercera con el contenido de acuerdo a las posibles combinaciones, ya sean iguales o diferentes ',
                '<strong>- SELECCION:</strong>    Toma 2 ó más tablas, iguales o diferentes, y devuelve los campos donde se cumplan las condiciones dadas ',
                '<strong>- PROYECCIÓN:</strong>   Opera igual que la selección, pero aca se pueden especificar que columnas se quieren tener ',
                '<strong>- REUNIÓN:</strong>      Opera sobre 2 ó más tablas y devuelve todos los campos deseados, que esten relacionados mediante alguna condición ',
                '<strong>- DIVISIÓN:</strong>     Opera sobre 2 tablas donde el resultado no existe en la primera tabla, y todas las filas tengan esta relación ',
                '<strong>- ASIGNACIÓN:</strong>   Cambia los valores de las columnas donde se cumplan las condicones dadas ',
                '',
                '- equivalencias en SQL (respectivamente)                           ',
                '- SELECT * FROM A     UNION     SELECT * FROM B                     ',
                '- SELECT * FROM A   INTERSECT   SELECT * FROM B                      ',
                '- SELECT * FROM A    EXCEPT     SELECT * FROM B                       ',
                '- SELECT * FROM A, B                                                   ',
                '- SELECT * FROM A WHERE X&lt;50                                         ',
                '- SELECT X, Z FROM A WHERE X&lt;50                                       ',
                '- SELECT A.W, B.Y FROM A JOIN B ON (A.V=B.X AND Z>10)                     ',
                '- No hay equivalencia directa, pero se puede lograr combinando operaciones ',
                '- UPDATE A SET indice="100%" WHERE codigo > 2000                            ',
            ]),
        new Item('n+1selects',
            [
                '- Es un problema cuando se manejan ORM, dado una colección de objetos, que a su vez pueden tener otras colecciones objetos como atributos ',
                '- Entonces para obtener un objeto inicial, hay que tener todos los objetos asociados a este, aunque no se necesiten ',
                '- Actualmente la mayoria de ORM usan o proveen estrategias para evitar este comportamiento ',
                '- Generalmente esto no es un problema de rendimiento, pero si ha de convertirse en uno, generalmente sucede en entidades con mucha anidación ',
                '- Hay maneras de solventarlo como cambiar la forma de consultar las entidades o usar objetos en memoria ',
            ]),
        new Item('boyceCodd',
            [
                '- El modelo relacional fue introducido en los años 60 por Edgar Frank Codd e IBM, e incremento su popularidad hasta ser el principal modelo actual ',
                '- En este modelo se definen los siguientes objetivos, para una adecuada normalización: ',
                '',
                '<strong> - Independencia fisica:</strong> La forma de almacenar los datos, no debe influir en su manipulación ',
                '<strong> - Independencia logica:</strong> Los datos almacenados no deben ser modificados si se cambia el motor de la bd ',
                '<strong> - Flexibilidad:</strong>         La BD deberia ofrecer distintas vistas en funcion del usuario que la necesite ',
                '<strong> - Sencillez:</strong>            La estructura logica deberia estar normalizada, hasta la 3ra forma normal, o la 4ta forma normal Boyce-Codd',
                '',
                '- Normalmente casi todas las tablas que estan en la 3FN no suelen infrigir la FNBC ',
                '- No existe una regla definida para corregir de la 3ra a la 4ta forma normal ',
                '- En ciertos casos no es indicado hacerlo ya que la descomposición puede hacer perder la semantica de la relación ',
                '',
                ' Se tiene la siguiente tabla en 3FN        La FNBC serian las siguientes tablas: ',
                ' <strong>CodPostal Direccion    Ciudad             CodPostal  Direccion       CodPostal  Ciudad </strong>',
                ' 3000      las flores   Merida             3000       las flores      3000       Merida ',
            ]),
        new Item('sqlVsNosql',
            [
                '- Si ya se conoce SQL y se manejan bien las relaciones y la normalización, intentar replicar esto en NoSql es un gran error ',
                '- Contrario a lo que se pensaria las BD NoSql no tienen problema alguno con la redundancia ',
                '- A continuación se expondran algunos puntos para definir que BD es más idonea, de acuerdo a las necesidades ',
                '',
                '                         <strong>SQL                                NoSql</strong>                 ',
                '- Integridad       Estructura rigida                 Las estructuras son                           ',
                '  de datos         pero garantizada                  altamente mutables                            ',
                '',
                '                   Las tablas y sus relaciones       Cualquiera puede cambiar                      ',
                '- Atomicidad       evitan cambios no aceptados,      lo que sea, permitiendo una                   ',
                '                   es un todo o nada (rollback)      condición de carrera                          ',
                '',
                '                   No es imposible, solo es más      Ya que no tiene integridad,                   ',
                '- Escalabilidad    costoso y puede tener problemas   crecer es facil, más rapido                   ',
                '                   con la integridad de datos        y puede hacerlo de manera horizontal          ',
                '',
                '- Velocidad        Los Joins pueden ser lentos       El volumen no es un problema,                 ',
                '                   debidos a la cantidad de datos    siempre y cuando no hayan relaciones          ',
                '',
                '- Consistencia     Siempre se garantiza y más si     La redundancia es algo totalmente normal      ',
                '  vs Redundancia   esta normalizada                  y esto puede conllevar a datos inconsistentes ',
                '',
                '                   SQL es maduro,                    Su flexibilidad le permite ser más            ',
                '- Desarrollo       con una gran comunidad,           rapido para realizar cambios sin              ',
                '                   documentación extensiva           grandes consecuencias, más si se usa con      ',
                '                   y estandares bien definidos       lenguajes debilmente tipados                  ',
                '',
                '                   Se necesita bloquear los          No tienen ningun tipo de bloqueo intrinseco   ',
                '- Sincronización   registros hasta que la            los registros pueden ser modificados de       ',
                '   & bloqueos      transación se complete            manera concurrente, generando posibles        ',
                '                   o se descarte                     inconsistencias con el tiempo                 ',
                '',
                '<strong>- Escoger una BD Relacional si...</strong>',
                ' - Se necesita consistencia y transacciones atomicas, con un minimo de errores ',
                ' - Hay datos con relaciones y se buscaran en base a estos ',
                ' - Se debe introducir gente rapidamente al desarrollo ',
                ' - El apoyo de la comunidad es necesario y la estabilidad es un requisito ',
                '',
                '<strong>- Escoger una BD No Relacional si...</strong>.',
                ' - La velocidad de lectura/escritura es prioridad sobre la consistencia ',
                ' - Se sabe poco del desarrollo y lo más probable es que cambie constantemente ',
                ' - La escalabilidad es una meta a tener en el tiempo ',
                ' - No se necesitan estructuras o simplemente se necesitan guardar los datos y nada más ',
                '',
                '<strong>- Escoger ambos si...</strong>',
                ' - Ya que ambos pueden coexistir en los sistemas complejos que necesiten ambas ventajas ',
                ' - Información muy consultada y de poca edición puede usarse con NoSql ',
                ' - Operaciones criticas y que requieran consistencia con SQL por tradición ',
            ]),
        new Item('locking',
            [
                '- En entornos de alta concurrencia es inevitable que hayan conflictos o colisiones, por lo que en las BD se suelen usar 2 estrategias ',
                '',
                '- Detectar y volver a intentar, como lo hace <strong>Ethernet</strong> ',
                '- Bloqueando a otros transmisiones concurrentes, como lo hace el <strong>Wifi</strong>',
                '',
                '<strong>La anomalia perdida</strong>',
                '- Consideremo una actualizacón perdida, algo que puede ocurrir en cualquier base de datos, que se ejecute aisladamente con una lectura confirmada ',
                '- Donde varios usuarios acceden al mismo recurso de manera concurrente y lo modifican de manera alternada, generando inconsistencias y problemas ',
                '',
                '<strong>Bloqueo Pesimista:</strong>',
                ' - Aca el primer usuario que tome el recurso lo bloqueara, hasta que hayan terminado todas las operaciones sobre este ',
                ' - Es ideal realizarlo cuando es demasiado costoso solucionar y/o encontrar conflictos ',
                '',
                '<strong>Bloqueo Optimista:</strong>',
                ' - Se permite que el bloqueo suceda, pero se necesita detectarlo para reintentar y/o hacer rollback si es necesario ',
                ' - Esto permite evitar bloquear operaciones de lectura y escritura entre si, y revertir las operaciones que presenten errores ',
                '',
                '<strong>- Transacciones a nivel de la aplicación</strong>',
                '- Hoy en dia la concurrencia y la formas de conexión se han incrementado, por esto no todo se da necesariamente en una misma transacción ',
                '- Tampoco se garantiza que una ejecución los procesos de manera serial, mantenga las cosas en orden ',
                '- Debido a esto, motores como Oracle, PostgreSQL y MySQL utilizan el control de la concurrencia, basandose en un bloqueo optimista ',
            ]),
        new Item('sqlOrderExecution',
            [
                '<strong> Como se ve el Query               Como se ejecuta                     Porque pasa de esta manera</strong> ',
                '',
                '      SELECT                            FROM                      Lugar o lugares de donde se tomaran los datos ',
                '',
                '      FROM                              WHERE                     Filtrado de los registros ',
                '',
                '      WHERE                             GROUP BY                  Se verifica si existen agrupaciones por columnas',
                '',
                '      GROUP BY                          HAVING                    Se aplica si se tiene un GROUP BY',
                '',
                '      HAVING                            SELECT                    Se retornan las columnas que se quieren ver, sean normales o calculadas',
                '',
                '      ORDER BY                          ORDER BY                  Ordena los datos entregados ',
                '',
                '      LIMIT                             LIMIT                     Se limita la cantidad de registros entregados',
            ]),
        new Item('sargeable',
            [
                '- <strong>SARGABLE</strong> significa "<strong>S</strong>earched <strong>ARGU</strong>ment <strong>ABLE</strong>", referiendose a consultas que pueden hacer uso de los indices, siguiendo algunas indicaciones',
                '',
                '- Utiliza funciones y argumentos que puedan aprovechar los indices, como igualdad(=), desigualdad(<>, !=), Rango(BETWEEN), Pertenencia(IN)',
                '- No utiliza funciones que evitan los indices o requieren de un full scan, como Negación(NOT), comodines(LIKE), Operaciones aritmeticas(+, -, *, /)',
                '',
                '<strong>Tambien hay pautas como:</strong> ',
                '- Usar los tipos correctos de los datos, para evitar conversiones implicitas que puedan afectar el uso de los indices',
                '- Evitar usar Operaciones de ordenamiento y agrupamiento, solo se debe de usar cuando son requeridas ',
                '- Usar columnas derivadas o valores precalculadas, en vez de usar operaciones sobre las columnas, y menos en las que estan indexadas ',
                '- Siempre intente usar el WHERE, como una manera de reducir los datos, para todos los pasos subsiguientes ',
                '- Intente usar LIMIT, para mejorar el rendimiento y la cantidad de datos a procesar ',
                '- Escoja los JOINS indicados, no siempre sera necesario, tener toda la información de todas las tablas'
            ]),
        new Item('MVCC',
            [
                '- Es una tecnica de optimización de BD que crea copias duplicadas de registros, para que los datos puedan leerse y actualizarse de forma segura ',
                '- Evitando que las lecturas y las escrituras se bloqueen entre si y que puedan formen cuellos de botella ',
                '- cuando es implementado correctamente, puede traer beneficios como: ',
                '',
                ' - Menor necesidad de bloqueos relacionados a transacciones ',
                ' - Menos problemas relacionados a contención ',
                ' - Mejor rendimiento en la lectura de datos ',
                ' - Aislamiento de registros para operaciones de escritura y actualizaciones ',
                '',
                '- Cada DBMS es libre de implementar sus versiones, pero casi todas funcionan de la siguiente manera: ',
                '',
                '1. Cada registro en BD tiene un numero de versión ',
                '2. Las lecturas simultaneas, se realizan con el numero de versión más alto ',
                '3. Las operaciones de escritura siempre operan con una copia, no con el registro en si ',
                '4. Los usuarios siempre leeran copias, hasta que las actualizaciones no hayan finalizado ',
                '5. Si la operación es exitosa, se incrementa la versión, esto descarta las copias, creando tuplas muertas ',
                '6. Las siguientes lecturas, siempre se realizaran con la versión más actualizada ',
                '7. Con cada actualización, se repite el ciclo',
                '',
                '- A diferencia de un DBMS tradicional, aca no se bloquean los registros, se prefiere crear copias y trabajar con ellas, ',
                ' - hasta que la operación haya finalizado correctamente ',
                '',
                '- Para lidiar con los problemas de que cada actualización o borrado incrementa el tamaño de la BD sigilosamente ',
                '- Se han implmentado estrategias de limpieza, como el VACCUM en PostgreSQL, que identifica y elimina estos residuos ',
                '- Pero esto tampoco es una solución final, si este proceso no se realiza periodicamente o se realiza de manera errada, ',
                ' - la BD puede fallar por falta de espacio, o bloquear de manera fatal el acceso y la manipulación de los datos ',
                ' - obligando a que se interrumpa la operación y a un mantenimiento forsozo del DBMS ',
            ]),
        new Item('acidVSbase',
            [
                '- El auge de las NoSql necesitaba un nuevo esquema que no fuera ACID, sin dejar de ser flexible y fluido al manipular los datos ',
                '',
                '<strong>BA Basicamente disponible:</strong> Garantizan la disponibilidad de los datos, sin imponer una coherencia inmediata, ni importar si es un cluster/nodos ',
                '<strong>S Estado suave:</strong> No se garantiza la coherencia de los datos, esto pasa a ser responsabilidad del desarrollador ',
                '<strong>E Coherencia eventual:</strong> Alcanzar la coherencia es posible, pero esto no sera de manera inmediata y los datos no siempre seran fiables ',
                '',
                '- Las redes sociales suelen ser un mar de información, donde no existe una estructura fija, por lo que contienen un enorme volumen de datos, ',
                ' - sin estructura o parcialmente estructurados, por lo que una BD NoSQL es idonea para este tipo de ambientes ',
            ]),
        new Item(PERSISTENCY_ADVANCED_SCALING_DB,
            [
                '- Las BD esta hechas para procesar y almacenar inmensas cantidades de datos, aun asi eso no significa que no deba o no puedan crecer aun más',
                '',
                '<strong>- Indexación:</strong> Analizar las consultas y sus patrones, para crear o modificar los indices correctos ',
                '<strong>- Vistas materializadas:</strong> Crear calculos de consultas complejas y almacenar los datos para su rapido acceso ',
                '<strong>- Desnormalizar:</strong> Reducir joins complejos, para incrementar el rendimiento de las consultas',
                '<strong>- Crecimiento vertical:</strong> Aumentar la caracteristicas fisicas, agregando CPU, RAM o Almacenamiento',
                '<strong>- Cache:</strong> Almacenar información recurrente de manera que sea más rapida para su acceso ',
                '<strong>- Replicación:</strong> Crear replicas de la BD principal, para separar las lecturas de la escritura ',
                '<strong>- Fragmentación:</strong> Dividir las tablas de la BD en partes más pequeñas y distribuirlas en multiples servidores ',
            ]),
        new Item(PERSISTENCY_ADVANCED_WAL,
            [
                '- <em>Write Ahead Logs</em>, es una tecnica utilizada en los sistemas de almacenamiento para garantizar la durabilidad y coherencia de las transacciones ',
                '- La idea basica es registrar los cambios en un registro antes de que se apliquen al almacenamiento real',
                '- Este contiene un registro secuencial de todos los cambios realizados en el almacenamiento',
                '- Las transacciones no se consideran completadas, hasta que los cambios correspondientes se registren de forma segura en el <em>WAL</em>',
                '- Aunque parezca contradictorio, esto puede mejorar el rendimiento en algunos escenarios, al escribir en los archivos de manera secuencial, y no aleatoria ',
                '',
                '<strong>Secuencia de pasos</strong>',
                '<strong>1. Antes de realizar cualquier cambio persistente:</strong> Agrege la información necesaria a los registros para reproducir los cambios, ',
                ' - en caso de cualquier error, como: la operación realizada, datos afectados, y cualquier otro metadato necesario para la recuperación ',
                '<strong>2. Una vez modificados los logs:</strong> Se pueden aplicar directamente en la BD y modificar las copias en memoria ',
                '<strong>3. Confirmar la transacción:</strong> Para que los cambios sean permanentes, este registro de confirmación tambien funciona como marcador, ',
                ' - para que el sistema sepa de todos los cambios que tienen transacciones comprometidas ',
                '<strong>4. Puntos de control:</strong> Periodicamente el sistema de la BD realiza puntos de control, aca se vacian los datos modificados de la memoria, ',
                ' - y escribe un nuevo punto de control en la <em>WAL</em> indicando el punto donde se han aplicado todos los cambios sobre los registros de la BD',
                '<strong>5. Recuperación:</strong> Si es necesaria en caso de alguna falla, se usaran los <em>WAL</em> para restaurar la BD a un estado previo consistente, ',
                ' - al haber reproducido todos desde la ultima transacción confirmada, se pueden aplicar los cambios sin confirmar ó que se encuentran pendientes ',
                '',
                '<strong>¿ Donde se usan ?</strong>',
                '- Comunmente utilizado en sistemas de gestión de bases de datos relacionales <em>RBDMS</em> como <strong>PostgreSQL, SQLite, Oracle, MariaDB, etc..</strong>',
                '- <strong>Kafka:</strong> Usa un proceso similar al <em>WAL</em> para mayor durabilidad y tolerancia a fallos, antes de ser procesados por los consumidores y evitar perdidas ',
                '- <strong>Hadoop:</strong> Utilizado para garantizar la integridad y coherencia entre nodos distribuidos, actua antes que se apliquen en el registro de los metadatos ',
                '',
                '<strong>Componentes</strong>',
                '<strong>- Logs de entrada:</strong> El nucleo de <em>WAL</em> son los registros de todos los sucesos, que incluyen datos y metadatos',
                '<strong>- Bufer de Logs:</strong> Cualquier cambio se escribe primero en el bufer en memoria, lo cual suele ser rapido ya que son escrituras secuenciales ',
                '<strong>- Numero de Secuencia de Logs(LSN):</strong> Cada entrada esta asociada a un numero de secuencia especifico, estos se utilizan para ordenar las entradas ',
                ' - y garantizar que los cambios se apliquen en el orden correcto durante la recuperación ',
                '<strong>- Archivos WAL:</strong> Las entradas de los logs en el buffer se vacian de manera periodica en el disco y se escriben en uno o varios archivos duraderos ',
                '<strong>- Puntos de control:</strong> El vaciado de los logs, tambien implica actualizar los metadatos, para indicar el <em>LSN</em> de control más reciente, ',
                ' - esto con el fin de reducir el tiempo de recuperación al limitar la cantidad de datos de registro que deben reproducirse ',
                '<strong>- Administrador de recuperación:</strong> En caso de fallas o apagados, este administrador es responsable de restaurar la BD a un estado consistente ',
                '<strong>- Archivado o mantenimiento:</strong> Dependiendo de la configuración, los archivos pueden guardarse o eliminarse, cuando no sean relevantes para la recuperación ',
            ])
    ];
