import { Item } from "../models";

export class Content1 {

    public temas: Item[] = [
        ...AGILES,
        ...ARQUITECTURAS,
        ...CALIDAD,
        ...META_CARACTERISTICAS,
        ...CONTENEDORES,
        ...FRAMEWORKS,
        ...HARDWARE,
        ...WEB,
        ...META_ESTRUCTURAS,
        ...PARADIGMAS,
        ...PERSONAS,
        ...OTROS,
        ...BASES_DE_DATOS
    ];

}

export const AGILES =
    [
        new Item('moscow',
            [
                '- Es una tecnica para la priorización de requisitos y funciones para lograr un alcance especificado ',
                '',
                '- <strong>M</strong>ust Have   -> Debe tener:    Este requisito debe estar implementado si ó si, si no, el producto es un fracaso ',
                '- <strong>S</strong>hould have -> Deberia tener: Requisito de alta prioridad que en la medida de lo posible deberia quedar en el producto final ',
                '- <strong>C</strong>ould have  -> Podria tener:  Caracteristica deseable, pero que no es necesaria y solo sera implementada si hay posibilidades ',
                '- <strong>W</strong>on´t have  -> No tendra:     Son requisitos que estan descartados por esta vez, pero seran incluidos a futuro ',
            ]),
        new Item('scoring',
            [
                '- Permite determinar la prioridad de las funcionalidades, basandose en diferentes criterios, que a su vez ',
                ' - constan con diferentes pesos, cada caracteristica de la Historia de Usuario tendra un valor ',
                '',
                '- Determinar el peso de las caracteristicas es más facil ya que se hace en base a una comparación, ',
                ' - Donde previamente se ha tomado una HU como punto base y las demás se miden con esta base ',
            ]),
        new Item('muda',
            [
                '- El desperdicio en las empresas viene del termino japones MUDA, que es todo lo inutil, superfluo, despilfarro, residuos, ocioso ',
                '',
                '- Sobreproducción -> producir más de lo demandado, esperando que el mercado lo necesite es una mala praxis, ',
                ' - que despilfarra recursos que pudieron ser usados en otras areas ',
                '- Esperas -> son los famosos cuellos de botella, donde un proceso alenta a los demás, haciendoles perder tiempo ',
                '- Transporte -> todo movimiento innecesario de elementos que no aporta valor debe ser minimizado ',
                '- SobreProcesos -> son procesos que aunque pueden ser utiles, no van a volver ser usados, por eso su realización es un desperdicio ',
                '- Exceso de inventario -> puede conllevar a perdidad monetarias a la empresa, debido a que se pueden volver obsoletos, o nunca usarse ',
                '- Movimientos innecesarios -> todo movimiento que no aporte valor al producto es un despedicio, hasta caminar al trabajo puede serlo ',
                '- Defectos -> todo error consume tiempo para ser resuelto, independientemente de su tamaño, además de la insatisfacción del cliente ',
            ]),
        new Item('5s',
            [
                '- Seiri, Seiton, Seiso, Seiketsu, Shitsu ke; la base de la mejora continua ',
                '',
                '- Seieri -> clasifica y organizar de manera apropiada ',
                ' - es retirar del area o estación todo aquello que no es necesario ',
                '- Seiton -> orden ',
                ' - organizar los elementos necesarios de manera que sean de facil acceso ',
                '- Seiso  -> limpieza',
                ' - ya con un orden establecido y areas limpias, es más facil detectar malas practicas ',
                '- Seiketsu -> estandares',
                ' - este estado solo se obtiene cuando la limpieza y la organización se mantienen constantes ',
                '- Shitsuke -> disciplina',
                ' - es la creación de habitos que eviten el rompimiento de los conceptos anteriores ',
                '',
                '- ¿ Porque no la aplican algunas empresas ? ',
                '',
                '- La maquinaria no puede parar -> los cronogramas no dan tiempo de mantenimiento de la maquinaria ',
                '- La limpieza como perdida de tiempo -> algunos empleadores pagan para trabajar, no para limpiar su area de trabajo ',
                '- Costumbre -> crear nuevos habitos y cambiar los viejos es un cambio fuerte y prolongado de paradigma ',
                '',
                '- Beneficios ',
                '- Mayor seguridad de los empleados ',
                '- Reducción de las perdidas y mermas por defectos ',
                '- Mayor calidad, y menos tiempo de respuesta ',
                '- Genera una cultura organizacional ',
            ]),
        new Item('muda#1',
            [
                ' 1 -> Trabajo hecho a medias: desplegar sin probar y tener errores conocidos más no solucionados, ',
                '  - daran problemas a futuro, de manera que aveces es mejor un nuevo desarrollo que corregir lo existente ',
                ' 2 -> Funcionalidad extra: toda funcionalidad que no haya sido pedida significa, ',
                '  - recursos gastados que no tendran redito alguno ',
                ' 3 -> Reaprendizaje: nuestra memoria no es absoluta, por lo que inevitablemente olvidaremos cosas, ',
                '  - y gastaremos tiempo volviendolas a aprender, tambien aplica para personas expertas ',
                '  - que ya tienen el conocimiento, pero nos empeñamos por aprenderlo nosotros mismos, sumando tiempo al desperdicio ',
            ]),
        new Item('muda#2',
            [
                ' 4 -> Transferencia de conocimiento: todo proceso de comunicación es ineficiente ya que, ',
                '  - durante el proceso se suelen perder datos u omitir detalles importantes, y asi entre más niveles ',
                '  - haya que permear, de las mejores manera para evitar esto son la comunicación cara a cara ',
                ' 5 -> Retrasos: algunas funcionalidades requieren que sean lineales, por lo que si la etapa previa se retrasa, ',
                '  - las etapas subsiguientes tambien lo haran, por lo que estas situaciones deben ser evitadas lo más posible ',
                ' 6 -> Cambios de contexto: cuando tenemos varias cosas por hacer de manera inmediata, tendemos a ser multitarea, ',
                '  - esto no es más que un cambio de contexto que requiere tiempo y esfuerzo, y que entre más se hagan, más desperdicio habra ',
                ' 7 -> Defectos: uno de los más peligrosos, ya que entre más tarde se encuentre un error, más costoso sera corregirlo ',
                '  - estos errores se pueden disminuir por medio de las pruebas, e integración continua ',
            ]),
        new Item('planningPoker',
            [
                '- Las estimaciones son de mucha ayuda, para definir tiempo, costos y esfuerzos ',
                ' - independientemente de certeza, ya que generalmente casi nunca se cumplen ',
                '- Ayuda a visualizar desde diferentes puntos de vista, esto es bastante util para analizar un problema ',
                '-Los riesgos pueden ser detectados de manera previa, además de prever posibles obstaculos ',
                '-Todo el equipo involucrado deberia estar presente en este evento, ya que todos pueden aportar desde sus areas ',
                '',
                '- Material necesario',
                '- Cada participante debe tener su propia baraja ',
                '- La baraja en si es una secuencia de Fibonacci modificada, junto a ciertas cartas especiales: ',
                ' - infinito   -> es una HU que es demasiado grande para ser estimada, por lo que debera ser dividida y reorganizada ',
                ' - cero       -> significa que la HU ya fue realizada ',
                ' - coffee cup -> puede significar una actividad de esfuerzo minimo o simplemente la necesidad de realizar una pausa ',
                '',
                '- Trabajo previo',
                ' - es necesario indicar que indica cada numero antes de realizar el ejercicio, (horas, dias, esfuerzo, etc...)',
                ' - indicar que incluye y que no la HU, documentación, tests unitarios, tests de integración ',
                '',
                '- Dinamica',
                ' - se especifica todo lo que se va a estimar y se hacen las preguntas y respuestas pertinentes ',
                ' - se leen la historia de usuario y se vota por medio de la baraja ',
                ' - si no hay consenso se abre una breve discusión y se vuelve a votar, ',
                '  - si no vuelve a haber concenso se podra realizar un promedio o escoger un extremo ',
                ' - se repite el proceso hasta completar todas las HU ',
            ]),
        new Item('principlesAgile',
            [
                ' 1 - La maxima prioridad es satisfacer al cliente mediante la entrega temprana y continua de software de valor ',
                ' 2 - Los requisitos cambiantes son bienvenidos, estos se aprovechan para la ventaja competitiva del cliente ',
                ' 3 - Entrege software funcional, con frecuencia y a en la menor escala posible ',
                ' 4 - El negocio y los desarrolladores deben trabajar juntos, constatemente durante el proyecto ',
                ' 5 - Construir proyectos en torno a personas motivadas, y confie en ellas para hacer el trabajo ',
                ' 6 - El metodo más eficiente para transmitir información, siempre sera una conversación cara a cara ',
                ' 7 - Software que funciona es la medida principal del progreso ',
                ' 8 - Los procesos agiles promueven el desarrollo sostenible, todas las partes involucradas deberian ser constantes ',
                ' 9 - Atención continua a la excelencia tecnica, un buen diseño y la mejora continua ',
                '10 - La simplicidad es el arte de maximizar el trabajo no realizado es esencial ',
                '11 - Las mejores arquitecturas, requisitos y diseños surgen de equipos colaborativos y autoorganizados ',
                '12 - Regularmente, el equipo reflexiona en como volverse más efectivo, luego sintoniza y ajusta su comportamiento ',
            ]),
        new Item('spike',
            [
                '- Es un termino que viene desde Xtreme Programing y que esta rodeado por la incertidumbre ',
                '- Este es un elemento del backlog del producto, que tiene bastante incertidumbre tecnica o funcional, ',
                ' - y por lo tanto no se puede planificar o estimar ',
                '',
                '- <strong>Spike tecnico -></strong> son ocasiones donde no se conoce la tecnologia a usar o hace falta profundizar en ella, ',
                ' - buscar información o aprender de la documentación, con el fin de tomar deciones tecnicas ',
                '- <strong>Spike funcional -></strong> Hace falta conocer más sobre los requisitos y/o alcance, como que se va a incluir, ',
                ' - documentar escenarios, entrevistar a un experto del negocio, revision de codigo ',
            ])
    ];

export const ARQUITECTURAS =
    [
        new Item('definicion',
            [
                ' - Representa la estructura del sistema ',
                ' - Las responsabilidades de cada uno de sus partes ',
                ' - La organización y jerarquización de sus componentes ',
                ' - Las propiedades visibles externamente y las relaciones a nivel interno ',
                ' - Son independientes de las tecnologias, aunque su implementación pueda cambiar ligeramente entre una y otra ',
            ]),
        new Item('inicioArquitectura',
            [
                '- La arquitectura de software es especialmente importante ya que la estructura del proyecto tiene impacto directo sobre la capacidad de este ',
                '- Tambien afecta la satisfacción de atributos de calidad como el rendimiento y la mantenibilidad, además de otros ',
                '',
                '- Etapas: ',
                ' - Requerimientos -> captura, documentación y priorización de requisitos tanto funcionales como no funcionales ',
                ' - Diseño -> compleja y muy importante, aca se definen las estructuras del proyecto , uso de patrones, ',
                '  - se escogen tecnologias, todo para satisfacer de la mejor manera posible lo pactado en la etapa anterior ',
                ' - Documentación -> antes y durante del desarrollo es importante documentar el diseño del proyecto y el porque se tomaron ciertas decisiones, ',
                '  - esto con el fin de acelerar el entendimiento del proyecto y/o realizar cambios de manera más efectiva ',
                ' - Evaluación -> dado a su complejidad no esta mal visto revisar lo anteriormente hecho para encontrar posibles fallas y/o mejoras, ',
                '  - entre más temprano se encuentren los defectos, menos costo tendra su solución ',
                '',
                '- Rol de arquitecto: ',
                '- Las actividades descritas anteriormente son responsabiliad de un arquitecto que además de todo esto debe: ',
                ' - Conocer un amplio espectro de tecnologias ',
                ' - Excelentes habilidades de comunicación, tanto a nivel tecnico como a nivel formal e informal ',
                ' - Tener experiencia previa en el desarrollo de estas funciones ',
            ]),
        new Item('conceptosArquitectura',
            [
                '- Esto puede ser ambiguo, y se puede referir a multiples cosas, tales como: ',
                ' - Detalles de la implementación: Estructura de las carpetas y localización de componentes ',
                ' - Diseño de la implementación: Decisiciones como, Server side ó Client side rendering, BD SQL ó NoSQL, entre otras ',
                ' - Tecnologias: Rest ó GraphQl, Node con Express ó Java con Spring, y muchas más opciones ',
                ' - Diseño del sistema: Monolito ó Micro servicios ',
                ' - Infraestructura: Un host autoadministrado ó un Proveedeor en la nube ',
                '',
                '- Conceptos importantes, que hay que conocer previamente: ',
                ' - Client Server render ',
                ' - Que es una API y algunos de sus tipos (REST, SOAP, GraphQl), Protocolo HTTP y sus formatos (Json, XML)',
                ' - Modularización de codigo ',
                ' - Para ahondar en estos y otros temas, visita la publicación original ó mediante otras secciones propias ',
                '',
                '- ¿ Como es su infraestructura ?',
                ' - Monolitos ó Microservicios ',
                ' - Si son microservicios, uno de los grandes problemas sera, que la comunicación con las paginas web sera más complicada ',
                '  - Normalmente esto se puede resolver con una capa intermedia que sabe como y a cual micro servicio redireccionar cada petición ',
                ' - Balanceadores de carga: Cuando el trafico es demasiado, hay que crecer, y esto se puede hacer de manera vertical ó horizontal ',
                '  - Si hace horizontalmente (software), Es necesario que el trafico se reparta de manera equitativa, con ayuda de estos ',
                '',
                '- ¿ Donde vive su infraestructura ?',
                ' - Bajo su propia administración: Permitiendo un control total sobre sus servicios, pero requiere tiempo, dinero y mantenimiento ',
                ' - En la nube: Tradicional, Elastico, Sin servidor ',
                '  - Tradicional: Se paga alguna configuración especifica, de acuerdo a las necesidades ',
                '  - Elastico: La capacidad del hardware crecera ó decrecera de acuerdo a la demanda, tambien puede ser vertical ó horizontalmente ',
                '  - Sin Servidor: Esta opción solo es usada bajo demanda, y solo se paga lo que se consuma, para volver a desaparecer ',
                '',
                '- Organización de las carpetas ',
                ' - Capas: divide funciones y responsabilidades en carpetas relacionadas y restringe cuanto y quienes se conocen entre si ',
                ' - MVC: Modelo-Vista-Controlador, funciona como otra perspectiva de las capas, además de que incluye una UI (interfaz de usuario) ',
                '',
                '- Por lo tanto, una arquitectura puede ser una de estas secciones ó una combinación, todo <strong>depende</strong> de que se necesite '
            ]),
        new Item('principiosArquitecturas',
            [
                '- Cualquier programador con cierto recorrido conoce el nombre de Robert Martin o su libro acerca de Clean Code',
                '',
                '- Clean Code -> buenas practicas de programación como: ',
                ' - codigo autocomentado ',
                ' - testing unitario y de integración ',
                ' - estructura comprensible ',
                ' - que implemente los principios SOLID ',
                '',
                '- Cohesion y Acoplamiento, a nivel de arquitectura',
                '',
                '- Cohesion: ',
                ' - Principio de equivalencia al Lanzar/Reutilizar -> esto nos dice que los componentes debe ser desplegados ',
                '  - de manera independiente sin afectar a los demás ',
                ' - Principio de cierre comun -> es la apliación de la S de SOLID a nivel de paquetes, donde se agrupan clases ',
                '  - que puedan cambiar por motivos en comun, todas en un mismo lugar ',
                ' - Principio común de reutilización -> evitar la dependencia de componentes que no se necesiten ',
                '  - para que solo se use lo realmente necesario',
                '',
                '- Conseguir el cumplimiento de estos 3 principios al mismo tiempo es dificil, por lo que se suele, ',
                ' - sacrificar alguno en mayor o menor medida ',
                '',
                '- Acoplamiento: ',
                ' - Principio de dependencias acíclicas -> cuando un cambio significa que se deben modificar más componentes, ',
                '  - y esto a su vez desencadena más cambios en el componente inicial, la estabilidad del sistema se ve comprometida ',
                ' - Principio de dependencias estables -> todo sistema tiene la tendencia natural de cambiar y evolucionar, ',
                '  - por lo que componentes volatiles deberian depender de componentes más estables pero no muy dificiles de cambiar ',
                ' - Principio de abstracciones estables -> los componentes estables que tienen poca variación deberian contar con ',
                '  - interfaces y clases abstractas, de esta manera es más extensible, sin tantas afectaciones en general ',
                '',
                '- Una Arquitectura limpia tambien cumple las siguientes caracteristicas: ',
                ' - Son independientes de los frameworks en la mayor medida posible, ya que estos son herramientas y no obligaciones ',
                ' - La logica de la aplicación es testeable y no depende de otras partes para esto ',
                ' - La interfaz grafica depende de nuestra aplicación, no al contrario, los cambios en esta solo son relevantes para los usuarios ',
                ' - La capa de persistencia, es agnostica, por lo que nuestra aplicación es minimamente afectada por la BD que este usando ',
                ' - Los cambios externos, no deben afectar a los componentes internos ',
                '',
                '- Partes de una arquitectura limpia (de mas interna a externa) ',
                ' - Entidades -> continen la logica de nuestra aplicación y solo deben cambiar si estrictamente necesario ',
                ' - Casos de uso -> reglas de negocio que son variables de acuerdo a las condiciones que se den ',
                ' - Adaptadores -> estas interfaces son las encargas de transformar los datos de capas internas, a los usados por las más externas ',
                ' - Frameworks -> es la capa más externa, donde van los detalles, como las tecnologias usadas, frameworks, bases de datos, etc...',
                '',
                '- Definición de fronteras',
                ' - Es una separación acerca que de puede y que no puede hacer un componente, para evitar acoplamientos indeseados entre componentes ',
                ' - Un ejemplo de esto es, de quien es la responsabilidad de guardar la información, de la logica de negocio o de la base de datos ',
                ' - Esto nos ayuda a pensar nuestra aplicación como una serie de elementos intercambiables, con minimas afectaciones en los demás ',
                ' - Hacer esto es laborioso y tiene un nivel de complejidad y esfuerzo alto, por lo que en ciertos casos solo se hace de manera parcial ',
            ]),
        new Item('arquitecturasLimpias',
            [
                'Frameworks & Drivers     Interface Adapters    Aplication Rules    Enterprise rules ',
                ' Servicios                                                                          ',
                ' Bases de datos           Controladores                                             ',
                ' Web                -->   Puertas de enlace --> Casos de uso   -->  Entidades       ',
                ' Interfaz de usuario      Presentación                                              ',
                ' Interfaces externas                                                                ',
                'De + externo --> a + interno                                                        ',
            ]),
        new Item('capas',
            [
                ' - Se basa en la distribución de roles y responsabilidades de forma jerarquica en cada capa ',
                ' - Puede tener n - capas, generalmente son 3, de la cual se desprende MVC ',
                ' - La abstracción se mejora al definir la responsabilidad de cada capa ',
                ' - Se aumenta la reutilización, al tener componentes especializados ',
                ' - El desacople y la integración mejoran como resultado de una adecuada abstracción y definición de responsabilidades ',
                ' - Con un alto grado de abstracción se pueden aislar ciertas capas y hacerlas independientes de las tecnologias ',
                ' - Los cambios tienen bajo impacto y la matenibilidad es más eficiente de hacer ',
            ]),
        new Item('cliente',
            [
                ' - Existen 3 elementos principales y es una de las arquitecturas más usadas debido a su simplicidad ',
                '',
                ' Servidor -> encargado de responder las peticiones, gestionar la concurrencia y la persistencia de los datos ',
                ' Red -> medio para la comunicación entre ambas partes ',
                ' Cliente -> Dispositivos que hacen solicitudes, para crear/manipular/eliminar información ',
            ]),
        new Item('intermediario',
            [
                ' - Un componente central maneja diferentes sistemas distribuidos coordinando las respuestas ',
                ' - Los clientes solicitan el intermediario y este a su vez solicita los servicios expuestos indicados ',
            ]),
        new Item('servicios',
            [
                ' - Se pasa de un nucleo central y robusto a diferentes partes más pequeñas y ligeras ',
                ' - Las partes se intercomunican entre si y funcionan de manera separada, aumentando la tolerancia a fallos ',
                ' - Los servicios pueden ser independientes de las tecnologias, además de que se pueden subdividir tambien ',
                ' - Tambien se pueden escalar de manera individual significando una mejora en el uso de recursos ',
            ]),
        new Item('hexagonal',
            [
                ' - Aisla el dominio de las tecnologias, permitiendo que los cambios entre tecnologias sean superfluos o minimos ',
                ' - La comunicación entre componentes internos/llamados externos se da por medio de puertos(interfaces) ',
                ' - Cualquier dispositivo/usuario/sistema podra consultar de forma homogonea la información y esta sera consistente ',
                ' - Las capas que se hayan definido son idependientes entre si, sin estar totalmente aisladas ',
                ' - Hay una definición clara de responsabilidades, permitiendo hacer testing más facilmente ',
                ' - El termino hexagonal solo se da para resaltar la naturaleza similar de los puertos, no la cantidad de estos ',
            ]),
        new Item('noHexagonal',
            [
                '- Este modelo es una buena propuesta donde se circunscriben buenas practicas ya conocidas',
                '- En el sentido estricto de la palabra el desacoplamiento jamas sera mal visto en el desarrollo de software, ',
                ' - pero tomar conceptos ya existentes y renombrarlos de manera pretenciosa no los hace nuevos ',
                '',
                '- La arquitectura hexagonal no esta totalmente pensada desde cero, toma conceptos de otras arquitecturas como: ',
                ' - Arquitectura a capas -> La separación de capas con funcionalidades especificas y que estas solo conozcan a sus vecinos adyacentes ',
                ' - Arquitectura MVC -> La importancia de separar estrictamente la presentación de los datos, la logica del negocio, ',
                '  - y la logica de control que efectua la función de intermediario',
                ' - Pipes y Filters -> Las tranformacion de los datos no pueden depender del estado interno, estas deben ser congruentes en todo momento ',
                '',
                '- El hexagono que no lo es -> El uso de puertos y adaptadores no solo se limita a un hexagono (6 lados), ',
                ' - es estrictamente dependiente de nuestras necesidades; persistencia, autenticación, visualizacion, archivos, web, etc...',
                '',
                '- Cumple los principios SOLID, pero estos ya existian desde antes ',
            ]),
        new Item('mvc',
            [
                '- Es una de las aquitecturas más conocidas, debido a su simpleza y a su enfasis de separar la visualización de los datos, de estos ',
                '- Esta separación de funciones, nos permite tener un menor acoplamiento y mejorar el mantenimiento ',
                '',
                '- Partes: ',
                ' - Modelo -> maneja los datos y la logica del negocio',
                ' - Vista -> Se encarga de la interacción con el usuario y la presentación de los datos ',
                ' - Controlador -> Enruta los comandos entre la vista y el modelo ',
                '',
                '- Anteriormente esta arquitectura solo se consideraba en el lado del servidor, pero frameworks como Angular han demostrado lo contrario',
                '- Esta adaptación para la web, se ha dado con ciertas diferencias ya que todos los conceptos no son totalmente aplicables '
            ]),
        new Item('mvp-mvc',
            [
                '- Este patron es una derivación de MVC y es ampliamentes usado para construir aplicaciones en Android',
                '',
                '- Principales diferencias: ',
                '',
                '- La principal diferencia entre MVP & MVC es que aca el presentador además de comunicar la vista y modelo, ',
                ' - contiene toda la logica de la presentación y en algunos casos logica simple de negocio ',
                '- Tambien hay diferencias como que en MVC el modelo puede notificar directamente a la vista de los cambios, ',
                ' - en MVP el modelo y la vista no se conocen, solo el presentador ejerce la función de "puente" entre ambos ',
                '- En MVC la vista tiene algo de logica para entender la comunicación con el modelo, ',
                ' - pero en el MVP esta es totalmente "estupida", solo se encarga de mostrar lo que se le indique',
            ]),
        new Item('otrasArquitecturas',
            [
                ' - Bus de Eventos -> Una fuente emite eventos donde un bus los direcciona a los receptores indicados ',
                ' - Tuberia -> Es un flujo donde los datos son transformados a medida que van desde su origen hasta su destino ',
            ]),
        new Item('monolitos',
            [
                '  Caracteristica                 MONOLITO                        MICROSERVICIOS                         MICROLITOS         ',
                ' ',
                ' Separación de            Acoplamiento alto y mayor        Entregadas por la plataforma          Acoplamiento alto y mayor ',
                ' funciones tecnica        dependencia del framework        usada, reduce el acoplamiento         dependencia del framework ',
                ' ',
                ' Latencia                 Casi nula                        Puede ser alta                        casi nula ',
                ' ',
                ' Consistencia             Transaccional                    Eventual, requiere más atención       Eventual ',
                ' ',
                ' Evolución                Complicada por proceso           Sencilla por proceso                  Sencilla ',
                ' ',
                ' Especialización          Alta variedad de                 Alta especialización,                 Alta especialización,    ',
                ' de los equipos           conocimientos                    conocimiento del negocio              conocimiento del negocio ',
                ' ',
                ' Automatización           Pocos despliegues                Muchos despliegues                    pocos despliegues ',
                ' ',
                ' Tamaño                   Grande                           Pequeño                               Pequeño ',
                ' ',
                ' Observalidad             Relativamente facil              Más complicada                        Punto intermedio ',
                ' ',
                ' Monitarización           Complicado separar               Sencillez para identificar            Sencillez para identificar ',
                ' tecnica                  los problemas                    problemas de rendimiento              problemas de rendimiento ',
            ]),
    ];

export const CALIDAD =
    [
        new Item('artesanos',
            [
                '- Se puede considerar el siguiente nivel del desarrollo profesional, no solo mejorando nosotros mismo, sino a los demás ',
                '- Los 4 principios que este expone son: ',
                '',
                '- No sólo software que funciona, <strong>SINO</strong> también software bien diseñado',
                '- No sólo responder al cambio, <strong>SINO</strong> también agregar valor constantemente',
                '- No sólo individuos e interacciones, <strong>SINO</strong> también una comunidad de profesionales',
                '- No sólo colaboración con el cliente, <strong>SINO</strong> también asociaciones productivas',
            ]),
        new Item('metricas',
            [
                '- Además de revelar el desempeño del equipo de desarrollo, puede ser indicativo de la efectividad del equipo ',
                '- Metricas de productividad ',
                ' - Tiempo de entrega -> tiempo que se tarda de inicio a fin para entregar un proyecto ',
                ' - Cantidad de codigo -> lineas de codigo de la aplicación, esto puede ser un indicativo de la productividad, ',
                '   - más no de la calidad ',
                ' - Trabajo en curso -> trabajo empezado y que se compara con lo anteriormente hecho para tener una idea del progreso ',
                ' - Velocidad agil -> basandose en los sprints previos y cuantos puntos se han hecho, se puede estimar el proximo sprint ',
                ' - Tasa de exito -> calcula el porcentaje de exito del sprint, esto no significa necesariamente completar los puntos, ',
                '   - pero si las tareas del sprint ',
                ' - Numero de versiones -> los equipos agiles dan prioridad a las nuevas versiones con nuevas caracteristicas que den valor ',
                '',
                '- Metricas de rendimiento ',
                ' - Rendimiento -> cantidad de unidades que procesa un sistema en un periodo de tiempo ',
                ' - Tiempo de respuesta -> tiempo que se tarda en responder a una consulta ',
                ' - Fiabilidad y disponibilidad -> capacidad del software para cumplir con sus especificaciones ',
                '',
                '- Metricas de defectos ',
                ' - Cobertura de codigo -> proporcion del codigo que cubren las pruebas en relación a toda su extension ',
                ' - Deteccion de defectos ->  es un porcentaje calculado entre los defectos encontrados antes y despues del lanzamiento ',
                ' - Deuda tecnica -> es el costo de ignorar problemas que a la larga se podran convertir en errores ',
                ' - Vulnerabilidades de seguridad -> entre menos brechas y defectos se encuentren, más seguro sera la aplicación ',
                ' - Incidentes de seguridad -> recuento de las veces en que una aplicación fue vulnerada y la gravedad del ataque ',
                '',
                '- Metricas de usabilidad ',
                ' - UX -> suelen ser cualitativas e incluyen las respuestas objetivas y subjetivas del usuario ',
                ' - Usabilidad -> mide que tan bien el software permite alcanzar sus objetivos ',
                ' - Net Promoter Score -> es la voluntad de un cliente para recomendar la aplicación a otros ',
            ]),
        new Item('metricasEnCodigo',
            [
                '- Aplicar estas metricas suele ser un tema complejo, ya que estas dependen de las necesidades especificas de la aplicación ',
                '- Pero esto trae grandes beneficios para las aplicaciones al permitir conocer el estado actual y las acciones para mejorar nuestro codigo ',
                '',
                ' - Acoplamiento -> todo modulo debe ser lo suficientemente independiente para ser modificado y afectar en lo minimo posible a los demás ',
                '  - demasiado acoplamiento significa que esto conllevara a efectos en cascada no deseados al realizar modificaciones en el codigo ',
                '',
                ' - Cohesion -> es el grado de relación entre las partes, y va muy de la mano con el principio de responsabilidad unica ',
                '  - un codigo poco integrado se vuelve complejo, dificil de mantener y poco reutilizable ',
                '',
                ' - Complejidad -> un algoritmo debe ser eficaz y facil de entender, de esta se diferencia 2 tipos de complejidad ',
                '  - Complejidad Cognitiva -> que es la dificultad para entender intuitivamente el codigo ',
                '  - Complejidad Ciclomatica -> que es la dificultad para probar determinado segmento de codigo ',
                '',
                ' - Code Churn -> frecuencia con que altera el codigo a traves del tiempo, a mayor numero de modificaciones, más posibilidad de error ',
                '',
                ' - Cobertura -> porcentaje de codigo cubierto por las pruebas, a mayor cobertura, menor es la posibilidad de defectos ',
                '',
                ' - Codigo muerto -> es codigo que nunca es ejecutado, no siempre es facil de encontrar y no hay metodos infalibles para esto ',
                '',
                ' - Duplicación -> este codigo es producto del desconocimiento general del proyecto, replicando codigo que ya existe ',
            ]),
        new Item('cleanCode',
            [
                '- La calidad de codigo es un estandar que siempre se debe perseguir, hasta el codigo más limpio puede verse afectado por las malas practicas ',
                '- El proceso de degradación en todo proyecto es inevitable, más no incontrolable ',
                '- Los parches pueden ser reparaciones o adiciones rapidas y funcionales, sin embargo puedan estar en contravia directa de la calidad del codigo ',
                '',
                '- Para soluciones limpias y bien estructuradas se deberian seguir los siguientes pasos: ',
                '  - Analisis de caracateristicas -> toda nueva funcionalidad debe ser analizada e implementada de manera que, ',
                '    - el mayor numero de inquietudes este resuelto antes de iniciar la solución ',
                '  - Analisis del codigo base -> sabiendo la solución se debe analizar el codigo base para causar el menor impacto posible, ',
                '    - para tener claro que se puede modificar, reutilizar y que se debe crear nuevo ',
                '  - Desarrollo y refactorización -> no solo es desarrollar nuevos componentes y modificar los existentes, ',
                '    - tambien puede haber lugar para refactorizaciones, evitando la degradación del codigo ',
                '',
                '- Si estos pasos se realizan de manera adecuada y se mantiene la calidad del codigo en la mente, ',
                ' - la degeneración de nuestro codigo se podra manejar en terminos aceptables ',
            ]),
        new Item('costOfQuality',
            [
                '- En un nivel operacional las tecnicas de gestión de calidad deben identificar desperdicios, resolver problemas y optimizar procesos ',
                '- Generalmente enfocado a la prevención, pero tambien enfocado a la solución reactiva ',
                '',
                '- Costos libres de errores -> no tienen relación con la planificación, control, correción y mejora de la calidad, ',
                ' - considenrando que todo salga bien ',
                '- Costos de la calidad -> relacionados a los problemas encontrados, estos pueden desaparecer si el proceso fuera libre de errores ',
                '- Costos de conformidad -> asociados a prevención y evaluación de la conformidad con los requisitos ',
                '- Costos de NO conformidad -> han de ver con las fallas ya sean internas y/o externas no detectadas y que terminan afectando al cliente ',
            ]),
        new Item('qualityGates',
            [
                '- Son politicas de calidad de las organizaciones, para cumplir con el objetivo de realizar un nuevo despliegue ',
                '- Suelen ser politicas para garantizar la calidad, fiabilidad, y reducción de errores, facilitando aspectos como el CD/CI',
                '- Estos requisitos pueden variar y ser más flexibles o más estrictos de acuerdo a las necesidades de cada proyecto ',
                '',
                '- Algunas politicas de calidad comunes: ',
                ' - Cobertura -> Este porcentaje indica cuanto del codigo de producción esta cobijado mediantes tests unitarios o de integración ',
                ' - Duplicación -> Las lineas duplicadas no solo violan el principio de DRY, si no que dificultan directamente la mantenibilidad ',
                ' - Fiabilidad -> Directamente relacionada con la cantidad de bugs encontrados y que tan graves son ',
                ' - Vulnerabilidades -> Riesgos de seguridad potenciales y especificos para cada lenguaje ',
                ' - Deuda tecnica -> Pequeños errores, omisiones, falta de tests, codigo mal estructurado, soluciones desprolijas, que poco a poco van sumando ',
                '',
                '- Valores generales (SonarQube) ',
                '  Cobertura<strong> >=80%</strong>   Duplicación<strong> <=3%</strong>   Fiabilidad <strong>A</strong>   Vulnerabilidades <strong>A</strong>    Deuda tecnica<strong> <=5%</strong> '
            ]),
        new Item('qualityMetrics',
            [
                '- Casi todas esta metricas varian en cuanto al lenguaje en el que se apliquen, haciendo que sean congruentes entre si, más no iguales ',
                '<strong>- Complejidad ciclomatica -></strong> Esta se calcula en base a los caminos que se puedan dar debido al uso y el orden de las estructuras de control ',
                '<strong>- Complejidad ciclomatica -></strong> Relacionado a la dificultad para entender el flujo de control del codigo, usando un modelo matematico especifico ',
                '<strong>- Duplicación -></strong> Lineas de codigo duplicado, ignorando la sangria y el formato, tambien aplica para archivos, metodos y clases',
                '<strong>- Mantenibilidad -></strong> Metrica relacionada directamente con la cantidad y la dificultad de los code smells presentes ',
                '<strong>- Fiabilidad -></strong> Cantidad de errores y/o bugs presentes, la calificación dependera de que tantos hallan y que tan criticos sean ',
                '<strong>- Seguridad -></strong> Vulnerabilidades encontradas, y/o problemas del lenguaje ',
                '<strong>- Tamaño -></strong> Clases muy grandes pueden conllevar a smell codes y problemas de mantenibilidad, incluyendo los comentarios ',
                '<strong>- Pruebas y cobertura -></strong> Además de evaluar la cantidad y el exito de las pruebas unitarias, se evaluara cuantos caminos estan cubiertos ',
            ])
    ];

export const META_CARACTERISTICAS =
    [
        new Item('metaDatos',
            [
                '- Literalmente son datos de los datos ',
                '- Estan estructurados para describir caracteristicas de los datos como cantidad y contenido ',
                '- Actualmente se usan para gestionar y recolectar información de interes ',
                '- Facilitan la estandarización y la gestion de los cambios ',
                '- Pueden facilitar el desarrollo al tener un menor cambio de costo entre plataformas ',
            ]),
        new Item('metaClase',
            [
                '- Normalmente se considera una clase de clases ',
                '- Es una caracteristica propia del sistema por lo que el usuario jamas la llegara a ver ',
                '- Esta caracteristica permite añadir y modificar comportamientos del programa, ',
                ' - Sin llegarlo a afectar directamente ',
                '- Este concepto es ampliamente usado para realizar testing, por medio de anotaciones, dobles y otros conceptos, ',
                ' - Un ejemplo de esto son Junit y Mockito, frameworks para realizar pruebas en java, que se basan en estas caracteristica ',
            ]),
        new Item('reflexion',
            [
                '- Capacidad de un codigo para observar un programa para observarse y cambiar su estructura a alto nivel ',
                '- Puede ser dinamica o estatica, y es más comun en los lenguajes que usan maquinas virtuales para ejecutarse, como JAVA ',
                '- Cuando el codigo fuente se compila normalmente pierde su estructura al pasar a un lenguaje de un nivel más bajo, pero ',
                ' - si este sistema permite la reflexión esta estructura se preserva como metadatos ',
                '- La reflexión permite conseguir un codigo aun más flexible, a cambio de perder rendimiento ',
                '',
                '- Esta caracteristica permite realizar acciones como: ',
                ' - Descubrir y modificar secciones de codigo en tiempo de ejecución ',
                ' - Evaluar una cadena como si fuera una sentencia de código fuente en tiempo de ejecución ',
                ' - Flexibilizar el tipado en lenguajes fuertemente tipados ',
            ]),
        new Item('asserts',
            [
                '- Todo codigo contiene algun tipo de restriccion, si estas no se documentan bien pueden inducir a errores ',
                '- La documentación extensiva tampoco es una buena idea ya que modificar codigo conlleva a modificar la documentación tambien ',
                '- Las aserciones son predicados que se evaluan como ciertos o falsos en tiempo de ejecución ',
                '- Estas comprobaciones favorecen el proceso de detectar errores y garantizar las condiciones de funcionamiento ',
                '- Son una opción a considerar si se quiere evitar la programación defensiva ',
                '- Existen diferentes librerias para su implementanción pero se desaconseja el uso de los "asserts" propios de Java en entornos productivos '
            ]),
        new Item('excepciones',
            [
                '- Es la indicación de que se produjo un error en la ejecución del programa ',
                '- Estas pueden ser situaciones esperadas, inesperadas e incluso pueden se provocadas ',
                '- Las exepciones son objetos especializados con toda la información del error ',
                '- Estos objetos pueden ser atrapados por la instrucción try-catch y evitar que se detenga el programa, ',
                ' - o simplemente ser lanzados y terminar el programa de manera abrupta ',
                '- El manejo de excepciones es fundamental para conseguir programas robustos y confiables, por esto es ideal definir, ',
                ' - responsabilidades acerca de quienes pueden lanzar excepciones y quienes pueden atraparlas ',
            ]),
        new Item('cache',
            [
                '- La cache existe para diminuir la latencia e incrementar el rendimiento en operaciones costosas ',
                '- Esta es recomendable usarla en los casos donde el rendimiento no es el esperado, ',
                '  - o si son recursos poco mutables y muy solicitados ',
                '- Esto significa que el sistema soporte operaciones de datos con consistencia eventual ',
                '',
                '- Tipos de cache: ',
                '- Local -> almacenamiento en memoria, ideal cuando la información es poca, predecible y poco mutable ',
                '  - esto puede conllevar a inconsistencias de los datos si hay diferentes instancias y problemas de rendimiento en la ejecución ',
                '- Centralizado -> se almacena de manera externa y este siempre esta en concordancia con las demás ',
                '  - al ser externa depende directamente de la latencia del medio en que este, y de su disponibilidad, además de su manejo ',
                '- Distribuida -> esta particionada y administrada por diferentes nodos que se comunican entre si ',
                '  - su manejo implica más complejidad ',
            ]),
        new Item('hilos',
            [
                '- Un hilo es una secuencia de control dentro de un proceso que ejecuta sus procesos de forma independiente ',
                '- Un proceso es una acción continua o serie de cambios, tareas que ocurren de manera definida ',
                '- El ciclo de vida de un proceso es el siguiente: ',
                '  Creacion -> Listo &larr;&rarr; Ejecución -> Terminado',
                '                            &darr;                     ',
                '                &uarr;	Bloqueado                       ',
            ]),
        new Item('argumentos',
            [
                '- En java los argumentos siempre se pasan por valor, esto significa que siempre se pasa el valor de la variable, ',
                ' - y no la referencia en memoria de la variable, por lo que siempre es una copia del original ',
                '- Las copias se pueden hacer del valor para datos primitivos, o una copia con la dirección de memoria si es un objeto ',
                '- Esto no modifica la variable original, ya sea un tipo primitivo o un objeto ',
                '- Algunas clases son inmutables por lo que los objetos originales nunca son modificados, ',
                ' - solo se devuelve una nueva instancia con los cambios en vez de la original ',
            ]),
        new Item('concurrenciaParalelismo',
            [
                '- Concunrrencia -> es la capacidad de realizar muchas tareas a la vez, con ó sin una secuencia especifica ',
                '- Paralelismo -> es la capacidad de ejecutar 2 ó más acciones de manera simultanea ',
                '',
                '- Para implementar concurrencia se recomienda usar Hilos, en cambio ',
                '- Para implementar paralelismos se optara por usar Procesos ',
                '',
                '- Aunque la programación concurrente tiene problemas en cuanto a la coherencia de los datos, ',
                ' - es bastante util para resolver problemas de rendimiento ',
                '- En cambio si el orden de las tareas es importante y tanto el inicio como el fin tambien, ',
                ' - la programación paralela es mejor debido a su aislamiento inherente ',
            ]),
        new Item('ortogonalidad',
            [
                '- Basicamente significa que cuando hacemos una accion esta no debe modificar lo que no le respecta ',
                '- Tambien se puede interpretar de manera que cuando se ejecute una instrucción solo se ejecute esta y nada más ',
            ]),
        new Item('boilerPlate',
            [
                '- Este hace referencia a codigo repetitivo que no siempre es util, pero si requerido, aun aveces cuando no vaya a ser usado ',
                '- Esto tambien aplica para fragmentos de codigo propios, ya que se reutiliza codigo, con solo copiar y pegar ',
                '- El boiler plate es diferente del scafolding, ya que este primero es más de copiar y pegar, ',
                ' - en cambio el segundo esta relacionado con mantener estandares y formas de uso ',
                '- Un ejemplo de esto es el uso de getters y setters en POO para modificar los objetos, ',
                ' - aunque estos cambian de acuerdo al objeto, su función y su forma son casi siempre identicas ',
            ]),
        new Item('recursividad',
            [
                '- Es una tecnica de programación para ejecutar codigo un cierto numero de veces ',
                '- Esto es posible a la caracteristica de cualquier lenguaje de permitir que los metodos se llamen a si mismas ',
                '- La recursividad tiene que tener un condición de salida, de lo contrario se convertira, ',
                ' - en una pila de llamados infinita a si mismo ',
                '- Es una alternativa y en ocasiones más eficiente de realizar tareas que requieren ser repetitivas ',
                '',
                '- A continuación un ejemplo con la función factorial ',
                '   public int factorial(int n) { ',
                '       return (n == 0) ? 1 : n * factorial(n - 1);',
                '   }',
            ]),
        new Item('backtracing',
            [
                '- Es una estrategia para encontrar soluciones que satisfagan restricciones ',
                '- De una manera basica esto se asemeja a un recorrido en profundidad dentro de un grafo que no contega ciclos ',
                '- Durante todo el recorrido se va construyendo la solución del problema, todo esto para que al final si se tiene exito, ',
                ' - todas estas soluciones parciales se junten y conformar una solución completa ',
                '- Si el recorrido no tiene exito y tampoco se puede completar, se eliminaran todos los elementos construidos previamente ',
                '- Este proceso suelen implementarse mediante algoritmos recursivos para evitar busquedas profundas, ',
                ' - y asi evitar desperdicio de recursos infructuosamente ',
                '- Tambien se pueden hacer optimizaciones donde se evalua el peso de las ramas o se acotan los caminos posibles ',
                ' - mediante subrutinas para podar el arbol y mejorar su eficiencia ',
                '- Esta estrategia es usada en los analisis sintacticos de los compiladores y en la inteligencia artificial, ',
                ' - dando lugar a nuevos algoritmos de busqueda como el A*',
            ]),
        new Item('rawTypes',
            [
                '- Hacen referencia al uso de tipos genericos, sin especificar el tipo a usar',
                '- Esto se debe a que versiones previas de Java no se tenia soporte para uso de Genericos, pero este debia seguir siendo retrocompatible ',
                '- Actualmente es posible usarlos, pero deben ser evitados ya que: ',
                ' - pueden sacar errores en tiempo de ejecución, que no esta presentes o pasan desapercibidos en tiempo de compilación ',
                ' - Su uso atenta en contra del codigo autocomentado además de la legibilidad y la mantenibilidad ',
                ' - Se necesitan casteos para su uso, consumiendo recursos extras para su uso ',
                '- Por Ejemplo: List es un raw type, mientras que List<String> es un tipo parametrizado '
            ]),
        new Item('memoryAndGarbage',
            [
                '- Una fuga de memoria es el deterioro gradual del rendimiento del sistema en el transcurso del tiempo, ',
                ' - como resultado del uso y de la fragmentacion de la memoria RAM del dispositivo',
                '- Esto se puede dar, debido a aplicaciones mal programadas o comportamientos inusuales del sistema',
                '',
                '- <strong>Recolección de basura</strong>',
                ' - Liberar estos bloques de memoria para evitar bloqueos, es una preocupación de los SO o los lenguajes propiamente ',
                ' - Esta limpieza constante de la memoria parece provenir del lenguaje Lisp y adaptado por algunos SO, ',
                '  - con el fin de detectar problemas antes de que los programas fallen ',
                ' - Algunos lenguajes como Java tambien lo proporcionan, siendo una gran ventaja para el programador, ',
                '  - ya que el desarrollador no debe preocuparse de un proceso que ocurre de manera silenciosa y constante ',
            ])
    ];

export const CONTENEDORES =
    [
        new Item('lxc',
            [
                '- Los contenedores de aplicaciones en linux buscaban mejorar la asignación de recursos a los procesos por medio de una interfaz de espacio de usuario ',
                '- Esto con el objetivo de mejorar mejorar el rendimiento de las maquinas virtuales y el uso de recursos de estas ',
                '- El uso de maquinas virtuales y el software de supervisor obligaban a tener un uso de recursos fijo que en ocasiones era desperdiciado ',
                '- En estos contenedores no hay emulación de hardware por lo que solo ejecutaba con lo que necesitaba obteniendolo directamente del host ',
                '- Pero los ambientes no estaban completamente aislados, por lo que compartir el mismo host podia conllevar problemas si habian aplicaciones similares ',
                '- Tambien se ha de tener en cuenta que este ambiente solo estaba disponible en un SO Linux como base, por lo que es poco portable ',
                '- Aunque Docker inicialmente implementaba lxc, este se modifico totalmente volviendose muy popular y hoy en dia es considerado un estandar en la industria del software ',
                '- Ya sea lxc, Docker o kubernetes, los contenedores solucionaron muchos problemas de compatibilidad facilitando el desarrollo en este y otros ambitos ',
            ]),
        new Item('docker',
            [
                '- Esta basado en el Kernel de Linux y su proposito es segregar los procesos de manera que sean independientes ',
                '- Reduce el consumo de recursos al solo tener lo necesario para ejecutar los procesos ',
                '- Desde su aparición las maquinas virtuales han perdido relevancia ',
                '- El uso de los contenedores y todos sus beneficios fue una gran revolución en el desarrollo del software ',
                '- Los contenedores son entornos de ejecución completos haciendolos independientes del sistema anfitrión ',
                '- Los servicios se pueden unir para generar aplicaciones de más complejidad y eficiencia ',
            ]),
        new Item('images',
            [
                '- Son los elementos necesarios para crear instancias de lo que se necesite ',
                '- Estas imagenes pueden ser oficiales ó personalizadas para nuestros requerimientos ',
                '- Existen repositorios en la nube donde se pueden descargar o guardar estas imagenes, uno de los principales es DockerHub ',
                '- Toda imagen tiene un tag asociado, para poder diferenciar las versiones entre si, por defecto este tag es latest ',
                '- Para descargar imagenes el comando es -> docker pull imagen:tag  (si no especifica el tag, se descargara la imagen con latest)',
                '- las imagenes se pueden personalizar de varias maneras: ',
                '  - Creando un contenedor a partir de una imagen base e instalar todo lo necesario manualmente, ',
                '  - y despues se hace un commit de el contenedor -> docker commit [id_container] [nombre_imagen] ',
                '',
                '  - Mediante un archivo DockerFile -> primero se crea un archivo llamado DockerFile sin ninguna extensión ',
                '  - cada comando de este archivo indica una capa, las cuales se van apilando entre si para construir algo más complejo ',
            ]),
        new Item('containers',
            [
                '- Son las instancias de las imagenes descargadas o creadas previamente ',
                '- docker ps -> contenedores ejecutandose ',
                '- docker ps -a -> todos los contenedores existentes, indifirentemente de su estado ',
                '- docker exec -> para ejecutar comandos dentro del contenedor, sin entrar en el ',
                '- docker start [nombre_contenedor]-> inicia el contenedor ',
                '- docker stop [nombre_contenedor]-> detiene el contenedor ',
                '- docker restart [nombre_contenedor]-> reinicia el contenedor ',
                '- docker rm [nombre_contenedor]-> elimina el contenedor ',
                '- para estos comandos tambien se puede usar las id de los contenedores ',
            ]),
        new Item('file',
            [
                '- FROM -> indica el SO base de la imagen ',
                '- COPY -> añade archivos del directorio actual a la imagen ',
                '- RUN -> ejecuta comandos dentro del contenedor necesarios para crear la imagen ',
                '- CMD -> ejecuta comandos directamente en la consola ',
                '- LABEL -> son etiquetas del proyecto para dar a conocer información, como licencias ',
                '- EXPOSE -> indica que puertos estaran abiertos en la imagen para que la aplicación pueda comunicarse ',
                '- ENV -> define las variables de entorno, sirve para ayudar en la configuración de la imagen ',
                '- ADD -> funciona igual que COPY pero se diferencia a la manera de extraer los archivos de sus ubicaciones ',
                '- ENTRYPOINT -> establece el comando principal de la imagen, suele ser el comando iniciador de la aplicación ',
                '- VOLUME -> es para indicar el directorio que siempre se mantendra aunque se eliminen los contenedores ',
                '  util para guardar archivos necesarios que necesita la aplicación y que pueden cambiar en cualquier momento ',
                '- USER -> este cambia el usuario del contenedor a uno diferente, el usuario por defecto suele ser root ',
                '- WORKDIR -> indica el directorio donde trabajara la aplicación, y se recomienda el uso de rutas absolutas para este ',
                '- ONBUILD -> son comandos que se ejecutaran una vez terminada la construcción de la imagen principal ',
            ]),
        new Item('volumes',
            [
                '- un volumen es un directorio o fichero que estara asociado a los contenedores, ',
                '- estos son independientes de los contenedores y no son afectados por la efimeridad de estos ',
                '',
                '- se crean añadiendo la opción -v al crear un contenedor ',
                ' - docker run -it --name contenedor -v /path imagen:tag bash',
                '',
                '- se pueden crear mediante volumenes o como simples directorios, por ejemplo: ',
                ' - docker run -it --name contenedor -v vol:/path imagen:tag bash',
                '',
                '- todo contenedor crea un volumen con un nombre aleatorio por defecto, estos se pueden consultar mediante 2 formas ',
                ' - docker inspect [nombre_contenedor] -> mostrando todas las caracteristicas del contenedor en cuestion ',
                ' - docker volume ls -> mostrando todos los contenedores existentes, pero sin sus asociaciones ',
            ]),
        new Item('network',
            [
                '- Cada contenedor de docker tiene una IP asociada, en base a la ip del Host',
                '- Existen 5 tipos de redes ',
                '',
                '- Bridge -> red por defecto de los contenedores cuando no se les especifica una ',
                '- Host -> el contenedor usara la misma IP del host en el que este ',
                '- None -> se le indica al contenedor que no tiene una red asignada ',
                '- Overlay -> crea multiples redes superpuestas permitiendo la comunicación de servicios en enjambre ',
                '- Macvlan -> permiten asignar una dirección MAC a un contenedor, apareciendo como un dispositivo fisico en la red ',
                '',
                '- docker network create --driver bridge [nombre_red] -> crea una nueva red, de tipo bridge ',
                ' - cada red creada creara una nueva subred ',
                '',
                '- a los contenedores se les puede especificar una red cuando estos se crean  ',
                ' - docker run -d -P --name [nombre_contenedor] --network [nombre_red] ',
                '',
                '- la red tambien se puede cambiar despues de que un contenedor es creado ',
                ' - docker network connect --link [nombre_contenedor]:[alias]  [nombre_red] [nombre_contenedor]',
            ]),
        new Item('compose',
            [
                '- Docker Compose permite simplificar y administrar los contenedores por medio de archivos YAML ',
                '- Esto permite conectar y administrar a los contenedores y sus puertos, volumenes, configuraciones, etc.. ',
                '- Se puede usar con Dockerfiles previamente creados, o especificar todo directamente en el archivo ',
            ]),
        new Item('kubernetes',
            [
                '- Es una plataforma de codigo abierto para administrar cargas de trabajo y servicios por medio de contenedore ',
                '- Es un proyecto liberado por Google en 2014 que ha crecido con la comunidad y sus buenas practicas ',
                '- Este orquesta la infraestructura redes y almacenamiento, sin intervención de los usuarios ',
                '- Esto ofrece la simplicidad de un PaaS y la flexibilidad de un IaaS ',
                '',
                '- Kubernetes no despliegua ni compila tu aplicación, eso se hacer por medio CI/CD ',
                '- No provee servicios de capa de aplicación como midleware, bases de datos, cache, mensajes ni monitoreo automatico ',
                '',
                '- Al usar contenedores se pueden tener las siguientes mejoras: ',
                ' - Mayor agilidad y velocidad de despliegue de aplicaciones ',
                ' - Consistencia en los entornos de desarrollo, producción y pruebas sin importar las caracteristicas de la maquina fisica ',
                ' - Posibilidad de Microservicios y sus ventajas',
                ' - Aislamiento de recursos y una mejor administración de estos ',
                '',
                '- El nombre de kubernetes proviene del griego y significa timonel, de ahi su logo '
            ])
    ];

export const FRAMEWORKS =
    [
        new Item('frameworks',
            [
                ' - Son marcos de trabajo con la finalidad de acelerar y aumentar la calidad del codigo desarrollado ',
                ' - Evitan perder tiempo desarrollando funciones que el propio entorno ya tiene ',
                ' - Aumentan la productividad y la reutilización de codigo ',
                ' - Existen infinidad de frameworks tanto para back como front, desarrollo movil, persistencia, etc... '
            ]),
        new Item('ioc',
            [
                ' - La inversion de control es la implementación del principio de Hollywood en la que se basan muchos frameworks para funcionar ',
                ' - El framework es quien toma el control de la ejecución del codigo del usuario modificando el ciclo de vida como tal ',
                ' - Permite añadir nuevas funciones prefabicadas sin tener que modificar el codigo por medio de la inyección de dependencias ',
            ]),
        new Item('iod',
            [
                ' - La inyección de dependencias Permite modificar y extender nuestro codigo mucho más facil ',
                ' - Solo es especificar que funcionalidades queremos añadir y estaran disponibles de manera transversal ',
                ' - El codigo modificado se vuelve más reutilizable, compacto y manejable '
            ]),
        new Item('scafolding',
            [
                '- Es la generación automatica de codigo funcional, archivos, carpetas, configuraciones, interfaces graficas, etc... ',
                '- Generalmente se basa en la creación de las operaciones CRUD, basandose en un modelo de datos previo ',
                '- Algunos frameworks pueden ayudar en este sentido, e incluso existen aplicaciones con este proposito ',
            ]),
    ];

export const HARDWARE =
    [
        new Item('escalamiento',
            [
                '- Capacidad de un software para crecer de acuerdo a la demanda ',
                '',
                ' -vertical -> la más facil de realizar pero la más costosa',
                ' -vertical -> esta depende directamente de la capacidad de la infraestructura',
                ' -vertical -> las fallas en la infraestructura pueden conllevar a errores colapsantes ',
                '',
                ' -horizontal -> esta es más dificil de realizar pero es practicamente ilimitada',
                ' -horizontal -> se basa en tener varios nodos trabajando en paralelo de manera coordinada ',
                ' -horizontal -> soporta el balanceo de cargas y tiene una disponibilidad muy alta ',
                ' -horizontal -> el mantenimiento se incrementa considerablemente',
            ]),
        new Item('cli',
            [
                '- Es una interfaz de usuario basada en texto ',
                '- Antes de la invención del mouse, la unica interacción posible con el Sistema Operativo era mediantes comandos ',
                '- Los comandos no son universales, algunos son reconocibles solo por aplicaciones ó Sistemas Operativos especificos ',
                '- Pueden funcionar con o sin argumentos, los argumentos son maneras de especificar detalles y/o configuraciones ',
                '- Son rapidas y más eficientes ya que no necesitan interfaces graficas para funcionar ',
                '- Tambien son más complejas de usar, ya que se basan en la memoria del usuario ',
            ]),
        new Item('virtualizacion',
            [
                '- Es un entorno virtual que funciona con su propia CPU, memoria, red, y almacenamiento, pero ',
                ' - que se crea dentro de un sistema de hardware fisico ',
                '- Esto se da mediante un software llamado hipervisor encargado de separar y gestionar los recursos ',
                ' - de la maquina real para que la VM pueda utilizarlos de manera adecuada ',
                '- Las VM estan aisladas del host, y este a su vez puede contener las VM que soporte ',
                '- Una VM permite que se ejecuten diferentes Sistemas Operativos dentro de la misma maquina ',
                '',
                '- Ventajas ',
                ' - Una ventaja es que permiten aprovechar mejor los recursos de una maquina que no se esten usando ',
                ' - Dado su aislamiento se puede ejecutar software que no es de confianza sin peligro de que dañe al host ',
            ]),
        new Item('nubeVSvirtualizacion',
            [
                '- Ambos conceptos hacen referencia a la creación de entornos utiles a partir de recursos abstractos, ',
                ' - bajos diferentes conceptos ',
                '- La virtualización nos permite esto teniendo recursos especificos y de manera fisica ',
                '- La nube es un entorno de TI que agrupa, extrae y comparte recursos ajustables en una red ',
                '',
                '                           Virtualización                    Nube                     ',
                '- Definición                 Tecnologia                   Metodologia                 ',
                '',
                '- Proposito               Multiples entornos,           Agrupar recursos              ',
                '                        un solo sistema fisico        Con alta disponibilidad         ',
                '',
                '- Uso                Entregar recursos especificos  Entregar variedad de recursos     ',
                '                         a usuarios especificos        con multiples fines            ',
                '',
                '- Configuración          Basado en imagenes            Basado en plantillas           ',
                '',
                '- Duracion                  largo plazo                  Mediano plazo                ',
                '',
                '- Escalabilidad               vertical                    horizontal                  ',
            ]),
        new Item('rendering',
            [
                '- Server-side -> esta funciona convirtiendo archivos estaticos HTML en información utilizable por el navegador ',
                ' - Este proceso no cuenta con un modo de cache, por lo que cada vez que se necesite, este sera pedido al servidor ',
                ' - Su velocidad no solo depende del servidor, si no de la optimización del sitio web, personas conectadas, etc.. ',
                ' - Generalmente cada vez que hay un cambio se vuelve a pedir todo el contenido y no solo lo que se modifico ',
                ' - El lado positivo de este metodo es el SEO ya que es mucho más eficiente y facil para los motores de busqueda ',
                ' - Este enfoque es ideal para contenido estatico, que no se requiera para una interactividad continua con el usuario ',
                '',
                '- Client-side -> esta forma funciona mediante Javascript que obtendra el documento basico de HTML, ',
                ' - y que despues ejecutara el resto del sitio usando al navegador ',
                '- Este enfoque es más reciente y es utilizado por las librerias y frameworks de Javascript como Vue y Angular ',
                '- Mediante esto el servidor solo se encarga de responder con los datos, el resto se hace en el navegador ',
                '- Las paginas se cargan más rapido ya que solo se modifica lo que se necesite y no todo el archivo ',
                '- Debido a que se necesitan todos los archivos para una carga correcta de la pagina, ',
                ' - la conexión a internet puede afectar la carga inicial ',
                '- Generalmente se requiere de varias a muchas dependencias de terceros, incluyendo los problemas que esto puede tener ',
            ]),
        new Item('modelOSI',
            [
                '- Es un modelo conceptual que permite la comunicación entre diversos sistemas usando un protocolo estandar ',
                '- Este consta de 7 capas abstractas apiladas verticalmente ',
                '',
                ' 7 Capa de aplicación -> interacción hombre-maquina donde las aplicaciones pueden acceder a servicios de red ',
                ' 6 Capa de presentación -> Garantiza que los datos tengan un formato utilizable, además se encriptan los datos si es necesario ',
                ' 5 Capa de sesión -> Mantiene las conexiones y es el responsable de controlar puertos y sesiones ',
                ' 4 Capa de transporte -> Transmite los datos mediante protocolos de transmision, incluidos TCP y UDP ',
                ' 3 Capa de red -> Decide la ruta fisica que seguiran los datos, ya sea en la misma o en otra red ',
                ' 2 Capa de enlace de datos -> Define el formato de los datos en la red, además de controlar errores de flujo ',
                ' 1 Capa fisica -> Transmite el flujo de bits sin procesar a traves del medio fisico, y que estos sepan diferenciar el 1 y el 0 ',
                '',
                '- Esta organización de capas permite una mejor depuración de errores, ',
                ' - a la vez que cada capa tiene una responsabilidades bien definidad a la hora de recibir o enviar información ',
            ]),
        new Item('monitoreo',
            [
                '- Es un software que nos permite monitorizar y descubrir problemas a nivel de aplicación que pueden ser optimizados ',
                '- Para esto, es necesario recoger y cuantificar valores como: ',
                ' - Errores de la apliación, especificando cuales y cuantas veces sucedieron ',
                ' - Tiempo de respuesta de la aplicación ',
                ' - Identificación de trazas lentas ',
                ' - Tiempo de ejecución de querys en la base de datos ',
                ' - Tiempo de respuesta de llamados externos ',
                '',
                '- Mediante esto es posible encontrar errores como: ',
                ' - Consultas a bases de datos que pueden ser optimizadas ',
                ' - Problemas con el Garbage Collector o la JVM ',
                ' - Manejo erroneo de problemas ',
            ]),
        new Item('vmVsContainers',
            [
                '                    <strong>Virtualización</strong>                                        <strong>Contenedores</strong>',
                '                                                                                                             ',
                '         - Reduce los costos asociados al hardware         - Requieren menos recursos y son más livianos     ',
                '          - al utilizar recursos desperdiciados                                                              ',
                '<strong>Pros</strong>                                                       - Son más portatiles e interoperables             ',
                '         - Menos espacio en equipos fisicos                                                                  ',
                '                                                           - Más eficientes y escalables                     ',
                '         - Aislamiento de las aplicaciones                                                                   ',
                '                                                           - Son más congruentes y simplifican el CD/CI      ',
                '                                                                                                             ',
                '         - Se encuentran limitados por los                 - No siempre tienen mejor rendimiento             ',
                '         - recursos del host                                                                                 ',
                '<strong>Contras</strong>                                                    - No esta 100% estandarizado, entre provedores    ',
                '         - Arranque lento, dependiente del host                                                              ',
                '                                                           - Las aplicaciones graficas no funcionan bien     ',
                '         - Pueden ser infectadas por el host                                                                 ',
            ]),
        new Item('falseSharing',
            [
                '- Suele suceder cuando varias aplicaciones intentan acceder a la misma region de memoria logica y ',   
                ' - cada programa/subprograma a su vez ha almacenado un copia de este valor, en su propio cache',
                '- Cada vez que este sufre alguna modificación, esto hace que las demás partes sean invalidas y deban consultar el valor actual ',
                '- El problema del "falso compartir", radica cuando los datos afectados por un programa, no son usados por los otros; ',
                ' - si no que estan situados en la misma linea del cache',
                '- Obligando a realizar consultas innecesarias en memoria, que afectan el rendimiento',
                '- Este es un problema dificil de detectar, debido a que es inherente a la arquitectura de los componentes fisicos ',
                '- Esto tambien suele suceder cuando se paralelizan procesos, invalidando bloques comunes constatemente, aunque no este compartidos ',
                '',
                '- Suelen haber contramedidas, desde alto nivel hasta bajo nivel',
                ' - Colocar espacios en blancos, antes o depues de los datos, a manera de que queden en lineas de cache separadas ',
                ' - Modificar la velocidad de lectura/escritura del cache para reducir la periocidad ',
                ' - Cambiar la administración del cache del componente fisico ',
                ' - Alterar como el SO administra el uso compartido',
            ]
        )
    ];

export const WEB =
    [
        new Item('spa',
            [
                '- Es una aplicación web donde todo el contenido se muestra en una sola sin regargar el navegador ',
                '- Los componentes son segmentos individuales de HTML que juntos dan la impresión de unidad ',
                '- Este tipo de paginas tambien maneja las url para cambiar entre vistas ',
                '- La transición entre las paginas es fluida y el rendimiento es mayor en general ',
                '- Los frameworks actuales trabajan de esta manera ',
            ]),
        new Item('pwa',
            [
                '- Estas aplicaciones nacen de paginas web normales para parecerse a aplicaciones nativas de telefonos moviles ',
                '  - NO se necesita descargar nada desde una tienda de aplicaciones, solo tener acceso a un navegador con internet ',
                '  - Aunque necesitan internet para actualizaciones de la información, tambien puede funcionar sin este ',
                '  - Bastante acorde con el enfoque mobile-first, que le da prioridad al movil que al escritorio ',
            ]),
        new Item('seo',
            [
                '- La indexación de contenido es una gran herramienta para buscar lo que se necesita ',
                '- El contenido de calidad es una de las mejores formas de aumentar el trafico del sitio web ',
                '- La accesibilidad al contenido y la experiencia del usuario tambien son importantes ',
                '- Saber como funcionan los motores de busqueda, permite optimizar el sitio para que sea más "visible" para estos ',
            ]),
        new Item('espacio',
            [
                '- Es el espacio que se encuentra alrededor del objeto en cuestión, bastante util para crear diseños simples pero atractivos ',
                '- El uso del espacio positivo y negativo puede dar pie a ilustraciones con mensajes directos pero sutiles ',
                '- Un gran artista sabe manejar estos conceptos, e imprimirles su toque unico, como en el articulo fuente se denota ',
            ]),
        new Item('diseno',
            [
                '- El diseño grafico es importante en la programación debido a que este sera la cara visible de tu producto ',
                '- Es importante contestar respuestas previamente como: ¿ cual es tu objetivo ? & ¿ cual es tu producto ? ',
                '- NO descuides el color, tener una paleta de colores es tener una identidad ',
                '- Además de la identidad es importante saberlos combinar y tener un buen contraste y legibilidad entre si ',
                '- El uso de las imagenes y las fuentes tipograficas son más importantes de lo que parecen ',
            ]),
        new Item('interfacesUsuario',
            [
                'Principios para el diseño de una UI',
                ' - Familiaridad con el usuario -> utilizar conceptos y la experiencia del usuario para que le sea más "facil" de usar ',
                ' - Consistencia -> las operaciones del mismo tipo deberian hacerse del mismo modo siempre ',
                ' - Minima sorpresa -> el comportamiento del sistema no debe provocar sorpresa en el usuario ',
                ' - Recuperabilidad -> los usuarios deben tener mecanismos para recuperase en caso de error ',
                '  -  para este apartado se pueden usar confirmaciones o recursos para deshacer opciones ',
                ' - Guia al usuario -> cuando un error ocurra, la interfaz debe ayudar al usuario a entenderlo ',
                '',
                'Prototipos de una UI',
                ' - Estaticos -> No permiten la alteración de sus componentes, pero si dan un bosquejo inicial ',
                ' - Dinamicos -> Estos diseños involucran un poco más de detalle tecnico, como especificaciones de rendimiento ',
                ' - Robustos -> Ya presentan caracteristicas dinamicas, como validación de errores y edición de datos ',
                '',
                'Interacción del usuario en la UI',
                ' - Manipulación directa -> interacción directa con los objetos de la pantalla ',
                ' - Selección de menus -> se limitan las opciones, a cambio de ser más lenta y menos propensa a errores ',
                ' - Formularios -> introducción de datos, por parte del usuario ',
                ' - Comandos -> los usuarios emiten comandos y sus parametros asociados para realizar acciones más complejas ',
                ' - Lenguaje -> usar un lenguaje natural que el usuario comprenda, lo hara accesible a más tipos de usuarios ',
                '',
                'Pautas de evaluación de una UI',
                ' - Semejanza con el mundo real ',
                ' - Consistencia y estandarización ',
                ' - Estetica y diseño minimalista ',
                ' - Reconocimiento, manejo y recuperración de errores ',
                ' - Flexibilidad, control y libertad para el usuario ',
                ' - Reconocimiento de acciones y ayudas ',
            ]),
        new Item('experienciasUsuario',
            [
                '- Es la percepción del usuario al interactuar con un producto ',
                '- Una buena UX se logra cuando el producto a la hora de usar el producto sea util y usable por el cliente ',
                '- La UX no es lo mismo que la usabilidad, ya que esta la contiene además de otras caracteristicas ',
                '- Este objetivo no se logra agregando funcionalidades, si no, estando en el lugar de un cliente ',
                '',
                '- Para esto es necesario tener en cuenta: ',
                ' - Necesidades del cliente ',
                ' - Objetivos del negocio ',
                ' - Limitaciones tecnicas ',
                '',
                '- Tambien es necesario realizar investigaciones tales como: ',
                ' - Investigacion de los grupos de mercado y entrevistas con stakeholders ',
                ' - Pruebas de usabilidad y analisis de datos ',
                ' - Manejo y estructuración de la información presente ',
                '',
                '- Además se deben tener habilidades blandas como: ',
                ' - Estudios en Psicologia, Sociologia o Antropologia ',
                ' - Conocimientos en Comunicación , Marketing, y experiencia en ventas ',
                ' - Diseño industrial o grafico, y conocimientos en tecnologias ',
            ]),
        new Item('logos',
            [
                '- Isotipo -> parte reconocible de una marca sin presencia de texto ',
                '- Isologo -> el texto y el icono son parte de un mismo conjunto, no funcionan por separado ',
                '- Logotipo -> texto que representa la marca y es la parte reconocible de esta ',
                '- Imagotipo -> combinación de imagen y texto, que tambien pueden separarse y ser efectiva ',
            ]),
        new Item('gestalt',
            [
                '- Es una manera de encontrar sentido en como nuestras mentes perciben las cosas ',
                ' - como un todo y no solo como los elementos que lo forman ',
                '- <em>El todo es mayor que la suma de sus partes </em>',
                '',
                '- Aparición -> surge cuando se percibe un objeto a partir de información previa que conozcamos ',
                '- Cosificación -> los objetos se pueden reconocer incluso cuando hace falta parte de ellos, ',
                ' - Nuestro cerebro hace coincidir lo que se ve con patrones familiares en nuestra memoria ',
                '- Multiestabilidad -> Se basa en que los objetos ambiguos pueden ser interpretados de diferentes maneras, ',
                ' - y que dado esto se puedan ver varias formas, sin tener certeza de la verdadera ',
                '- Invariabilidad -> los objetos simples pueden ser reconocidos independientemente de, ',
                ' - su escala, rotación, traslación o perspectiva ',
                '',
                '- Leyes de Gestalt aplicadas al diseño grafico ',
                '',
                '- Principio de semejanza -> si elementos que esten proximos entre si, y son similares ',
                ' - tenderemos a verlos como parte de un grupo, ya sea por color, tamaño o textura ',
                '- Principio de continuidad -> el ojo puede crear visualmente la continuidad de una linea, ya que el ojo ',
                ' - va a seguir el camino visual más suave, menos forzado y coherente ',
                '- Principio de cierre -> cuando una figura no esta cerrada o delimitada por lineas, nuestra mente ',
                ' - tiende a transmitir una sensación de cierre, rellenando las formas ',
                '- Principio de proximidad -> teoriza como tendemos a agrupar los elementos visuales proximos entre si ',
                ' - estos deben compartir alguna caracteristica en comun como forma, color, textura, tamaño ',
                '- Figura y fondo -> Usando el espacio negativo y la tendencia de ver un objeto separado de lo que lo rodea ',
                '- Principio de Simetria y Orden -> si los elementos cuentan con cierta simetria y orden ',
                ' - son percibidos como parte del mismo grupo ',
                '- Dirección comun -> los elementos que parecen contruir un patron o flujo continuo y en la misma dirección ',
                ' - son a su vez percibidos como parte de un grupo mayor ',
            ]),
        new Item('ssr-csr-ssg-isr',
            [
                '<strong>Server Side Rendering (SSR)</strong>',
                '- El HTML de la pagina es generado en el lado del servidor, ya sea mediante petición, o previamente ',
                '- Ventajas: ',
                ' - Mejora el SEO y la indexación del contenido ',
                ' - La carga inicial es más rapida al no tener que ejecutar nada más para mostrar el contenido ',
                ' - Puede funcionar, incluso si el Javascript dentro del navegador esta desactivado ',
                '- Desventajas: ',
                ' - Mala capacidad de respuesta si la conectividad a internet es baja o nula ',
                ' - Mayor carga al servidor, al tambien ser responsable de generar o entregar el HTML a mostrar ',
                '',
                '<strong>Client Side Rendering (CSR)</strong>',
                '- Ya es responsabilidad del navegador, y mediante Javascript se manipula el DOM para construir los nodos HTML ',
                '- Ventajas: ',
                ' - Rapido y con una mayor capacidad de interactividad con solo la carga inicial ',
                ' - Se puede escoger que partes del DOM se pueden actualizar para mostrar nueva información ',
                '- Desventajas: ',
                ' - La carga inicial es más lenta al tener que esperar para ejecutar javascript ',
                ' - Inutil si javascript esta deshabilitado en el navegador ',
                ' - El SEO se puede ver dificultado por el contenido inicial en blanco ',
                '',
                '- Desde la creación de NodeJs, se abrio la posibilidad de crear paginas hibridas, que comparte caracteristicas de ambos mundos ',
                '- Creando contenido inicial en el lado del servidor que no este completamente vacio y agregarle más funcionalidades en el navegador ',
                '- El proceso de agregar más interactividad a estos sitios estaticos se conoce generalmente como "Hidratación" ',
                '',
                '<strong>Static Site Generators(SSG)</strong>',
                ' - Estos ejecutan el codigo SPA en el momento de la compilación, y generan previamente el HTML en el servidor ',
                ' - Algunos frameworks como NextJs, Gatsby, NuxtJs, VuePress usan estas estrategias, ',
                ' - sin de dejar de ofrecer las caracteristicas de React y Vue en los cuales estan basados ',
            ])
    ];

export const META_ESTRUCTURAS =
    [
        new Item('scope',
            [
                '- Se puede definir como el alcance que tendran las variables en tu codigo ',
                '',
                '- Scope Local -> tus variables seran accesibles solamente en el ambito declarado como lo puede ser:  ',
                ' - dentro de una función, dentro de una clase, dentro de una sentencia de control ',
                '',
                '- Scope Global -> se pueden acceder desde cualquier parte de tu codigo, más aun asi no se recomiendan ',
                ' - En el caso de Javascript se recomienda usar <strong>let</strong> y <strong>const</strong>, ya que el <strong>var</strong> puede traer bugs consigo ',
            ]),
        new Item('precedencia',
            [
                '- los operadores en las expresiones tienen una jeararquia predeterminada que determina el orden de evaluación ',
                ' - Operadores con igual prioridad se evaluan de izquierda a derecha ',
                ' - Operadores logicos y de operación bit a bit de izquierda a derecha ',
                ' - Operadores matematicos, se respeta la jeararquia matematica, a menos que se involucren parantesis ',
                ' - Los parentesis afectan el orden de evaluación, al mismo tiempo que permiten asociar expresiones ',
                ' - La precedencia puede cambiar de lenguaje a lenguaje, por lo que se recomienda saber las especificaciones de cada uno ',
            ]),
        new Item('verticalAndHorizontal',
            [
                '- Una buena estructura es primordial para todo proyecto ',
                '',
                '- Estructura horizontal -> estaba fuertemente ligado al modelo en cascada, donde se realizaban capas transversales ',
                '  - a todo el sistema, de manera que todo los componentes estaban separados entre si ',
                '- Esta estructura suele ser compleja de entender si no se entiende el negocio, además de que no todos ',
                '  - necesitan de las mismas partes para funcionar ',
                '',
                '    Products       Orders                  Customers                   ',
                '-------&darr;-------------&darr;-----   Views      -----&darr;---------',
                '-------&darr;-------------&darr;-----  Presenter   -----&darr;---------',
                '-------&darr;-------------&darr;-----   Domain     -----&darr;---------',
                '------ &darr;-------------&darr;-----  Services    -----&darr;---------',
                '-------&darr;-------------&darr;-----  Entities    -----&darr;---------',
                '-------&darr;-------------&darr;----- Repositories -----&darr;---------',
                '-------&darr;-------------&darr;-----  DataSource  -----&darr;---------',
                '',
                '- Estructura vertical -> en esta organización prima el dominio, por lo que cada capa esta aislada entre si ',
                '  - toda la estructura de un componente es independiente entre si, y más facil de modificar ',
                '',
                '    Products           Orders            Customers        ',
                '|    Views     |   |    Views     |   |    Views     |    ',
                '|   Presenter  |   |   Presenter  |   |   Presenter  |    ',
                '|    Domain    |   |    Domain    |   |    Domain    |    ',
                '|   Services   |   |   Services   |   |   Services   |    ',
                '|   Entities   |   |   Entities   |   |   Entities   |    ',
                '| Repositories |   | Repositories |   | Repositories |    ',
                '|  DataSource  |   |  DataSource  |   |  DataSource  |    ',
            ]),
        new Item('expresionesRegulares',
            [
                '- Una expresion regular es una forma de buscar coincidencias o patrones de manera optimizada ',
                '- No solo permite encontrar coincidencia, tambien permite modificar lo que se haya encontrado ',
                '- Las expresiones regulares se basan en diagramas de estado, ya que todas las transiciones se deben cumplir, ',
                ' - para que el texto a evaluar cumpla con la condicion dada de la expresion ',
                '- Estas expresiones en si se escriben igual, y son independientes del lenguaje que se use ',
                '- Los compiladores de muchos lenguajes se basan en analizadores sintacticos, para analizar el codigo copiado, ',
                ' - estos a su vez se basan en expresiones regulares para saber si se cumplen con las condiciones del lenguaje ',
            ]),
        new Item('estructurasDatos',
            [
                '- Es un concepto general que comparten muchos lenguajes de programación ',
                '- Que a su vez cambia segun el lenguaje, dependiendo de cada implementación ',
                '- Una estructura es una colección de valores organizados, sobre los cuales se pueden administrar y hacer operaciones con ellos ',
                '- Tambien existe una manera estandarizada o implementada por el mismo lenguaje para acceder a los datos ',
                '',
                '- Tipos de estructuras ',
                ' - Contiguamente asignadas -> compuestas por bloques de memorias unicos e incluyen a: ',
                '  - arrays, matrices, heaps, hash tables',
                '',
                ' - Estructuas enlazadas -> son distintos fragmentos de memoria unidos por punteros e incluyen: ',
                '  - listas, arboles y grafos ',
                '',
                ' - Contenedores -> permiten almacenar y recuperar datos en un orden determinado sin importar el contenido y contienen: ',
                '  - pilas y colas ',
                '',
                '- Existen más tipos de estructuras, pero estas son de las más comunes y usadas generalmente ',
            ]),
        new Item('homoiconicidad',
            [
                '- Es una propiedad que comparten algunos lenguajes de programación en los cuales el propio lenguaje, ',
                ' - se puede manipular y comportarse como un dato más ',
                '- La representación primaria de esto tambien es una estructura de datos en un tipo primitivo del lenguaje ',
                '- Algunas ventajas de este comportamiento "extraño" son: ',
                ' - Extender el lenguaje con nuevos conceptos es más sencillo ',
                ' - Los datos pueden ser pasados entre capas, como lo son la capa base y meta del programa ',
                ' - Permite realizar operaciones de manipulacion de codigo en tiempo de compilación en vez de ejecución ',
                ' - Se puede modificar el arbol de sintaxis del lenguaje ',
            ]),
        new Item('maquinaEstados',
            [
                '- Es una modelización conceptual en forma de diagrama de un problema ',
                '- En esta situación siempre se encuentra un inicio, el cual es la espera de un estimulo ',
                '- Esto nos da una base para modelar problemas que pueden ser sustancialmente complejos, además de extensos ',
                '',
                '- Elementos de un diagrama',
                ' - Estados -> posición o acción en la cual se encuentra actualmente y de la cual es posible ',
                '  - saltar a otro estado, o a si mismo, impulsado por una acción con un resultaod en concreto ',
                ' - Entradas -> interacciones o acciones que pueden alterar un estado y hacerlo cambiar a otro ',
                ' - Salidas -> acciones con las cuales el estado responde despues de ser previamente alterado ',
                ' - Eventos -> son las acciones o interacciones que puede tener un estado, internas o externas ',
                ' - Transiciones -> son los caminos, que se pueden tomar entre estados, estos deberian estar acotados ',
                '  - y comprobar que las condiciones se dan para realizar el cambio',
                '',
                '- Este sistema "simple", y en casos trivial, evoluciono para ser parte fundamental de la informatica ',
                '- Acualmente las maquinas de Mealy y de Moore son usadas para crear maquinas de estados finitos "FSM" ',
                '- Para realizar estos esquemas lo primero es definir las entradas, salidas y sus estados ',
                '- Despues se realiza una tabla donde se definen las relaciones entre estos',
                '- Finalmente se grafica teniendo en cuenta las entradas y salidas de cada estado ',
                '',
                '- Si los sistemas se llegan a complicar o extender demasiado, se pueden realizar simplificaciones ',
                ' - mediante algebra de Boole',
            ]),
        new Item('sistemasComplejos',
            [
                '- Caracteristicas',
                '- Comportamiento impredecible -> Son sensibles a las condiciones iniciales ',
                '- Conectividad -> los subsistemas se afectan mutuamente, aun sin conexión directa ',
                '- Auto organización -> tendencia constante de generar patrones de comportamiento ',
                '- Jerarquia -> cualquier cambio de una jerarquia, afectara a esta ',
                '- Historico-dependientes -> el tiempo es un factor muy importante a tener en cuenta ',
                '- Irreductubilidad -> la estructura o no se puede, o es muy dificil de reducir a estados más simples',
                '- Dialogicos -> los opuestos no se excluyen, se complementan ',
                '- Recursivos -> las causas y los resultados se alternan en el tiempo ',
                '- Hologrametricos -> hay identidad estructural entre las partes y su todo ',
                '',
                '- Principios',
                '- Equifinidad -> los estados finales son alcanzables sin importar las condiciones iniciales ',
                '- Heterogeneidad auto organizacional -> la complejidad aumenta en medida que se interactua con la entropia del entorno ',
                '- Complejidad organizada -> los sistemas abiertos conjugan complejidad y orden ',
                '- Abundancia organizacional -> las estructuras complejas, son encontradas con facilidad ',
                '- Teleologico -> finalidades especificas dependen de sistemas especificos ',
                '- Retroalimentación -> se pueden tener feedbacks positivos y negativos ',
                '- Complejidad jerarquica -> a mayor complejidad, mayor jerarquización ',
            ]),
        new Item('funcionesLambda',
            [
                '- Son una subrutina definida no enlazada a un identificador, tambien llamadas funciones anonimas o literales ',
                '- Suelen ser usadas como argumentos o contruir respuestas en funciones de orden superior ',
                '- Son comunes en los lenguajes funcionales y/o multiparadigma ',
                '- Pueden ser expresiones simples o tener varias instrucciones ',
                '',
                '- Sintaxis: ',
                ' - Lambda de expression -> (parametros) => expression ',
                ' - Lambda de instruccion -> (parametros) => { sequencia de expresiones } ',
                '',
                '- Otra ventaja de las lambdas es que estas son capaces de inferir los tipos de los parametros de entrada ',
                '- Su sintaxis suele ser más concisa y combinada con otras caracteristicas como los Stream permiten el paradigma funcional en Java ',
            ]),
        new Item('valueObjects',
            [
                '- Es apliamente usado en <strong>DDD</strong> (Domain Driven Design)',
                '- Estos son una modelación de un concepto en nuestro sistema, como pueden ser fechas, precios, monedas, cantidades, etc.. ',
                '',
                '<strong>Caracteristicas</strong>',
                ' - Estan concebidos para medir o describir un concepto en nuestro dominio, no son simplemente valores, sino que cumplen alguna función ',
                ' - Son inmutables y su construcción no debe ser demasiado compleja ',
                ' - Siempre son validos, y si no lo son deben de lanzar una excepción, se pueden usar constructores semanticos para facilitar su creación ',
                ' - No poseen identidad, por lo que su comparación se basa solamente en sus valores ',
                '',
                '<strong>Testing</strong>',
                ' - Testear un VO esta relacionado directamente a la complejidad de los valores que represente ',
                ' - Generalmente solo se validan sus valores y que sus operaciones no incumplan la inmutabilidad (side-effects)',
            ])
    ];

export const PARADIGMAS =
    [
        new Item('imperativo',
            [
                '- Imperativo -> secuencia ordenada de acciones a ejecutar, más cercano a lenguaje maquina ',
                '  - Estructurado -> donde se incluyen sentencias de control y se contemplan las interrupciones',
                '  - Procedimental -> donde se empieza a crear funciones y metodos para no repetir código',
                '  - Modular -> Se agrupan segmentos más grandes de código independientes entre si, facilitando la depuración',
                '- Declarativo -> Se describe el resultado de la operación y no el como, requiriendo más abstracción y menos código ',
                '  - Funcional -> la base son las funciones que se pueden concatenar para formar estructuras o usarse como argumentos ',
                '  - Logica -> la base es la matematica y su logica para predecir el resultado',
            ]),
        new Item('funcional',
            [
                '- Las acciones son delegadas a funciones propias del lenguaje',
                '  - Funciones Puras -> dada una entrada siempre van a tener la misma salida',
                '  - Composición -> se pueden juntar y crear una secuencia y resultado diferente ',
                '  - Efectos secundarios -> Son los cambios visibles fuera de la función llamada ',
                '  - Se le da más relevancia al concepto de inmutabilidad y mutabilidad',
                '  - Los efectos secundarios se evitan en este tipo de programación',
            ]),
        new Item('scripting',
            [
                '- Son lenguajes que no son compilados y que se ejecutan directamente en el lado del cliente ',
                '- El más famoso es Javascript, pero otros como Python y Ruby tambien lo son',
                '- Suelen ser menos eficientes al no ser compilados pero conllevan menos trabajo para el programador ',
                '- Generalmente son debilmente tipados, lo que da más flexibilidad y posiblidad de errores',
            ]),
        new Item('reactiva',
            [
                '- Es un paradigma enfocado al trabajo con flujo de datos, generalmente debe ser: ',
                '  - Resilientes -> deben responder incluso cuando hay estados de error',
                '  - Elasticos -> el aumento de la concurrencia no debe afectar las respuestas',
                '  - Comunicación -> minimo acoplamiento al hacer que todo se comunique mediante mensajeria ',
                '  - Operadores -> tener soporte hacia estos que permiten transformar el flujo de datos ',
            ]),
        new Item('marcado',
            [
                '- Son lenguajes relacionados con la presentación de contenido como HTML y XML',
                '- El primero se usa para estructurar contenido web y el segundo para estructurar datos ',
            ]),
        new Item('aspectos',
            [
                '- Es un paradigma de programación que tiene como objetivo aumentar la modularidad del codigo ',
                '- Permite la separación de responsabilidades sin cambiar el comportamiento actual de la aplicación ',
                '- Esto permite añadir un comportamiento paralelo, sin afectar el comportamiento principal ',
                '- Un aspecto es aquel que puede ser transversal a multiples capas de la aplicación ',
                '',
                '- Estos se pueden encadenar y unir mediante "Joinpoint", que son similares a las excepciones,  ',
                ' - estos se ejecutaran si las condiciones interceptadas se dan ',
                '- Si la interceptaciones cumplen las condiciones dadas, podran llamar a un "Pointcut" que sera el llamado a un ',
                ' - "Joinpoint" que a su vez ejecutara el "Advice" inidicado "',
                '- Un "Advice" es una accion especifica asociada a un "Joinpoint" ',
            ]),
        new Item('logica',
            [
                '- Al ser parte del paradigma declarativo, esta programación se concentra en el resultado, más que en el proceso ',
                '- Esto se base mediante el uso extensivo de la logica matematica: ',
                ' - De orden cero -> Logica proposicional ',
                ' - De primer orden -> Logica predictiva ',
                ' - De segundo orden -> donde se agregan variables y relaciones ',
                ' - Cada orden se base en el anterior para crear nuevos conceptos y formas de evaluación ',
                '',
                '- Algunos sistemas en los que se puede aplicar: ',
                ' - Inteligencia artificial ',
                ' - Sistemas expertos (toma de decisiones)',
                ' - Reconocimiento y procesamiento de lenguaje natural ',
                ' - Motores de bases de datos relacionales ',
                ' - Simulación '
            ])
    ];

export const PERSONAS =
    [
        new Item('personasYprocesos',
            [
                '- Las personas, los procesos y las tecnologias son el sostenimiento de toda empresa ',
                '- El personal, siempre sera necesario para pensar, planear y ejecutar ',
                '- La tecnologia, que ayuda a las personas a llevar estos procesos ',
                '- Y finalmente los procesos, que ofrecen un valor agregado al cliente ',
                '- Llegar a un equilibrio de estos elementos es un equilibrio dificl de lograr ',
                '- Cualquier cambio de estas partes traera efectos secundarios sobre las demas ',
                '',
                '- Algunos de los objetivos de tener este equilibrio son: ',
                ' - Transformar los datos en conocimiento e información ',
                ' - Permitir que el conocimiento se accesible para todos y generable por todos ',
                ' - Mejora continua de los procesos y aumentar la productividad ',
            ]),
        new Item('gestionDeServicios',
            [
                '- Es una metodologia que pone su foco en el cliente y como mejorar su atención ',
                '- Toda organización debe contar con personal competente en cuanto al uso de las tecnologias que se usen ',
                '- Los proveedores y los socios son partes importantes de toda empresa, no se pueden ignorar ',
                '- La creación de valor es importante para todo producto y servicio que se ofrezcan ',
                '',
                '- Estos son 7 principios para una correcta gestión ',
                ' - Se debe crear el mayor valor para los clientes a la vez que se perjudican lo menos posible ',
                ' - Siempre sera mejor revisar los procesos existentes y mejorarlos que empezar desde cero ',
                ' - Es mejor avanzar seguro y constante con un enfoque concreto ',
                ' - El trabajo en equipo es importante, todos deben ser visibles y colaborarse entre si ',
                ' - Tener una consciencia holistica, ya que todas las areas se afectan entre si de alguna manera ',
                ' - Entre más simple sea un proceso mejor ',
                ' - La automatización y la optimización siempre deben ser aspectos a alcanzar ',
            ]),
        new Item('gestionDeActivos',
            [
                '- Los elementos fisicos y no fisicos de las empresas tambien deben ser considerados como partes del negocio ',
                '- Esto se puede aplicar a todo software que la empresa use o desarrolle y los elementos necesarios para su funcionamiento ',
                '- Tener un inventario actualizado garantiza que siempre se maneje lo necesario ',
                '- En un contexto informatico esto se puede aplicar de varias formas, principalmente al manejo de archivos electronicos ',
                ' - además de las licencias que se usan y que se generan desde la misma empresa ',
                '',
                '- Algunos ejemplos de activos: ',
                ' - Hardware -> dispositivos de redes, centros de datos, servidores',
                ' - Infraestructura proporcionada por terceros, y dispositivos propios de la empresa usados por los usuarios finales ',
                ' - Datos digitales derivados de las operaciones internas ',
                '',
                '- Estos suelen tener un ciclo de vida ciclico, el cual es el siguiente: ',
                '  -> Planear ->         -> Adquirir ->    -> Asignación ->       -> Mantenimiento ->    -> Retiro ->          ',
                '  Como obtenerlos       Construcción,     Introducción al        prolongar la vida      Al final del          ',
                '  y como se usaran      compra,           ambiente productivo    util o mitigar los     este debe ser         ',
                '  además de analizar    arrendamiento     y definiciones de      riesgos de posibles    retirado y desechado  ',
                '  costos/beneficios     o licencias       procesos y usos        fallos                 o solo cancelado      ',
                '',
                '- Beneficios de esta gestión ',
                ' - Mejores decisiones en base a información actual y verificable ',
                ' - Continuidad del negocio al estar mejor preparados para las interrupciónes del negocio ',
                ' - Manejo oportuno de las licencias y suscripciones de la empresa ',
                ' - Costos totales de la empresa de manera global ',
                ' - Permite la estandarización de manera transversal en la empresa ',
            ]),
        new Item('fidelizacion',
            [
                '- Fidelizar a un cliente, garantiza que esta siempre permanecera comprando nuestos productos y servicios ',
                '- Segun la ley de pareto el 80% de las ventas son de los clientes actuales y 20% de los nuevos ',
                '- Es un error comun concentrarse en adquirir nuevos clientes y descuidar los viejos ',
                '- Un cliente satisfecho es la mejor publicidad, aun asi, esto no siginifica que sea un cliente fiel ',
                '- ',
                '- Algunas estrategias para fidelizar a los clientes: ',
                ' - Ser honestos en la justa medida, ya que no siempre todo sera una historia de exito ',
                ' - Mantener una comunicación constante, haciendo saber los resultados de manera regular ',
                ' - Preparar un plan a futuro que lo haga sentir importante ',
                ' - Comparte los momentos de exito, no solo los fracasos merecen atención ',
                ' - Solicita sus opiniones y hazlos sentir escuchados ',
                ' - Las relaciones son mejores cuando son reciprocas ',
                '',
                '- Clasificación de los clientes: ',
                ' - Apostoles -> clientes fijos bastantes satisfechos y que recomendaran tu marca ',
                ' - Leales -> cuentan igual de satisfechos que los apostoles, pero que no divulgan tu marca ',
                ' - Mercenarios -> tienen satisfacción alta, pero solo compraran cuando esto les aporte algun beneficio ',
                ' - Rehenes -> no estan satisfechos con tu producto, pero tampoco estan dispuestos a migrar ni asummir más costos ',
                ' - Indiferentes -> son neutrales frente a la marca, y aunque esten satisfechos solo haran compras ocasionales ',
                ' - Terroristas -> además de estar insatisfechos, estos hablaran mal de la marca en sus circulos de influencia ',
            ]),
        new Item('modeloDIKW',
            [
                '- Es un sistema jerarquico donde cada capa le da soporte a las caracteristicas de la siguiente ',
                ' ',
                ' &uarr;',
                ' contexto ',
                ' &uarr;                                     Sabiduria        &#35;     Union de todas las partes ',
                ' &uarr;                      Conocimiento                   &#35;&#35;&#35;    Se forman las partes de un todo ',
                '           Información                                &#35;&#35;&#35;&#35;&#35;   Conexión de las partes',
                ' &uarr;  Datos                                            &#35;&#35;&#35;&#35;&#35;&#35;&#35;  Reunion de todas las partes ',
                '   &rarr;      &rarr;    &rarr;  comprension    &rarr;',
                '  Busqueda  Absorción     Practica     Reflexion',
                ' ',
                '- Datos -> son la materia prima para formar las siguientes capas, indeferentemente de la fuente ',
                '- Información -> es una construcción más avanzada a partir de acopio de simples datos, ',
                ' - gracias a nuestra capacidad de raciocinio y de reconocimiento de patrones ',
                '- Conocimiento -> ya con la información a nuestra disposición podemos actuar en base a esta, ',
                ' - tomar decisiones especificas, o responder interrogantes de manera practica ',
                '- Sabiduria -> generalmente se refiere a la capacidad de pensar y analizar las situaciones, ',
                ' - que se nos presenten, además de la capacidad para abstracción a otros contextos ',
            ]),
        new Item('gestionDeExpectativas',
            [
                '- Lo más probable es que estas esten formadas por diferentes factores y experiencias pasadas ',
                '- Muchas cosas pueden salir mal en un proyecto pero estas son algunas maneras de solucionarlo ',
                '',
                ' - Asumiendo lo obvio -> siempre hay diferencias entre lo que una persona escucha y lo que otra dice, ',
                '  - además de que hablamos de lo que consideramos importante y evitamos las obviedades, ',
                '  - sin comprender que estas no lo son para todos ',
                '',
                ' - Evitar el riesgo -> generalmente no nos gusta hablar de posibles problemas, ',
                '  - y si hay riesgos intentamos evitarlos hasta que sean inevitables, aunque esto nos traera problemas ',
                '  - en un futuro casi inmediato, preveer los problemas nos hace profesionales más confiables ',
                '',
                ' - Información incorrecta -> cuando vas al medico esperas una explicación a fondo de tus sintomas, ',
                '  - no simplemente un medicamento para calmarlos; puede que funcionen o solo enmascarar algo peor ',
                '  - en terminos de un equipo esto significa mantener a todos los involucrados al tanto ',
                '',
                ' - Reuniones sin agenda -> las reuniones no son de agrados de todos, y menos cuando estas son sorpresa, ',
                '  - además de que no se suele estar preparado para estas generando generando frustaciones, ',
                '  - lo mejor para evitar esto es simplemente agendarlas con anterioridad ',
                '',
                ' - Realización de contratos -> la negociación es importante pero para segurar que todo funcione ',
                '  - es importante generar acuerdos y dejarlos por escrito, asi demostrar alguna equivocación, ',
                '  - y quien es el responsable o que este obligado a resolver el problema',
            ]),
        new Item('capa8',
            [
                '- Es un error relacionado directamente con el usuario final, ya sea por desconocimiento o por un mal diseño de la UX/UI',
                '- Esta capa no existe como tal, es una expresión para aludir la culpa al usuario ',
                '- El nombre viene del modelo OSI que consta de 7 capas, donde la septima capa es la aplicación, la que usa el usuario final ',
                '- Estos errores son de las principales fuente de error en las organizaciones y excelente puerta de entrada para los hackers ',
            ]),
        new Item('noNewsGoodNews',
            [
                '- Si no hay noticias son buenas noticias ',
                '- Tan simple como ejecutar un comando y este no devuelve un mensaje de error, si no que se ejecuto con exito ',
                '- Los codigos de error se establecieron para poner de acuerdo a desarrolladores y usuarios ',
                '- Usar los codigos de error para dar información es una manera util de entender los problemas ',
            ]),
        new Item('tiposHackers',
            [
                '- Un Hacker es aquel individuo que usa sus habilidades informaticas para violentar y penetrar la ciberseguridad ',
                '- Inicialmente solo existian 3 sombreros como clasificación, pero hay otros que han surgido con el tiempo ',
                '',
                '- <strong>Sombrero Blanco</strong>',
                ' - No importan su genero, nacionalidad, etnica, y demás caracteristicas, siempre defienden lo que es correcto ',
                ' - Protegen a los civiles y a las organizaciones en general encontrando y reportando vulnerabilidades ',
                ' - Trabajan en cargos como ingenieros de ciberseguridad, pruebas de penetración y otros puestos de seguridad ',
                ' - Tambien realizan tareas como:          - Escaneo de redes        - Configuracion de IDS (detección de intrusos) ',
                '                                          - Creación de honeypots   - Hackeo de equipos para encontrar vulnerabilidades ',
                '',
                '- <strong>Sombrero Gris</strong>',
                ' - Tambien defenden lo correcto, pero no siempre usaran metodos convencionales para hacerlo ',
                ' - Esto puede ser moralmente ambiguo por lo que este punto medio a veces se decanta más por un extremo (Negro o Blanco)',
                '',
                '- <strong>Sombrero Negro</strong>',
                ' - Realizan actividades ilegales para obtener algun tipo de redito, generalmente finaciero ',
                ' - Tambien suelen hacerlo por diversion, pero con fines de lucro, sin importar los daños que puedan generar ',
                ' - Tambien pueden:   - Instalar puertas traseras   - Mantener el acceso a los sistemas comprometidos ',
                '                     - Escalar en privilegios      - Descargar datos valiosos y/o sensibles ',
                '                     - Instalar malware            - Usar el Phishing ',
                '',
                '- <strong>Sombrero Verde</strong>',
                ' - Jovenes entusiastas, inexpertos y por lo tanto vulnerables al riesgo ',
                ' - Actualmente con tantas herramientas y facilidades es comun que se mentan en problemas ',
                ' - Que aprovechan para aprender de sus errores y convertirse en mejores hackers y cambiar de sombrero ',
                '',
                '- <strong>Sombrero Azul</strong>',
                ' - Son hackers experimentados que suelen ser vengativos y expondran tu vida digital ',
                ' - Suelen ser profesionales de seguridad externos en busca de vulnerabilidades antes de los lanzamientos ',
                '',
                '- <strong>Sombrero Rojo</strong>',
                ' - Además de ser vengativos, defienden lo correcto por lo que si eres un criminal no tendran piedad alguna ',
                ' - No solo desactivan las actividades delictivas permanentemente, tambien son temidos por otros hackers ',
                ' - Son tan experimentados que no tienen problemas en piratear sistemas con Linux ',
                ' - No se arrepienten y no dudan si su objetivo es destruir a los de sombreros negro ',
                '',
                '- Si quiere conocer sus equivalentes en los personajes de Marvel y DC, ó conocer casos famosos, ',
                ' - da click en el enlace original',
            ])
    ];

export const OTROS =
    [
        new Item('scraping',
            [
                '- Es una forma de buscar contenido de las paginas en internet ',
                '- Algunos buscadores como Google hacen esto para indexar contenido ',
                '- Son tipos especiales de Bots que buscan terminos especificos de busqueda ',
                '- Se puede dar manera de automatica (software de  analisis sintactico) y manual (copiar y pegar) ',
                '- Esto puede conllevar a una ventaja sobre tu competencia al comparar su contenido con el tuyo ',
                '- Puede violar las leyes de derechos de autor, por lo que puede llegar a ser ilegal ',
                '- Tambien se puede bloquear por medio de software ó dificultarles la extracción de los datos (imagenes) ',
            ]),
        new Item('cdci',
            [
                '- Integración continua Y Entrega continua nacen para entregar un mejor codigo, de una manera más rapida y con menos errores ',
                '- Los errores se pueden encontrar de manera previa a estar en producción ',
                '- Integración continua permite una mejora de la afluencia a la rama principal del codigo, evitando problemas con ramas aisladas ',
                '- Entrega continua permite que los cambios aprobados sean implementados con el menor numero de complicaciones posibles ',
                '- Para que todo esto sea posible todas las pruebas deben estar automatizadas ',
                '- Las pruebas deben tener la mayor cobertura posible, o en su defecto un minimo ',
                '- El uso de buenas pracaticas es fundamental, ya que esto evitara posibles errores ',
            ]),
        new Item('devops',
            [
                '- Es una metodologia para crear software de una manera más eficiente, con mayor calidad y menos problemas en producción ',
                '- Este modelo no consiste en aumentar las responsabilidades del desarrollador, todo lo contrario ',
                '- Ya que la meta es que cada despliegue sea automatico, reduciendo el tiempo de corrección de errores, aumentando la productividad ',
                '- La automatización de las tareas y las pruebas permite que el codigo en desarrollo fluya rapidamente a producción ',
            ]),
        new Item('mvp',
            [
                '- Es el conjunto minimo de funcionalidades precisas para que un software pueda atraer clientes potenciales ',
                '- Esto ayuda a crear productos apegados a la realidad ',
                '- Da retroalimentación a tiempo y util para el negocio ',
                '- Todo mvp es una apuesta orientada a conseguir un maximo de aprendizaje con la menor inversion posible ',
                '- A veces puede ser reutilizable o desechable, eso depende de su exito inicial ',
            ]),
        new Item('turingComplete',
            [
                '- Es un concepto usado para denotar aquellos lenguajes que teniendo recursos infinitos (teoricamente), ',
                ' - son capaces de realizar cualquier tipo de calculo, independientemente de los recursos usados ',
                '- Tambien son capaces de usar y reutilizar estructuras complejas ',
                '- Que un lenguaje o herramienta sea turing complete no garantiza su eficiencia ',
            ]),
        new Item('ingenieriaInversa',
            [
                '- Un concepto sencillo pero muy potente, basicamente consta de desmontar y volver a montar algo, ',
                ' - para ver como funciona ',
                '- Esto se da con la intención de mejorar o duplicar ese algo mediante una simple observación ',
                '- Su nacimiento se da durante la segunda guerra mundial, pero hoy en dia es aplicable hasta para el software ',
                '- Uno de los primeros casos de esta practica fue el nacimiento del Tu-4 (sovietico) copia del B-29 (Estadounidense) ',
            ]),
        new Item('dsl',
            [
                '- Un DSL es un lenguaje de programación con un nivel superior de abstracción ',
                '- Estos lenguajes son menos complejos que los lenguajes de alto nivel y proposito general, como Java, C, etc.. ',
                '- Tambien son diseñados por expertos en el campo que se van a usar, para ser usados ',
                ' - por las personas versadas en el tema, pero sin experiencia en la programación ',
                '- Esto desemboca en un paradigma donde se especifica lo que se requiere, ',
                ' - y se usa el lenguaje más adecuado para lograr el objetivo ',
                '- Este concepto desemboca en la programación poliglota o programación orientada al lenguaje ',
                '- Otro concepto importante es que los DSL pueden nacer y extenderse, con ó sin bases previas ',
            ]),
        new Item('reglasInferencia',
            [
                '- Las leyes de inferencia nos permiten demostrar la validez de los argumentos mediante la correcta aplicación de las reglas ',
                '- Teniendo una premisa ya definida, podemos sacar una conclusión, para probar o negar alguna proposición deseada ',
                '',
                '        Nombre              Premisas    Conclusion          Nombre            Premisas    Conclusion',
                ' Modus Ponendo Ponens        p -> q         q             Silogismo            p -> q               ',
                '                                                          Hipotetico           q -> r      p -> r   ',
                ' Modus Tollendo Ponens       p || q                                                                 ',
                '                             ¬p             q             Morgan             ¬(p && q)    ¬p || ¬q  ',
                '                                                                             ¬(p || q)    ¬P && ¬q  ',
                ' Modus Tollendo Tollens      p -> ¬q       ¬p                                                       ',
                '                                                          Doble negación       ¬(¬p)       p        ',
                ' Dilema                      p || q                                                                 ',
                ' Constructivo                p -> r                       Conjunción            p                   ',
                '                             q -> s      r || s                                 q          p && q   ',
            ]),
        new Item('dataStoring',
            [
                '- Almacenar los datos es fundamental para las empresas, para cualquier disposicion que estas tengan ',
                '',
                '<strong>- Data Warehouse -></strong> Es un respositorio unificado para almacenar grandes cantidades de información, desde diversas fuentes ',
                ' - estos almacenes tambien transforman y limpian los datos antes de almacenarlos con una estructura fija, ',
                ' - para que estos sirvan como fuente de información veraz para futuros analisis ',
                '<strong>- Data Lake -></strong> Respositorio centralizado altamente flexible, encargado de almacenar grandres cantidades de datos, ',
                ' - pero estos no son procesados ni estructurados, por esto cada analisis debe tener sus respectivas transformaciones de datos, ',
                ' - esta forma es más barata, pero lenta y la confiabilidad de los datos puede disminuir ',
                '<strong>- Data Lakehouse -></strong> Combina las mejores caracteristicas de ambos al permitir almacenar datos estructurados y no estructurados, ',
                ' - al mismo tiempo que permite capacidades de analisis de datos e inteligencia empresarial, estos respositorios nacieron como Data Lake, ',
                ' - que fueron modificados para cumplir el esquema ACID, estos todavian estan crecimiento, por lo que es una tecnologia en maduración ',
                '',
                '                       Data Warehouse                  Data Lake                  Data Lakehouse         ',
                '',
                ' Tipos de datos   Datos                          Datos no estructurados       Datos con, sin y semi      ',
                ' almacenados      estructurados                  y semi estructurados         estructurados              ',
                '',
                ' Objetivo         Analisis de datos e            Aprendizaje automatico       Analisis de datos y        ',
                '                  inteligencia empresarial       e inteligencia artificial    aprendizaje automatico     ',
                '',
                ' Costo            Costoso y requiere tiempo      Rentable rapido y flexible   Rentable rapido y flexible ',
                '',
                ' Cumplimiento     Los datos son compatibles      No lo cumple, actualizar     Lo cumple ya que la data   ',
                '   de ACID        para garantizar la seguridad   y eliminar es complejo       es concurrente             ',
            ])
    ];

export const BASES_DE_DATOS =
    [
        new Item('sql',
            [
                '- Es lenguaje de consultas estandar para manipular la información en una base de datos ',
                '- Cada motor de base de datos tiene sus particularidades pero todos usan SQL',
                '- Las columnas son los datos a guardar y las filas son los registros almacenados',
                '- Las tablas estan compuestas de columnas y registros con información de un tipo en especifico ',
                '- Toda tabla deberia tener una clave primaria, para mejorar la indexación de contenido',
                '- La información deberia estar normalizada para evitar valores duplicados',
            ]),
        new Item('dbms',
            [
                '- Se encargan de almacenar, administrar, manipular y resguardar los datos ',
                '',
                '- Las BD guardan diferentes tipos de datos como: ',
                ' - texto, numeros, binarios, temporales, documentos, imagenes, geograficos, etc... ',
                '',
                '- Un buen DBMS deberia tener las siguientes caracteristicas: ',
                ' - Reducción de la redundancia -> Los duplicados en las BD se reducen al tener un unico lugar donde almacenar los datos ',
                ' - Mantenimiento -> tener todos los datos en solo lugar permite que se administren con más eficiencia ',
                ' - Seguridad -> define quien y con que privilegios puede acceder a la informacón ',
                ' - Consistencia -> se maneja un estandar para todos los datos de todas las BD ',
                ' - MultiUsuario -> el acceso concurrente de varios usuarios es un tema comun para las BD ',
            ]),
        new Item('crud',
            [
                '- Son las 4 operaciones basicas a la hora de gestionar los datos de una BD ',
                '- No solo es aplicable para SQL, tambien tiene su equivalencia en HTTP ',
                '- La mayoria de frameworks tienen estos metodos ya implementados y listos para consumirse ',
                '',
                '  Operación      SQL          HTTP, Restful     ',
                '  Create        INSERT        POST              ',
                '  Read          SELECT        GET, HEAD         ',
                '  Update        UPDATE        PUT, PATCH        ',
                '  Delete        DELETE        DELETE            ',
            ]),
        new Item('dl',
            [
                '- DDL -> Lenguaje de Definición de Datos ',
                '- Permite Crear y Modificar la estructura de la BD ',
                ' - CREATE -> creación de campos, tablas e indices ',
                ' - ALTER -> modificacion de tablas ó sus campos ',
                ' - DROP -> eliminación de tablas e indices ',
                ' - TRUNCATE -> elimina los registros de una tabla ',
                ' - RENAME -> renombra objetos ',
                '',
                '- DML -> Lenguaje de Manipulación de Datos ',
                '- Permite ejecutar las operaciones de un CRUD en los datos de la BD ',
                ' - SELECT -> consulta una tabla de la BD de manera general ó con filtros ',
                ' - INSERT -> inserción de datos en una tabla ',
                ' - UPDATE -> actualización de campos ó registros que cumplan los criterios especificados ',
                ' - DELETE -> elimina registros de una tabla ',
                '',
                '- DCL -> Lenguaje de Control de Datos ',
                ' - Permite crear roles, permisos y conceder/denegar el acceso a los datos ',
                ' - GRANT -> otorga privilegios de acceso a los usuarios ',
                ' - REVOKE -> retira los privilegios previamente otorgados ',
                '',
                '- TCL -> Lenguaje de Control de Transacciones ',
                ' - COMMIT -> guarda los cambios realizados ',
                ' - ROLLBACK -> deshace el ultimo cambio hecho ',
            ]),
        new Item('integridad',
            [
                ' - Son las reglas que garantizan que la información que la información sea inmutable hasta que se decida lo contrario ',
                ' - Tambien protege los datos de posibles errores a la hora de modificarlos ',
                ' - Esta es una de las principales diferencias entre las BD relacionales y NO relacionales ',
                ' - Las BD relacionales cumplen esto mediante el esquema ACID ',
                ' - Las DB NO relacionales no garantizan el 100% de la integridad de los datos, aunque la mayoria son muy fiables ',
            ]),
        new Item('erd',
            [
                '- Demuestra como las entidades (generalmente de una BD) se relacionan entre si ',
                '- Es una manera de desarrollar BD relacionales de acuerdo al modelo de negocio',
                '- Demuestra como las entidades (generalmente de una BD) se relacionan entre si ',
                '- Tambien tienen una relación que denota la cardinalidad 1-1, 1-n, 1-0, m-n',
            ]),
        new Item('normalizacion',
            [
                '- La normalización en la base de datos hace que la información sea más facil de estructurar ',
                '- Evita gastar espacio en datos redundantes y elimina imposible inconsistencias',
                '',
                '  - Primera forma -> identificar datos agrupables en tablas individuales',
                '  - Primera forma -> asigne cada conjunto con una clave primaria',
                '',
                '  - Segunda forma -> crear tablas independientes para valores que sean aplicables a otros registros ',
                '  - Segunda forma -> asigne claves foraneas que se puedan relacionar con otras tablas',
                '',
                '  - Tercera forma -> trasladar valores que sean independientes de las claves a tablas separadas',
                '  - Tercera forma -> no siempre es conveniente hacerlo, puede ser costoso en terminos de rendimiento ',
                '',
                '  - Cuarta forma  -> rara vez se aplican pero hay casos donde es practico hacerlo',
            ]),
        new Item('nosql',
            [
                '- Nacieron de los problemas para escalar las BD relacionales',
                '- Existes proyectos propios de grandes empresas y de codigo libre accesibles para la comunidad',
                '- La principal diferencia respecto a SQL es la falta de una estructura definida para almacenar los datos ',
                '- Esta falta de estructura hace posible que se pueda guardar cualquier tipo de dato',
                '- El rendimiento es mayor independientemente de la cantidad de datos',
                '- La fiabilidad de los datos no esta garantizada',
                '- No hay un estandar para las operaciones, cada motor tiene su sintaxis diferente',
                '- Existen diferentes formas de guardar la información ',
            ]),
        new Item('tiposBD',
            [
                '- Clave-Valor -> cada elemento tiene una llave unica, asociada a un valor ',
                '- Documentos -> la información se guarda en documentos con IDs unicos, y en formatos simples como JSON o XML ',
                '- Grafos -> se basan en nodos, relacionados mediante aristas, es necesario de la teoria de grafos para recorrerlas ',
                '- Objetos -> los datos se manejan mediante Objetos, tal y como en la Programación Orientada a Objetos ',
            ]),
        new Item('acid',
            [
                '- Son 4 propiedades que garantizan la confiabilidad de las operaciones y consecuentemente en los datos de las BD ',
                '  - Atomicidad -> todas las operaciones deben ser todo o nada, si una falla la información no debe sufrir cambios ',
                '  - Consistencia -> toda operación iniciada debe ser valida para poderse efectuarse, constraints, cascades, etc.. ',
                '  - Aislamiento -> toda operación debe ser ejecutada indeferentemente de las demás, respetando el orden',
                '  - Persistencia -> toda transacción que se haya realizado debe ser perdurable en el tiempo, sin importar que suceda ',
            ]),
        new Item('orm',
            [
                '- El Mapeo Objeto-Relacional permite convertir los objetos convencionales en objetos persistentes ',
                '- Permite generar esquemas para guardar la información independientes de cualquier Motor de Base de Datos ',
                '- Todas las operaciones basicas del CRUD son facilmente implementables ',
                '- Los cambios en las BD se hacen mucho más rapidos de hacer y de probar ',
                '- El rendimientos para operaciones muy complicadas es ligeramente menor ',
            ]),
        new Item('consistenciaEventual',
            [
                '- Garantiza la calidad de los servicios, con una gran disponibilidad y escalabilidad ',
                '- Esto se aplica solamente para bases de datos relacionales ',
                '- Cuando la concurrencia es demasiado alta, las peticiones pueden resultar en peticiones bloqueantes ',
                '- Cuando un sistema transaccional se bloquea, generalmente lo hace por un instante breve de tiempo, ',
                '  - si esto no se maneja de manera correcta, puede resultar en bloqueos fatales para la aplicación ',
                '- La consistencia eventual permite garantizar la disponibilidad y escalabilidad de las aplicaciones, ',
                '  - mediante cientos de nodos distribuidos y la promesa de retorno de toda operación ',
            ]),
        new Item('algebraRelacional',
            [
                '- Este tipo de algebra toma un conjunto de datos y realiza operaciones sobre estos, para generar un nuevo conjunto ',
                '- Tambien soporta el concepto de anidación al usar un resultado para una operación y generar otro resultado ',
                '',
                '- UNION -> une 2 tablas iguales, sin registros repetidos ',
                '- INTERSECCIÓN -> une 2 tablas iguales donde los registros sean iguales, evitando la repetición ',
                '- DIFERENCIA -> opera en tablas y devuelve el contenido que se encuentre en la primera tabla pero no en la segunda ',
                '- PRODUCTO -> toma 2 tablas y devuelve una tercera con el contenido de acuerdo a las posibles combinaciones, ya sean iguales o diferentes ',
                '- SELECCION -> toma 2 ó más tablas, iguales o diferentes, y devuelve los campos donde se cumplan las condiciones dadas ',
                '- PROYECCIÓN -> opera igual que la selección, pero aca se pueden especificar que columnas se quieren tener ',
                '- REUNIÓN -> opera sobre 2 ó más tablas y devuelve todos los campos deseados, que esten relacionados mediante alguna condición ',
                '- DIVISIÓN -> opera sobre 2 tablas donde el resultado no existe en la primera tabla, y todas las filas tengan esta relación ',
                '- ASIGNACIÓN -> cambia los valores de las columnas donde se cumplan las condicones dadas ',
                '',
                '- equivalencias en SQL (respectivamente)                           ',
                '- SELECT * FROM A     UNION     SELECT * FROM B                     ',
                '- SELECT * FROM A   INTERSECT   SELECT * FROM B                      ',
                '- SELECT * FROM A    EXCEPT     SELECT * FROM B                       ',
                '- SELECT * FROM A, B                                                   ',
                '- SELECT * FROM A WHERE X&lt;50                                         ',
                '- SELECT X, Z FROM A WHERE X&lt;50                                       ',
                '- SELECT A.W, B.Y FROM A JOIN B ON (A.V=B.X AND Z>10)                     ',
                '- no hay equivalencia directa, pero se puede lograr combinando operaciones ',
                '- UPDATE A SET indice="100%" WHERE codigo>2000                            ',
            ]),
        new Item('n+1selects',
            [
                '- Es un problema cuando se manejan ORM',
                '- Dado una colección de objetos, que a su vez pueden tener otras colecciones objetos como atributos ',
                '- Entonces para obtener un objeto inicial, hay que tener todos los objetos asociados a este, aunque no se necesiten ',
                '- Actualmente la mayoria de ORM usan o proveen estrategias para evitar este comportamiento ',
                '- Generalmente esto no es un problema de rendimiento, pero si ha de convertirse en uno,  ',
                ' - hay maneras de solventarlo como cambiar la forma de consultar las entidades o usar objetos en memoria ',
            ]),
        new Item('indices',
            [
                '- Es una manera de optimizar las consultas y mejorar la eficiencia de una BD ',
                '- Esto se logra mediante estructuras binarias asociadas a cada registro de la BD ',
                '- La indexación puede presentar un problema para la inserción, modificación y borrado de los datos, ya que esto  ',
                ' - significa la actualización de los indices asociados ',
                '- Tener demasiados indices tambien es contraproducente ya que pueden retrasar el procesamiento de los datos ',
                '- Cada motor puede manejar de diferentes maneras los indices, y esto a su vez afectar el rendimiento de cada tipo ',
            ]),
        new Item('boyceCodd',
            [
                '- El modelo relacional fue introducido en los años 60 por Edgar Frank Codd e IBM, ',
                ' - despues fue incrementado su popularidad poco a poco hasta ser el principal modelo hoy en dia ',
                '- En este modelo se definen los siguientes objetivos: ',
                ' - Independencia fisica -> la forma de almacenar los datos, no debe influir en su manipulación ',
                ' - Independencia logica -> los datos almacenados no deben ser modificados si se cambia el motor de la bd ',
                ' - Flexibilidad -> la bd deberia ofrecer distintas vistas en funcion del usuario que la necesite ',
                ' - Sencillez -> la estructura logica deberia estar normalizada, hasta la 3ra forma normal, ',
                '  - o la 4ta forma normal Boyce-Codd',
                '',
                '- Normalmente casi todas las tablas que estan en la 3FN no suelen infrigir la FNBC ',
                '- No existe una regla definida para corregir de la 3ra a la 4ta forma normal ',
                '- En ciertos casos no es indicado hacerlo ya que la descomposición puede hacer perder la semantica de la relación ',
                '',
                ' Se tiene la siguiente tabla en 3FN        La FNBC serian las siguientes tablas: ',
                ' <strong>CodPostal Direccion    Ciudad             CodPostal  Direccion       CodPostal  Ciudad </strong>',
                ' 3000      las flores   Merida             3000       las flores      3000       Merida ',
            ]),
        new Item('sqlVsNosql',
            [
                '- Si ya se conoce SQL y se manejan bien las relaciones y la normalización, intentar replicar esto en NoSql es un gran error ',
                '- Contrario a lo que se pensaria las BD NoSql no tienen problema alguno con la redundancia ',
                '- A continuación se expondran algunos puntos para definir que BD es más idonea, de acuerdo a las necesidades ',
                '',
                '                         SQL                                NoSql                                  ',
                '- Integridad       Estructura rigida                 Las estructuras son                           ',
                '  de datos         pero garantizada                  altamente mutables                            ',
                '',
                '                   Las tablas y sus relaciones       Cualquiera puede cambiar                      ',
                '- Atomicidad       evitan cambios no aceptados,      lo que sea, permitiendo una                   ',
                '                   es un todo o nada (rollback)      condición de carrera                          ',
                '',
                '                   No es imposible, solo es más      Ya que no tiene integridad,                   ',
                '- Escalabilidad    costoso y puede tener problemas   crecer es facil y más rapido                  ',
                '                   con la integridad de datos                                                      ',
                '',
                '- Velocidad        Los Joins pueden ser lentos       El volumen no es un problema,                 ',
                '                   debidos a la cantidad de datos    siempre y cuando no hayan relaciones          ',
                '',
                '- Consistencia     Siempre se garantiza y más si     La redundancia es algo totalmente normal      ',
                '  vs Redundancia   esta normalizada                  y esto puede conllevar a datos inconsistentes ',
                '',
                '                   SQL es maduro,                    su flexibilidad le permite ser más            ',
                '- Desarrollo       con una gran comunidad,           rapido para realizar cambios sin              ',
                '                   documentación extensiva,          grandes consecuencias                         ',
                '                   estandares bien definidos                                                       ',
                '',
                '- Escoger una BD Relacional si...',
                ' - Se necesita consistencia y transacciones atomicas, con un minimo de errores ',
                ' - Hay datos con relaciones y se buscaran en base a estos ',
                ' - Se debe introducir gente rapidamente al desarrollo ',
                ' - El apoyo de la comunidad es necesario y la estabilidad es un requisito ',
                '',
                '- Escoger una BD No Relacional si...',
                ' - La velocidad de lectura/escritura es prioridad sobre la consistencia ',
                ' - Se sabe poco del desarrollo y lo más probable es que cambie constantemente ',
                ' - La escalabilidad es una meta a tener en el tiempo ',
                ' - No se necesitan estructuras o simplemente se necesitan guardar los datos y nada más ',
                '',
                '- Escoger ambos si...',
                ' - Ya que ambos pueden coexistir en los sistemas complejos que necesiten ambas ventajas ',
                ' - Información muy consultada y de poca edición puede usarse con NoSql ',
                ' - Operaciones criticas y que requieran consistencia con SQL por tradición ',
            ])
    ];
