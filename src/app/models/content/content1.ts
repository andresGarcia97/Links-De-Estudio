import * as Keys from '../keys'
import { Item } from "../models";

export class Content1 {

    public temas: Item[] = [
        ...CALIDAD,
        ...HARDWARE,
        ...WEB,
        ...PARADIGMAS,
        ...ANALISIS_DATA,
        ...BASES_DE_DATOS,
        ...BASE_DE_DATOS_AVANZADO
    ];

}

export const CALIDAD =
    [
        new Item(Keys.CALIDAD_METRICS_SOFTWARE,
            [
                '- Además de revelar el desempeño del equipo de desarrollo, puede ser indicativo de la efectividad del equipo ',
                '- Las organizaciones se basan en una gran variedad de <em>KPI</em> para comprender el progreso en la ingenieria de software, en 4 categorias ',
                '',
                '<strong>Metricas de productividad</strong>',
                '<strong>- Tiempo de entrega:</strong> Tiempo que se tarda de inicio a fin para entregar un proyecto ',
                '<strong>- Cantidad de codigo:</strong> Lineas de codigo de la aplicación, esto puede ser un indicativo de la productividad, ',
                ' - más no de la calidad ni de la eficiencia, lo que puede conllevar a futuras refactorizaciones ',
                '<strong>- Trabajo en curso:</strong> Trabajo empezado y que se compara con lo anteriormente hecho para tener una idea del progreso ',
                '<strong>- Velocidad agil:</strong> Basandose en los sprints previos y cuantos puntos se han hecho, se puede estimar el proximo sprint ',
                '<strong>- Tasa de exito:</strong> Calcula el porcentaje de exito del sprint, esto no significa necesariamente completar los puntos, pero si las tareas ',
                '<strong>- Numero de versiones:</strong> Los equipos agiles dan prioridad a las nuevas versiones con nuevas caracteristicas que den valor ',
                '',
                '<strong>Metricas de rendimiento</strong>',
                '<strong>- Desempeño:</strong> Evaluan la escalabilidad, estabilidad, velocidad, entre otras caracteristicas',
                '<strong>- Rendimiento:</strong> Cantidad de datos que procesa un sistema en un periodo de tiempo ',
                '<strong>- Tiempo de respuesta:</strong> Tiempo que se tarda en responder a una consulta ó acción ',
                '<strong>- Fiabilidad y disponibilidad:</strong> Capacidad del software para cumplir con sus especificaciones ',
                '',
                '<strong>Metricas de defectos</strong>',
                '<strong>- Densidad de defectos:</strong> Cantidad de defectos por cantidad de lineas de codigo, evaluando la frecuencia de los defectos ',
                '<strong>- Cobertura de codigo:</strong> Proporcion del codigo que cubren las pruebas en relación a toda su extension, identificando areas sin cobertura ',
                '<strong>- Deteccion de defectos:</strong> Porcentaje calculado entre los defectos encontrados antes y despues del lanzamiento ',
                '<strong>- Deuda tecnica:</strong> Es el costo de ignorar problemas que a la larga se podran convertir en errores ',
                '<strong>- Vulnerabilidades de seguridad:</strong> Entre menos brechas y defectos se encuentren, más segura sera la aplicación ',
                '<strong>- Incidentes de seguridad:</strong> Recuento de las veces en que una aplicación fue vulnerada y la gravedad del ataque ',
                '<strong>- Tiempos de detección, fallos, reparación:</strong> Tiempos se tarda en notarse un error, que la aplicación falle, y que se corrija ',
                '',
                '<strong>Metricas de usabilidad</strong>',
                '<strong>- UX:</strong> Suelen ser cualitativas e incluyen las respuestas objetivas y subjetivas del usuario ',
                '<strong>- Usabilidad:</strong> Mide que tan bien el software permite alcanzar los objetivos del usuario ',
                '<strong>- Net Promoter Score(NPS):</strong> Puntaje que representa la voluntad de un cliente para recomendar la aplicación a otros ',
            ]),
        new Item('metricasEnCodigo',
            [
                '- La calidad del software es relativa y multidimensional, ligada a expectativas y caracteristicas, como restricciones y compromisos ',
                '- Algo que siempre se va a notar es la mala calidad de un software, mientras que la calidad suele pasar desapercibida y se da por sentada ',
                '- Aplicar estas metricas suele ser un tema complejo, ya que estas dependen de las necesidades especificas de la aplicación ',
                '- Pero esto trae grandes beneficios para las aplicaciones al permitir conocer el estado actual y las acciones para mejorar nuestro codigo ',
                '',
                '<strong>Acoplamiento:</strong> Todo modulo debe ser lo suficientemente independiente para ser modificado y afectar en lo minimo posible a los demás ',
                ' - demasiado acoplamiento significa que esto conllevara a efectos en cascada no deseados al realizar modificaciones en el codigo ',
                '',
                '<strong>Cohesion:</strong> Es el grado de relación entre las partes, y va muy de la mano con el principio de responsabilidad unica ',
                ' - un codigo poco integrado se vuelve complejo, dificil de mantener y poco reutilizable ',
                '',
                '<strong>Complejidad:</strong> Un algoritmo debe ser eficaz y facil de entender, de esta se diferencia 2 tipos de complejidad, ',
                ' - estudios y metricas, han mostrado una correlación directa entre la complejidad y la cantidad de <em>bugs</em> y las lineas de codigo ',
                '<strong> Complejidad Cognitiva:</strong>   Dificultad para entender intuitivamente el codigo ',
                '<strong> Complejidad Ciclomatica:</strong> Dificultad para probar determinado segmento de codigo ',
                '',
                '<strong>Code Churn:</strong> Frecuencia con que altera el codigo a traves del tiempo, a mayor numero de modificaciones, más posibilidad de error ',
                '',
                '<strong>Cobertura:</strong> Porcentaje de codigo cubierto por las pruebas, a mayor cobertura, menor es la posibilidad de defectos ',
                '',
                '<strong>Codigo muerto:</strong> Codigo que nunca es ejecutado, no siempre es facil de encontrar y no hay metodos infalibles para esto ',
                '',
                '<strong>Duplicación:</strong> Se da por del desconocimiento general del proyecto, replicando codigo que ya existe ',
            ]),
        new Item(Keys.CALIDAD_CLEAN_CODE,
            [
                '- La calidad de codigo es un estandar que siempre se debe perseguir, hasta el codigo más limpio puede verse afectado por malas practicas ',
                '- El proceso de degradación en todo proyecto es inevitable, más no incontrolable ',
                '- Los parches pueden ser reparaciones o adiciones rapidas y funcionales, sin embargo puedan estar en contravia directa de la calidad ',
                '- Una de las principales causas de esta degradación, es la calidad inicial del codigo base, entre mejor sea, más se ralentizara ',
                '',
                '- Para soluciones limpias y bien estructuradas se deberian seguir los siguientes pasos: ',
                '',
                '<strong>Analisis de caracteristicas:</strong> Toda nueva funcionalidad debe ser analizada e implementada de manera que, ',
                ' - el mayor numero de inquietudes este resuelto antes de iniciar o durante, entre más tiempo y correciones se hagan, sera peor',
                '<strong>Analisis del codigo base:</strong> Sabiendo la solución se debe analizar el codigo base para causar el menor impacto posible, ',
                ' - para tener claro que se puede modificar, reutilizar, que se debe crear, e incluso si hasta puede llegar generar efectos segundarios',
                '<strong>Desarrollo y Refactorización:</strong> No solo es desarrollar nuevos componentes, o modificar los existentes, ',
                ' - tambien puede haber lugar para refactorizaciones, evitando degradaciónes y parches mal estructurados ',
                '<strong>Testing:</strong> Además de verificar el funcionamiento del sistema, tambien ayudan a mantener el modelo, completo y detallado ',
                ' - de la arquitectura, definiendo las entradas y las salidas internamente, y en algunos casos hasta como documentación ',
                '',
                '- Realizados de manera adecuada, con la calidad del codigo en la mente, la degeneración de nuestro codigo puede ser aceptable ',
            ]),
        new Item('artesanos',
            [
                '- Se puede considerar el siguiente nivel del desarrollo profesional, mejorando nosotros mismos, y a los demás ',
                '',
                '- No sólo software que funciona, <strong>SINO</strong> también software bien diseñado',
                '- No sólo responder al cambio, <strong>SINO</strong> también agregar valor constantemente',
                '- No sólo individuos e interacciones, <strong>SINO</strong> también una comunidad de profesionales',
                '- No sólo colaboración con el cliente, <strong>SINO</strong> también asociaciones productivas',
            ]),
        new Item('costOfQuality',
            [
                '- En un nivel operacional las tecnicas de gestión de calidad deben identificar desperdicios, resolver problemas y optimizar procesos ',
                '- Generalmente enfocado a la prevención, pero tambien enfocado a la solución reactiva ',
                '',
                '<strong>Costos libres de errores:</strong> Sin relación con la planificación, control, correción y mejoras de la calidad, considerando que todo salga bien ',
                '<strong>Costos de la calidad:</strong> Relacionados a los problemas encontrados, estos pueden desaparecer si el proceso fuera libre de errores ',
                '<strong>Costos de conformidad:</strong> Asociados a prevención y evaluación de la conformidad con los requisitos ',
                '<strong>Costos de NO conformidad:</strong> Han de ver con las fallas ya sean internas y/o externas no detectadas y que terminan afectando al cliente ',
            ]),
        new Item('qualityGates',
            [
                '- Son politicas de calidad de las organizaciones, para cumplir con el objetivo de realizar un nuevo despliegue ',
                '- Suelen ser politicas para garantizar la calidad, fiabilidad, y reducción de errores, facilitando aspectos como el CD/CI',
                '- Estos requisitos pueden variar y ser más flexibles o más estrictos de acuerdo a las necesidades de cada proyecto ',
                '',
                '<strong>Algunas politicas de calidad comunes</strong>',
                '<strong>- Cobertura:</strong>        Este porcentaje indica cuanto del codigo de producción esta cobijado mediantes tests unitarios o de integración ',
                '<strong>- Duplicación:</strong>      Las lineas duplicadas no solo violan el principio de DRY, si no que dificultan directamente la mantenibilidad ',
                '<strong>- Fiabilidad:</strong>       Directamente relacionada con la cantidad de bugs encontrados y que tan graves son ',
                '<strong>- Vulnerabilidades:</strong> Riesgos de seguridad potenciales y especificos para cada lenguaje ',
                '<strong>- Deuda tecnica:</strong>    Pequeños errores, omisiones, sin tests, codigo mal estructurado, soluciones desprolijas, todo va sumando ',
                '',
                '<strong>Valores generales</strong>(<em>SonarQube</em>) Cobertura<strong> >=80%</strong>   Duplicación<strong> <=3%</strong>   Fiabilidad <strong>A</strong>   Vulnerabilidades <strong>A</strong>    Deuda tecnica<strong> <=5%</strong> '
            ]),
        new Item('qualityMetrics',
            [
                '- Casi todas esta metricas varian en cuanto al lenguaje en el que se apliquen, haciendo que sean congruentes entre si, más no iguales ',
                '',
                '<strong>Complejidad ciclomatica:</strong> Esta se calcula en base a los caminos que se puedan dar debido al uso y el orden de las estructuras de control ',
                '<strong>Complejidad cognitiva:</strong> Relacionado a la dificultad para entender el flujo de control del codigo, usando un modelo matematico especifico ',
                '<strong>Duplicación:</strong> Lineas de codigo duplicado, ignorando la sangria y el formato, tambien aplica para archivos, metodos y clases',
                '<strong>Problemas:</strong> Cantidad de problemas presente en el codigo, ya sean abiertos/cerrados, segun la gravedad o problemas confirmados/iniciales ',
                '<strong>Mantenibilidad:</strong> Metrica relacionada directamente con la cantidad y la dificultad de los code smells presentes, además de la deuda tecnica ',
                '<strong>Fiabilidad:</strong> Cantidad de errores y/o bugs presentes, la calificación dependera de que tantos hallan y que tan criticos sean ',
                '<strong>Seguridad:</strong> Vulnerabilidades encontradas, y/o problemas del lenguaje ',
                '<strong>Tamaño:</strong> Clases muy grandes pueden conllevar a smell codes y problemas de mantenibilidad, incluyendo los comentarios ',
                '<strong>Pruebas y cobertura:</strong> Además de evaluar la cantidad y el exito de las pruebas unitarias, se evaluara cuantos caminos estan cubiertos ',
            ]),
        new Item('codeReviews',
            [
                '- Es un proceso que data desde la epoca de los 80s, dado que Hewlett Packard (HP) buscaba mejorar su codigo base y procesos internos ',
                '- Despues de varios procesos, la revision por pares fue uno de los intentos más fructiferos ',
                '- Tambien valga la acotación de que en ese entonces la practicas de desarrollo no estaban tan estandarizadas ',
                '',
                '- 5 practicas para maximizar su valor: ',
                '',
                '<strong>Realizar un checklist</strong> Con un conjunto predeterminado de preguntas y reglas a seguir, el cual puede incluir: ',
                ' <strong>- Legibilidad del codigo</strong> Y si tiene comentarios, que estos aporten algun valor ',
                ' <strong>- Seguridad</strong> Que no se exponga el sistema a posibles ciber ataques',
                ' <strong>- Coberturas de pruebas</strong> Si es la adecuada o es necesario probar más casos ',
                ' <strong>- Arquitectura</strong> Que no se incumpla la estructura del proyecto, o si se implemento algun patron, este bien implementado ',
                ' <strong>- Reutilización</strong> Donde se utilizen componentes, funciones y servicios, que puedan ser reusados ',
                ' <strong>- Principios</strong> Como DRY, SOLID, GRASP, YAGNI; entre otros no se deberian incumplir ',
                '',
                '<strong>Metricas de revisión del codigo</strong> No se puede corregir, si no se mide primero de manera objetiva ',
                '<strong>- Tasa de inspección:</strong> Velocidad conque el equipo revisa una cantidad especifica de codigo, <em>lineas de codigo</em> <strong>/</strong> <em>horas de inspección</em>',
                ' - Si esto toma demasiado tiempo, es posible que haya problemas de legibilidad que se deban tratar ',
                '<strong>- Tasa de defectos:</strong> Frecuencia con que se identifican defectos, <em>defectos</em> <strong>/</strong> <em>horas de inspección</em>',
                ' - Si este proceso es tardado, tal vez los desarrolladores deban usar mejores herramientas de prueba ',
                '<strong>- Densidad de defectos:</strong> Defectos encontrados, en una porción especifica de codigo, <em>defectos</em> <strong>*</strong> <em>miles de lineas de codigo</em> ',
                ' - Ayudando a identificar que componentes son más propensos a ser vulnerables, y asignando recursos a donde son necesarios ',
                '',
                '<strong>Los comentarios realizados, deben justificar la postura que se tome</strong> No solo sugerir lo que se deba arreglar ',
                ' - Se debe explicar el porque del cambio y diferentes opciones para realizarlo es lo más constructivo ',
                ' - Esto con el fin de compartir conocimiento, lo que ayudara abordar problemas similares en el futuro ',
                ' - Este debe ser un espacio de mejora y crecimiento, no de evaluación, asi el proceso sera menos intimidante y más eficiente',
                '',
                '<strong>Revisiones pequeñas</strong> Revisar más de 400 lineas, puede tener un aspecto adverso para encontrar errores ',
                ' - Además de que estadisticamente hablando, estos se encuentran frecuentemente en las primeras 200 lineas ',
                ' - Esto en base a los datos recopilados por un estudio realizado por <em>Cisco</em>, enlace disponible en el articulo original ',
                '',
                '<strong>Mejorar o complementar la automatización</strong> Planificar las revisiones, identificar a los revisores indicados ',
                ' - de manera que esto no se convierta en una carga impositiva, si no que sea un espacio colaborativo y de aprendizaje ',
                ' - y que el proceso se pueda convertir en punto de referencia para detectar y corregir errores antes de que su costo aumente ',
            ]),
        new Item(Keys.CALIDAD_LINTING,
            [
                '- Son una ayuda para encontrar errores y falencias en nuestro codigo durante la etapa de desarrollo, como:',
                '',
                ' - Errores de sintaxis            - Codigo innecesariamente complejo ',
                ' - Uso de malas practicas         - Estilos de codificación inconsistentes ',
                '',
                '- Estos errores suelen ser comunes, dado que suelen ser menos evidentes y generalmente poco graves, pero siguen estando ahi ',
                '- Estas herramientas no solo nos muestran los posibles errores, tambien pueden dar sugerencias de posibles soluciones ',
                '- Tambien permiten la configuración de nuevas reglas para cuando se trabaja en equipo y mantener la consistencia ',
                '',
                '<strong>Partes:</strong>',
                '<strong>- Parser:</strong> Se encarga de traducir el codigo escrito, a una representación entendible por la maquina, como un Arbol ',
                '<strong>- Reglas:</strong> Es una colección de logica, que permite identificar problemas potenciales y posibles soluciones ',
                '<strong>- Resultado:</strong> Se muestra el reporte de las reglas que se infringierón ',
            ]),
        new Item('analystQA',
            [
                '- Es una forma de asegurar la calidad de los productos y los servicios que se utilizan a diario, un analista en esta area, ',
                ' - es el encargado de garantizar la calidad final del producto, servicio, hardware, etc.. previniendo errores y defectos ',
                '',
                '<strong>Funciones generales:</strong>',
                '<strong>Planificar y Ejecutar Pruebas:</strong> Con el fin de detectar fallos, comportamiento inesperados, mediante diversas tecnicas como: ',
                ' - pruebas manuales, pruebas automatizadas, pruebas unitarias, de sistema, de aceptación, entre otras',
                '<strong>Documentar errores y validar correciones:</strong> Cualquier error que se detecte, debe ser documentado de forma clara y detallada, ',
                ' - para que pueda ser replicado, analizado y corregido, ya sea mediante capturas de pantalla, o otras evidencias ',
                '<strong>Colaboración:</strong> Estos profesionales, trabajan de forma estrecha con diferentes equipos, como desarrollo, marketing, diseño, ',
                ' - para asegurarse que el proyecto cumpla con todos los requisitos ',
                '<strong>Automatización de pruebas:</strong> Tambien pueden escribir y ejecutar scripts que ejecuten prueba de manera repetible y consistente ',
                '',
                '<strong>Competencias de un analista:</strong>',
                '- Conocimientos en informatica y programación                              ',
                '- Habilidades blandas y comunicación entre equipos                         ',
                '- Dominar metodologias agiles y sus herramientas, (Jira, Kanba, SCRUM, etc)',
                '- Manejo de herramientas de testing, (Selenium, Junit, Mocca, etc)         ',
                '- Habilidades de analisis y resolución de problemas',
                '',
                '<strong>Porque es importante:</strong>',
                '- Garantiza a mantener y elevar los requisitos y expectativas de los usuarios ',
                '- Reduce el riesgo de errores, y la incidencia de problemas ',
                '- Ayuda a mejorar la calidad, el rendimiento, la seguridad y la usabilidad de los productos ',
                '- Ayuda a mejorar la reputación de la empresa, al tener una area comprometida con la calidad y el servicio ',
            ]),
        new Item('codeReviewPyramid',
            [
                '- Aveces en una revisión de codigo, se hace hincapie en asuntos mundados del software como ortografia, formato y estilo de codificación ',
                '- Aspectos que en grandes niveles pierden importancia, como retrocompatibilidad, es eficaz ?, cumple con lo pactado ? ',
                '',
                '                                                         Cumple con el formato del proyecto ?',
                '      <strong>Code</strong>                                               Se adhiere a las convenciones del lenguajes ?',
                '      <strong>Style</strong>                                              Usa DRY y/o otros patrones ',
                '                                                         El codigo es entendible y mantenibles ?',
                '',
                '                                                     Todos los tests siguen pasando ?',
                '                                                     La nueva funcionalidad esta debidamente testeada ? ',
                '      <strong>Tests</strong>                                          Incluye casos anomalos o casos especificos de falla ?',
                '                                                     Tiene test de integración, o son si quiera necesarios ?',
                '                                                     Incluye tests no funcionales (NFR), como rendimiento entre otros ?',
                '',
                '                                                 La nueva funcionalidad, esta debidamente documentada ?',
                '                                                 Se documentan los puntos relevantes y/o importantes ?',
                '      <strong>Documentación</strong>                              Incluye guias de usuario y/o manuales ?',
                '                                                 La documentación es entendible para el publico que esta orientada ?',
                '                                                 Errores gramaticales o de semantica ? ',
                '',
                '                                           Se satisface el requerimiento original ?',
                '                                           La logica esta correcta y no tiene complejidad agregada ?',
                '      <strong>Semantica de la</strong>                      Resiliente y robusto ante errores ? ',
                '      <strong>Implementación</strong>                       Contiene problemas de rendimiento ?',
                '                                           Es seguro, o revela vulnerabilidades del sistema ?',
                '                                           Puede ser observado y/o medido (metricas, logs, alertas)',
                '                                           Agrega nuevas dependencias, y siendo el caso que licencias usan ',
                '',
                '                                   El tamaño es el adecuado, o se puede reducir ?',
                '                                   Se puede hacer de diferentes maneras, y siendo asi, esta es la mejor ?',
                '      <strong>Semantica</strong>                    Es una función general y reutilizable o es especifica ?',
                '      <strong>del Api</strong>                      Como es la división a nivel interno del codigo ?',
                '                                   Hay Breaking changues, y si hay cual es su impacto ?',
                '                                   Es coherente y sigue el principio de la minima sorpresa, además cualquiere otro que aplique',
                '',
                '- Entre más abajo se encuentre en la piramide, es donde se deberia hacer la mayor cantidad de esfuerzo posible ',
                '- Entre más problemas se hallen en la partes bajas, mayor sera el esfuerzo para cambiarlo y/o corregirlo ',
                '- Las parte más altas, son las más propensas a automatización ',
            ]),
        new Item('doraAndSpaceMetrics',
            [
                '<strong>DORA</strong> <em>DevOps Research and Assessments</em> es un conjunto de 4 metricas que evaluan el rendimiento en las entregas de software ',
                '',
                '<strong>- Frecuencia de desarrollo:</strong> Frecuencia con la que se pone el codigo a disposición de producción o se libera para el usuario final ',
                '<strong>- Tiempo de espera para los cambios:</strong> Cuanto tiempo transcurre desde la definición del codigo, hasta su uso exitoso en producción ',
                '<strong>- Tiempo medio de recuperación:</strong> Cuanto se tarda en restablecer el servicio si se produce una incidencia/defecto que afecte a los usuarios ',
                '<strong>- Tasa de error de los cambios:</strong> Porcentaje de cambios/entregas que provocan una degradación del servicio o que requieran de correcciones ',
                '',
                '<strong>SPACE</strong> Enfoque de productividad de los desarrolladores, elaborado por investigadores de <em>Github</em> y <em>Microsoft</em> donde se resumen 5 factores ',
                '',
                '<strong>- Satisfacción y Bienestar:</strong> ¿ Tus desarrolladores estan felices y sanos ?, ¿ Disfrutan de su trabajo ?, ¿ Se sienten apoyados ? ',
                '<strong>- Rendimiento:</strong> ¿ El software entregado cumple con normas de calidad ?, ¿ Cumple las expectativas de los clientes ?',
                '<strong>- Actividades:</strong> ¿ Cuanto trabajan los desarrolladores ?, ¿ Invierten el tiempo en tareas significativas ?, ¿ Evitan o sortean retrasos ?',
                '<strong>- Comunicación:</strong> ¿ Por que medio se comunican y colaboran entre si ?, ¿ Hay un intercambio eficaz de ideas ?',
                '<strong>- Eficacia:</strong> ¿ Con que fluidez trabajan los desarrolladores ?, ¿ Evitan las distracciones y/o cuellos de botella ?',
                '',
                '- Combinando ambas metricas se suele lograr una visión global, holistica y equilibrada del rendimiento del desarrollo de software ',
                '- Mientras que <em>DORA</em> capta aspectos tecnicos, <em>SPACE</em> se centra en factores humanos y sociales ',
                '- Obteniendo una mejor comprensión de los puntos fuertes y debiles de tu equipo, alineandose mejor con los objetivos y retos a enfrentar ',
            ]),
        new Item('goodCodingPrinciples',
            [
                '- Seguir las <strong>convenciones</strong> de la comunidad y las <strong>especificaciones</strong> del lenguaje, ayudando con la consistencia y la legibilidad ',
                '',
                '- <strong>Documentación y Comentarios</strong> Un buen codigo esta documentado, para explicar las decisiones de negocio, y el porque se tomaron, ',
                ' - en cuanto a los comentarios, no se deben abusar de ellos, y solo se deberian usar donde sean realmente necesarios, ',
                ' - además de que ambos, se deben mantener actualizados a la par de los cambios del software ',
                '',
                '- <strong>Robustez</strong> Un buen codigo debe ser capaz de manejar una gran variedad de situaciones inesperadas sin fallar, ',
                ' - o producir resultados impredecibles, existen enfoques como el manejo de excepciones o la programación defensiva ',
                '',
                '- Siga el principio de <strong>SOLID</strong> que junto con otros principios, son increiblemente utiles para crear un software escalable y mantenible ',
                '- <strong>Testing</strong> No solo se deben realizar pruebas unitarias, un buen codigo debe ser facil de probar, ya sea de manera unitaria o de otros tipos ',
                '',
                '- <strong>Abstracciones</strong> Para esto se requiere de extraer la logica central y ocultar la complejidad, de manera que se logre un equilibrio, ',
                ' - entre flexibilidad, sin estar sobrediseñado, ni cerrarse a las posibilidades de de crecimiento a largo plazo ',
                '',
                '- Usar <strong>Patrones de Diseño</strong> Sin abusar de ellos, cada patron tiene un escenario donde es aplicable, asi no se agrega complejidad innecesaria ',
                '- <strong>Reducir las dependencias globales</strong> Para evitar una gestión de estados innecesarias, y reducir efectos segundarios ',
                '- <strong>Refactorización</strong> La mantenibilidad se logra reduciendo la deuda tecnica reduciendo y solucionando problemas lo antes posible ',
                '- <strong>Seguridad</strong> Un buen codigo evita la mayor cantidad de vulnerabilidades posibles, en especial las comunes y de facil solución '
            ]),
        new Item(Keys.CALIDAD_CODE_ROT,
            [
                '- Inevitablemente todo codigo se degrada con el tiempo, pero esto solamente es un problema si no se contiene ',
                '- La deuda tecnica, suele ser un acto de negligencia, por parte de desarrolladores apresurados o inexpertos ',
                '- Esto se puede contener, siempre que se dedique recursos y tiempo, en tareas como calidad, analisis y refactor ',
                '- El daño realizado por estos desarrolladores puede ser devastador, si no es debidamente supervisado, el codigo se pudre ',
                '- Generalmente este proceso se da en los siguientes pasos: ',
                '',
                '<strong>Toma de Decisiones:</strong> Aca las empresas distribuyen, presupuestos a largo y corto plazo, de manera que la jerarquia y la politica toman relevancia ',
                '',
                '<strong>Administración:</strong> Aca se estiman los proyectos, recursos, personal, equipos, etc... y se comete el error de tomar estos datos como inamovibles ',
                ' - y lo ultimo que se quiere escuchar, es que las fechas se deben posponer por cosas como <em>calidad</em> y <em>deuda técnica</em>',
                '',
                '<strong>Plazos VS Realidad:</strong> Estos proyectos suelen estar vinculados directa o indirectamente a la financiación; Un proyecto de ingenieria ',
                ' - es como saltar de un avión; No puedes saber como es, hasta que realmente lo haces ',
                '',
                '<strong>Las areas grises:</strong> Cuando creas nuevo codigo, descubres lagunas, funcionalidades que no existen, servicios incongruentes, etc... ',
                ' - Puedes solicitar que el <em>propietario</em> haga los cambios pertinentes, si es posible, y siempre y cuando que haya disponibilidad ',
                ' - Solucionarlo uno mismo, siendo esta la opción más rapida y comun generalmente, si se es consciente, se hara lo minimo necesario para continuar, ',
                '  - con la mejor calidad posible, y verificando que el codigo existente no se haya dañado',
                '  - pero esto con el tiempo se expandira a este, además de otros proyectos, casi siempre que se necesite realizar algun cambio',
                '',
                '<strong>Codigo incorrecto:</strong> Los fragmentos de codigo incompletos son comunes, ya sea por requisitos incompletos ó conocimientos insuficientes, ',
                ' - como nadie es dueño de estos fragmentos, y su dominio no esta claro, empiezan a ser modificados a conveniencia de multiples equipos, ',
                ' - por lo que si alguien usaba algun servicio, de un momento a otro, empezaran a haber errores en multiples lugares, sin razon aparente ',
                '',
                '<strong>Colapso:</strong> Un Jardin descuidado, sera invadido por las malas hierbas, y no importa la calidad, las buenas practicas, el trabajo extra, etc.. ',
                ' - si no se define una propiedad real, el codigo se pudrira, y dejara de crecer, para ahora mantenerlo funcionando y solucionando errores, ',
                ' - hasta que sea insostenible y sea necesaria una nueva versión, a la cual le puede pasar lo mismo, si no se aprende de los errores ',
            ]),
        new Item(Keys.CALIDAD_IF_ELSE,
            [
                '- La <em>complejidad cognitiva</em> suele ser una de las principales razones para <em>refactorizar</em> el codigo, eso incluye las instrucciones de control ',
                '- Las instrucciones de control <strong>If</strong> y <strong>Else</strong> pueden generar un codigo complejo y dificil de mantener si se usan de manera excesiva ',
                '',
                '<strong>Strattegy Pattern:</strong> El patron de estrategia define una familia de algoritmos que puedan ser encapsulables e intercambiables ',
                '- Este patron es util cuando existen multiples formas de realizar una tarea determinada y pueden ser abstraidas de manera generica ',
                '',
                '<strong>Enums:</strong> Las enumeraciones pueden ser usadas como un conjunto de constantes predefinidas, con sus respectivos comportamientos asociados ',
                '',
                '<strong>Polimorfismo:</strong> El polimorfismo permite que un objeto se trate como instancias de diferentes tipos',
                '',
                '<strong>Expresiones lambda e interfaces funcionales:</strong> Cuando se trata de metodos pequeños y logica simple ',
                '',
                '<strong>Command Pattern:</strong> Encapsula peticiones como objetos parametrizados ',
                '',
                '<strong>Guard Clauses:</strong> Se cambian las condiciones de manera que se puedan tener retornos anticipados reduciendo las estructuras anidadas ',
            ])
    ];

export const HARDWARE =
    [
        new Item('virtualizacion',
            [
                '- Es un entorno virtual que funciona con su propia CPU, memoria, red, y almacenamiento, que se crea dentro de un sistema de hardware fisico ',
                '- Esto se da mediante un software llamado <em>hipervisor</em> encargado de separar y gestionar los recursos reales para que la VM pueda gestionarlos ',
                '- Las VM estan aisladas del host, y este a su vez puede contener las VM que soporte ',
                '- Una VM permite que se ejecuten diferentes Sistemas Operativos dentro de la misma maquina ',
                '',
                '<strong>Ventajas:</strong>',
                '- Permiten aprovechar mejor los recursos de una maquina desaprovechada, al permitir compatirlos entre diferentes SO de manera simultanea',
                '- Dado su aislamiento se puede ejecutar software que no es de confianza sin peligro de que dañe al host ',
                '- Ofrecen más formas de recuperación ante desastres, ante desastres permiten permiten la tolerancia a fallos y la redundancia '
            ]),
        new Item('cli',
            [
                '- Es una interfaz de usuario basada en texto ',
                '- Antes de la invención del mouse, la unica interacción posible con el Sistema Operativo era mediantes comandos ',
                '- Los comandos no son universales, algunos son reconocibles solo por aplicaciones ó Sistemas Operativos especificos ',
                '- Pueden funcionar con o sin argumentos, los argumentos son maneras de especificar detalles y/o configuraciones ',
                '- Son rapidas y más eficientes ya que no necesitan interfaces graficas para funcionar ',
                '- Tambien son más complejas de usar, ya que se basan en la memoria del usuario ',
            ]),
        new Item('escalamiento',
            [
                '- Capacidad de un software para crecer de acuerdo a la demanda ',
                '',
                '<strong>Vertical:</strong>',
                '- La más facil de realizar pero la más costosa, ya que solo implica comprar un hardware más potente',
                '- Esta depende directamente de la capacidad de la infraestructura, sin contar en que llegara un momento donde llegue a su limite',
                '- Las fallas en la infraestructura pueden conllevar a errores colapsantes ',
                '',
                '<strong>Horizontal:</strong>',
                '- Esta es más dificil de realizar pero es practicamente ilimitada',
                '- Se basa en tener varios nodos trabajando en paralelo de manera coordinada ',
                '- Soporta el balanceo de cargas y tiene una disponibilidad muy alta, además de que se puede combinar con un escalamiento vertical',
                '- El mantenimiento se incrementa considerablemente, además de que se requieren cambios en el software para poder trabajar como un conjunto'
            ]),
        new Item('nubeVSvirtualizacion',
            [
                '- Ambos conceptos hacen referencia a la creación de entornos utiles a partir de recursos abstractos, bajo diferentes conceptos ',
                '- La virtualización nos permite esto teniendo recursos especificos y de manera fisica ',
                '- La nube es un entorno de TI que agrupa, extrae y comparte recursos ajustables en una red ',
                '',
                '                           Virtualización                    Nube                     ',
                '- Definición                 Tecnologia                   Metodologia                 ',
                '',
                '- Proposito               Multiples entornos,           Agrupar recursos              ',
                '                        un solo sistema fisico        Con alta disponibilidad         ',
                '',
                '- Uso                Entregar recursos especificos  Entregar variedad de recursos     ',
                '                         a usuarios especificos        con multiples fines            ',
                '',
                '- Configuración          Basado en imagenes            Basado en plantillas           ',
                '',
                '- Duracion                  largo plazo                  Mediano plazo                ',
                '',
                '- Escalabilidad               vertical                    horizontal                  ',
            ]),
        new Item('rendering',
            [
                '<strong>Server-side:</strong> Esta funciona convirtiendo archivos estaticos HTML en información utilizable por el navegador ',
                '- Este proceso no cuenta con un modo de cache, por lo que cada vez que se necesite, este sera pedido al servidor ',
                '- Su velocidad no solo depende del servidor, si no de la optimización del sitio web, personas conectadas, etc.. ',
                '- Generalmente cada vez que hay un cambio se vuelve a pedir todo el contenido y no solo lo que se modifico ',
                '- El lado positivo de este metodo es el SEO ya que es mucho más eficiente y facil para los motores de busqueda ',
                '- Este enfoque es ideal para contenido estatico, que no se requiera para una interactividad continua con el usuario ',
                '',
                '<strong>Client-side:</strong> Esta funciona mediante Javascript que obtendra el documento basico de HTML, y despues ejecutara el resto del sitio usando al navegador ',
                '- Este enfoque es más reciente y es utilizado por las librerias y frameworks de Javascript como Vue y Angular ',
                '- Mediante esto el servidor solo se encarga de responder con los datos, el resto se hace en el navegador ',
                '- Las paginas se cargan más rapido ya que solo se modifica lo que se necesite y no todo el archivo ',
                '- Debido a que se necesitan todos los archivos para una carga correcta de la pagina, la conexión a internet puede afectar la carga inicial ',
                '- Generalmente se requiere de varias a muchas dependencias de terceros, incluyendo los problemas que esto puede tener ',
            ]),
        new Item('modelOSI',
            [
                '- Es un modelo conceptual que permite la comunicación entre diversos sistemas usando un protocolo estandar ',
                '- Este consta de 7 <strong>Capas</strong> abstractas apiladas verticalmente ',
                '',
                '<strong> 7 Aplicación:</strong>      Interacción hombre-maquina donde las aplicaciones pueden acceder a servicios de red ',
                '<strong> 6 Presentación:</strong>    Garantiza que los datos tengan un formato utilizable, además se encriptan los datos si es necesario ',
                '<strong> 5 Sesión:</strong>          Mantiene las conexiones y es el responsable de controlar puertos y sesiones ',
                '<strong> 4 Transporte:</strong>      Transmite los datos mediante protocolos de transmision, incluidos TCP y UDP ',
                '<strong> 3 Red:</strong>             Decide la ruta fisica que seguiran los datos, ya sea en la misma o en otra red ',
                '<strong> 2 Enlace de datos:</strong> Define el formato de los datos en la red, además de controlar errores de flujo ',
                '<strong> 1 Fisica:</strong>          Transmite el flujo de bits sin procesar a traves del medio fisico, y que estos sepan diferenciar el 1 y el 0 ',
                '',
                '- Esta organización de capas permite una mejor depuración de errores, ',
                ' - a la vez que cada capa tiene una responsabilidades bien definidad a la hora de recibir o enviar información ',
            ]),
        new Item(Keys.HARDWARE_MONITOREO,
            [
                '- Es un software que nos permite monitorizar y descubrir problemas a nivel de aplicación que pueden ser optimizados ',
                '- Para esto, es necesario recoger y cuantificar valores como: ',
                ' - Errores de la aplicación, especificando cuales y cuantas veces sucedieron ',
                ' - Tiempo de respuesta de la aplicación ',
                ' - Identificación de trazas lentas ',
                ' - Tiempo de ejecución de querys en la base de datos ',
                ' - Tiempo de respuesta de llamados externos ',
                '',
                '- Mediante esto es posible encontrar errores como: ',
                ' - Consultas a bases de datos que pueden ser optimizadas ',
                ' - Problemas con el Garbage Collector o la JVM ',
                ' - Manejo erroneo de problemas ',
            ]),
        new Item('vmVsContainers',
            [
                '                    <strong>Virtualización</strong>                                        <strong>Contenedores</strong>               ',
                '         - Reduce los costos asociados al hardware             - Requieren menos recursos y son más livianos                           ',
                '           al utilizar recursos desperdiciados                 - Más eficientes y escalables                                           ',
                '<strong>Pros</strong>     - Aislamiento de las aplicaciones                     - Son más congruentes y simplifican el CD/CI           ',
                '         - Menos espacio en equipos fisicos                    - Son más portatiles e interoperables                                   ',
                '                                                                                                                                       ',
                '                                                                                                                                       ',
                '         - Se encuentran limitados por los recursos del host   - No siempre tienen mejor rendimiento                                   ',
                '<strong>Contras</strong>  - Arranque lento, dependiente del host                - No son idoneos para administrar dispositivos fisicos ',
                '         - Pueden ser infectadas por el host                   - No esta 100% estandarizado, entre provedores                          ',
                '                                                               - Las aplicaciones graficas no funcionan bien                           ',
            ]),
        new Item('falseSharing',
            [
                '- Suele suceder cuando varias aplicaciones intentan acceder a la misma region de memoria logica y ',
                ' - cada programa/subprograma a su vez ha almacenado un copia de este valor, en su propio cache',
                '- Cada vez que este sufre alguna modificación, esto hace que las demás partes sean invalidas y deban consultar el valor actual ',
                '- El problema del "falso compartir", radica cuando los datos afectados por un programa, no son usados por los otros; ',
                ' - si no que estan situados en la misma linea del cache',
                '- Obligando a realizar consultas innecesarias en memoria, que afectan el rendimiento',
                '- Este es un problema dificil de detectar, debido a que es inherente a la arquitectura de los componentes fisicos ',
                '- Esto tambien suele suceder cuando se paralelizan procesos, invalidando bloques comunes constatemente, aunque no este compartidos ',
                '',
                '- Suelen haber contramedidas, desde alto nivel hasta bajo nivel',
                ' - Colocar espacios en blancos, antes o depues de los datos, a manera de que queden en lineas de cache separadas ',
                ' - Modificar la velocidad de lectura/escritura del cache para reducir la periocidad ',
                ' - Cambiar la administración del cache del componente fisico ',
                ' - Alterar como el SO administra el uso compartido',
            ]),
        new Item(Keys.HARDWARE_PROTOCOLS,
            [
                '- Son un conjunto de reglas que describen como los dispositivos conectados se comunican a traves de una red, para intercambiar información ',
                '- Sirven como un lenguaje en comun, para una comunicación facil y segura sin importar las diferencias de hardware o procesos internos ',
                '',
                '<strong>Protocolos de comunicación de red:</strong> Determinan las reglas y formatos para transferir datos a traves de redes',
                '<strong>- Protocolo de transferencia de hipertexto <em>(HTTP)</em></strong>: Protocolo de internet que permite la comunicación entre un servidor y un navegador ',
                '<strong>- Protocolo de control de transmisión <em>(TCP)</em></strong>: Protocolo confiable orientado a la conexión que ayuda en la transmisión ',
                ' - secuencial de paquetes de datos para garantizar que los datos lleguen al destino a tiempo sin duplicaciones ',
                '<strong>- Protocolo de Internet <em>(IP)</em></strong>: Facilita el enrutamiento de los paquetes de datos a traves de las redes, funciona junto con <em>TCP</em>',
                '<strong>- Protocolo de datagramas de usuario <em>(UDP)</em></strong>: Es un protocolo sin conexión que no garantiza una conexión entre la aplicación y el servidor ',
                ' - antes de transmitir un mensaje, es eficaz para casos de uso como transmisiones o <em>broadcasts</em> ó <em>multicast</em> ',
                '<strong>- Protocolo de transferencia de archivos <em>(FTP)</em></strong>: Permite compartir archivos entre servidores estableciendo 2 conexiones <em>TCP</em>, ',
                ' - una para datos y otra para control, para garantizar la recuperación en casos de perdida de datos ',
                '',
                '<strong>Protocolos de seguridad de red:</strong> Garantizan una transmisión segura de datos a traves de conexiones de red',
                '<strong>- Protocolo seguro de transferencia de archivos <em>(SFTP)</em></strong>: Transfiere archivos de forma segura a traves de la red mediante, ',
                ' - el uso de cifrado de clave publica, y la auntenticación entre el cliente y servidor ',
                '<strong>- Protocolo seguro de transferencia de hipertexto <em>(HTTPS)</em></strong>: Supera la limitación de <em>HTTP</em> garantizando la seguridad, ',
                ' - de los datos en transito, mediante un canal seguro cifrado ',
                '<strong>- Secure Socket Layer <em>(SSL)</em></strong>: Ayuda a proteger las conexiones de internet, mediante cifrado, tambien existe una versión más reciente y segura <em>TLS</em>',
            ]),
        new Item(Keys.HARDWARE_OPERATIVE_SYSTEM,
            [
                '- Los <strong>Sistemas Operativos</strong> son la base de la informatica, es un conocimiento esencial para cualquier desarrollador de sistemas backend y/o distribuidos',
                '',
                '<strong>Gestion eficiente de recursos:</strong> El SO asigna y administra recursos del Hardware como CPU, Memoria, Dispositivos de I/O',
                '',
                '<strong>Concurrencia y MultiHilos:</strong> Los sistemas suelen gestionar varias solicitudes al mismo tiempo, y los sistemas distribuidos por naturaleza, ',
                ' - implican la gestión de tareas en multiples maquinas, además de manejar de forma eficiente multiples hilos, nucleos, procesos y subprocesos ',
                '',
                '<strong>Redes:</strong> En especial para los sistemas distribuidos, el SO suministra los componentes basicos para que se pueden comunicar, como sockets y protocolos',
                '',
                '<strong>Seguridad:</strong> Ofrece recursos y mecanismo para proteger a los recursos como la autenticación de usuarios, permisos de archivos, aislamiento de procesos, etc..',
                '',
                '<strong>Sistemas de Archivos:</strong> El almacenamiento y la consulta, son fundamentales para saber como funcionan las operaciones con el disco y el almacenamiento en cache ',
                '',
                '<strong>Optimizaciones:</strong> Para optimizar un sistema, es necesario saber como interactuara y que necesita este del SO',
                '',
                '<strong>Adaptabilidad(multiplataforma):</strong> Cada SO tiene APIs y comportamientos diferentes, por lo que se deben tener mecanismos para adaptarse ',
                '',
                '<strong>Solución de problemas y depuración:</strong> Un conocimiento profundo del SO ayudara a diagnosticar y solucionar problemas relacionados con fallas del sistema, ',
                ' - como fugas de memoria, cuellos de botella, entre otros problemas ',
            ]),
        new Item(Keys.HARDWARE_UTF8,
            [
                '- En los años 60 con el nacimiento de ARPANET, era necesario tener un estandar para transmitir la información, en ese entonces se utilizo <em>ASCII</em>',
                '- <strong>ASCII</strong> es una manera de codificar información en un sistema binario de 7 bits, de manera que cada letra o caracter escrito se convertia en 7 bits ',
                '- Pero este estandar solo aplicaba para el mundo angloparlante y el uso incipiente del internet prolifero diferentes sistemas de codificación',
                ' - dificultando el envio y la recepción de información, y por consiguiente la comunicacion internacional, como resultado se creo <em>Unicode</em>',
                '- <Strong>Unicode</strong> Tiene una lista de más de 100.000 caracteres que cubre practicamente todo lo que se puede escribir, sin importar el idioma, ',
                ' - el problema de tantos caracteres es que se necesitan 32 digitos binarios, de los cuales muchos seran 0 redundantes y un desperdicio ',
                '- Muchas computadoras toma 8 ceros como el final del mensaje, por lo que podrian cortarse por error, además de que deber ser retrocompatible ',
                '',
                '- Aqui interviene <strong>UTF-8</strong> <em>Formato de Transformación Unicode</em> un sistema de codificación para Unicode totalmente reversible ',
                '- Puede traducir cualquier caracter Unicode a una unica cadena binaria coincidente y tambien traducir la cadena binaria nuevamente a un caracter Unicode ',
                '- En cuanto al problema de los 32 bits se usa un sistema de codificación de longitud variable, por lo que nunca se enviaran 8 ceros seguidos ',
                ' - Los caracteres del <em>0-127</em>         utilizan <strong>1 byte</strong>  (110xxxxx)',
                ' - Los caracteres del <em>128-2047</em>      utilizan <strong>2 bytes</strong> (110xxxxx 10xxxxxx)',
                ' - Los caracteres del <em>2048-65535</em>    utilizan <strong>3 bytes</strong> (1110xxxx 10xxxxxx 10xxxxxx)',
                ' - Los caracteres del <em>65536-1114111</em> utilizan <strong>4 bytes</strong> (11110xxx 10xxxxxx 10xxxxxx 10xxxxxx)',
                '',
                '- Es el metodo de codificación más comun para internet, predeterminado para <em>HTML5</em>, y formatos para la transferencia de datos como <em>JSON</em> y <em>XML</em> ',
            ]),
        new Item(Keys.HARDWARE_CLEAN_CODE_PERFORMANCE,
            [
                '- <em>Robert C Martin</em> Es el autor de "Clean Code", coautor del manifiesto Agil y creador de los principios <strong>SOLID</strong> ',
                '- <em>Casey Muratori</em> Es un programador especializado en investigacion y desarrollo de motores de juegos, usado en franquicias como Age Of Empires y Gears Of War ',
                '- Existe un video y una repositorio donde se exponen con más detalle y mediante criterios tecnicos como ciertas practicas y recomendaciones ',
                ' - directamente recomendadas del Clean Code afectan negativamente el rendimiento de los sistemas ',
                '- Una de las principales razones es la complejidad inherente, la cual evita que los compiladores puedan optimizar al maximo el codigo generado ',
                '',
                '- Las principales practicas que afectan el codigo en tiempo de ejecución, son tambien algunas de las que afectan las estructuras del codigo ',
                ' - Preferir el Polimorfismo a estructuras de control como <em>if/else</em> y <em>Switch</em>',
                ' - El código no debería conocer los detalles internos de los objetos con los que está trabajando',
                ' - Las funciones deben ser pequeñas ',
                ' - Las funciones deberían hacer una cosa ',
                ' - <strong>DRY</strong> <em>Don´t Repeat Yourself</em>',
                '',
                '- Esto se explica mediante un ejemplo practico y sencillo: ',
                '- Existe una clase <em>Shape</em> inicial de la cual heredan las clases de <em>Circle</em>, <em>Triangle</em>, <em>Rectangle</em> y <em>Square</em> ',
                '- Existe un metodo comun, la cual se encarga de encontrar el area total de cada forma ',
                '- La primera forma usa el polimorfismo, mientras que la segunda forma se desvia de las buenas practicas además de usar switch para hacerlo ',
                '- La segunda función no solo es más eficiente, se ejecuta 15 veces más rapido que la versión original ',
                '',
                '- Esto no es un ataque directo hacia las buenas practicas ni al codigo limpio, No se deben ignorar si se quiere conseguir un codigo mantenible y organizado ',
                '- Pero si es una consideración de que cada acción que realizamos al programar, tiene un impacto directo en el rendimiento ya sea positiva o negativa ',
                '- Un gran punto en la discusión subsecuente es que depende del ambiente y de lo que se priorice, ciclos de desarrollo o ciclos de la computadora ? ',
            ])
    ];

export const WEB =
    [
        new Item('spa',
            [
                '- Es una aplicación web donde todo el contenido se muestra en una sola sin regargar el navegador ',
                '- Los componentes son segmentos individuales de HTML que juntos dan la impresión de unidad ',
                '- Este tipo de paginas tambien maneja las url para cambiar entre vistas ',
                '- La transición entre las paginas es fluida y el rendimiento es mayor en general ',
                '- Los frameworks actuales trabajan de esta manera ',
            ]),
        new Item('pwa',
            [
                '- Estas aplicaciones nacen de paginas web normales para parecerse a aplicaciones nativas de telefonos moviles ',
                '- NO se necesita descargar nada desde una tienda de aplicaciones, solo tener acceso a un navegador con internet ',
                '- Aunque necesitan internet para actualizaciones de la información, tambien puede funcionar sin este ',
                '- Bastante acorde con el enfoque mobile-first, que le da prioridad al movil que al escritorio ',
            ]),
        new Item(Keys.WEB_SEO,
            [
                '- Los motores de busqueda rastrean el contenido en la web de manera continua para presentar mejores resultados y tener mejores busquedas ',
                '- La indexación de contenido es una gran herramienta para buscar lo que se necesita ',
                '- El contenido de calidad es una de las mejores formas de aumentar el trafico del sitio web ',
                '- La accesibilidad al contenido y la experiencia del usuario tambien son importantes ',
                '- Saber como funcionan los motores de busqueda, permite optimizar el sitio para que sea más <strong>visible</strong> para estos ',
            ]),
        new Item(Keys.WEB_SPACE,
            [
                '- Es el espacio que se encuentra alrededor del objeto en cuestión, es bastante util para crear diseños simples pero atractivos ',
                '- El uso del espacio positivo y negativo puede dar pie a ilustraciones con mensajes directos pero sutiles ',
                '- Un gran artista sabe manejar estos conceptos, e imprimirles su toque unico, como en el articulo fuente se denota ',
                '',
                '<strong>- Espacio Positivo:</strong> Es la parte donde recae principalmente la atención en el diseño, y que espera llamar la atención ',
                '<strong>- Espacio Negativo:</strong> Es el resto del espacio que se encuentra entre los elementos, lo que <em>no esta ahi</em>, enmarca y contiene la composición ',
            ]),
        new Item('diseno',
            [
                '- El diseño grafico es importante en la programación debido a que este sera la cara visible de tu producto ',
                '- Es importante contestar respuestas previamente como: ¿ cual es tu objetivo ? & ¿ cual es tu producto ? ',
                '- NO descuides el color, tener una paleta de colores es tener una identidad ',
                '- Además de la identidad es importante saberlos combinar y tener un buen contraste y legibilidad entre si ',
                '- El uso de las imagenes y las fuentes tipograficas son más importantes de lo que parecen ',
            ]),
        new Item(Keys.WEB_USER_INTERFACE,
            [
                '<strong>Principios para el diseño de una UI</strong>',
                '<strong>- Familiaridad con el usuario:</strong> Utilizar conceptos y la experiencia del usuario para que le sea más "facil" de usar ',
                '<strong>- Consistencia:</strong> Las operaciones del mismo tipo deberian hacerse del mismo modo siempre ',
                '<strong>- Minima sorpresa:</strong> El comportamiento del sistema no debe provocar sorpresa en el usuario ',
                '<strong>- Recuperabilidad:</strong> Los usuarios deben tener mecanismos para recuperase en caso de error ',
                ' -  para este apartado se pueden usar confirmaciones o recursos para deshacer opciones ',
                '<strong>- Guia al usuario:</strong> Cuando un error ocurra, la interfaz debe ayudar al usuario a entenderlo ',
                '',
                '<strong>Prototipos de una UI',
                '<strong>- Estaticos:</strong> No permiten la alteración de sus componentes, pero si dan un bosquejo inicial ',
                '<strong>- Dinamicos:</strong> Estos diseños involucran un poco más de detalle tecnico, como especificaciones de rendimiento ',
                '<strong>- Robustos:</strong>  Ya presentan caracteristicas dinamicas, como validación de errores y edición de datos ',
                '',
                '<strong>Interacción del usuario en la UI',
                '<strong>- Manipulación directa:</strong> Interacción directa con los objetos de la pantalla ',
                '<strong>- Selección de menus:</strong> Se limitan las opciones, a cambio de ser más lenta y menos propensa a errores ',
                '<strong>- Formularios:</strong> Introducción de datos, por parte del usuario ',
                '<strong>- Comandos:</strong> Los usuarios emiten comandos y sus parametros asociados para realizar acciones más complejas ',
                '<strong>- Lenguaje:</strong> Usar un lenguaje natural que el usuario comprenda, lo hara accesible a más tipos de usuarios ',
                '',
                '<strong>Pautas de evaluación de una UI</strong>',
                '- Semejanza con el mundo real ',
                '- Consistencia y estandarización ',
                '- Estetica y diseño minimalista ',
                '- Reconocimiento, manejo y recuperación de errores ',
                '- Flexibilidad, control y libertad para el usuario ',
                '- Reconocimiento de acciones y ayudas ',
            ]),
        new Item('experienciaUsuario',
            [
                '- Es la percepción del usuario al interactuar con un producto ',
                '- Una buena UX se logra cuando el producto sea util y usable por el cliente a la hora de usarse',
                '- La UX no es lo mismo que la usabilidad, ya que esta la contiene además de otras caracteristicas ',
                '- Este objetivo no se logra agregando funcionalidades, si no, estando en el lugar de un cliente ',
                '',
                '<strong>Es necesario tener en cuenta:</strong>',
                '- Necesidades del cliente ',
                '- Objetivos del negocio ',
                '- Limitaciones tecnicas ',
                '',
                '<strong>Tambien investigar cosas como:</strong> ',
                '- Investigacion de los grupos de mercado y entrevistas con stakeholders ',
                '- Pruebas de usabilidad y analisis de datos ',
                '- Manejo y estructuración de la información presente ',
                '',
                '<strong>Habilidades blandas como:</strong>',
                '- Estudios en Psicologia, Sociologia o Antropologia ',
                '- Conocimientos en Comunicación , Marketing, y experiencia en ventas ',
                '- Diseño industrial o grafico, y conocimientos en tecnologias ',
                '',
                '<strong>        UX Designer                                   UI Designer<strong>',
                ' Diseño de interacciones                       Diseño visual',
                ' Traza caminos para el usuario                 Elige colores y tipografias',
                ' Jerarquia y segmentación de la información    Planes esteticos ',
                ' Prototipos e investigación                    Maquetación y diseño grafico',

            ]),
        new Item('logos',
            [
                '<strong>- Isotipo:</strong>   Parte reconocible de una marca sin presencia de texto ',
                '<strong>- Isologo:</strong>   El texto y el icono son parte de un mismo conjunto, no funcionan por separado ',
                '<strong>- Logotipo:</strong>  Texto que representa la marca y es la parte reconocible de esta ',
                '<strong>- Imagotipo:</strong> Combinación de imagen y texto, que tambien pueden separarse y ser efectiva ',
            ]),
        new Item('gestalt',
            [
                '- Es una manera de encontrar sentido en como nuestras mentes perciben las cosas, como un todo y no solo como los elementos que lo forman ',
                '- <em>El todo es mayor que la suma de sus partes </em>',
                '',
                '<strong>Aparición:</strong> Surge cuando se percibe un objeto a partir de información previa que conozcamos ',
                '<strong>Cosificación:</strong> Los objetos se pueden reconocer incluso cuando hace falta parte de ellos, ',
                ' - Nuestro cerebro hace coincidir lo que se ve con patrones familiares en nuestra memoria ',
                '<strong>Multiestabilidad:</strong> Se basa en que los objetos ambiguos pueden ser interpretados de diferentes maneras, ',
                ' - y que dado esto se puedan ver varias formas, sin tener certeza de la verdadera ',
                '<strong>Invariabilidad:</strong> Los objetos simples pueden ser reconocidos independientemente de, su escala, rotación, traslación o perspectiva ',
                '',
                '<strong>Leyes aplicadas al diseño grafico</strong>',
                '',
                '<strong>Principio de semejanza:</strong> Si elementos que esten proximos entre si, y son similares ',
                ' - tenderemos a verlos como parte de un grupo, ya sea por color, tamaño o textura ',
                '<strong>Principio de continuidad:</strong> El ojo puede crear visualmente la continuidad de una linea, ya que el ojo ',
                ' - va a seguir el camino visual más suave, menos forzado y coherente ',
                '<strong>Principio de cierre:</strong> Cuando una figura no esta cerrada o delimitada por lineas, nuestra mente ',
                ' - tiende a transmitir una sensación de cierre, rellenando las formas ',
                '<strong>Principio de proximidad:</strong> Teoriza como tendemos a agrupar los elementos visuales proximos entre si ',
                ' - estos deben compartir alguna caracteristica en comun como forma, color, textura, tamaño ',
                '<strong>Figura y fondo:</strong> Usando el espacio negativo y la tendencia de ver un objeto separado de lo que lo rodea ',
                '<strong>Principio de Simetria y Orden:</strong> Si los elementos cuentan con cierta simetria y orden, son percibidos como parte del mismo grupo ',
                '<strong>Dirección comun:</strong> Los elementos que parecen construir un patron o flujo continuo y que estan en la misma dirección ',
                ' - son a su vez percibidos como parte de un grupo mayor ',
            ]),
        new Item('ssr-csr-ssg-isr',
            [
                '<strong>Server Side Rendering (SSR)</strong>',
                '- El HTML de la pagina es generado en el lado del servidor, ya sea mediante petición, o previamente ',
                '- Ventajas: ',
                ' - Mejora el SEO y la indexación del contenido ',
                ' - La carga inicial es más rapida al no tener que ejecutar nada más para mostrar el contenido ',
                ' - Puede funcionar, incluso si el Javascript dentro del navegador esta desactivado ',
                '- Desventajas: ',
                ' - Mala capacidad de respuesta si la conectividad a internet es baja o nula ',
                ' - Mayor carga al servidor, al tambien ser responsable de generar o entregar el HTML a mostrar ',
                '',
                '<strong>Client Side Rendering (CSR)</strong>',
                '- Ya es responsabilidad del navegador, y mediante Javascript se manipula el DOM para construir los nodos HTML ',
                '- Ventajas: ',
                ' - Rapido y con una mayor capacidad de interactividad con solo la carga inicial ',
                ' - Se puede escoger que partes del DOM se pueden actualizar para mostrar nueva información ',
                '- Desventajas: ',
                ' - La carga inicial es más lenta al tener que esperar para ejecutar javascript ',
                ' - Inutil si javascript esta deshabilitado en el navegador ',
                ' - El SEO se puede ver dificultado por el contenido inicial en blanco ',
                '',
                '- Desde la creación de NodeJs, se abrio la posibilidad de crear paginas hibridas, que comparte caracteristicas de ambos mundos ',
                '- Creando contenido inicial en el lado del servidor que no este completamente vacio y agregarle más funcionalidades en el navegador ',
                '- El proceso de agregar más interactividad a estos sitios estaticos se conoce generalmente como "Hidratación" ',
                '',
                '<strong>Static Site Generators(SSG)</strong>',
                ' - Estos ejecutan el codigo SPA en el momento de la compilación, y generan previamente el HTML en el servidor ',
                ' - Algunos frameworks como NextJs, Gatsby, NuxtJs, VuePress usan estas estrategias, ',
                ' - sin de dejar de ofrecer las caracteristicas de React y Vue en los cuales estan basados ',
            ]),
        new Item('esqueumorfismo',
            [
                '- Es un termino proveniente del griego <em>skeuos</em>, que significa vasija ó herramienta; y <em>morfo</em>, que significa forma ',
                '- La aplicación más reciente y generalizada esta ligada al primer Iphone, ya que cada icono intentaban evocar a su contraparte fisica ',
                '- Todo esto buscaba ser amigable con el usuario, además de jugar con el color y las sombras para acercarse aun más ',
                '',
                '<strong>Flat Design:</strong> Con el paso del tiempo, los usuarios nos acostumbramos a usar y hasta diseñar interfaces, ',
                ' - por lo que la necesidad de tener un icono el cual fuera una copia exacta fue perdiendo relevancia en el tiempo ',
                '- Esto con el fin de tener más relevencia en otras areas como el rendimiento y la funcionalidad ',
                '- Este tipo de diseño apuesta por iconos más abstractos y simples, de manera que llegan a carecer de colores, sombras y bordes ',
                '',
                '<strong>Diseño neomorfico:</strong> Como el arte mismo, el diseño avanza, y esta evolución no significa que las corrientes mueran ',
                '- Este diseño se puede considerar una fusión de los 2 estilos anteriores ',
                '- Se mantienen los iconos realistas sin caer en un exceso de detalles que sobrecarguen la experiencia ',
                '- A su vez se usan colores mezclas y degradados bastante expresivos, que van más alla de la cotidianidad ',
            ]),
        new Item('menorSorpresa',
            [
                '- Es una guia de diseño para las interfaces de usuario, donde cada componente debe comportarse  ',
                ' - de la manera que la mayoria de los usuarios se comporte o ya esten acostumbrados ',
                '- Los comportamientos deberian poder anticiparse, basandose en experiencias previas, con sistemas similares ',
                '- Esto garantiza que la aplicación sea intuitiva y facil de usar, en cierto modo ',
                '',
                '- Esto tambien aplica para el diseño de las APIs, si esta se comporta diferente y sorprende al usuario, se deberia pensar en rediseñarla ',
                '- El patron de Segregación de consultas y queries(CQRS), va de la mano con este principio, ',
                ' - separando los metodos que cambian un objeto(comando), de los que hacen preguntas(consultas)',
            ]),
        new Item(Keys.WEB_MICRO_FRONTENED,
            [
                '- El desarrollo de front es dificil, y escalarlo entre multiples equipos es aun más dificil ',
                '- La eficiencia de desarrollo se reduce proporcionalmente entre más equipos haya, debido a las multiples vias de comunicación ',
                '- Y más si solo se tienen una vista unica, para multiples micro servicios, ya que cada micro servicio, necesita cambios distintos ',
                '',
                '<strong>¿ Que es un microfrontend ?</strong>',
                '- Son una extensión del concepto de microservicios, aplicado al diseño web, Es un estilo arquitectonico y organizacional',
                '- Estos son micro aplicaciones autonomas, con dominios acotados, e independientes de la tecnologia o framework usado ',
                '- Para tener una mejor autonomia y eficiencia, lo mejor seria poseer una función de extremo a extremo, que se formaria en torno a un subdominio ',
                '- Los limites de cada microfrontend se establecen en función de los usuarios y no de los desarrolladores, por medio de <em>Domain Driven Design</em> (<strong>DDD</strong>)',
                '',
                '<strong>¿ Como funciona, el microfrontened ?</strong>',
                '- Existe una aplicación contenedora, que combina cada microfrontened y esta construida con HTML, CSS y Javascript minimos, tambien: ',
                ' - Representa los elementos en comun de la pagina, como encabezados, pies de pagina, menus, etc.. ',
                ' - Renderiza los microfronteneds bajo demanda',
                ' - Realiza cuestiones transversales como la autenticación, roles, permisos, manejo de rutas, etc.. ',
                '',
                '<strong>Aislamiento de CSS:</strong>',
                '- Existe el riesgo latente de que hayan estilos que se anulen entre si, al no tener espacios de nombres ni una adecuada encapsulación ',
                '- Esto se puede prevenir usando, preprocesadores, teniendo convenciones de nombres ó usando biblotecas de Css en Js',
                '',
                '<strong>Componentes compartidos:</strong>',
                '- Una biblioteca compartida ofrece coherencia visual y reutilizacón de codigo',
                '- Sin embargo deben ser componentes genericos, que no compartan logica empresarial, o se crearia un acoplamiento indeseado ',
                '- Deben ser manejados por un solo equipo, para una mejor calidad, pero no puede estar cerrado a contribuciones y sugerencias de otros equipos ',
                '',
                '<strong>Arquitectura:</strong>',
                '- Deben ser modelados entorno al dominio empresarial',
                '- Descentralizados a traves de equipos autonomos ',
                '- Se deben poder automatizar su implementación ',
                '',
                '<strong>Comunicación entre microfrontends:</strong>',
                '- Estos no deben compartir su estado y solo comunicarse si es estrictamente necesario, para evitar el acoplamiento, se pueden comunicar por: ',
                ' - Eventos personalizados                                     - Workers',
                ' - Pasar devoluciones de llamadas (callbacks)                 - Enrutamiento a travez de la barra de direcciones',
                '',
                '<strong>Tipos segun la composición:</strong>',
                ' <strong>Tiempo de construcción:</strong> Se publica como un paquete, que es incluido por la aplicación contenedora, centralizando las versiones ',
                ' <strong>Tiempo de ejecución:</strong> Se puede realizar con iframes, Javascript y webcomponents, de manera que los cambios sean independientes entre si',
                '- Ambos tienen ventajas y deventajas, como necesitar un release completo para cambiar alguna parte o problemas con las rutas, respectivamente ',
                '',
                '<strong>Ventajas:</strong>',
                '- Ciclos de desarrollo y de entrega rapida, debido a implementaciones aisladas y una base de codigo más simple',
                '- Tiempo de carga inicial reducido, ya que se cargan bajo demanda',
                '- Mayor confiabilidad y mantenibilidad al tener equipos pequeños y debidamente enfocados',
                '- La experimentación y las reversiones son más faciles de realizar',
                '',
                '<strong>Desventajas:</strong>',
                '- Mayor complejidad debido a gastos operativos',
                '- Trabajo adicional, para crear estandares y mantener una Experiencia de usario consistente',
                '- Tiempos de cargas más lentos, al navegar por la aplicación y un mayor consumo de red al tener dependencias duplicadas ',
            ]),
        new Item('buenasPracticasFront',
            [
                '- El desarrollo web es bastante amplio, abarca desde el diseño y creacion de interfaces de usuario, hasta areas como la optimización ',
                '',
                '<strong>HTML Semantico</strong>',
                '- Proporciona una estructura, con un significado intrinseco, mejorando la accesibilidad y la optimización de los motores de busqueda <strong>SEO</strong> ',
                '',
                '<strong>Metodologias CSS</strong>',
                '- Metodologias como: <em>Block, Element, Modifier</em> <strong>BEM</strong> & <em>Scalable and Modular Architecture for CSS</em> <strong>SMACSS</strong>',
                '- Promueven la modularidad, reutilización y la mantenibilidad de las Hojas de estilo, al seguir convenciones y facilitar la colaboración ',
                '',
                '<strong>Diseño Responsive</strong>',
                '- Esto es esencial para garantizar que los sitios web se adapten al mayor numero de pantallas y dispositivos posibles',
                '- Usando Media Queries, layouts, y unidades porcentuales, entre otros metodos, permiten una correcta visualización sin importar la plataforma ',
                '',
                '<strong>Mejora Progresiva</strong>',
                '- Se empieza una base de codigo funcional, donde se va mejoran progresivamente la experiencia del usuario',
                '',
                '<strong>Optimización</strong>',
                '- Un aspecto crucial para ofrecer experiencias de usuario rapidas y eficientes, en diferentes tipos de redes y capacidades ',
                '- Existen tecnicas como la mimificación, la carga diferida, almacenamiento en cache, compresión de imagenes, etc... ',
                '',
                '<strong>Compatibilidad entre navegadores</strong>',
                '- Esto es importante debido a que se espera llegar a una audiencia diversa, y los navegadores no estan completamente estandarizados entre si ',
                '- Pruebas de depuración periodicas, en diferentes navegadores como Chrome, Firefox, Safari y Edge ayudan a identificar y resolver estos problemas ',
                '',
                '<strong>Estandares de Accesibilidad</strong>',
                '- Estandares descritos en el <em>Web Content Accessibility Guidelines</em> <strong>WCAG</strong>, promueven la inclusión y la usabilidad, ',
                ' - para usuarios con discapacidades, o que necesiten de tecnologias de asistencia ',
                '',
                '<strong>Multimedia optimizada</strong>',
                '- Una carga rapida de este tipo de contenido, reduce los tiempos de carga y su visualización, mejorando la experiencia general del usuario ',
                '',
                '<strong>Versionamiento</strong>',
                '- Manejar un sistema de control de versiones, como <em>Git</em> permite flujos de trabajo colaborativos y una manera simple de revertir cambios',
                '- Ademas de otros beneficios, como la experimentación, el manejo de ramas, sin desestabilizar entornos importantes como producción ',
                '',
                '<strong>Aprendizaje Continuo</strong>',
                '- Igual que muchas areas de la tecnologia, el desarrollo web constantemente cambia y evoluciona, ya sea por tendencias o por avances tecnologicos ',
                '- Mantenerse informado y seguir aprendiendo, permite ofrecer soluciones de vanguardia y mantener un perfil profesional competitivo ',
            ]),
        new Item(Keys.WEB_GOLDEN_SIGNALS,
            [
                '- <em>El silencio es oro</em> ó <em>No news, good news</em> Significan de manera general que el silencio es indicativo de normalidad, ningun ruido es bueno ',
                '- Lamentablamente la mayoria de los sistemas de software no son silenciosos, pueden generar cientos de metricas y rastros difentes ',
                '- Site Reliability Engineering <strong>SRE</strong> es una disciplina de TI enfocada en la gestión y optimización del rendimiento ',
                '- La combinación de estas señales brindan una comprensión integral del estado general y el rendimientos de sistemas complejos ',
                '',
                '<strong>Latencia:</strong> Mide el intervalo entre el envio de la solicitud y su respuesta, si es alta generalmente indica errores o codigo ineficiente ',
                '',
                '<strong>Trafico:</strong> Es la cantidad de solicitudes que maneja la aplicación, las tasas bajas y altas de trafico no son indicativos directos de problemas',
                ' - pero si la latencia aumenta casi proporcionalmente al trafico, generalmente es indicativo de problemas con grandes volumenes de datos ',
                '',
                '<strong>Errores:</strong> Miden la cantidad de solicitudes que fallaron, por razones como peticiones corruptas, o errores en el procesamiento ',
                '',
                '<strong>Saturación:</strong> Es el consumo de recursos de la aplicación, tanto en codiciones normales como en altas cargas de trabajo ',
                ' - La falta de recursos puede estar asociada o ser la causa directa de una Alta latencia o una gran Cantidad de errores ',
                '',
                '<strong>Importancia:</strong>',
                '- El impacto de estos datos no solo ayudan a dar sentido a los datos complejos que provienen de la observabilidad, ',
                ' - tambien unifican multiples señales en 4 categorias basicas que brindan información significativa del estado de la aplicación ',
                '- Un analisis conjunto de estos datos permite la correlación para ayudar a encontrar la causa raiz de los problemas y mejorar la confiabilidad ',
                '- Optimización de recursos, al determinar las necesidades y reasignar los recursos de acuerdo a la oferta y la demanda ',
                '- Mejora la experiencia de usuario ya que (latencia, trafico, errores) son señales percibidas directamente por el usuario final ',
                '',
                '<strong>Consideraciones:</strong>',
                '- Existen metodos más simples y faciles de implementar como <strong>RED</strong>(tasa, errores, duración) y <strong>USE</strong>(utilización, saturación, errores)',
                '- Estas señales son categorias de información en lugar de tipos especificos de datos, y no son obtenibles en primera instancia ',
                '- La recopilación de datos se debe hacer de manera que tambien se incluyan alertas sobre alguna de las señales y el uso de <em>APM</em>',
            ]),
        new Item(Keys.WEB_SIMPLIFY_DESIGN,
            [
                '- La paradoja de la elección puede atrapar a cualquier profesional, hasta los más experimentados ',
                '- Afortunadamente cuando hay muchas opciones la toma de decisiones se puede simplificar basandose en la opcion más inteligente ',
                '- No es necesario reiventar la rueda, cuando se puede confiar en la experiencia y conocimientos de aquellos que nos precedieron ',
                '- Para esto existen heuristicas, que son atajos mentales, basados en reglas o metodos que ayudan a usar la razon y la experiencia, ',
                ' - para resolver problemas de manera eficiente y evitar sobrecargas cognitivas ',
                '',
                '<strong>La regla MAYA(Most Advanced, Yet Acceptable)</strong> de <em>Raymond Loewy</em> aboga por que los diseños amplien los limites de la innovación ',
                '- Sin dejar de ser aceptables o familiares para los usuarios, este balance debe tenerse siempre en mente ',
                '',
                '<strong>Dont Make Me Think</strong> de <em>Steve Krug</em> Enfatiza la importancia de crear interfaces que se expliquen por si solas ',
                '- Realizar una interfaz requiere mucho pensamiento, pero usarla no debe ser asi ',
                '',
                '<strong>Ley de Gaiman:</strong> Los usuarios son buenos para identificar problemas, pero malos para proponer soluciones efectivas ',
                '- <em>cuando las personas le dicen que algo está mal o que no les funciona, casi siempre tienen razón.</em>',
                '- <em>Cuando le dicen exactamente lo que creen que está mal y cómo solucionarlo, casi siempre están equivocados</em>',
                '',
                '<strong>Ley de Miller</strong> Toda experiencia debe estar guiada y diseñada de manera que tenga en cuenta las limitaciones cognitivas del ser humano ',
                '- <em>La persona promedio sólo puede retener 7 (más o menos 2) elementos en su memoria de trabajo, George Miller</em>',
                '',
                '<strong>Usarlo por defecto o diseñarlo</strong> No todo debe ser personalizado, hay elementos que pueden ser perfectamente elementos predeterminados ',
                '',
                '<strong>Ley de Tesler</strong> <em>En cualquier sistema existe una cierta cantidad de complejidad que no se puede reducir, Larry Tesler</em>',
                '- La tendencia de sobresimplificar tambien es contraproducente y debe tener un limite ',
                '',
                'Para enfatizar algo, primero hay que quitarle importancia a todo lo demás, enfatizar todo solo conduce a confusiones ',
                '- Cuanto todo es <strong>importante</strong>, nada lo es ',
                '',
                '<strong>Umbral de Doherty</strong> El rendimiento es importante a la hora de crear cualquier software agradable de usar ',
                '<em>La productividad aumenta cuando una computadora y sus usuarios interactúan a un ritmo (<400 ms)</em>',
                '<em>que garantiza que ninguno tenga que esperar al otro</em>',
            ])
    ];

export const PARADIGMAS =
    [
        new Item('imperativo',
            [
                '<strong>Imperativo:</strong> Paradigma clasico de la programacion, secuencia ordenada de acciones a ejecutar',
                ' - intentando ser los más cercano a lenguaje maquina posible, siendo un enfoque compresible y que abarca otros 3 subordinados ',
                '',
                '<strong>- Estructurado:</strong> Donde se incluyen sentencias de control y se contemplan las interrupciones, evitando ',
                ' - instrucciones de salto absolutas, que pueden introducir errores fatales y que son dificiles de mantener ',
                '<strong>- Procedimental:</strong> Donde se empieza a crear funciones y metodos para no repetir código, que tambien pueden ser llamados ',
                ' - como subprogramas, rutinas, o procedimientos, dependiendo del lenguaje, creando fragmentos más manejables y claros',
                '<strong>- Modular:</strong> Se agrupan segmentos más grandes de código independientes entre si, para facilitar la depuración, ',
                ' - similar el enfoque procedimental, pero con bloques más grandes y que pueden acoplarse entre si y crear aplicaciones ',
                '',
                '<strong>Declarativo:</strong> Se describe el resultado de la operación y no el como, requiriendo una mayor abstracción con menos instrucciones, ',
                ' - resultando en acciones más precisas, cortas y entendibles, ayudando a la reutilización y con soporte por una gran cantidad de lenguajes ',
                '',
                '<strong>- Funcional:</strong> La base son las funciones que se pueden concatenar para formar estructuras o usarse como parametros ',
                ' - Asimismo se pueden usar como resultados, esto tambien se ocupa de que no hayan asignaciones independientes de valores ',
                '<strong>- Logica:</strong> La base es la matematica y su logica para predicar el resultado, aca en vez de tener una sucesión de instrucciones, ',
                ' - se tiene una recopilación de hechos y suposiciones a las que el interprete le aplica reglas para alcanzar el resultado '
            ]),
        new Item('funcional',
            [
                '- Las acciones son delegadas a funciones propias del lenguaje, o funciones personalizadas, con ayuda del propio lenguaje ',
                '<strong>- Funciones Puras:</strong> Dada una entrada siempre van a tener la misma salida',
                '<strong>- Composición:</strong> Se pueden juntar y crear una secuencia y resultado diferente ',
                '<strong>- Estados compartidos:</strong> Son los cambios visibles fuera de la función llamada ',
                '<strong>- Mutabilidad & Inmutabilidad:</strong> Indican si una variable puede ser modificada o no despues de su creación ',
                '<strong>- Efectos secundarios</strong> Todo cambio de estado, que se de por fuera de la función llamada, se evitan principalmente ',
            ]),
        new Item(Keys.PARADIGMAS_PARADIGMA_SCRIPTING,
            [
                '- Son lenguajes no compilados y que se ejecutan directamente en el lado del cliente, aunque tambien existen en el lado del servidor ',
                '- El más famoso es Javascript, pero otros como Python y Ruby tambien lo son',
                '- Suelen ser menos eficientes al no ser compilados pero conllevan menos trabajo para el programador ',
                '- Generalmente son debilmente tipados, lo que da más flexibilidad al mismo tiempo que aumenta la posiblidad de errores',
                '- Estas caracteristicas los hace especialmente buenos para tareas especificas y más directas, pero malos para calculos intensivos y pesados'
            ]),
        new Item('reactiva',
            [
                '- Es un paradigma enfocado al trabajo con flujo de datos, generalmente debe ser: ',
                '<strong>- Resilientes:</strong> Deben responder incluso cuando hay estados de error',
                '<strong>- Elasticos:</strong> El aumento de la concurrencia no debe afectar las respuestas',
                '<strong>- Comunicación:</strong> Minimo acoplamiento al hacer que todo se comunique mediante mensajeria ',
                '<strong>- Operadores:</strong> Tener soporte hacia estos, y que permitan transformar el flujo de datos ',
                '<strong>- Manejar el Backpressure:</strong> Para evitar saturar subscriptores lentos o limitar la cantidad de datos a procesar ',
                '<strong>- Composición:</strong> Juntar diversas funciones asyncronas o sincronas, no debe ser un calvario ni volverser algo incomprensible'
            ]),
        new Item('marcado',
            [
                '- Son lenguajes relacionados con la presentación de contenido como HTML y XML, generalmente usados para codificar(redactar) documentos ',
                '- El primero se usa para estructurar contenido web y el segundo para almacenar y transportar datos estructurados ',
                '- El contenido del documento esta incorporado a las etiquetas ó anotaciones, que contienen información adicional relativa ',
                '- Un sitio con HTML y ayudado con CSS, puede resultar en una vista bastante detallada y util, transformando los datos en información ',
                '',
                '<strong>Tipos: </strong>',
                '<strong>- Presentación:</strong> Definen el formato(apariencia) del texto, suelen ocultar las etiquetas y solo mostrar el contenido al usuario ',
                ' - <strong>RTF</strong>(Formato de Texto Enriquecido)',
                ' - <strong>TeX</strong> Representa formulas matematicas complejas',
                '<strong>- Procedimientos:</strong> Tambien se orienta a la presentación, pero aca debe existir un programa que interprete para realizar las funciones indicadas ',
                ' - <strong>HTML</strong>(Lenguaje de Marcado de HiperTexto)',
                ' - <strong>LaTex</strong> Textos con alta calidad tipografica',
                '<strong>- Descriptivos o Semanticos:</strong> Describen las diferentes partes en que se estructura un documento, sin especificar como se debe presentar ',
                ' - <strong>XML</strong>(Lenguaje de Marcado Extensible)',
            ]),
        new Item('aspectos',
            [
                '- Es un paradigma de programación que tiene como objetivo aumentar la modularidad del codigo ',
                '- Permite la separación de responsabilidades sin cambiar el comportamiento actual de la aplicación ',
                '- Esto permite añadir un comportamiento paralelo, sin afectar el comportamiento principal ',
                '- Un aspecto es aquel que puede ser transversal a multiples capas de la aplicación ',
                '',
                '<strong>Conceptos:</strong>',
                ' <strong>Objeto de negocio:</strong> Es una clase normal, que contiene una logica dada de negocio ',
                ' <strong>Aspecto:</strong> Un aspecto de esto es la modularización de una preocupación que abarca multiples clases',
                '- Estos se pueden encadenar y unir mediante un <strong>Joinpoint</strong>, que es un punto dado durante la ejecución, ',
                ' - son similares a las excepciones, y estos se ejecutaran si las condiciones interceptadas se dan ',
                '- Un <strong>Pointcut:</strong> Es un predicado dado, que puede hacer coincidir un <em>Advice</em> que sera aplicado por un <em>aspecto</em>, en un <em>Joinpoint</em> particular ',
                '- Un <strong>Advice:</strong> Es una accion realizada por un <em>aspecto</em> en un <em>Joinpoint</em> particular, existen diferentes tipos como: ',
                ' - "around", "before" y "after", esto se puede realizar mediante anotaciones(AspectJ) o XML(Spring)',
            ]),
        new Item('logica',
            [
                '- Al ser parte del paradigma declarativo, esta programación se concentra en el resultado, más que en el proceso ',
                '- Mediante la logica se plantean los problemas y el control sobre las reglas de inferencia, para alcanzar una solución automatica ',
                ' <strong>- De orden cero:</strong>    Logica proposicional ',
                ' <strong>- De primer orden:</strong>  Logica predictiva ',
                ' <strong>- De segundo orden:</strong> Donde se agregan variables y relaciones ',
                '- Cada orden se base en el anterior para crear nuevos conceptos y formas de evaluación, mediante el uso extensivo de la logica matematica ',
                '',
                '<strong>Caracteristicas:</strong>',
                ' <strong>- Basada en la logica:</strong> Por lo que usara simbolos como <em>and</em>, <em>or</em>, <em>not</em> para describir las relaciones ',
                ' <strong>- No determinista:</strong> El orden y las operaciones a usar para las soluciones, no esta provisto de antemano, siempre se busca la más adecuada ',
                ' <strong>- Basada en reglas:</strong> El programador define las reglas que describen las relaciones, entre los hechos y los objetos',
                '  - solicitando al programa encontrar una solución al problema en particular ',
                ' <strong>- Recursividad:</strong> Las reglas definicias pueden invocarse a si mismas, si esto es necesario para encontrar la solución final ',
                ' <strong>- Inferencia:</strong> Se pueden deducir nuevos conocimientos en base a los datos existentes, mediante la aplicación de reglas y logica ',
                '',
                '<strong>Algunos sistemas en los que se puede aplicar:</strong>',
                ' - Inteligencia artificial ',
                ' - Sistemas expertos (toma de decisiones)',
                ' - Reconocimiento y procesamiento de lenguaje natural ',
                ' - Motores de bases de datos relacionales ',
                ' - Simulación y Analisis estadisticos '
            ]),
        new Item('estructurada',
            [
                '- Es un conjunto de tecnicas para desarrollar algoritmos faciles de escribir, leer, modificar y verficar ',
                '<strong> - Diseño descendente:</strong> Se diseñan por etapas, partiendo de lo general a lo particular, y es completado por el diseño modular ',
                '<strong> - Recursos abstractos:</strong> En cada descomposición de una acción compleja, se supone que todas las partes ya estan resueltas ',
                '<strong> - Estructuras basicas:</strong> Los algoritmos solo deben ser escritos usando 3 tipos de estructuras: <em>Secuencial</em>, <em>Selectiva</em>, <em>Repetetiva</em>',
                '',
                '<strong>Teorema de Böhm y Jacopini:</strong> Se defina como propio si se cumplen las siguientes caracteristicas ',
                ' - Tiene un solo punto de entrada y uno de salida ',
                ' - Todo el camino del algoritmo es accesible, existiendo al menos un camino que va desde el inicio, hasta el final del algoritmo ',
                ' - No posee lazos o ciclos infinitos ',
                '',
                '<strong>Control de flujo de un programa</strong>',
                '<strong>- Secuencial:</strong> Es aquella en la cual una acción se ejecuta detras de otra y coincide con las acciones fisicas ',
                '<strong>- Selectiva:</strong> Se pueden ejecutar una acción o otra, dependiendo de una determinada condición ',
                '<strong>- Repetitiva:</strong> Las acciones que estan dentro del bucle, se realizan, siempre que la condicion sea cierta, verificando antes o despues la afirmación ',
                '<strong>- Anidamiento:</strong> Las estructuras Selectivas y repetitivas, pueden ser anidadas una dentro de la otra ',
            ]),
        new Item(Keys.PARADIGMAS_PARADIGMA_DATOS,
            [
                '- Es un paradigma de programación destinado a simplificar el diseño, y la implementación de sistemas, donde la información esta en el centro ',
                '- En lugar de diseñar sistemas de información que combinan codigo y datos, <strong>DOP</strong> fomenta la separación entre codigos y datos ',
                '- Los datos se tratan como ciudadanos de primera clase, brindando una simplicidad para manipularlo, como si fuera un objeto ó una cadena',
                '- Para esto se deben cumplir 4 principios, que son totalmente aplicables a cualquier lenguaje y a cualquier paradigma(POO, Funcional, etc..)',
                '',
                '<strong>Separar el codigo de los datos:</strong> Se recomienda una separación clara entre el codigo(comportamiento) y los datos',
                ' - Cumplirlo En POO significa agregar el codigo como metodos de una clase estatica ',
                ' - Romperlo en PF significa ocultar el estado en el alcance lexico de una función ',
                '- Se obtiene un codigo más aislado y rehusable, a costa de una mayor cantidad de entidades que manejar ',
                '',
                '<strong>Representar datos con estructuras genericas:</strong> Se deben usar estructuras para representar los datos, como mapas y listas, o ',
                ' - otras no tan genericas como, colas, arboles, pilas, etc.. ',
                '- Esto conlleva a un modelo más flexible de datos, pero penaliza el rendimiento al agregar casteos necesarios, en lenguajes estaticamente tipados ',
                '',
                '<strong>Los datos son inmutables:</strong> Cada modificación que se necesite, obligatoriamente se ha de crear una copia, ',
                ' - las referencias pueden cambiar, para hacer referencia a la nueva versión, pero nunca los valores de los datos',
                '- El codigo se vuelve más seguro ante la concurrencia y predecible, pero con problemas de rendimiento y de persistencia ',
                '',
                '<strong>Separar el esquema de datos, de su representación:</strong> Asi se puede decidir facilmente que esquema puede tener ciertos datos y cuales no ',
                '- Libertad para validar o no cualquier dato, campos opcionales y validaciones complejas, a costa de una conexión debil entre el esquema-datos ',
                '',
                'Para una mejor compresión del tema y visualizar los <em>ejemplos practicos</em>, se recomienda ir a las publicaciones originales',
            ])
    ];

export const ANALISIS_DATA =
    [
        new Item('scraping',
            [
                '- Es una forma de buscar contenido de las paginas en internet ',
                '- Algunos buscadores como Google hacen esto para indexar contenido ',
                '- Son tipos especiales de Bots que buscan terminos especificos de busqueda ',
                '- Se puede dar manera de automatica (software de  analisis sintactico) y manual (copiar y pegar) ',
                '- Esto puede conllevar a una ventaja sobre tu competencia al comparar su contenido con el tuyo ',
                '- Puede violar las leyes de derechos de autor, por lo que puede llegar a ser ilegal ',
                '- Tambien se puede bloquear por medio de software ó dificultarles la extracción de los datos (imagenes) ',
            ]),
        new Item(Keys.ANALISIS_DATA_MVP,
            [
                '- Es el conjunto minimo de funcionalidades precisas para que un software pueda atraer clientes potenciales ',
                '- Esto ayuda a crear productos apegados a la realidad ',
                '- Da retroalimentación a tiempo y util para el negocio ',
                '- Todo mvp es una apuesta orientada a conseguir un maximo de aprendizaje con la menor inversion posible ',
                '- A veces puede ser reutilizable o desechable, eso depende de su exito inicial ',
            ]),
        new Item('turingComplete',
            [
                '- Es un concepto usado para denotar aquellos lenguajes que teniendo recursos infinitos (teoricamente), ',
                ' - son capaces de realizar cualquier tipo de calculo, independientemente de los recursos usados ',
                '- Tambien son capaces de usar y reutilizar estructuras complejas ',
                '- Que un lenguaje o herramienta sea turing complete no garantiza su eficiencia ',
            ]),
        new Item(Keys.ANALISIS_DATA_REVERSE_ENGINEERING,
            [
                '- Un concepto sencillo pero muy potente, basicamente consta de desmontar y volver a montar algo, para ver como funciona ',
                '- Esto se da con la intención de mejorar o duplicar ese algo mediante una simple observación ',
                '- Su nacimiento se da durante la segunda guerra mundial, pero hoy en dia es aplicable hasta para el software ',
                '- Uno de los primeros casos de esta practica fue el nacimiento del Tu-4 <em>sovietico</em> copia del B-29 <em>Estadounidense</em> ',
            ]),
        new Item(Keys.ANALISIS_DATA_DSL,
            [
                '- Un DSL es un lenguaje de programación con un nivel superior de abstracción ',
                '- Estos lenguajes son menos complejos que los lenguajes de alto nivel y proposito general, como Java, C, etc.. ',
                '- Son diseñados por expertos al campo dirigido, para ser usados, por personas versadas en el tema, pero sin experiencia en programación ',
                '- Esto desemboca en un paradigma donde se especifica lo que se requiere, y se usa el lenguaje más adecuado para lograr el objetivo ',
                '- Este concepto desemboca en la programación poliglota o programación orientada al lenguaje ',
                '- Otro concepto importante es que los DSL pueden nacer y extenderse, con ó sin bases previas ',
            ]),
        new Item(Keys.ANALISIS_DATA_DATA_ANALISIS_TYPES,
            [
                '- Este un proceso esencial ya que ayuda a encontrar tendencias y responder preguntas de negocio',
                '- Esto ayuda a las organizaciones a reducir la incertidumbre a la hora de tomar decisiones e incrementar las posibilidades de exito ',
                '- Para resultados especificos, es vital conseguir todas las partes necesarias, entre más complejo sea el analisis, mayor sera el valor que este aporta ',
                '',
                '<strong>Descriptiva:</strong> Responde a la pregunta puntual de que sucedio, indicando si algo esta bien o mal, sin tener el porque ',
                '',
                '<strong>Diagnostica:</strong> Se combinan los datos historicos y la <em>Analitica Descriptiva</em>, para responder el porque profundizando en las causas, ',
                ' - para identificar patrones, y obtener información detallada del problema o situación en particular ',
                '',
                '<strong>Predictiva:</strong> Dice lo que es más probable que suceda, utilizando los anteriores analisis para detectar tendencias y agrupar datos, ',
                ' - usando desde modelos estadisticos, mineria de datos, algoritmos, hasta Inteligencia Artificial, en este punto se puede hablar de <em>Big Data</em>',
                ' - esta analitica debe ser revisada y refinada constantemente para tener información confiable ',
                '',
                '<strong>Prescriptiva:</strong> No solo se predicen posibles problemas, ayuda a tomar acciones para aprovechar las tendencias, ',
                ' - mientras que se sortean inconvenientes y se adaptan automaticamente al tener en cuenta multiples factores externos ',
            ]),
        new Item(Keys.ANALISIS_DATA_SYSTEMS_INFORMATION,
            [
                '- Se refiere al conjunto ordenado de mecanismos, personas, herramientas con el fin de administrar datos e información ',
                '- Estos recursos interactuan y se interconectan de las formas más convenientes posibles con un proposito determinado ',
                '- Generalmente recolectan y clasifican datos para poder ser agrupados ó diferenciados de manera más eficientes, que antes de ser procesados ',
                '',
                '<strong>Recursos que interactuan:</strong>',
                '<strong> - Recursos humanos:</strong>      Personas de diversas indoles con diferentes destrezas ',
                '<strong> - Datos:</strong>                 Cualquier tipo de información masiva que deba procesarse ',
                '<strong> - Actividades:</strong>           Pasos a seguir, procedimientos especificos, etc...',
                '<strong> - Recursos informaticos:</strong> Tecnologias usadas con diversos propositos ',
                '',
                '<strong>Tipos:                                Elementos:           Actividades:             Ejemplos:      </strong> ',
                '- Procesamiento de transacciones      - Financieros        - Recopilación           - Control de calidad ',
                '- Información ejecutiva               - Humanos            - Almacenamiento         - Bases de datos     ',
                '- Información gerencial               - Tecnologicos       - Procesamiento          - Hojas de calculo   ',
                '- Soporte de decisiones               - Fisicos            - Distribución                                ',
                '- Planificación & Automatización      - Herramientas       - Retroalimentación                            '
            ]),
        new Item(Keys.ANALISIS_DATA_DATA_STORING,
            [
                '- Almacenar los datos es fundamental para las empresas, para cualquier disposicion que estas tengan ',
                '',
                '<strong>Data Warehouse:</strong> Es un respositorio unificado para almacenar grandes cantidades de información, desde diversas fuentes ',
                ' - estos almacenes tambien transforman y limpian los datos antes de almacenarlos con una estructura fija, ',
                ' - para que estos sirvan como fuente de información veraz para futuros analisis ',
                '<strong>Data Lake:</strong> Respositorio centralizado altamente flexible, encargado de almacenar grandres cantidades de datos, ',
                ' - pero estos no son procesados ni estructurados, por esto cada analisis debe tener sus respectivas transformaciones de datos, ',
                ' - esta forma es más barata, pero lenta y la confiabilidad de los datos puede disminuir ',
                '<strong>Data Lakehouse:</strong> Combina las mejores caracteristicas de ambos al permitir almacenar datos estructurados y no estructurados, ',
                ' - al mismo tiempo que permite capacidades de analisis de datos e inteligencia empresarial, estos respositorios nacieron como Data Lake, ',
                ' - que fueron modificados para cumplir el esquema ACID, estos todavian estan crecimiento, por lo que es una tecnologia en maduración ',
                '',
                '                  <strong>    Data Warehouse                     Data Lake                    Data Lakehouse</strong>',
                '',
                ' Tipos de datos    Datos                            Datos no estructurados         Datos con, sin y semi      ',
                '   almacenados     estructurados                    y semi estructurados           estructurados              ',
                '',
                '    Objetivo       Analisis de datos e              Aprendizaje automatico         Analisis de datos y        ',
                '                   inteligencia empresarial         e inteligencia artificial      aprendizaje automatico     ',
                '',
                '     Costo         Costoso y requiere tiempo        Rentable rapido y flexible     Rentable rapido y flexible ',
                '',
                '  Cumplimiento     Los datos son compatibles        No lo cumple, actualizar       Lo cumple ya que la data   ',
                '    de ACID        para garantizar la seguridad     y eliminar es complejo         es concurrente             ',
            ]),
        new Item(Keys.ANALISIS_DATA_ETL_ELT,
            [
                '- <strong>ETL</strong> & <strong>ELT</strong> Son 2 enfoques de procesamiento de datos para el analisis de cientos, miles de datos, desde multiples origenes',
                '- Ambos son secuencias de procesos que separan los datos para su posterior analisis, capturan, procesan y cargan datos para su analisis en 3 pasos ',
                '',
                '<strong>Extraccion:</strong> Es el primer paso en ambos procesos, consiste en recopilar datos sin procesar, de diferentes origenes, BD, archivos, apps, IoT, etc...',
                '<strong>Transformación:</strong> Este paso se centra en cambiar los datos sin procesar, de su estructura original a un formato que cumpla con los requisitos ',
                ' - Cambios de tipos, o de formatos                - Eliminación de la duplicación de datos',
                ' - Eliminación de datos incorehentes, inexactos   - Limmpieza y preparación de datos',
                '',
                '<strong>Carga:</strong> Se almacenan los datos en el destino, ya sean preparados o sin preparar, dependiendo del proceso que se este usando ',
                '',
                '<em>ETL</em> <strong>E</strong>xtract -> <strong>T</strong>ransform -> <strong>L</strong>oad',
                ' - Aca la transformación garantiza el cumplimiento de los requisitos estructurales del destino, donde se cargaran los datos ',
                '',
                '<em>ELT</em> <strong>E</strong>xtract -> <strong>L</strong>oad -> <strong>T</strong>ransform',
                ' - Los datos se cargan sin ninguna estructura especifica, ni importando su tipo, aca todas las transformaciones suceden en el destino ',
                '',
                '                                                                   <strong>Diferencias</strong>',
                '   <strong> Categoria</strong>                        <strong>ETL</strong>                                                        <strong>ELT</strong>',
                '                    Toma datos sin procesar,                                   Toma datos sin procesar, ',
                '   Procesamiento    los transforma en un formato predeterminado,               los carga el almacenamiento de datos del destino, ',
                '                    los carga en el almacenamiento de datos del destino        los transforma de acuerdo a los analisis a realizar ',
                '',
                '  Ubicaciones de ',
                ' transformaciones   La transformación se da en un servidor secundario          La transformación se da en el almacenamiento de destino',
                '     y carga',
                '',
                '    Velocidad       El proceso ETL es más lento                                El proceso ELT es más rapido',
                '',
                '                    La configuración y las herramientas a usar ',
                '     Costos         pueden ser costosas en función de lo que se utilice        Más rentable, segun la infraestructura utilizada ',
                '',
                '    Seguridad       Posiblemente se deban crear aplicaciones personalizadas    Se pueden usar las caracteristicas integradas de la BD destino ',
            ]),
        new Item(Keys.ANALISIS_DATA_THEORY_OF_INFORMATION,
            [
                '- Tambien conocida como la teoria matematica de la comunicación, es un planteamiento que estudia el procesamiento y medición de los datos, ',
                ' - en la transmisión de la información, establece un flujo del <strong>mensaje</strong> entre un <strong>emisor</strong> y un <strong>receptor</strong> a travez de un <strong>canal</strong> determinado',
                '- Fue propuesta en 1949 por el matematico e ingeniero <em>Claude Shannon</em> y el biologo <em>Warren Weaver</em> además de contar ',
                ' - con investigaciones previas de casi 30 años de <em>Andrei Markovi</em> y <em>Ralph Hartley</em> ',
                '- El aporte de <em>Alan Turing</em> quien llevo el esquema de una maquina capaz de procesar datos e información a traves de la emisión de simbolos, ',
                ' - fue el ultimo precedente para la culminación de la teoria',
                '',
                '<strong>Elementos:</strong>',
                '',
                '<strong>- Fuente (Emisor):</strong> Elemento capaz de transmitir un mensaje, existen varios tipos: ',
                '<strong> - Aleatorias:</strong> Cuando el mensaje no se puede predecir',
                '<strong> - Estructuradas:</strong> Contienen cierto nivel de redundancia y orden ',
                '<strong> - No estructuradas:</strong> Todos los mensajes son aleatorios y sin relaciones, existen perdidas de partes del mensaje ',
                '<strong>- Mensaje:</strong> Conjunto de datos que son transportados mediante un canal ',
                '<strong>- Codigo:</strong> Conjunto de elementos que siguen una serie de normas para su combinación e interpretación ',
                '<strong>- Canal:</strong> Medio por el que se transmite el mensaje, hasta que llegue a algun receptor ',
                '<strong>- Información:</strong> Es lo que busca transmitir con el mensaje, y segun la teoria debe ser proporcional al numero de <em>bits</em> necesarios para reconocer el mensaje ',
                '<strong>- Destinatario(Repector):</strong> Recibe el mensaje y deberia estar en la capacidad de asimilar/entender el mensaje ',
                '<strong>- Ruido:</strong> Problemas ó sucesos que impiden que el mensaje llegue con normalidad, y este no sea entendido ó quede incompleto ',
                '',
                '<strong>Planteamientos generales:</strong>',
                '- Sirve para estudiar todo el proceso informativo, desde que la fuente lo coincibe, hasta el entedimiento en su destino',
                '- Determinar la forma más sencilla y eficaz de transmitir un mensajes, sin que haya alteraciones en el proceso ',
                '- Reconocer elementos de distorsión ó impedimentos para que el mensaje sea transmitido de manera optima ',
                '- Tanto el emisor como el receptor deben ser capaces de <em>codificar/decodificar</em> los mensajes',
                '- Considerar que un mensaje puede tener multiples sentidos, de manera que el destinatario lo dota de significado llegando a ser subjetivo ',
                '- Los mensajes son más grandes ó con más información, entre más alternativas y opciones probables existan ',
                '',
                '<strong>Aplicaciones:</strong> ',
                '- Ciencias de la computación, como la criptografia, esteganografía, comprensión de datos y manejo de redes ',
                '- Ingenieria electrica, como en la teoria de la comunicación y la teoria de la codificación ',
                '- Estadistica ',
                '- Biologia, en el estudio de las secuencias de ADN y el genoma de las especies',
                '- Pagos, transacciones y procesos de autentificación ó verificación',
            ]),
        new Item(Keys.ANALISIS_DATA_CHANGE_DATA_CAPTURE,
            [
                '- La captura de datos modificados es el proceso de seguimiento de todos los cambios en la fuente de datos, como Bases de Datos y almacenes de datos ',
                '- Esto permite mantener a las organizaciones mantener las diversas fuentes de datos sincronizadas con información consistente, a traves de multiples sistemas ',
                '- Especialmente util para las migraciones entre sistemas y trabajar con aplicaciones heredadas ',
                '- Inicialmente era una alternativa para trabajar con sistemas <em>ETL</em> pero se ha convertido en una forma de migración de las aplicaciones hacia la nube ',
                '',
                '<strong>Beneficios</strong>',
                '- Sin necesidad de cargas masivas, permite cargas incrementales ó la transmisión en tiempo real de los cambios en los datos ',
                '- Se basa en registros individuales y sus transacciones, por lo que no hay procesamiento en lotes, reduciendo el impacto en el sistema de origen ',
                '- No se requiere tener momentos de inactividad y la sincronización entre sistemas es casi en tiempo real, algo fundamental para la toma de decisiones ',
                '',
                '<strong>¿ Como funcionan ?</strong>',
                '- Cuando se modifica los datos mediante INSERT, UPDATE, DELETE en la BD de origen, es necesario propagar este cambio a multiples sistemas posteriores ',
                '- Tradicionalmente se hacian procesos mediante lotes, por lo que la sincronización no era inmediata y consumia recursos de la BD de origen ',
                '',
                '<strong>- Push:</strong> En este enfoque la BD de origen hace el trabajo pesado, capturando los cambios y enviandolos a los destinos ',
                ' - sin embargo si los sistemas de destino no estan disponibles, se pueden llegar a perder cambios, para solventar este problema, se usan colas de mensajeria ',
                '<strong>- Pull:</strong> Aca la BD de origen solo debe registrar los cambios, y el sistema de destino de manera continua revisa estos cambios ',
                ' - y que se envien a traves de mensajeria, este enfoque no contempla actualizaciones inmediatas, pero si le quita presión al origen de los datos ',
                '',
                '<strong>Metodos para la captura de datos</strong>',
                '<strong>Timestamp-based:</strong> Se basan en obtener las marcas de tiempo, de los cambios más recientes desde la ultima ejecución',
                '<strong>Ventajas</strong>                                           <strong>Contras</strong>',
                '- Facil de usar e implementar                      - Solo funciona con eliminaciones suaves y no con DELETE',
                '- Seguimiento a traves del tiempo                  - Sobrecarga el origen al tener que analizar los cambios de las fechas ',
                '',
                '<strong>Trigger-based:</strong> Cada INSERT, UPDATE, DELETE requiere su propio <em>trigger</em> y los datos se almacenan en una tabla separada(tabla de sombra) ',
                '<strong>Ventajas</strong>                                           <strong>Contras</strong>',
                '- Puede detectar todo tipo de cambio               - Afecta el rendimiento en el origen al realizar multiples lecturas y escrituras ',
                '- La captura se da en tiempo real                  - Requiere cambios en el esquema original ',
                '- Los triggers pueden personalizarse               - Demasiados triggers pueden ser complejos de administrar/mantener ',
                '',
                '<strong>Log-based:</strong> Las BD transaccionales registran todos los cambios y sus correspondientes fechas mediante archivos(WAL)',
                '<strong>Ventajas</strong>                                           <strong>Contras</strong>',
                '- No agrega sobrecarga a la BD de origen           - Al ser un proceso interno, cada BD tiene estandares y formas diferentes para estos archivos ',
                '- No modifica el esquema original                  - Los sistemas de destino deben saber interpretar los cambios y reversiones que se hayan dado ',
                '',
                '<strong>Casos de uso</strong>',
                '<strong>- Replicación continua de datos:</strong> Para copiar datos de un origen a un destino por lotes, era necesario tener tiempo de inactividad hasta terminar el copiado ',
                ' - Algo inaceptable hoy en dia, ya que los consumidores exigen experiencias continuas y cada interrupción es costosa para las empresas por diversos motivos ',
                '<strong>- Microservicios:</strong> A medida que se desmontan monolitos para adoptar microservicios, es necesario transmitir datos a nuevos destinos ',
                ' - Debido a que estas transiciónes suelen llevar tiempo, es necesario mantener sincronizados los origenes y sus destinos ',
                '<strong>- Adopción de la Nube:</strong> Las organizaciones se mudan a la nube para reducir costos y mejorar la agilidad y la elasticidad ',
                ' - Con CDC estas migraciones se garantizan consistentes, y asi las empresas pueden dedicarse en crear nuevas experiencias digitales ',
            ]),
        new Item(Keys.ANALISIS_DATA_GOLDEN_RECORD,
            [
                '- Los usuarios interactuan constantemente con multiples plataformas, estos datos deben ser almacenados y ocasionalmente son duplicados ',
                '- El resultado son diferentes versiones de un mismo registro, y las diferentes areas tendrian datos incompletos que desencadenan acciones inconexas ',
                '- Un <em>Golden Record</em> es la consolidación en un solo lugar de todos estos datos, y que esta se considere como la <em>unica fuente de verdad</em>',
                '- Existen diferentes formas de lograrlo, una de estas es la inserción de una capa adicional que se encargue de gestionar los datos de manera comun ',
                '',
                '<strong>Beneficios</strong>',
                '- Aumentar las ventas al tener una visión unificada del cliente y sus necesidades ',
                '- La retención de los clientes tambien mejora, al sentir que sus necesidades estan cubiertas y que son visibilizados ',
                '- El cumplimiento de las regulaciones puede cambiar, y estos se facilitan entre menos lugares sea necesario modificar ',
                '- La toma de decisiones siempre necesita de información y entre más procesada se encuentre mayor confianza tendra ',
            ]),
        new Item(Keys.ANALISIS_DATA_BATCH_VS_STREAM,
            [
                '- Todas las empresas deben de manejar datos, y existen empresas donde este es su modelo de negocio, en el cual existen 2 maneras principales ',
                '- Aprovechar el potencial de estos datos es crucial para tomar decisiones informadas, ya que estos se siguen generando y procesando continuamente ',
                '',
                '<strong>Batch Processing:</strong> Los datos se acumulan en lotes antes de introducirlos en un sistema de analisis',
                '- Estos lotes son agrupaciones de un periodo de tiempo especifico, este enfoque es usado con grandes volumenes de datos y procesamiento complejo ',
                '<strong>Ventajas:</strong>',
                '- Puede funcionar sin conexión y bajo demanda ',
                '- Minimiza las intervenciones, reduciendo la cantidad de errores ',
                '<strong>Desventajas:</strong>',
                '- Los errores pueden escalar de manera exponencial y dejar fuera de linea al sistema ',
                '- La implementación puede ser compleja debido a la dependencia de expertos en <em>TI</em> y el conocimiento del negocio requerido ',
                '',
                '<strong>Stream Processing:</strong> Es un metodo que une, analiza, filtra y transforma flujos de datos de manera continua ',
                '- Estos resultados se envian a aplicaciones para ser almacenados ó a otros flujos para continuar siendo procesados ',
                '<strong>Ventajas:</strong>',
                '- Manejo eficiente de datos y capacidad de escalar sin gran complejidad',
                '- Resultados en tiempo real, debido a un manejo sencillo continuo de datos ',
                '<strong>Desventajas:</strong>',
                '- Pueden tener problemas para el manejo de la memoria, debido al flujo continuo de la información ',
                '- Los costos pueden ser elevados y más si no se tienen algoritmos eficientes para el procesamiento ',
                '',
                '-----------------------------------------------------------------------------------------------------------------------------------------',
                '&brvbar;    <strong>Caracteristica</strong>   &brvbar;                  <strong>Batch Processing</strong>                    &brvbar;                   <strong>Stream Processing</strong>                      &brvbar;',
                '-----------------------------------------------------------------------------------------------------------------------------------------',
                '&brvbar; Procesamiento       &brvbar; Procesa datos en grupos grandes y predefinidos       &brvbar; Procesamiento continuo a medida que llegan               &brvbar;',
                '&brvbar; Latencia            &brvbar; Alta, los resultados solo estan disponibles al final &brvbar; Baja, los resultados se pueden usar casi de inmediato    &brvbar;',
                '&brvbar; Casos de uso        &brvbar; Almacenamiento de datos, ETL, informes               &brvbar; Analisis en tiempo real, Detección de fraudes, monitoreo &brvbar;',
                '&brvbar; Escalabilidad       &brvbar; Escala bien para grandes volumenes de datos          &brvbar; Escala bien para flujos de datos de alta velocidad       &brvbar;',
                '&brvbar; Complejidad         &brvbar; Generalmente más sencillo                            &brvbar; Más complejo debido a la naturaleza en tiempo real       &brvbar;',
                '&brvbar; Tolerancia a fallos &brvbar; Poco critico, se puede reiniciar en caso de fallos   &brvbar; Critico, Necesita tener una gran resiliencia             &brvbar;',
                '-----------------------------------------------------------------------------------------------------------------------------------------',
                '',
                '-----------------------------------------------------------------------------------------------------------------------------------------',
                '&brvbar;     <strong>Ejemplos</strong>        &brvbar;                  <strong>Batch Processing</strong>                    &brvbar;                   <strong>Stream Processing</strong>                      &brvbar;',
                '-----------------------------------------------------------------------------------------------------------------------------------------',
                '&brvbar; Salud               &brvbar; Actualizaciones periodicas de las historias medicas  &brvbar; Monitoreo de pacientes, para acciones inmediatas         &brvbar;',
                '&brvbar; Logistica           &brvbar; Envios y entregas agrupadas segun el destino         &brvbar; Proporciona actualizaciones de estado actual             &brvbar;',
                '&brvbar;                     &brvbar;  con el fin de planificar mejores rutas              &brvbar;  e informes de posibles retrasos                         &brvbar;',
                '&brvbar; Telecomunicaciones  &brvbar; Grandes grupos de facturas con una misma tarifa      &brvbar; Monitoreo en tiempo real del trafico de la red           &brvbar;',
                '&brvbar; Bancos              &brvbar; Conciliaciones y correciones en la contabilidad      &brvbar; Detección de fraude previniendo actividades sospechosas  &brvbar;',
                '&brvbar; Comercio            &brvbar; Gestión de pedidos y cronogramas de despacho         &brvbar; Recomendaciones de productos para una mejor experiencia  &brvbar;',
                '&brvbar; Marketing           &brvbar; Envio masivo de correos o boletines                  &brvbar; Analisis de las interacciones con la marca frente al     &brvbar;',
                '&brvbar;                     &brvbar;  para entrega oportunas a los subscriptores          &brvbar;  publico y evaluar formas de responder                   &brvbar;',
                '&brvbar; Comercio minorista  &brvbar; Actualizaciones de inventarios y reposiciones        &brvbar; Procesan las ventas, ofreciendo información actualizada  &brvbar;',
                '&brvbar; Entretenimiento     &brvbar; Actualizaciones de contenido y notificaciones        &brvbar; Analisis de los patrones de visualización                &brvbar;',
                '-----------------------------------------------------------------------------------------------------------------------------------------',
            ]),
        new Item(Keys.ANALISIS_DATA_OLAP_OLTP,
            [
                '- Son sistemas de administración de BD para almacenar y procesar datos en grandes volumenes, mediante una infraestructura de TI eficiente y confiable ',
                '<strong>OLAP:</strong> Procesamiento Analitico en Linea, es usado para analizar los datos agregados ',
                '<strong>OLTP:</strong> Procesamiento de Transacciones en Linea, es procesar las transacciones de Bases de Datos ',
                '',
                '---------------------------------------------------------------------------------------------------------------------------',
                '&brvbar;    <strong>Caracteristicas</strong>    &brvbar;                     <strong>OLAP</strong>                      &brvbar;                      <strong>OLTP</strong>                       &brvbar;',
                '---------------------------------------------------------------------------------------------------------------------------',
                '&brvbar; Usos                  &brvbar; Analisis de grandes volúmenes de datos        &brvbar; Permite administrar y procesar                  &brvbar;',
                '&brvbar;                       &brvbar;  para respaldar la toma de decisiones         &brvbar;  transacciones en tiempo real                   &brvbar;',
                '&brvbar; Arquitectura de datos &brvbar; Prioriza la lectura y las consultas complejas &brvbar; Priorizan las operaciones de escritura          &brvbar;',
                '&brvbar; Origen de datos       &brvbar; Utiliza datos historicos y agregados          &brvbar; Utiliza datos transaccionales y en tiempo real  &brvbar;',
                '&brvbar;                       &brvbar;  de varios origenes                           &brvbar;  de un solo origen                              &brvbar;',
                '&brvbar; Estructura de datos   &brvbar; Usa BD multidemensionales o relacionales      &brvbar; Usa BD relacionales                             &brvbar;',
                '&brvbar; Modelo de datos       &brvbar; Utiliza un esquema en estrella, copo de nieve &brvbar; Utiliza modelos normalizados o desnormalizados  &brvbar;',
                '&brvbar;                       &brvbar;   o otros modelos analiticos                  &brvbar;                                                 &brvbar;',
                '&brvbar; Volumen de datos      &brvbar; Grandes requerimientos, Tera y Peta bytes     &brvbar; Requerimientos más modestos, Gigas Y Mega bytes &brvbar;',
                '&brvbar; Tiempo de respuesta   &brvbar; Tiempos más largos, segundos y minutos        &brvbar; Tiempos más cortos, milisegundos y segundos     &brvbar;',
                '&brvbar; Aplicaciones          &brvbar; Analizar tendencias, predecir comportamientos &brvbar; Procesar pagos y pedidos                        &brvbar;',
            ]),
        new Item(Keys.ANALISIS_DATA_DEDUPLICATION,
            [
                '- Es un proceso que elimina copias excesivas de datos, reduciendo significativamente los requisitos de capacidad de almacenamiento ',
                '- Este puede ser un proceso previo al guardado de los datos, ó como un proceso en segundo plano despues de su guardado ',
                '- El proceso se hace a nivel de KB, mediante la validación de firmas hash para evitar crear bloques iguales ',
                '- Si se encuentran bloques iguales, se eliminan y solamente dejar un bloque del mismo tipo, sin que esto implique la perdida de datos ',
            ]),
        new Item(Keys.ANALISIS_DATA_TGS,
            [
                '- Es el estudio interdisciplinario de los sistemas en general, a cualquier nivel en todos los campos de la investigación ',
                '- Un sistema no existe o puede estar de forma aislada sino que se relaciona con otros y afecta su comportamiento ',
                '- Todo sistema tiene un proposito en el cual todas sus partes colaboran para un fin, se suele decir que un sistema es más que la suma de sus partes ',
                '- El origen de esta teoria nace del estudio de la biologia y de los sistemas vivos, que se replico en otras areas como la informatica y la economia ',
                '',
                '<strong>Conceptos generales:</strong>',
                '<strong>- Entradas:</strong> Son los recursos directos de los que se nutre el proceso',
                '<strong>- Procesos:</strong> Fenomeno o transformación de las entradas ',
                '<strong>- Salidas:</strong> Son consecuencias de los procesos internos ',
                '<strong>- Contexto:</strong> Limite del sistema donde se contienen los procesos ',
                '<strong>- Ambiente:</strong> Es el conjunto de componentes externos e internos que rodean al sistema ',
                '<strong>- Retroalimentación:</strong> Sucede si las salidas se convierten en entradas nuevamente ',
                '',
                '<strong>Tipos de sistemas:</strong>',
                '<strong>- Sistemas Abiertos:</strong> Presentan un intercambio a traves de las entradas y salidas con el medio ambiente ',
                '<strong>- Sistemas Cerrados:</strong> No presentan un intercambio con su medio ambiente circundante, son hermeticos a las influencias ambientales ',
                '<strong>- Sistemas Fisicos:</strong> Compuestos por equipos, objetos, cosas reales',
                '<strong>- Sistemas Intangibles:</strong> Representan conceptos, planes, ideas, hipotesis y suelen existir de manera abstracta como pensamientos ',
                '',
                '<strong>Homeostasis:</strong> Es el equilibrio dinamico entre las diferentes partes del sistema ',
                '<strong>Entropia:</strong> Tendencia de todo sistema de desgastarse y fluir de un estado de menor a mayor desorden(aleatoriedad)',
                '<strong>Armonia:</strong> Es una propiedad de los sistemas que mide el nivel de compatibilidad en su Ambiente o Contexto ',
            ])
    ];

export const BASES_DE_DATOS =
    [
        new Item('sql',
            [
                '- Es lenguaje de consultas estandar para manipular la información en una base de datos ',
                '- Cada motor de base de datos tiene sus particularidades pero todos usan SQL',
                '- Las columnas son los datos a guardar y las filas son los registros almacenados',
                '- Las tablas estan compuestas de columnas y registros con información de un tipo en especifico ',
                '- Toda tabla deberia tener una clave primaria, para mejorar la indexación de contenido',
                '- La información deberia estar normalizada para evitar valores duplicados',
            ]),
        new Item(Keys.PERSISTENCY_DBMS,
            [
                '- Se encargan de almacenar, administrar, manipular y resguardar los datos, para que puedan ser accesibles de manera estructurada y segura ',
                '- Las BD guardan diferentes tipos de datos como: texto, numeros, binarios, temporales, documentos, imagenes, geograficos, etc... ',
                '',
                '- Un buen DBMS deberia tener las siguientes caracteristicas: ',
                '<strong>Redundancia:</strong>   Los duplicados en las BD se reducen al tener un unico lugar donde almacenar los datos',
                '<strong>Mantenimiento:</strong> Tener todos los datos en solo lugar permite que se administren con más eficiencia ',
                '<strong>Seguridad:</strong>     Define quien y con que privilegios puede acceder a la informacón ',
                '<strong>Consistencia:</strong>  Se maneja un estandar para todos los datos de todas las BD ',
                '<strong>MultiUsuario:</strong>  El acceso concurrente de varios usuarios es un tema comun para las BD ',
                '<strong>Recuperación:</strong>  Permiten crear copias de seguridad y proveen mecanismos para recuperar los datos en caso de perdidas o daños '
            ]),
        new Item('crud',
            [
                '- Son las 4 operaciones basicas a la hora de gestionar los datos de una BD ',
                '- No solo es aplicable para SQL, tambien tiene su equivalencia en HTTP ',
                '- La mayoria de frameworks tienen estos metodos ya implementados y listos para consumirse ',
                '',
                ' <strong>Operación       SQL         HTTP, Restful</strong>     ',
                '  Create        INSERT        POST              ',
                '  Read          SELECT        GET, HEAD         ',
                '  Update        UPDATE        PUT, PATCH        ',
                '  Delete        DELETE        DELETE            ',
            ]),
        new Item(Keys.PERSISTENCY_DL,
            [
                '<strong>DQL - Lenguaje de definición de Consultas:</strong> Creación de Queries y obtención de información ',
                '<strong>- SELECT:</strong>   Selección de las columnas a obtener ',
                '<strong>- WHERE:</strong>    Filtrado de los datos, mediante el uso de condiciones ',
                '<strong>- ORDER BY:</strong> Organiza los resultados de manera (ASC/DESC)',
                '<strong>- GROUP BY:</strong> Datos agregados, los cuales tambien pueden ser filtrados ',
                '',
                '<strong>DDL - Lenguaje de Definición de Datos:</strong> Permite crear y modificar la estructura de la BD ',
                '<strong>- CREATE:</strong>   Creación de campos, tablas e indices ',
                '<strong>- ALTER:</strong>    Modificacion de los campos de las tablas ó redefinirlos ',
                '<strong>- DROP:</strong>     Eliminación de tablas e indices ',
                '<strong>- TRUNCATE:</strong> Elimina todos los registros de una tabla ',
                '<strong>- COMMENT:</strong>  Utilizado para agregar comentarios al diccionario de datos ',
                '<strong>- RENAME:</strong>   Renombra objetos ',
                '',
                '<strong>DML - Lenguaje de Manipulación de Datos:</strong> Permite ejecutar las operaciones de un CRUD en los datos de la BD ',
                '<strong>- SELECT:</strong> Consulta una tabla de la BD de manera general ó con filtros ',
                '<strong>- INSERT:</strong> Inserción de datos en una tabla ',
                '<strong>- UPDATE:</strong> Actualización de campos ó registros que cumplan los criterios especificados ',
                '<strong>- DELETE:</strong> Elimina registros de una tabla ',
                '',
                '<strong>DCL - Lenguaje de Control de Datos:</strong> Permite crear roles, permisos y conceder/denegar el acceso a los datos ',
                '<strong>- GRANT:</strong>  Otorga privilegios de acceso a los usuarios ',
                '<strong>- REVOKE:</strong> Retira los privilegios previamente otorgados ',
                '',
                '<strong>TCL - Lenguaje de Control de Transacciones</strong>',
                '<strong>- BEGIN:</strong>     Empieza una nueva transacción ',
                '<strong>- COMMIT:</strong>    Guarda los cambios realizados ',
                '<strong>- SAVEPOINT:</strong> Crea un punto de guardado dentro de la transacción ',
                '<strong>- ROLLBACK:</strong>  Deshace todos los cambios hechos por la transacción ',
            ]),
        new Item('integridad',
            [
                '- Son las reglas que garantizan que la información sea inmutable hasta que se decida lo contrario ',
                '- Tambien protege los datos de posibles errores a la hora de modificarlos/eliminarlos ',
                '- Esta es una de las principales diferencias entre las BD relacionales y NO relacionales ',
                '- Las BD relacionales cumplen esto mediante el esquema ACID ',
                '- Las DB NO relacionales no garantizan el 100% de la integridad de los datos, aunque la mayoria son muy fiables ',
            ]),
        new Item(Keys.PERSISTENCY_ERD,
            [
                '- Demuestra como las entidades (generalmente de una BD) se relacionan entre si ',
                '- Es una manera de desarrollar BD relacionales o esquemas de datos de acuerdo al modelo de negocio',
                '',
                '<strong>Entidad:</strong> Algo que se puede definir, como una persona, objeto, concepto o evento, sobre el cual se puedan almacenar datos ',
                '<strong>- Entidad Fuerte:</strong> Se puede definir unicamente por sus atributos ',
                '<strong>- Entidad Debil:</strong> Es aquella que contiene relaciones de otras entidades o elementos, tambien llamada asociativa ó intermedia ',
                '',
                '<strong>Claves:</strong> Se refiere a un atributo o conjunto de atributos que definen de manera unica un registro ',
                '<strong>- Clave Primaria(PK):</strong> Identifica de manera unica un registro sin la posibilidad de que se repita ',
                '<strong>- Clave Foranea(FK):</strong> Identifica una relación entre entidades',
                '<strong>- Clave Candidata:</strong> Atributo o conjunto de estos, con el cual se puede seguir cumpliendo la identificación unica del registro ',
                '',
                '<strong>Relación:</strong> Relación o asociación de las entidades, esta se acompaña de una cardinalidad 1-1, 1-n, n-1, m-n',
                '- Como suelen ser acciones en la que interactuan las entidades, se nombran con verbos y pueden tener restricciones de maximos/minimos ',
                '',
                '<strong>Atributo:</strong> Propiedad o caracteristica pertenciente a una Entidad ',
                '<strong>- Atributo Simple:</strong> Su valor es minimo y no puede subdivirse, como un numero de telefono ',
                '<strong>- Atributo Compuesto:</strong> Surgen en base a la combinación de uno o varios atributos, como una ubicación ',
                '<strong>- Atributo Derivado:</strong> Se calculan en base a otro, como la edad ',
                '',
                '- Existen diferentes formas para su visualizarse como la Notación Chen, Notación de Martin, Notación Barker, etc... '
            ]),
        new Item(Keys.PERSISTENCY_NORMALIZATION,
            [
                '- La normalización hace la información más facil de estructurar, sin gastar espacio en redundancias y eliminado posibles inconsistencias',
                '- Este proceso conlleva 2 grandes ventajas, se salvaguarda espacio en disco al no tener duplicacion de datos y los procesos de busqueda ',
                ' - son más eficientes ya que no hay <em>dependencias inconsistentes</em>, los datos van a estar con su dependencia/relacion más fuerte ',
                '',
                '<strong>- Primera forma:</strong> Identificar datos agrupables en tablas individuales',
                '<strong>- Primera forma:</strong> Asigne cada conjunto con una clave primaria',
                '',
                '<strong>- Segunda forma:</strong> Crear tablas independientes para valores que sean aplicables a otros registros ',
                '<strong>- Segunda forma:</strong> Asigne claves foraneas que se puedan relacionar con otras tablas',
                '',
                '<strong>- Tercera forma:</strong> Trasladar valores que sean independientes de las claves a tablas separadas',
                '<strong>- Tercera forma:</strong> No siempre es conveniente hacerlo, puede ser costoso en terminos de rendimiento ',
                '',
                '<strong>- Cuarta forma:</strong> Rara vez se aplican pero hay casos donde es practico hacerlo',
            ]),
        new Item(Keys.PERSISTENCY_ACID,
            [
                '- Son 4 propiedades que garantizan la confiabilidad de las operaciones y consecuentemente en los datos de las BD ',
                '<strong>- Atomicidad:</strong>   Todas las operaciones deben ser todo o nada, si hay fallas la información no debe sufrir cambios ',
                '<strong>- Consistencia:</strong> Toda operación iniciada debe ser valida para poderse efectuarse, constraints, cascades, etc.. ',
                '<strong>- Aislamiento:</strong>  Toda operación debe ser ejecutada indeferentemente de las demás, respetando el orden',
                '<strong>- Persistencia:</strong> Toda transacción que se haya realizado debe ser perdurable en el tiempo, sin importar que suceda ',
            ]),
        new Item('indices',
            [
                '- Es una manera de optimizar las consultas y mejorar la eficiencia de una BD ',
                '- Esto se logra mediante estructuras binarias asociadas a cada registro de la BD ',
                '- La indexación puede presentar un problema para la inserción, modificación y borrado de los datos, ya que esto  ',
                ' - significa la actualización de los indices asociados, ralentizando las transacciones ',
                '- Tener demasiados indices tambien es contraproducente ya que pueden retrasar el procesamiento de los datos ',
                '- Cada motor puede manejar de diferentes maneras los indices, y esto a su vez afectar el rendimiento de cada tipo ',
            ]),
        new Item('joins',
            [
                '- La instrucción del Join es usada, para enlazar 2 tablas relacionadas, generalmente mediante un campo en comun(foreing key)',
                '- Una manera de entenderlos es usando la teoria de conjuntos ',
                '',
                '<strong>- Cross Join:</strong> Es el Join más simple, donde se genera un producto cartesiano, uniendo una fila de una tabla con cada fila de la otra ',
                '<strong>- Inner Join:</strong> El join por defecto, solo devuelve los registros donde haya una coincidencia, entre ambas tablas',
                ' - donde el valor del campo <strong>A</strong> se une con la coincidencia respectiva de la tabla <strong>B</strong>',
                '<strong>- Left outer Join:</strong>  Son todas las filas para las que haya coincidencia más el contenido de la tabla <strong>A</strong> que no coincida ',
                '<strong>- Right outer Join:</strong> El mismo resultado, pero con el contenido de la tabla <strong>B</strong> aunque suene redundante, puede ayudar a la compresion de la consulta ',
                '<strong>- Full outer join:</strong>  Es la suma de los 2 anteriores, donde se quieren las filas de <strong>A</strong> y <strong>B</strong>, haya coincidencias o no',
                '',
                '- Tambien hay otros tipos de Joins, que son combinaciones de estos anteriores para reducir la información entre las tablas ',
            ]),
        new Item('constraints',
            [
                '- Son especificaciones de Reglas sobre la información de una tabla',
                '- Estas se usan para limitar el tipo de datos que pueden incluirse en una tabla, esto garantiza la precisión y la confiabilidad ',
                '- Si se intentarara crear o actualizar un registro que viola la restricción, la acción se cancela ',
                '- Las restricciones pueden ser a nivel de columna o a toda la tabla ',
                '- Existen restricciones comunes y estas se pueden combinar, para crear combinaciones mas complejas, a continuación algunos ejemplos: ',
                '',
                '<strong>Not Null:</strong> Garantiza que la columna no contenga valores nulos ',
                '<strong>Unique:</strong> Garantiza que los valores de una columna sean diferentes ',
                '<strong>Primary Key:</strong> Combinación de los 2 anteriores, para tener un identificador unico en cada tabla ',
                '<strong>Foreign Key:</strong> Previene acciones que destruirian relaciones entre tablas ',
                '<strong>Check:</strong> Satisface que los valores de una columna cumplan una condición especifica ',
                '<strong>Default:</strong> Establece un valor predeterminado para una columna si no se especifica algun valor ',
                '<strong>Create Index:</strong> Se utiliza para consultar datos rapidamente, pero pueden ralentizar actualizaciones y borrados ',
            ]),
        new Item(Keys.PERSISTENCY_DB_DESIGN,
            [
                '- Un buen diseño de una BD es esencial para garantizar la integridad, coherencia y precisión de los datos, además de su eficiencia y confibilidad ',
                '- Hoy en dia se debe tener en cuenta que existe la nube y los micorservicios, por lo que no es extraño tener arquitecturas con multiples capas ',
                '- Es ventajoso diseñar una capa de acceso de datos, que este por encima del encargado directo de almacenar, pero por debajo de nuestros servicios ',
                '- Aca cobran relevancia los <em>ORM</em> y los <em>DAO</em>, para abstraer y simplificar la extracción y manipulación de los datos ',
                '',
                '<strong>Consideraciones:</strong>',
                '<strong>- Tipos de datos:</strong> Es importante evaluar el formato, el tamaño, la complejidad, y las relaciones que tengan ',
                ' - los datos trasaccionales suelen encajar bien en las BD Relacionales, mientras que datos con o sin estructura, puden beneficiarse de NoSQL',
                '<strong>- Frecuencia de operaciones:</strong> En sistemas con una gran cantidad de lecturas, pueden beneficiarse de usar un cache para datos frecuentes ',
                '<strong>- Disponibilidad:</strong> Esto es crucial para un optimo rendimiento, por lo que tecnicas como replicar, equilibrar la carga ',
                ' - y la conmutación por error son usadas para mantener una alta disponibilidad, además de que no es de sobra un plan para recuperase ante desastres ',
                '<strong>- Escalabilidad:</strong> Conforme crecen los volumenes de datos, el sistema debe ser capaz de manejarlos con relativa eficiencia, ',
                ' - antes de que se comprometa el rendimiento, aca se consideran tecnicas como las particiones y uso de clusters ',
                '<strong>- Seguridad:</strong> Un tema fundamental en la actualidad, para evitar fraudes y filtraciones de datos, por lo que son necesarios ',
                ' - controlar el acceso, el cifrado de datos y su auditoria, son vitales para mejorar la seguridad del sistema ',
                '<strong>- Consistencia:</strong> Uno de los principios de sistemas que manejan transacciones, y se consigue mediante mecanismo de bloqueo ',
                ' - y control de la concurrencia, aislamiento de transacciones, con el fin de evitar errores al intentar modificaciones simultaneas ',
                '',
                '<strong>Desafios:</strong>',
                '<strong>- Herramientas/tecnologias adecuadas:</strong> Se debe analizar las necesidades actuales y sus previsiones, para escoger la mejor opción ',
                ' - que satisfaga las necesidades de manera efectiva, y no este limitada para incrementar sus prestaciones',
                '<strong>- Persistencia poliglota:</strong> Usar multiples bases de datos no es extraño actualmente, como tampoco es combinar ',
                ' - Bases de datos SQL y NoSQL para una misma aplicación, sin dejar de manejar transacciones o grandes volumenes de datos ',
                '<strong>- Integraciones:</strong> Diferentes sistemas en convivencia, necesitan compartir información, lo que puede desencadenar ',
                ' - en duplicaciones o inconsistencias, por lo que armonizar y juntar los datos de manera efectiva, requiere una planificación integral ',
                '<strong>- Rendimiento:</strong> Una preocupación constante, que siempre se debe tener en cuenta con cada cambio, por esto es ideal que ',
                ' - se usen buenas practicas, usar particiones, se eviten procesos intensivos etc.. con el fin de evitar o mitigar posibles cuellos de botella',
            ]),
        new Item(Keys.PERSISTENCY_OPTIMIZE_SLOW_QUERIES,
            [
                '- Identificar y optimizar consultas lentas en cualquier gestor de Bases de Datos relacional es fundamental para un optimo rendimiento',
                '- Si es un desarrollador que usa poco los <em>ORM</em> como Hibernate la optimización no es un concepto ajeno ',
                '',
                '<strong>¿ Porque son dificiles de encontrar ?</strong>',
                '- Un gran volumen de consultas puede ocultarlas entre el ruido',
                '- Falta de herramientas de monitoreo, como <em>Digma, Grafana, Prometheus</em>',
                '- Consultas hechas con <em>ORM</em>, estas aceleran el desarrollo y disminuyen la necesidad de SQL nativo, a cambio de ocultar su funcionamiento',
                '',
                '<strong>¿ Porque se pueden dar ?</strong>',
                '- Falta de indices, en especial si hay consultas con uso de <em>WHERE, JOIN, GROUP BY, ORDER BY</em> que usan estas columnas ',
                '- La complejidad, como el uso de <em>JOIN, Subqueries</em> y <em>Agregaciones</em>',
                '- Abstracciones con fugas por parte de los <em>ORM</em>, ya que pueden traer consigo el problema de <strong>N + 1</strong> consultas ',
                '- Realizar consultas con <strong>*</strong> entre mayor sea la cantidad de campos mayor sera el tiempo para retornar un resultado del query ',
                '',
                '<strong>¿ Como se pueden optimizar ?</strong>',
                '- cada <em>RBDMS</em> cuenta con caracteristicas y optimizaciones unicas, por lo que es util conocerlas para implementarlas ',
                '- Utilizar consultas parametrizadas, evitando el esfuerzo de recompilar y optimizar los planes de consulta',
                '- Configure la DB para obtener las mejores prestaciones de acuerdo con cada caso, red, disco, memoria',
                '- Remueva indices no deseados, ya que estos alentan los <em>INSERT</em> y <em>UPDATE</em>',
                '- Verifique la tabla sobre la cual se estan haciendo los queries, es posible que se pueda normalizar o dividirse, reduciendo la cantidad de filas ',
                '- Use procedimientos almacenados si son consultas demasiado frecuentes y con poca complejidad, sin abusar de estos ',
            ]),
        new Item(Keys.PERSISTENCY_SCHEMAS,
            [
                '- El Modelo Relacional, fue un avance trascendental para el almacenamiento de datos y una base fundamental para el software moderno ',
                '- <strong>Edgar Frank Codd</strong> ó <em>Ted</em> Codd conocido por ser el padre de las bases de datos relacionales, afirmo de manera contundente: ',
                '<em>Los futuros usuarios de grandes bancos de datos deben estar protegidos de tener que saber cómo se organizan los datos en la máquina (la representación interna)</em>',
                '',
                '- Una afirmación simple pero que conlleva grandes implicaciones, una de ellas se reduce a que el esquema logico y el esquema fisico de una BD, ',
                ' - son 2 cuestiones distintas que deben separarse, para que puedan manejarse o ajustarse de manera independiente ',
                '- El modelo relacional lo cumple, ya que sus abstracciones son lo suficientemente de alto nivel como para lograrlo y evitar cuestiones fisicas ',
                '- De esta caracteristica, surge la necesidad de un planificador de consultas sofisticado, que pueda disociar <strong>que</strong> esta recuperando, de <strong>como</strong> se recupera',
                '',
                '- Generalmente es una forma optima de trabajar, ya que el desarrollador se enfocara en el significado y la logica de las consultas ',
                '- Pero en sistemas donde el rendimiento es critico, o la congruencia es decisiva, se deben aprovechar las particularidades fisicas del Motor de la BD, ',
                ' - y ahi es donde estos planificadores pueden interferir, debido a que SQL es un lenguaje declarativo, que aveces parece más <em>magia</em> que logica ',
                '- No existe ninguna BD que sea deficiente en su forma de trabajar, por lo que estos casos deben ser analizados y realizados meticulosamente',
                '- La optimización de consultas, debido a su naturaleza ambivalente es un proceso caotico y riesgoso, que debe tener en cuenta beneficios y riesgos ',
                ' - por igual, cualquier cambio o actualización de este planeador puede romper consultas cuidadosamente diseñadas ',
            ]),
        new Item(Keys.PERSISTENCY_HARD_SOFT_DELETE,
            [
                '- Los datos son uno de los temas más importantes en el desarrollo en general y su gestión es fundamental para tener aplicaciones solidas ',
                '',
                '<strong>Soft delete:</strong> En lugar de eliminar permanentemente un registro, se le marca de manera especial con una bandera(flag)',
                '- Permitiendo que los datos sigan estando disponibles y sean recuperables, solo se inactivan y se omiten de manera logica ',
                '- Esta bandera suele ser un valor booleano, pero tambien puede ser la fecha de borrado o un estado',
                '<strong>Ventajas:</strong>                                            <strong>Desventajas:</strong>',
                '- Integridad de datos                                - Mayor consumo de almacenamiento             ',
                '- Información historica                              - Necesidad de filtros                        ',
                '- Permite auditoria                                  - Puede llegar a afectar el rendimiento       ',
                '- Protección contra eliminación accidental ',
                '',
                '<strong>Hard delete:</strong> El enfoque tradicional, los datos se eliminan de forma permanente y no hay forma de recuperarlos, sin un backup',
                '<strong>Ventajas:</strong>                                            <strong>Desventajas:</strong>',
                '- Borrado de datos confidenciales                    - Perdidas de información                     ',
                '- Cumplimiento de normas de privacidad                                                             ',
                '- Diseños más simples                                                                              ',
            ]),
        new Item(Keys.PERSISTENCY_DB_TYPES,
            [
                '- las bases de datos son un componente critico para cualquier sistema, por eso necesario escoger la mejor opción',
                '',
                '<strong>Blockchain:</strong>                                                        <strong>Vectores:</strong>',
                '- Garantizan la integridad y la seguridad de los datos             - Optimizadas por almacenamiento de vectores',
                '- Soporta aplicaciones descentralizadas                            - Soporta Modelos de IA ',
                '<em>- Casos de uso:</em> Registros transaccionales                          <em>- Casos de uso:</em> Reconocimiento de imagenes ',
                '<em>- Ejemplos:</em> BigchainDB, Chainbase                                  <em>- Ejemplos:</em> Milvus, Singlestore, Astra',
                '',
                '<strong>SQL:</strong>                                                               <strong>Grafos:</strong>',
                '- Información estructurada                                         - Almacenamiento en Nodos y vertices',
                '- Cumple el esquema ACID, apropiado para transacciones             - Optimizadas para consultas complejas ',
                '<em>- Casos de uso:</em> Consultas complejas y sistemas financieros         <em>- Casos de uso:</em> Redes sociales ',
                '<em>- Ejemplos:</em> MySQL, PostgresSQL, Oracle                             <em>- Ejemplos:</em> Neo4j, Microsoft Azure Cosmos DB ',
                '',
                '<strong>Columnar:</strong>                                                          <strong>Time-Series:</strong>',
                '- Optimizadas por lecturas/escrituras                              - Optimizadas para datos temporales',
                '- Eficientes para sistemas analiticos y sistemas OLAP              - Eficiencia a traves del tiempo',
                '<em>- Casos de uso:</em> Data warehouse, Inteligencia para negocios         <em>- Casos de uso:</em> IoT, Monitoreo',
                '<em>- Ejemplos:</em> Amazon Redshift, Apache Cassandra                      <em>- Ejemplos:</em> InfluxDB, TimescaleDB',
                '',
                '<strong>NoSQL:</strong>                                                             <strong>Key-Value:</strong>',
                '- Combina la fiabilidad de SQL con una gran escalabilidad          - Modelado simple de datos, pares de llave-valor',
                '- No cumplen ACID, pero si BASE                                    - Acceso rapido, mediante busquedas en las llaves ',
                '<em>- Casos de uso:</em> Aplicaciones OLTP de alto rendimiento              <em>- Casos de uso:</em> Cache, Sesiones',
                '<em>- Ejemplos:</em> Google Spanner, CockroachDB                            <em>- Ejemplos:</em> Redis, Amazon DynamoDB',
                '',
                '<strong>En memoria:</strong>                                                        <strong>Documentos:</strong>',
                '- Almacenamiento en memoria con baja latencia                      - Información semi-estructurada',
                '- Procesamiento inmediato                                          - Sin esquemas, modelo flexible ',
                '<em>- Casos de uso:</em> Analiticas en tiempo real, Cache                   <em>- Casos de uso:</em> Manejo de contenido',
                '<em>- Ejemplos:</em> SAP HANA, MemSQL                                       <em>- Ejemplos:</em> MongoDB, Couchbase',
                '',
                '<strong>Espaciales:</strong>                                                        <strong>Orientadas a Objetos:</strong>',
                '- Optimizadas para datos espaciales                                - Se almacenan los datos como objetos',
                '- Soporte de localizaciones y GIS                                  - Se alinean con <strong>POO</strong>',
                '<em>- Casos de uso:</em> Mapas y Sistemas de Navegación                     <em>- Casos de uso:</em> Tipos de datos complejos ',
                '<em>- Ejemplos:</em> PostGIS, Oracle Spatial                                <em>- Ejemplos:</em> db4o, ObjectDB',
            ]),
        new Item(Keys.PERSISTENCY_KEY_TYPES,
            [
                '- Para determinar la unicidad de un registro existe el concepto de key que es sumamente importante a la hora de guardar y gestionar la información ',
                '',
                '<strong>key:</strong> Es un atributo que identifica de manera unica cualquier entidad en el conjunto de filas existentes ',
                '<strong>Composite Key:</strong> <em>Key</em> que se compone de 2 o más atributos',
                '<strong>Natural Key:</strong> Es una <em>Key</em> formada por atributos del mundo real, como puede ser la identificación de una persona ',
                '<strong>Surrogate Key:</strong> Una llave que garantiza la unicidad, pero no tienen ningun significado para la logica de negocio ',
                '<strong>Candidate Key:</strong> Una entidad puede ser identificada de varias formas, por lo que cada posibilidad es un candidato para ser la clave principal ',
                '<strong>Primary Key:</strong> La clave preferida de acuerdo al tipo de entidad y su significado para el negocio',
                '<strong>Alternate Key:</strong> La clave segundaria tambien es unica en cada registro, util para otros escenarios ',
                '<strong>Foreign Key:</strong> Uno o más atributos dentro de una entidad que representan una clave/referencia hacia otra entidad ',
                '',
                '<strong>Claves sustitutivas:</strong>',
                '<strong>- Valores automaticos:</strong> creados por la misma BD, aunque esto cambia de acuerdo a cada motor, por lo que pueden ser secuencias o valores autoicrementales ',
                '<strong>- MAX() + 1:</strong> Es una estrategia donde siempre se aumenta el identificador en base al ultimo registro, conllevando a problemas de rendimiento ',
                '<strong>- UUID ó GUID:</strong> Son valores de 128 bits que se crean a partir de un hash de identificadores unicos, como puede ser la fecha y hora del host',
                '<strong>- Valores altos y bajos:</strong> Tiene 2 partes logicas, las cuales aumentan y reinician de manera separada; 1701000, 1701001... 1701999 -> 1702000, 1702001',
                '<strong>- Claves inteligentes:</strong> Contienen 2 o más partes que brindan significado, como el codigo postal, nombres, identificacion, ',
                ' - esto No se recomienda debido a que estas claves cambian con el tiempo y son complejas de mantener',
            ]),
        new Item(Keys.PERSISTENCY_COMMON_TABLE_EXPRESSION,
            [
                '- Es una forma de simplificar las consultas de SQL, estas funcionan como tablas virtuales que se crean durante la ejecución de la consulta ',
                '- Este resultado solo es temporal y ocupan espacio mientras la consulta se hace, despues son eliminadas ',
                '- Estas se declaran con la palabra reservada <strong>WITH</strong> & <strong>AS</strong> y se crean a partir de un <strong>SELECT</strong> ',
                '',
                ' WITH my_cte AS (SELECT a,b,c FROM T1)',
                ' SELECT a,c FROM my_cte WHERE ....',
                '',
                '- Esto permite generar resultados individuales y testeables, de manera que pueden ser agrupados y reutilizados para formar consultas más complejas ',
                '- las CTE tambien admiten Recursividad, especialmente util para los conjuntos de datos que se expresan como jerarquias ',
                '- Es importante gestionar los CTE Recursivos con cuidado para evitar un bucle infinito, si la condición de de terminación es inadecuada ',
                '- No todos los Motores de BD soportan esto, esta compatibilidad esta generalizada en las versiones más actuales '
            ]),
        new Item(Keys.PERSISTENCY_DATA_MODELING,
            [
                '<strong>Fase Conceptual:</strong> Define los requisitos de alto nivel, funcionales y no funcionales ',
                '- Identificar el proposito y los objetivos de la BD es esencial para escoger la más indicada ',
                '- Despues se definen las entidades, con sus respectivos atributos y cardinalidad, generalmente se expresa mediante un <em>ERD</em> ',
                '- Al identificar las relaciones se suelen usar nombres que representen la interacciones reales entre las entidades: <em>Autor</em> <strong>publica</strong> <em>Libros</em>',
                '',
                '<strong>Fase Logica:</strong> El enfoque se centraliza en la normalización de los datos, eliminando redundancias y mejorar la integridad ',
                '- Un modelo logico normalizado refleja con precisión las relaciones y dependencias entre entidades ',
                '- Una correcta estructuración puede optimizar las consultas y vincularlo a un esquema segun los criterios especificos ',
                '',
                '<strong>Fase Fisica:</strong> Se definen las estructuras de almacenamiento, estrategias de indexación y los tipos de datos ',
                '- Para garantizar un almacenamiento y una recuperación eficiente de los datos, aca cobra importancia el <em>DBMS</em> a usar ',
                '- En este paso se plasma los conceptos anteriores mediante SQL, ya sea de manera generica ó con optimizaciones de acuerdo al tipo de BD usado ',
                '',
                '- El modelado de datos no es exclusivo de las BD, tambien puede ser aplicado a relaciones Jerarquicas o en la <em>Programación Orientada a Objetos</em> ',
            ])
    ];

export const BASE_DE_DATOS_AVANZADO =
    [
        new Item('nosql',
            [
                '- Nacieron de los problemas para escalar las BD relacionales, existen proyectos privados y de codigo libre, accesibles para la comunidad',
                '- La principal diferencia respecto a SQL es la falta de una estructura definida para almacenar los datos ',
                '- Esta falta de estructura hace posible que se pueda guardar cualquier tipo de dato',
                '- El rendimiento es mayor independientemente de la cantidad de datos',
                '- La fiabilidad de los datos no esta garantizada',
                '- No hay un estandar para las operaciones, cada motor tiene su sintaxis diferente',
                '- Existen diferentes formas de guardar la información ',
            ]),
        new Item('tiposBD',
            [
                '<strong>- Clave-Valor:</strong> Cada elemento tiene una llave unica, asociada a un valor ',
                '<strong>- Documentos:</strong>  La información se guarda en documentos con IDs unicos, y en formatos simples como JSON o XML ',
                '<strong>- Grafos:</strong>      Se basan en nodos, relacionados mediante aristas, es necesario de la teoria de grafos para recorrerlas ',
                '<strong>- Objetos:</strong>     Los datos se manejan mediante Objetos, tal y como en la Programación Orientada a Objetos ',
            ]),
        new Item(Keys.PERSISTENCY_ADVANCED_ORM,
            [
                '- El Mapeo Objeto-Relacional permite convertir los objetos convencionales en objetos persistentes ',
                '- Permite generar esquemas para guardar la información independientes de cualquier Motor de Base de Datos ',
                '- Todas las operaciones basicas del CRUD son facilmente implementables ',
                '- Los cambios en las BD se hacen mucho más rapidos de hacer y de probar ',
                '- El rendimientos para operaciones muy complicadas es ligeramente menor ',
            ]),
        new Item(Keys.PERSISTENCY_CONSISTENCY,
            [
                '- Garantiza la calidad de los servicios, con una gran disponibilidad y escalabilidad, esto aplica solamente para BD relacionales ',
                '- Cuando la concurrencia es demasiado alta, las peticiones pueden resultar en peticiones bloqueantes ',
                '- Cuando un sistema transaccional se bloquea, generalmente lo hace por un instante breve de tiempo, ',
                ' - si esto no se maneja de manera correcta, puede resultar en bloqueos fatales para la aplicación ',
                '- La consistencia eventual permite garantizar la disponibilidad y escalabilidad de las aplicaciones, ',
                ' - mediante cientos de nodos distribuidos y la promesa de retorno de toda operación ',
            ]),
        new Item('algebraRelacional',
            [
                '- Este tipo de algebra toma un conjunto de datos y realiza operaciones sobre estos, para generar un nuevo conjunto ',
                '- Tambien soporta el concepto de anidación al usar un resultado para una operación y generar otro resultado ',
                '',
                '<strong>- UNION:</strong>        Une 2 tablas iguales, sin registros repetidos ',
                '<strong>- INTERSECCIÓN:</strong> Une 2 tablas iguales donde los registros sean iguales, evitando la repetición ',
                '<strong>- DIFERENCIA:</strong>   Opera en tablas y devuelve el contenido que se encuentre en la primera tabla pero no en la segunda ',
                '<strong>- PRODUCTO:</strong>     Toma 2 tablas y devuelve una tercera con el contenido de acuerdo a las posibles combinaciones, ya sean iguales o diferentes ',
                '<strong>- SELECCION:</strong>    Toma 2 ó más tablas, iguales o diferentes, y devuelve los campos donde se cumplan las condiciones dadas ',
                '<strong>- PROYECCIÓN:</strong>   Opera igual que la selección, pero aca se pueden especificar que columnas se quieren tener ',
                '<strong>- REUNIÓN:</strong>      Opera sobre 2 ó más tablas y devuelve todos los campos deseados, que esten relacionados mediante alguna condición ',
                '<strong>- DIVISIÓN:</strong>     Opera sobre 2 tablas donde el resultado no existe en la primera tabla, y todas las filas tengan esta relación ',
                '<strong>- ASIGNACIÓN:</strong>   Cambia los valores de las columnas donde se cumplan las condicones dadas ',
                '',
                '- equivalencias en SQL (respectivamente)                           ',
                '- SELECT * FROM A     UNION     SELECT * FROM B                     ',
                '- SELECT * FROM A   INTERSECT   SELECT * FROM B                      ',
                '- SELECT * FROM A    EXCEPT     SELECT * FROM B                       ',
                '- SELECT * FROM A, B                                                   ',
                '- SELECT * FROM A WHERE X&lt;50                                         ',
                '- SELECT X, Z FROM A WHERE X&lt;50                                       ',
                '- SELECT A.W, B.Y FROM A JOIN B ON (A.V=B.X AND Z>10)                     ',
                '- No hay equivalencia directa, pero se puede lograr combinando operaciones ',
                '- UPDATE A SET indice="100%" WHERE codigo > 2000                            ',
            ]),
        new Item('n+1selects',
            [
                '- Es un problema cuando se manejan ORM, dado una colección de objetos, que a su vez pueden tener otras colecciones objetos como atributos ',
                '- Entonces para obtener un objeto inicial, hay que tener todos los objetos asociados a este, aunque no se necesiten ',
                '- Actualmente la mayoria de ORM usan o proveen estrategias para evitar este comportamiento ',
                '- Generalmente esto no es un problema de rendimiento, pero si ha de convertirse en uno, generalmente sucede en entidades con mucha anidación ',
                '- Hay maneras de solventarlo como cambiar la forma de consultar las entidades o usar objetos en memoria ',
            ]),
        new Item('boyceCodd',
            [
                '- El modelo relacional fue introducido en los años 60 por Edgar Frank Codd e IBM, e incremento su popularidad hasta ser el principal modelo actual ',
                '- En este modelo se definen los siguientes objetivos, para una adecuada normalización: ',
                '',
                '<strong> - Independencia fisica:</strong> La forma de almacenar los datos, no debe influir en su manipulación ',
                '<strong> - Independencia logica:</strong> Los datos almacenados no deben ser modificados si se cambia el motor de la bd ',
                '<strong> - Flexibilidad:</strong>         La BD deberia ofrecer distintas vistas en funcion del usuario que la necesite ',
                '<strong> - Sencillez:</strong>            La estructura logica deberia estar normalizada, hasta la 3ra forma normal, o la 4ta forma normal Boyce-Codd',
                '',
                '- Normalmente casi todas las tablas que estan en la 3FN no suelen infrigir la FNBC ',
                '- No existe una regla definida para corregir de la 3ra a la 4ta forma normal ',
                '- En ciertos casos no es indicado hacerlo ya que la descomposición puede hacer perder la semantica de la relación ',
                '',
                ' Se tiene la siguiente tabla en 3FN        La FNBC serian las siguientes tablas: ',
                ' <strong>CodPostal Direccion    Ciudad             CodPostal  Direccion       CodPostal  Ciudad </strong>',
                ' 3000      las flores   Merida             3000       las flores      3000       Merida ',
            ]),
        new Item('sqlVsNosql',
            [
                '- Si ya se conoce SQL y se manejan bien las relaciones y la normalización, intentar replicar esto en NoSql es un gran error ',
                '- Contrario a lo que se pensaria las BD NoSql no tienen problema alguno con la redundancia ',
                '- A continuación se expondran algunos puntos para definir que BD es más idonea, de acuerdo a las necesidades ',
                '',
                '      <strong>Caracteristica</strong>                   <strong>SQL                                NoSQL</strong>                 ',
                ' Integridad de datos            Estructura rigida                   Las estructuras son                           ',
                '                                pero garantizada                    altamente mutables                            ',
                '',
                '                                Las tablas y sus relaciones         Cualquiera puede cambiar                      ',
                ' Atomicidad                     evitan cambios no aceptados,        lo que sea, permitiendo una                   ',
                '                                es un todo o nada (rollback)        condición de carrera                          ',
                '',
                '                                No es imposible, solo es más        Ya que no tiene integridad,                   ',
                ' Escalabilidad                  costoso y puede tener problemas     crecer es facil, más rapido                   ',
                '                                con la integridad de datos          y puede hacerlo de manera horizontal          ',
                '',
                ' Velocidad                      Los Joins pueden ser lentos         El volumen no es un problema,                 ',
                '                                debidos a la cantidad de datos      siempre y cuando no hayan relaciones          ',
                '',
                ' Consistencia VS Redundancia    Siempre se garantiza y más si       La redundancia es totalmente normal           ',
                '                                esta normalizada                    y esto puede conllevar a datos inconsistentes ',
                '',
                '                                SQL es maduro,                      Su flexibilidad le permite ser más            ',
                ' Desarrollo                     con una gran comunidad,             rapido para realizar cambios sin              ',
                '                                documentación extensiva             grandes consecuencias, más si se usa con      ',
                '                                y estandares bien definidos         lenguajes debilmente tipados                  ',
                '',
                '                                Se necesita bloquear los            No tienen ningun tipo de bloqueo intrinseco   ',
                ' Sincronización & bloqueos      registros hasta que la              los registros pueden ser modificados de       ',
                '                                transación se complete              manera concurrente, generando posibles        ',
                '                                o se descarte                       inconsistencias con el tiempo                 ',
                '',
                '<strong>Escoger una BD Relacional si...</strong>',
                '- Se necesita consistencia y transacciones atomicas, con un minimo de errores ',
                '- Hay datos con relaciones y se buscaran en base a estos ',
                '- Se debe introducir gente rapidamente al desarrollo ',
                '- El apoyo de la comunidad es necesario y la estabilidad es un requisito ',
                '',
                '<strong>Escoger una BD No Relacional si...</strong>.',
                '- La velocidad de lectura/escritura es prioridad sobre la consistencia ',
                '- Se sabe poco del desarrollo y lo más probable es que cambie constantemente ',
                '- La escalabilidad es una meta a tener en el tiempo ',
                '- No se necesitan estructuras o simplemente se necesitan guardar los datos y nada más ',
                '',
                '<strong>Escoger ambos si...</strong>',
                '- Ya que ambos pueden coexistir en los sistemas complejos que necesiten ambas ventajas ',
                '- Información muy consultada y de poca edición puede usarse con NoSql ',
                '- Operaciones criticas y que requieran consistencia con SQL por tradición ',
            ]),
        new Item(Keys.PERSISTENCY_ADVANCED_LOCKING,
            [
                '- En entornos de alta concurrencia es inevitable que hayan conflictos o colisiones, por lo que en las BD se suelen usar 2 estrategias ',
                '',
                '- Detectar y volver a intentar, como lo hace <strong>Ethernet</strong> ',
                '- Bloqueando a otros transmisiones concurrentes, como lo hace el <strong>Wifi</strong>',
                '',
                '<strong>La anomalia perdida</strong>',
                '- Consideremo una actualizacón perdida, algo que puede ocurrir en cualquier base de datos, que se ejecute aisladamente con una lectura confirmada ',
                '- Donde varios usuarios acceden al mismo recurso de manera concurrente y lo modifican de manera alternada, generando inconsistencias y problemas ',
                '',
                '<strong>Bloqueo Pesimista:</strong>',
                '- El primer usuario que tome el recurso lo bloqueara, hasta que hayan terminado todas las operaciones sobre este ',
                '- Es ideal realizarlo cuando es demasiado costoso solucionar y/o encontrar conflictos ',
                '',
                '<strong>Bloqueo Optimista:</strong>',
                '- Se permite que el bloqueo suceda, pero se necesita detectarlo para reintentar y/o hacer rollback si es necesario ',
                '- Esto permite evitar bloquear operaciones de lectura y escritura entre si, y revertir las operaciones que presenten errores ',
                '',
                '<strong>Transacciones a nivel de la aplicación</strong>',
                '- Hoy en dia la concurrencia y la formas de conexión se han incrementado, por esto no todo se da necesariamente en una misma transacción ',
                '- Tampoco se garantiza que una ejecución los procesos de manera serial, mantenga las cosas en orden ',
                '- Debido a esto, motores como Oracle, PostgreSQL y MySQL utilizan el control de la concurrencia, basandose en un bloqueo optimista ',
            ]),
        new Item('sqlOrderExecution',
            [
                '<strong> Como se ve el Query               Como se ejecuta                     Porque pasa de esta manera</strong> ',
                '',
                '      SELECT                            FROM                      Lugar o lugares de donde se tomaran los datos ',
                '',
                '      FROM                              WHERE                     Filtrado de los registros ',
                '',
                '      WHERE                             GROUP BY                  Se verifica si existen agrupaciones por columnas',
                '',
                '      GROUP BY                          HAVING                    Se aplica si se tiene un GROUP BY',
                '',
                '      HAVING                            SELECT                    Se retornan las columnas que se quieren ver, sean normales o calculadas',
                '',
                '      ORDER BY                          ORDER BY                  Ordena los datos entregados ',
                '',
                '      LIMIT                             LIMIT                     Se limita la cantidad de registros entregados',
            ]),
        new Item('sargeable',
            [
                '- <strong>SARGABLE</strong> significa "<strong>S</strong>earched <strong>ARGU</strong>ment <strong>ABLE</strong>", referiendose a consultas que pueden hacer uso de los indices, siguiendo algunas indicaciones',
                '',
                '- Utiliza funciones y argumentos que puedan aprovechar los indices, como igualdad(=), desigualdad(<>, !=), Rango(BETWEEN), Pertenencia(IN)',
                '- No utiliza funciones que evitan los indices o requieren de un full scan, como Negación(NOT), comodines(LIKE), Operaciones aritmeticas(+, -, *, /)',
                '',
                '<strong>Tambien hay pautas como:</strong> ',
                '- Usar los tipos correctos de los datos, para evitar conversiones implicitas que puedan afectar el uso de los indices',
                '- Evitar usar Operaciones de ordenamiento y agrupamiento, solo se debe de usar cuando son requeridas ',
                '- Usar columnas derivadas o valores precalculadas, en vez de usar operaciones sobre las columnas, y menos en las que estan indexadas ',
                '- Siempre intente usar el WHERE, como una manera de reducir los datos, para todos los pasos subsiguientes ',
                '- Intente usar LIMIT, para mejorar el rendimiento y la cantidad de datos a procesar ',
                '- Escoja los JOINS indicados, no siempre sera necesario, tener toda la información de todas las tablas'
            ]),
        new Item('MVCC',
            [
                '- Es una tecnica de optimización de BD que crea copias duplicadas de registros, para que los datos puedan leerse y actualizarse de forma segura ',
                '- Evitando que las lecturas y las escrituras se bloqueen entre si y que puedan formen cuellos de botella ',
                '- cuando es implementado correctamente, puede traer beneficios como: ',
                '',
                ' - Menor necesidad de bloqueos relacionados a transacciones ',
                ' - Menos problemas relacionados a contención ',
                ' - Mejor rendimiento en la lectura de datos ',
                ' - Aislamiento de registros para operaciones de escritura y actualizaciones ',
                '',
                '- Cada DBMS es libre de implementar sus versiones, pero casi todas funcionan de la siguiente manera: ',
                '',
                '1. Cada registro en BD tiene un numero de versión ',
                '2. Las lecturas simultaneas, se realizan con el numero de versión más alto ',
                '3. Las operaciones de escritura siempre operan con una copia, no con el registro en si ',
                '4. Los usuarios siempre leeran copias, hasta que las actualizaciones no hayan finalizado ',
                '5. Si la operación es exitosa, se incrementa la versión, esto descarta las copias, creando tuplas muertas ',
                '6. Las siguientes lecturas, siempre se realizaran con la versión más actualizada ',
                '7. Con cada actualización, se repite el ciclo',
                '',
                '- A diferencia de un DBMS tradicional, aca no se bloquean los registros, se prefiere crear copias y trabajar con ellas, ',
                ' - hasta que la operación haya finalizado correctamente ',
                '',
                '- Para lidiar con los problemas de que cada actualización o borrado incrementa el tamaño de la BD sigilosamente ',
                '- Se han implmentado estrategias de limpieza, como el VACCUM en PostgreSQL, que identifica y elimina estos residuos ',
                '- Pero esto tampoco es una solución final, si este proceso no se realiza periodicamente o se realiza de manera errada, ',
                ' - la BD puede fallar por falta de espacio, o bloquear de manera fatal el acceso y la manipulación de los datos ',
                ' - obligando a que se interrumpa la operación y a un mantenimiento forsozo del DBMS ',
            ]),
        new Item(Keys.PERSISTENCY_ADVANCED_BASE,
            [
                '- El auge de las NoSql necesitaba un nuevo esquema que no fuera <strong>ACID</strong>, sin dejar de ser flexible y fluido al manipular los datos ',
                '',
                '<strong>BA Basicamente disponible:</strong> Garantiza la disponibilidad de los datos, sin imponer una coherencia inmediata, ni importar si es un cluster/nodos ',
                '<strong>S Estado suave:</strong> No se garantiza la coherencia de los datos, esto pasa a ser responsabilidad del desarrollador ',
                '<strong>E Coherencia eventual:</strong> Alcanzar la coherencia es posible, pero esto no sera de manera inmediata y los datos no siempre seran fiables ',
                '',
                '- Las redes sociales suelen ser un mar de información, donde no existe una estructura fija, por lo que contienen un enorme volumen de datos, ',
                ' - sin estructura o parcialmente estructurados, por lo que una BD NoSQL es idonea para este tipo de ambientes ',
            ]),
        new Item(Keys.PERSISTENCY_ADVANCED_SCALING_DB,
            [
                '- Las BD esta hechas para procesar y almacenar inmensas cantidades de datos, aun asi eso no significa que no deba o no puedan crecer aun más',
                '',
                '<strong>- Indexación:</strong> Analizar las consultas y sus patrones, para crear o modificar los indices correctos ',
                '<strong>- Vistas materializadas:</strong> Crear calculos de consultas complejas y almacenar los datos para su rapido acceso ',
                '<strong>- Desnormalizar:</strong> Reducir joins complejos, para incrementar el rendimiento de las consultas',
                '<strong>- Crecimiento vertical:</strong> Aumentar la caracteristicas fisicas, agregando CPU, RAM o Almacenamiento',
                '<strong>- Cache:</strong> Almacenar información recurrente de manera que sea más rapida para su acceso ',
                '<strong>- Replicación:</strong> Crear replicas de la BD principal, para separar las lecturas de la escritura ',
                '<strong>- Fragmentación:</strong> Dividir las tablas de la BD en partes más pequeñas y distribuirlas en multiples servidores ',
            ]),
        new Item(Keys.PERSISTENCY_ADVANCED_WAL,
            [
                '- <em>Write Ahead Logs</em>, es una tecnica utilizada en los sistemas de almacenamiento para garantizar la durabilidad y coherencia de las transacciones ',
                '- La idea basica es registrar los cambios en un registro antes de que se apliquen al almacenamiento real',
                '- Este contiene un registro secuencial de todos los cambios realizados en el almacenamiento',
                '- Las transacciones no se consideran completadas, hasta que los cambios correspondientes se registren de forma segura en el <em>WAL</em>',
                '- Aunque parezca contradictorio, esto puede mejorar el rendimiento en algunos escenarios, al escribir en el archivo de manera secuencial y no aleatoria ',
                '',
                '<strong>Secuencia de pasos</strong>',
                '<strong>1. Antes de realizar cualquier cambio persistente:</strong> Agrege la información necesaria a los registros para reproducir los cambios, ',
                ' - en caso de cualquier error, como: la operación realizada, datos afectados, y cualquier otro metadato necesario para la recuperación ',
                '<strong>2. Una vez modificados los logs:</strong> Se pueden aplicar directamente en la BD y modificar las copias en memoria ',
                '<strong>3. Confirmar la transacción:</strong> Para que los cambios sean permanentes, este registro de confirmación tambien funciona como marcador, ',
                ' - para que el sistema sepa de todos los cambios que tienen transacciones comprometidas ',
                '<strong>4. Puntos de control:</strong> Periodicamente el sistema de la BD realiza puntos de control, aca se vacian los datos modificados de la memoria, ',
                ' - y escribe un nuevo punto de control en la <em>WAL</em> indicando el punto donde se han aplicado todos los cambios sobre los registros de la BD',
                '<strong>5. Recuperación:</strong> Si es necesaria en caso de alguna falla, se usaran los <em>WAL</em> para restaurar la BD a un estado previo consistente, ',
                ' - al haber reproducido todos desde la ultima transacción confirmada, se pueden aplicar los cambios sin confirmar ó que se encuentran pendientes ',
                '',
                '<strong>¿ Donde se usan ?</strong>',
                '- Comunmente utilizado en sistemas de gestión de bases de datos relacionales <em>RBDMS</em> como <strong>PostgreSQL, SQLite, Oracle, MariaDB, etc..</strong>',
                '- <strong>Kafka:</strong> Usa un proceso similar al <em>WAL</em> para mayor durabilidad y tolerancia a fallos, antes de ser procesados por los consumidores y evitar perdidas ',
                '- <strong>Hadoop:</strong> Utilizado para garantizar la integridad y coherencia entre nodos distribuidos, antes que se apliquen en el registro de los metadatos ',
                '',
                '<strong>Componentes</strong>',
                '<strong>- Logs de entrada:</strong> El nucleo de <em>WAL</em> son los registros de todos los sucesos, que incluyen datos y metadatos',
                '<strong>- Bufer de Logs:</strong> Cualquier cambio se escribe primero en el bufer en memoria, lo cual suele ser rapido ya que son escrituras secuenciales ',
                '<strong>- Numero de Secuencia de Logs(LSN):</strong> Cada entrada esta asociada a un numero de secuencia especifico, estos se utilizan para ordenar las entradas ',
                ' - y garantizar que los cambios se apliquen en el orden correcto durante la recuperación ',
                '<strong>- Archivos WAL:</strong> Las entradas de los logs en el buffer se vacian de manera periodica en el disco y se escriben en uno o varios archivos duraderos ',
                '<strong>- Puntos de control:</strong> El vaciado de los logs, tambien implica actualizar los metadatos, para indicar el <em>LSN</em> de control más reciente, ',
                ' - esto con el fin de reducir el tiempo de recuperación al limitar la cantidad de datos de registro que deben reproducirse ',
                '<strong>- Administrador de recuperación:</strong> En caso de fallas o apagados, este administrador es responsable de restaurar la BD a un estado consistente ',
                '<strong>- Archivado o mantenimiento:</strong> Depende de la configuración, los archivos pueden guardarse o eliminarse, cuando no sean relevantes para la recuperación ',
            ]),
        new Item(Keys.PERSISTENCY_ADVANCED_UNKNOWN_PROBLEMS,
            [
                '- Casi todos los sistemas informaticos tienen algun estado y necesitan almacenar datos, pero igual que las aplicaciones las Bases de Datos, ',
                ' - tambien tienen componentes de Hardware y de Software, por lo que no esta exentas de problemas ',
                '',
                '- El 99.9% de las veces no se tendran problemas con la red, pero esta puede ser afectada directamente debido a la latencia e interrupciones',
                ' - como se evidencia en las <em>falacias de la computacion distribuida</em>',
                '',
                '- No todas las BD cumplen <em>ACID</em>, además cada motor tiene sus propias implementaciones, por lo que pueden ser más o menos estrictos ',
                '',
                '- Existen más anomalias en los datos que las lecturas sucias y la perdidas, tambien pueden suceder sesgos de escritura y otros problemas ',
                '<strong>- Lectura sucia:</strong> Una transacción lee datos que aun no han sido confirmados',
                '<strong>- Sesgos de escritura:</strong> Son más dificiles de encontrar al no ser facilmente observables, son violaciones a las restricciones logicas de los datos ',
                '',
                '- El uso de bibliotecas no bloqueantes o entornos altamente concurrentes pueden afectar el orden de las transacciones ',
                ' - el orden de la invocación depende esctrictamente del orden en que se hayan recibido, y no de como haya sido programado ',
                '',
                '- Las llaves autoincrementales no siempre son beneficiosas, en especial en sistemas distribuidos ',
                ' - Para evitar colisiones los diferentes nodos deben comunicarse, tener bloqueos globales y alguna forma de administración ',
                ' - Esto no sucede con los UUID, pero este tipo de datos trae desventajas en cuanto a indexación y un mayor espacio de almacenamiento ',
                ' - Algunos sistemas de particionamiento se basan en las llaves primarias, por lo que podrian provocar distribuciones inequitativas e impredecibles ',
                '',
                '- Los datos obsoletos no son necesariamente inutiles, las BD que implementan <strong>MVCC</strong> tienen copias anteriores que pueden ser de utilidad para:',
                ' - Calcular datos agregados aproximados ó generar analisis/reportes ',
                ' - Reducir la latencia, en especial si la BD se encuentra distribuida en multiples regiones geograficas ',
                ' - Si existe una gran carga de lectura, evitando que estas consultas se bloqueen ',
                '',
                '- Evitar las transacciones anidadas, no son soportadas por todos los motores y pueden tener comportamientos extraños ',
                ' - Es mejor implementar estas operaciones con la ayuda de la capa de negocio y evitar problemas como: ¿ Como se comportaria el rollback ?',
                '',
                '- Los planificadores de consultas brindan información util acerca de las Bases de Datos, no solo optimizan las consultas ',
                ' - Se pueden tener resultados de 2 maneras, haciendo un escaneo completo de la tabla ó usando los indices disponibles ',
                '',
                '- Las migraciones en linea y sin tiempos de inactividad son complejas pero posibles, incluso si se cambia de motor de BD ',
                ' - Defina su nuevo esquema y comience a realizar escrituras duales ',
                ' - Habilite la lectura de datos de manera que pueda consultar ambas ',
                ' - Despues de que la nueva BD permita lecturas/escrituras y contenga la mayoria de registros, deje de escrbir en la BD anterior ',
                ' - La BD anterior solo deberia quedar para lecturas, y los datos faltantes se migran hasta reducir el uso a <strong>0</strong> ',
                '',
                '- El crecimiento significativo de los datos genera imprevisibilidad, incluso si se tiene conocimiento del funcionamiento interno ',
            ]),
        new Item(Keys.PERSISTENCY_ADVANCED_PARTITIONING,
            [
                '- Es una tecnica donde grandes volumenes de datos se subdividen en conjuntos más pequeños y manejables ',
                '- Generalmente se hacen particiones horizontales(filas), pero tambien se pueden hacer de manera vertical(columnas)',
                '- Esto se hace con el fin de mejorar el rendimiento y la administración de los datos, para lo cual existen diversos tipos: ',
                '',
                '<strong>Rangos:</strong> Permite dividir los datos de acuerdo a rangos de valores, como fechas o caracteres',
                '<strong>Listas:</strong> Se crean regiones o sets de datos que contienen algun dato por el cual puedan ser agrupados ',
                '<strong>Hash:</strong> Se usa una función hash para distribuir los datos de manera uniforme ',
                '<strong>Composite:</strong> Se combinan las formas anteriores de acuerdo a las necesidades ',
                '',
                '<strong>Inserciones:</strong>',
                '- Cada inserción debe validar mediante la llave a que partición pertenece, garantizando la integridad de los datos ',
                '- Las particiones se pueden crear y destruir de manera dinamica, por lo que el metodo de particionamiento tambien puede cambiarse ',
                '',
                '<strong>Consultas:</strong>',
                '- Se validan que particiones cumplen con las condiciones o de lo contrario se <em>podan</em> descartando datos sin necesidad de analizarlos',
                '- Las consulta se puede paralelizar para que se consulten varias particiones al mismo tiempo',
                '- Se reduce el acceso a los datos al solamente consultar las particiones relevantes ',
            ]),
        new Item(Keys.PERSISTENCY_ADVANCED_CONSISTENCY_EVENTUAL,
            [
                '- Es una condición de los sistemas donde todas las partes del sistema alcanzan el mismo estado en algun momento, por lo que habra ',
                ' - momentos donde temporalmente la información sera inconsistente debido a fallos o retrasos ',
                '- Esto es inherente a los sistemas distribuidos y siempre va a estar presente, por lo que se debe controlar mediante diversas practicas ',
                '',
                '<strong>Basado en eventos:</strong> Los servicios emiten eventos cuando cambia algo en su estado y otros servicios lo escuchan ',
                '- Ya sea para actualizar sus datos o realizar acciones, los servicios no se comunican directamente, por lo que estan debilmente acoplados ',
                '- Este sistema debe ser muy resiliente debido a que los eventos pueden ser desechados o inutilizables ',
                '',
                '<strong>Sincronización en segundo plano:</strong> Algun trabajo en segundo plano se ejecuta periodicamente entre las diferentes BD conectadas ',
                '- Esta sincronización suele ser más lenta y solo se da durante intervalos, en los que habra momentos durante inevitablemente los datos difieran ',
                '- Las actualizaciones no se dan en tiempo real, por lo que se deben tener tiempos minimos que tolerar ',
                '',
                '<strong>Patron Saga:</strong> Divide una transacción distribuida en una serie de transacciones locales, manejadas por diferentes servicios ',
                '- Cada vez que se termina una transacción, se inicia la siguiente y en caso de que halla algun error se activa una transacción compensatoria ',
                '- Todo esto sucede hasta que se confirme que toda la cadena de operaciones fue completada o revertida exitosamente ',
                '- Este patron es importante para operaciones comerciales complejas o que tienen multiples pasos los cuales deben mantener un estado coherente ',
                '',
                '<strong>CQRS:</strong> Separa el sistema en 2 modelos para manejar independientemente operaciones de escritura(comandos) y de lectura(consultas) ',
                '- Cada modelo esta optimizado y contempla mecanismos de sincronización de los datos de manera asincrona ',
            ])
    ];
