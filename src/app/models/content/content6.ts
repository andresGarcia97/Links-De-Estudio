import * as Keys from '../keys';
import { Item } from "../models";

export class Content6 {

    public temas: Item[] = [
        ...CALIDAD,
        ...GIT,
        ...LEYES,
        ...PEOPLE,
        ...NEURO_MARKETING,
        ...BUENAS_PRACTICAS,
        ...MALAS_PRACTICAS,
    ];

}

export const CALIDAD =
    [
        new Item(Keys.CALIDAD_METRICS_SOFTWARE,
            [
                '- Además de revelar el desempeño del equipo de desarrollo, puede ser indicativo de la efectividad del equipo ',
                '- Las organizaciones se basan en una gran variedad de <em>KPI</em> para comprender el progreso en la ingenieria de software, en 4 categorias ',
                '',
                '<strong>Metricas de productividad</strong>',
                '<strong>- Tiempo de entrega:</strong> Tiempo que se tarda de inicio a fin para entregar un proyecto ',
                '<strong>- Cantidad de codigo:</strong> Lineas de codigo de la aplicación, esto puede ser un indicativo de la productividad, ',
                ' - más no de la calidad ni de la eficiencia, lo que puede conllevar a futuras refactorizaciones ',
                '<strong>- Trabajo en curso:</strong> Trabajo empezado y que se compara con lo anteriormente hecho para tener una idea del progreso ',
                '<strong>- Velocidad agil:</strong> Basandose en los sprints previos y cuantos puntos se han hecho, se puede estimar el proximo sprint ',
                '<strong>- Tasa de exito:</strong> Calcula el porcentaje de exito del sprint, esto no significa necesariamente completar los puntos, pero si las tareas ',
                '<strong>- Numero de versiones:</strong> Los equipos agiles dan prioridad a las nuevas versiones con nuevas caracteristicas que den valor ',
                '',
                '<strong>Metricas de rendimiento</strong>',
                '<strong>- Desempeño:</strong> Evaluan la escalabilidad, estabilidad, velocidad, entre otras caracteristicas',
                '<strong>- Rendimiento:</strong> Cantidad de datos que procesa un sistema en un periodo de tiempo ',
                '<strong>- Tiempo de respuesta:</strong> Tiempo que se tarda en responder a una consulta ó acción ',
                '<strong>- Fiabilidad y disponibilidad:</strong> Capacidad del software para cumplir con sus especificaciones ',
                '',
                '<strong>Metricas de defectos</strong>',
                '<strong>- Densidad de defectos:</strong> Cantidad de defectos por cantidad de lineas de codigo, evaluando la frecuencia de los defectos ',
                '<strong>- Cobertura de codigo:</strong> Proporcion del codigo que cubren las pruebas en relación a toda su extension, identificando areas sin cobertura ',
                '<strong>- Deteccion de defectos:</strong> Porcentaje calculado entre los defectos encontrados antes y despues del lanzamiento ',
                '<strong>- Deuda tecnica:</strong> Es el costo de ignorar problemas que a la larga se podran convertir en errores ',
                '<strong>- Vulnerabilidades de seguridad:</strong> Entre menos brechas y defectos se encuentren, más segura sera la aplicación ',
                '<strong>- Incidentes de seguridad:</strong> Recuento de las veces en que una aplicación fue vulnerada y la gravedad del ataque ',
                '<strong>- Tiempos de detección, fallos, reparación:</strong> Tiempos se tarda en notarse un error, que la aplicación falle, y que se corrija ',
                '',
                '<strong>Metricas de usabilidad</strong>',
                '<strong>- UX:</strong> Suelen ser cualitativas e incluyen las respuestas objetivas y subjetivas del usuario ',
                '<strong>- Usabilidad:</strong> Mide que tan bien el software permite alcanzar los objetivos del usuario ',
                '<strong>- Net Promoter Score(NPS):</strong> Puntaje que representa la voluntad de un cliente para recomendar la aplicación a otros ',
            ]),
        new Item('metricasEnCodigo',
            [
                '- La calidad del software es relativa y multidimensional, ligada a expectativas y caracteristicas, como restricciones y compromisos ',
                '- Algo que siempre se va a notar es la mala calidad de un software, mientras que la calidad suele pasar desapercibida y se da por sentada ',
                '- Aplicar estas metricas suele ser un tema complejo, ya que estas dependen de las necesidades especificas de la aplicación ',
                '- Pero esto trae grandes beneficios para las aplicaciones al permitir conocer el estado actual y las acciones para mejorar nuestro codigo ',
                '',
                '<strong>Acoplamiento:</strong> Todo modulo debe ser lo suficientemente independiente para ser modificado y afectar en lo minimo posible a los demás ',
                ' - demasiado acoplamiento significa que esto conllevara a efectos en cascada no deseados al realizar modificaciones en el codigo ',
                '',
                '<strong>Cohesion:</strong> Es el grado de relación entre las partes, y va muy de la mano con el principio de responsabilidad unica ',
                ' - un codigo poco integrado se vuelve complejo, dificil de mantener y poco reutilizable ',
                '',
                '<strong>Complejidad:</strong> Un algoritmo debe ser eficaz y facil de entender, de esta se diferencia 2 tipos de complejidad, ',
                ' - estudios y metricas, han mostrado una correlación directa entre la complejidad y la cantidad de <em>bugs</em> y las lineas de codigo ',
                '<strong> Complejidad Cognitiva:</strong>   Dificultad para entender intuitivamente el codigo ',
                '<strong> Complejidad Ciclomatica:</strong> Dificultad para probar determinado segmento de codigo ',
                '',
                '<strong>Code Churn:</strong> Frecuencia con que altera el codigo a traves del tiempo, a mayor numero de modificaciones, más posibilidad de error ',
                '',
                '<strong>Cobertura:</strong> Porcentaje de codigo cubierto por las pruebas, a mayor cobertura, menor es la posibilidad de defectos ',
                '',
                '<strong>Codigo muerto:</strong> Codigo que nunca es ejecutado, no siempre es facil de encontrar y no hay metodos infalibles para esto ',
                '',
                '<strong>Duplicación:</strong> Se da por del desconocimiento general del proyecto, replicando codigo que ya existe ',
            ]),
        new Item(Keys.CALIDAD_CLEAN_CODE,
            [
                '- La calidad de codigo es un estandar que siempre se debe perseguir, hasta el codigo más limpio puede verse afectado por malas practicas ',
                '- El proceso de degradación en todo proyecto es inevitable, más no incontrolable ',
                '- Los parches pueden ser reparaciones o adiciones rapidas y funcionales, sin embargo puedan estar en contravia directa de la calidad ',
                '- Una de las principales causas de esta degradación, es la calidad inicial del codigo base, entre mejor sea, más se ralentizara ',
                '',
                '- Para soluciones limpias y bien estructuradas se deberian seguir los siguientes pasos: ',
                '',
                '<strong>Analisis de caracteristicas:</strong> Toda nueva funcionalidad debe ser analizada e implementada de manera que, ',
                ' - el mayor numero de inquietudes este resuelto antes de iniciar o durante, entre más tiempo y correciones se hagan, sera peor',
                '<strong>Analisis del codigo base:</strong> Sabiendo la solución se debe analizar el codigo base para causar el menor impacto posible, ',
                ' - para tener claro que se puede modificar, reutilizar, que se debe crear, e incluso si hasta puede llegar generar efectos segundarios',
                '<strong>Desarrollo y Refactorización:</strong> No solo es desarrollar nuevos componentes, o modificar los existentes, ',
                ' - tambien puede haber lugar para refactorizaciones, evitando degradaciónes y parches mal estructurados ',
                '<strong>Testing:</strong> Además de verificar el funcionamiento del sistema, tambien ayudan a mantener el modelo, completo y detallado ',
                ' - de la arquitectura, definiendo las entradas y las salidas internamente, y en algunos casos hasta como documentación ',
                '',
                '- Realizados de manera adecuada, con la calidad del codigo en la mente, la degeneración de nuestro codigo puede ser aceptable ',
            ]),
        new Item('artesanos',
            [
                '- Se puede considerar el siguiente nivel del desarrollo profesional, mejorando nosotros mismos, y a los demás ',
                '',
                '- No sólo software que funciona, <strong>SINO</strong> también software bien diseñado',
                '- No sólo responder al cambio, <strong>SINO</strong> también agregar valor constantemente',
                '- No sólo individuos e interacciones, <strong>SINO</strong> también una comunidad de profesionales',
                '- No sólo colaboración con el cliente, <strong>SINO</strong> también asociaciones productivas',
            ]),
        new Item('costOfQuality',
            [
                '- En un nivel operacional las tecnicas de gestión de calidad deben identificar desperdicios, resolver problemas y optimizar procesos ',
                '- Generalmente enfocado a la prevención, pero tambien enfocado a la solución reactiva ',
                '',
                '<strong>Costos libres de errores:</strong> Sin relación con la planificación, control, correción y mejoras de la calidad, considerando que todo salga bien ',
                '<strong>Costos de la calidad:</strong> Relacionados a los problemas encontrados, estos pueden desaparecer si el proceso fuera libre de errores ',
                '<strong>Costos de conformidad:</strong> Asociados a prevención y evaluación de la conformidad con los requisitos ',
                '<strong>Costos de NO conformidad:</strong> Han de ver con las fallas ya sean internas y/o externas no detectadas y que terminan afectando al cliente ',
            ]),
        new Item('qualityGates',
            [
                '- Son politicas de calidad de las organizaciones, para cumplir con el objetivo de realizar un nuevo despliegue ',
                '- Suelen ser politicas para garantizar la calidad, fiabilidad, y reducción de errores, facilitando aspectos como el CD/CI',
                '- Estos requisitos pueden variar y ser más flexibles o más estrictos de acuerdo a las necesidades de cada proyecto ',
                '',
                '<strong>Algunas politicas de calidad comunes</strong>',
                '<strong>- Cobertura:</strong>        Este porcentaje indica cuanto del codigo de producción esta cobijado mediantes tests unitarios o de integración ',
                '<strong>- Duplicación:</strong>      Las lineas duplicadas no solo violan el principio de DRY, si no que dificultan directamente la mantenibilidad ',
                '<strong>- Fiabilidad:</strong>       Directamente relacionada con la cantidad de bugs encontrados y que tan graves son ',
                '<strong>- Vulnerabilidades:</strong> Riesgos de seguridad potenciales y especificos para cada lenguaje ',
                '<strong>- Deuda tecnica:</strong>    Pequeños errores, omisiones, sin tests, codigo mal estructurado, soluciones desprolijas, todo va sumando ',
                '',
                '<strong>Valores generales</strong>(<em>SonarQube</em>) Cobertura<strong> >=80%</strong>   Duplicación<strong> <=3%</strong>   Fiabilidad <strong>A</strong>   Vulnerabilidades <strong>A</strong>    Deuda tecnica<strong> <=5%</strong> '
            ]),
        new Item('qualityMetrics',
            [
                '- Casi todas esta metricas varian en cuanto al lenguaje en el que se apliquen, haciendo que sean congruentes entre si, más no iguales ',
                '',
                '<strong>Complejidad ciclomatica:</strong> Esta se calcula en base a los caminos que se puedan dar debido al uso y el orden de las estructuras de control ',
                '<strong>Complejidad cognitiva:</strong> Relacionado a la dificultad para entender el flujo de control del codigo, usando un modelo matematico especifico ',
                '<strong>Duplicación:</strong> Lineas de codigo duplicado, ignorando la sangria y el formato, tambien aplica para archivos, metodos y clases',
                '<strong>Problemas:</strong> Cantidad de problemas presente en el codigo, ya sean abiertos/cerrados, segun la gravedad o problemas confirmados/iniciales ',
                '<strong>Mantenibilidad:</strong> Metrica relacionada directamente con la cantidad y la dificultad de los code smells presentes, además de la deuda tecnica ',
                '<strong>Fiabilidad:</strong> Cantidad de errores y/o bugs presentes, la calificación dependera de que tantos hallan y que tan criticos sean ',
                '<strong>Seguridad:</strong> Vulnerabilidades encontradas, y/o problemas del lenguaje ',
                '<strong>Tamaño:</strong> Clases muy grandes pueden conllevar a smell codes y problemas de mantenibilidad, incluyendo los comentarios ',
                '<strong>Pruebas y cobertura:</strong> Además de evaluar la cantidad y el exito de las pruebas unitarias, se evaluara cuantos caminos estan cubiertos ',
            ]),
        new Item('codeReviews',
            [
                '- Es un proceso que data desde la epoca de los 80s, dado que Hewlett Packard (HP) buscaba mejorar su codigo base y procesos internos ',
                '- Despues de varios procesos, la revision por pares fue uno de los intentos más fructiferos ',
                '- Tambien valga la acotación de que en ese entonces la practicas de desarrollo no estaban tan estandarizadas ',
                '',
                '- 5 practicas para maximizar su valor: ',
                '',
                '<strong>Realizar un checklist</strong> Con un conjunto predeterminado de preguntas y reglas a seguir, el cual puede incluir: ',
                ' <strong>- Legibilidad del codigo</strong> Y si tiene comentarios, que estos aporten algun valor ',
                ' <strong>- Seguridad</strong> Que no se exponga el sistema a posibles ciber ataques',
                ' <strong>- Coberturas de pruebas</strong> Si es la adecuada o es necesario probar más casos ',
                ' <strong>- Arquitectura</strong> Que no se incumpla la estructura del proyecto, o si se implemento algun patron, este bien implementado ',
                ' <strong>- Reutilización</strong> Donde se utilizen componentes, funciones y servicios, que puedan ser reusados ',
                ' <strong>- Principios</strong> Como DRY, SOLID, GRASP, YAGNI; entre otros no se deberian incumplir ',
                '',
                '<strong>Metricas de revisión del codigo</strong> No se puede corregir, si no se mide primero de manera objetiva ',
                '<strong>- Tasa de inspección:</strong> Velocidad conque el equipo revisa una cantidad especifica de codigo, <em>lineas de codigo</em> <strong>/</strong> <em>horas de inspección</em>',
                ' - Si esto toma demasiado tiempo, es posible que haya problemas de legibilidad que se deban tratar ',
                '<strong>- Tasa de defectos:</strong> Frecuencia con que se identifican defectos, <em>defectos</em> <strong>/</strong> <em>horas de inspección</em>',
                ' - Si este proceso es tardado, tal vez los desarrolladores deban usar mejores herramientas de prueba ',
                '<strong>- Densidad de defectos:</strong> Defectos encontrados, en una porción especifica de codigo, <em>defectos</em> <strong>*</strong> <em>miles de lineas de codigo</em> ',
                ' - Ayudando a identificar que componentes son más propensos a ser vulnerables, y asignando recursos a donde son necesarios ',
                '',
                '<strong>Los comentarios realizados, deben justificar la postura que se tome</strong> No solo sugerir lo que se deba arreglar ',
                ' - Se debe explicar el porque del cambio y diferentes opciones para realizarlo es lo más constructivo ',
                ' - Esto con el fin de compartir conocimiento, lo que ayudara abordar problemas similares en el futuro ',
                ' - Este debe ser un espacio de mejora y crecimiento, no de evaluación, asi el proceso sera menos intimidante y más eficiente',
                '',
                '<strong>Revisiones pequeñas</strong> Revisar más de 400 lineas, puede tener un aspecto adverso para encontrar errores ',
                ' - Además de que estadisticamente hablando, estos se encuentran frecuentemente en las primeras 200 lineas ',
                ' - Esto en base a los datos recopilados por un estudio realizado por <em>Cisco</em>, enlace disponible en el articulo original ',
                '',
                '<strong>Mejorar o complementar la automatización</strong> Planificar las revisiones, identificar a los revisores indicados ',
                ' - de manera que esto no se convierta en una carga impositiva, si no que sea un espacio colaborativo y de aprendizaje ',
                ' - y que el proceso se pueda convertir en punto de referencia para detectar y corregir errores antes de que su costo aumente ',
            ]),
        new Item(Keys.CALIDAD_LINTING,
            [
                '- Son una ayuda para encontrar errores y falencias en nuestro codigo durante la etapa de desarrollo, como:',
                '',
                ' - Errores de sintaxis            - Codigo innecesariamente complejo ',
                ' - Uso de malas practicas         - Estilos de codificación inconsistentes ',
                '',
                '- Estos errores suelen ser comunes, dado que suelen ser menos evidentes y generalmente poco graves, pero siguen estando ahi ',
                '- Estas herramientas no solo nos muestran los posibles errores, tambien pueden dar sugerencias de posibles soluciones ',
                '- Tambien permiten la configuración de nuevas reglas para cuando se trabaja en equipo y mantener la consistencia ',
                '',
                '<strong>Partes:</strong>',
                '<strong>- Parser:</strong> Se encarga de traducir el codigo escrito, a una representación entendible por la maquina, como un Arbol ',
                '<strong>- Reglas:</strong> Es una colección de logica, que permite identificar problemas potenciales y posibles soluciones ',
                '<strong>- Resultado:</strong> Se muestra el reporte de las reglas que se infringierón ',
            ]),
        new Item('analystQA',
            [
                '- Es una forma de asegurar la calidad de los productos y los servicios que se utilizan a diario, un analista en esta area, ',
                ' - es el encargado de garantizar la calidad final del producto, servicio, hardware, etc.. previniendo errores y defectos ',
                '',
                '<strong>Funciones generales:</strong>',
                '<strong>Planificar y Ejecutar Pruebas:</strong> Con el fin de detectar fallos, comportamiento inesperados, mediante diversas tecnicas como: ',
                ' - pruebas manuales, pruebas automatizadas, pruebas unitarias, de sistema, de aceptación, entre otras',
                '<strong>Documentar errores y validar correciones:</strong> Cualquier error que se detecte, debe ser documentado de forma clara y detallada, ',
                ' - para que pueda ser replicado, analizado y corregido, ya sea mediante capturas de pantalla, o otras evidencias ',
                '<strong>Colaboración:</strong> Estos profesionales, trabajan de forma estrecha con diferentes equipos, como desarrollo, marketing, diseño, ',
                ' - para asegurarse que el proyecto cumpla con todos los requisitos ',
                '<strong>Automatización de pruebas:</strong> Tambien pueden escribir y ejecutar scripts que ejecuten prueba de manera repetible y consistente ',
                '',
                '<strong>Competencias de un analista:</strong>',
                '- Conocimientos en informatica y programación                              ',
                '- Habilidades blandas y comunicación entre equipos                         ',
                '- Dominar metodologias agiles y sus herramientas, (Jira, Kanba, SCRUM, etc)',
                '- Manejo de herramientas de testing, (Selenium, Junit, Mocca, etc)         ',
                '- Habilidades de analisis y resolución de problemas',
                '',
                '<strong>Porque es importante:</strong>',
                '- Garantiza a mantener y elevar los requisitos y expectativas de los usuarios ',
                '- Reduce el riesgo de errores, y la incidencia de problemas ',
                '- Ayuda a mejorar la calidad, el rendimiento, la seguridad y la usabilidad de los productos ',
                '- Ayuda a mejorar la reputación de la empresa, al tener una area comprometida con la calidad y el servicio ',
            ]),
        new Item('codeReviewPyramid',
            [
                '- Aveces en una revisión de codigo, se hace hincapie en asuntos mundados del software como ortografia, formato y estilo de codificación ',
                '- Aspectos que en grandes niveles pierden importancia, como retrocompatibilidad, es eficaz ?, cumple con lo pactado ? ',
                '',
                '                                                         Cumple con el formato del proyecto ?',
                '      <strong>Code</strong>                                               Se adhiere a las convenciones del lenguajes ?',
                '      <strong>Style</strong>                                              Usa DRY y/o otros patrones ',
                '                                                         El codigo es entendible y mantenibles ?',
                '',
                '                                                     Todos los tests siguen pasando ?',
                '                                                     La nueva funcionalidad esta debidamente testeada ? ',
                '      <strong>Tests</strong>                                          Incluye casos anomalos o casos especificos de falla ?',
                '                                                     Tiene test de integración, o son si quiera necesarios ?',
                '                                                     Incluye tests no funcionales (NFR), como rendimiento entre otros ?',
                '',
                '                                                 La nueva funcionalidad, esta debidamente documentada ?',
                '                                                 Se documentan los puntos relevantes y/o importantes ?',
                '      <strong>Documentación</strong>                              Incluye guias de usuario y/o manuales ?',
                '                                                 La documentación es entendible para el publico que esta orientada ?',
                '                                                 Errores gramaticales o de semantica ? ',
                '',
                '                                           Se satisface el requerimiento original ?',
                '                                           La logica esta correcta y no tiene complejidad agregada ?',
                '      <strong>Semantica de la</strong>                      Resiliente y robusto ante errores ? ',
                '      <strong>Implementación</strong>                       Contiene problemas de rendimiento ?',
                '                                           Es seguro, o revela vulnerabilidades del sistema ?',
                '                                           Puede ser observado y/o medido (metricas, logs, alertas)',
                '                                           Agrega nuevas dependencias, y siendo el caso que licencias usan ',
                '',
                '                                   El tamaño es el adecuado, o se puede reducir ?',
                '                                   Se puede hacer de diferentes maneras, y siendo asi, esta es la mejor ?',
                '      <strong>Semantica</strong>                    Es una función general y reutilizable o es especifica ?',
                '      <strong>del Api</strong>                      Como es la división a nivel interno del codigo ?',
                '                                   Hay Breaking changues, y si hay cual es su impacto ?',
                '                                   Es coherente y sigue el principio de la minima sorpresa, además cualquiere otro que aplique',
                '',
                '- Entre más abajo se encuentre en la piramide, es donde se deberia hacer la mayor cantidad de esfuerzo posible ',
                '- Entre más problemas se hallen en la partes bajas, mayor sera el esfuerzo para cambiarlo y/o corregirlo ',
                '- Las parte más altas, son las más propensas a automatización ',
            ]),
        new Item('doraAndSpaceMetrics',
            [
                '<strong>DORA</strong> <em>DevOps Research and Assessments</em> es un conjunto de 4 metricas que evaluan el rendimiento en las entregas de software ',
                '',
                '<strong>- Frecuencia de desarrollo:</strong> Frecuencia con la que se pone el codigo a disposición de producción o se libera para el usuario final ',
                '<strong>- Tiempo de espera para los cambios:</strong> Cuanto tiempo transcurre desde la definición del codigo, hasta su uso exitoso en producción ',
                '<strong>- Tiempo medio de recuperación:</strong> Cuanto se tarda en restablecer el servicio si se produce una incidencia/defecto que afecte a los usuarios ',
                '<strong>- Tasa de error de los cambios:</strong> Porcentaje de cambios/entregas que provocan una degradación del servicio o que requieran de correcciones ',
                '',
                '<strong>SPACE</strong> Enfoque de productividad de los desarrolladores, elaborado por investigadores de <em>Github</em> y <em>Microsoft</em> donde se resumen 5 factores ',
                '',
                '<strong>- Satisfacción y Bienestar:</strong> ¿ Tus desarrolladores estan felices y sanos ?, ¿ Disfrutan de su trabajo ?, ¿ Se sienten apoyados ? ',
                '<strong>- Rendimiento:</strong> ¿ El software entregado cumple con normas de calidad ?, ¿ Cumple las expectativas de los clientes ?',
                '<strong>- Actividades:</strong> ¿ Cuanto trabajan los desarrolladores ?, ¿ Invierten el tiempo en tareas significativas ?, ¿ Evitan o sortean retrasos ?',
                '<strong>- Comunicación:</strong> ¿ Por que medio se comunican y colaboran entre si ?, ¿ Hay un intercambio eficaz de ideas ?',
                '<strong>- Eficacia:</strong> ¿ Con que fluidez trabajan los desarrolladores ?, ¿ Evitan las distracciones y/o cuellos de botella ?',
                '',
                '- Combinando ambas metricas se suele lograr una visión global, holistica y equilibrada del rendimiento del desarrollo de software ',
                '- Mientras que <em>DORA</em> capta aspectos tecnicos, <em>SPACE</em> se centra en factores humanos y sociales ',
                '- Obteniendo una mejor comprensión de los puntos fuertes y debiles de tu equipo, alineandose mejor con los objetivos y retos a enfrentar ',
            ]),
        new Item('goodCodingPrinciples',
            [
                '- Seguir las <strong>convenciones</strong> de la comunidad y las <strong>especificaciones</strong> del lenguaje, ayudando con la consistencia y la legibilidad ',
                '',
                '- <strong>Documentación y Comentarios</strong> Un buen codigo esta documentado, para explicar las decisiones de negocio, y el porque se tomaron, ',
                ' - en cuanto a los comentarios, no se deben abusar de ellos, y solo se deberian usar donde sean realmente necesarios, ',
                ' - además de que ambos, se deben mantener actualizados a la par de los cambios del software ',
                '',
                '- <strong>Robustez</strong> Un buen codigo debe ser capaz de manejar una gran variedad de situaciones inesperadas sin fallar, ',
                ' - o producir resultados impredecibles, existen enfoques como el manejo de excepciones o la programación defensiva ',
                '',
                '- Siga el principio de <strong>SOLID</strong> que junto con otros principios, son increiblemente utiles para crear un software escalable y mantenible ',
                '- <strong>Testing</strong> No solo se deben realizar pruebas unitarias, un buen codigo debe ser facil de probar, ya sea de manera unitaria o de otros tipos ',
                '',
                '- <strong>Abstracciones</strong> Para esto se requiere de extraer la logica central y ocultar la complejidad, de manera que se logre un equilibrio, ',
                ' - entre flexibilidad, sin estar sobrediseñado, ni cerrarse a las posibilidades de de crecimiento a largo plazo ',
                '',
                '- Usar <strong>Patrones de Diseño</strong> Sin abusar de ellos, cada patron tiene un escenario donde es aplicable, asi no se agrega complejidad innecesaria ',
                '- <strong>Reducir las dependencias globales</strong> Para evitar una gestión de estados innecesarias, y reducir efectos segundarios ',
                '- <strong>Refactorización</strong> La mantenibilidad se logra reduciendo la deuda tecnica reduciendo y solucionando problemas lo antes posible ',
                '- <strong>Seguridad</strong> Un buen codigo evita la mayor cantidad de vulnerabilidades posibles, en especial las comunes y de facil solución '
            ]),
        new Item(Keys.CALIDAD_CODE_ROT,
            [
                '- Inevitablemente todo codigo se degrada con el tiempo, pero esto solamente es un problema si no se contiene ',
                '- La deuda tecnica, suele ser un acto de negligencia, por parte de desarrolladores apresurados o inexpertos ',
                '- Esto se puede contener, siempre que se dedique recursos y tiempo, en tareas como calidad, analisis y refactor ',
                '- El daño realizado por estos desarrolladores puede ser devastador, si no es debidamente supervisado, el codigo se pudre ',
                '- Generalmente este proceso se da en los siguientes pasos: ',
                '',
                '<strong>Toma de Decisiones:</strong> Aca las empresas distribuyen, presupuestos a largo y corto plazo, de manera que la jerarquia y la politica toman relevancia ',
                '',
                '<strong>Administración:</strong> Aca se estiman los proyectos, recursos, personal, equipos, etc... y se comete el error de tomar estos datos como inamovibles ',
                ' - y lo ultimo que se quiere escuchar, es que las fechas se deben posponer por cosas como <em>calidad</em> y <em>deuda técnica</em>',
                '',
                '<strong>Plazos VS Realidad:</strong> Estos proyectos suelen estar vinculados directa o indirectamente a la financiación; Un proyecto de ingenieria ',
                ' - es como saltar de un avión; No puedes saber como es, hasta que realmente lo haces ',
                '',
                '<strong>Las areas grises:</strong> Cuando creas nuevo codigo, descubres lagunas, funcionalidades que no existen, servicios incongruentes, etc... ',
                ' - Puedes solicitar que el <em>propietario</em> haga los cambios pertinentes, si es posible, y siempre y cuando que haya disponibilidad ',
                ' - Solucionarlo uno mismo, siendo esta la opción más rapida y comun generalmente, si se es consciente, se hara lo minimo necesario para continuar, ',
                '  - con la mejor calidad posible, y verificando que el codigo existente no se haya dañado',
                '  - pero esto con el tiempo se expandira a este, además de otros proyectos, casi siempre que se necesite realizar algun cambio',
                '',
                '<strong>Codigo incorrecto:</strong> Los fragmentos de codigo incompletos son comunes, ya sea por requisitos incompletos ó conocimientos insuficientes, ',
                ' - como nadie es dueño de estos fragmentos, y su dominio no esta claro, empiezan a ser modificados a conveniencia de multiples equipos, ',
                ' - por lo que si alguien usaba algun servicio, de un momento a otro, empezaran a haber errores en multiples lugares, sin razon aparente ',
                '',
                '<strong>Colapso:</strong> Un Jardin descuidado, sera invadido por las malas hierbas, y no importa la calidad, las buenas practicas, el trabajo extra, etc.. ',
                ' - si no se define una propiedad real, el codigo se pudrira, y dejara de crecer, para ahora mantenerlo funcionando y solucionando errores, ',
                ' - hasta que sea insostenible y sea necesaria una nueva versión, a la cual le puede pasar lo mismo, si no se aprende de los errores ',
            ]),
        new Item(Keys.CALIDAD_IF_ELSE,
            [
                '- La <em>complejidad cognitiva</em> suele ser una de las principales razones para <em>refactorizar</em> el codigo, eso incluye las instrucciones de control ',
                '- Las instrucciones de control <strong>If</strong> y <strong>Else</strong> pueden generar un codigo complejo y dificil de mantener si se usan de manera excesiva ',
                '',
                '<strong>Strattegy Pattern:</strong> El patron de estrategia define una familia de algoritmos que puedan ser encapsulables e intercambiables ',
                '- Este patron es util cuando existen multiples formas de realizar una tarea determinada y pueden ser abstraidas de manera generica ',
                '',
                '<strong>Enums:</strong> Las enumeraciones pueden ser usadas como un conjunto de constantes predefinidas, con sus respectivos comportamientos asociados ',
                '',
                '<strong>Polimorfismo:</strong> El polimorfismo permite que un objeto se trate como instancias de diferentes tipos',
                '',
                '<strong>Expresiones lambda e interfaces funcionales:</strong> Cuando se trata de metodos pequeños y logica simple ',
                '',
                '<strong>Command Pattern:</strong> Encapsula peticiones como objetos parametrizados ',
                '',
                '<strong>Guard Clauses:</strong> Se cambian las condiciones de manera que se puedan tener retornos anticipados reduciendo las estructuras anidadas ',
            ])
    ];

export const GIT =
    [
        new Item('introduccion',
            [
                '- Todo archivo puede tener un seguimiento, y todo archivo seguido tiene un identificador unico que cambia con cualquier cambio del archivo ',
                '- Existen 3 estados principales, cambios confirmados, archivos modificados y cambios en espera ',
                '- Se puede trabajar con repositorios localmente ó distribuidos en internet ',
                '- Los archivos tambien se pueden ignorar, configurando el .gitIgnore, especificando archivos y carpetas a ignorar ',
                '- Cualquier cambio puede ser deshecho, incluso despues de que haya sido confirmado ',
            ]),
        new Item(Keys.GIT_STRUCTURE_AND_CONCEPTS,
            [
                '- Git es el manejador de versiones más usado hoy en dia, y parte de eso se logro al usar conceptos heredados de otros manejadores de versiones ',
                '- La relación basica entre componentes es la siguiente:',
                '',
                '&brvbar;--------------------------------&brvbar;  <strong>Repositorio:</strong> Ya sea local o remoto, es necesario para sincronizar los cambios            ',
                '&brvbar;  Repositorio                   &brvbar;                                                                                                            ',
                '&brvbar;  &brvbar;--------------------------&brvbar;  &brvbar;  <strong>Ramas:</strong> Conjuntos secuenciales de commits, similar a un arbol o a un grafo  ',
                '&brvbar;  &brvbar;  Ramas                   &brvbar;  &brvbar;                                                                                              ',
                '&brvbar;  &brvbar;  &brvbar;--------&brvbar;  &brvbar;--------&brvbar;  &brvbar;  &brvbar;  <strong>Commits:</strong> Unidad de cambio minima, y describe un punto en la historia especifico ',
                '&brvbar;  &brvbar;  &brvbar; Commit &brvbar;  &brvbar; Commit &brvbar;  &brvbar;  &brvbar;   <strong>Head:</strong> Referencia al ultimo commit de una rama ',
                '&brvbar;  &brvbar;  &brvbar;--------&brvbar;  &brvbar;--------&brvbar;  &brvbar;  &brvbar;   <strong>Base:</strong> Referencia al primer commit que da origen a la rama ',
                '&brvbar;  &brvbar;--------------------------&brvbar;  &brvbar;   <strong>Diff:</strong> Compara archivos de texto, en busca de diferencias ',
                '&brvbar;--------------------------------&brvbar;   <strong>Patch:</strong> Toma los diff y los coloca en un archivo, para sincronizar las versiones previas de archivos y carpetas ',
            ]),
        new Item('repositorios',
            [
                '- Git trabaja principalmente de manera local, pero es necesario sincronizar los cambios hechos con el repositorio central ',
                '- Los cambios pueden subirse mediante un push o bajarse del repositorio mediante un pull o un fetch ',
                '- Para trabajar con remotos es necesario contar con un usuario y contraseña configurados para la trazabilidad de los cambios ',
            ]),
        new Item(Keys.GIT_BRANCHS,
            [
                '- Son versiones especificas de los cambios que se hayan realizado ',
                '- La rama principal es Main (anteriormente master) es el origen de donde se desprenden todas las demás ',
                '- Su manejo es simple por lo que cambiar entre si, fusionar, ramificar, eliminar y rebasar se pueden hacer mediante simples comandos ',
                '- Usar diferentes ramas, para diferentes cambios garantiza que por lo menos siempre habra un punto al que retroceder si algo llegara a dañarse ',
                '- Estas tambien traen el problema de que puedan surgir conflictos, que son segmentos o archivos con varias modificaciones por diferentes personas ',
                '- Solucionar conflictos y organizar las ramas suele ser delicado, por lo que debe realizarse con plena conciencia de lo que se esta haciendo ',
            ]),
        new Item('protocolos',
            [
                '- La comunicación entre el repositorio remoto y local se puede hacer mediante diferentes maneras ',
                '<strong>Local:</strong> Se usa el mismo metodo de carpetas y archivos que tenga el host por defecto ',
                '<strong>HTTP:</strong>  Es una manera simple de mantener conectados el repo local y remoto con unas pocas configuraciones previas ',
                '<strong>SSH:</strong>   Requiere de generar una clave encriptada que debe esta almacenada en ambos repositorios, más complejo pero seguro ',
                '<strong>Git:</strong>   No requiere ningun tipo de autenticación y es el más rapido de todos, haciendolo vulnerable a modificaciones de cualquier ente externo ',
            ]),
        new Item('versiones',
            [
                '- Las etiquetas se añaden a un commit en especifico, dando a entender que esa ha de ser una nueva versión ó hay un cambio bastante importante ',
                '- Tambien se puede crear un archivo comprimido con todo el codigo de la nueva versión listo para descargar y ejecutar ',
            ]),
        new Item('forks',
            [
                '<strong>- Fork:</strong> Es una clonación de un proyecto desde un repositorio a otro en un momento y rama en especifico, con el usuario como nuevo dueño ',
                '<strong>- Pull request:</strong> Es la solicitud de una persona que haya modificaciones de manera externa al repositorio pero que quiera integrarlas al original ',
                '<strong>- Markdown:</strong> Son archivos utiles a la hora de añadir información extra del proyecto, de manera más interactiva que un simple archivo de texto ',
            ]),
        new Item('stash',
            [
                '<strong>- Stash:</strong> El stash nos permite intercambiar entre ramas, sin necesidad de hacer commits pero guardando los cambios hechos ',
                '<strong>- Pop:</strong> Permite retomar los cambios guardados y continuar en el punto que se dejo ',
                '<strong>- Reset:</strong> Borra todos lo cambios hechos y devuelve la rama al ultimo commit hecho ',
            ]),
        new Item('merge',
            [
                '- Une los cambios de una rama a otra especifica, ocasionalmente surgen conflictos, que dependeran de la divergencia de los cambios realizados ',
                '- Las ramas se pueden desfusionar si hay errores, ó abortarse si se vuelve muy problematica, mediante un revert o un abort segun el caso ',
                '<strong>- Rerere:</strong> Esta opción oculta permite dotar a memoria a Git para que esta resuelva conflictos de manera automatica ',
            ]),
        new Item('atributos',
            [
                '- Evitar la comparación de archivos binarios que git no pueda detectar por si mismo ',
                '- Configurar maneras diferentes de ver los cambios de los archivos dependiendo de las extensiones (imagenes, textos, etc... )',
                '- Ignorar archivos a la hora de comprimir el proyecto ',
                '- Cambiar la forma de fusión de acuerdo a ciertos tipos de archivos ',
            ]),
        new Item('migracion',
            [
                '- Manejar los espacios en blanco que suelen ser un problema comun ',
                '- Git permite la migración desde diferentes sistemas de versionamiento anteriores ó que han caido en el deshuso como: ',
                '- Mercurial, Subversion, Perforce, TFS, ',
                '- Tambien es posible eliminar archivos totalmente del arbol de cambios, aun asi no es recomendable ya que el historial se podria ver afectado ',
                '- Configurar variables de ambiente como cualquier otro programa ',
                '- Los entornos de desarrollo (IDE), ya traen integrado git por defecto generalmente ',
            ]),
        new Item('flow',
            [
                '- Es una forma de trabajar basada en el uso de las ramas y una estrategia comun, consta de 2 ramas principales y varias auxiliares ',
                '',
                '<strong>- Master:</strong>  Cualquier codigo que este en esta rama debe estar listo para producción ',
                '<strong>- Develop:</strong> Es donde se trabaja y de donde se pueden sacar ramificaciones para proximas versiones ',
                '<strong>- Feature:</strong> Se originan de develop y son nuevas funcionalidades a integrar ',
                '<strong>- Release:</strong> Aca se corrigen bugs y se hacen los ultimos ajustes, antes de Master ',
                '<strong>- Hotfix:</strong>  Son usadas para corregir problemas presentes en producción y que aparecen de improviso ',
                '',
                '- Todas las ramas <em>Hotfix</em> se unen con master y develop ',
                '- Cualquier rama <em>Feature</em> se une a develop ',
            ]),
        new Item('practicas',
            [
                '- Los commits son sumamente importantes en git, y si se realizan correctamente puede aportar metadata al proyecto',
                '',
                '<strong>Tipos de commits:</strong>',
                '<strong>- feat:</strong>     Nueva caracteristica ',
                '<strong>- fix:</strong>      Solución de problemas ',
                '<strong>- docs:</strong>     Cambios en la documentación ',
                '<strong>- style:</strong>    Se aplica formato ó estructura al codigo, sin cambios en este ',
                '<strong>- refactor:</strong> Refactorización de codigo ',
                '<strong>- test:</strong>     Se añaden cambios en las pruebas, como refactor, nuevas pruebas ',
                '<strong>- chore:</strong>    Actualización del build, cambios en los paquetes, sin cambios en el codigo ',
                '',
                '- Tener en cuenta las 3 partes del commit: ',
                '<strong> - subject:</strong> No más de 50 caracteres y ser concisos, tambien se recomienda hacerlo en ingles ',
                '<strong> - body:</strong> No más de 72 caracteres, es una explicación más detallada del porque del commit ',
                '<strong> - footer:</strong> Se usa para el seguimiento de los IDs cuando hay incidencias ',
            ]),
        new Item(Keys.GIT_BRANCHS_STRATEGIES,
            [
                '- En el desarrollo moderno, la velocidad y la agilidad son cruciales, sin embargo manejar equipos que trabajan de manera simultanea ',
                ' - creando y uniendo ramas de manera constantes, esto se puede complicar demasiado rapido ',
                '- Una estrategia de ramificación es una manera en que los equipos puedan desarrollar nuevas funciones, sin afectar a otros ',
                '- Evitando o al menos reduciendo los conflictos que se presentan al trabajar en una base de codigo compartida ',
                '',
                '<strong>Pros:</strong>',
                '- Mejora la productividad y la coordinación entre los desarrolladores ',
                '- Permite el desarrollo en paralelo y la correción de errores, sin afectar el flujo general de trabajo ',
                '- Mejora la planificación de los lanzamientos ',
                '- Permite visualizar un camino en el cual mantenerse ',
                '',
                '- Las ramas no son exclusivas de GIT, pero este es uno de los software de control de versiones que saca más provecho de ellas ',
                '- Una de las principales ventajas, es que git es liviano y solo toma instantaneas de lo que cambio, en vez de sacar copias y listas de cambios ',
                '',
                '<strong>Gitflow:</strong>',
                ' - Este modelo permite el desarrollo en paralelo mientras protege la rama principal que generalmente es la que se lleva a producción ',
                '  - pero debido a que existen tipos de ramas unirlas y mantener un consolidado de las versiones se puede complicar ',
                ' - Este no es un enfoque eficiente para aquellos que deseen implementar CD/CI pero si, para multiples versiones del codigo de producción ',
                '',
                '<strong>Github Flow:</strong>',
                ' - Una version más ligera de gitflow, para equipos pequeños que no necesiten de multiples versiones ',
                ' - Aca se trabaja sobre la rama principal de manera continua, de manera que este pueda ser implementado de manera constante ',
                ' - Debido a la continuidad de los cambios, este enfoque es suceptible a errores y a un ambiente productivo más inestable ',
                '',
                '<strong>Gitlab Flow:</strong>',
                ' - Una versión más simple de gitflow, donde se mantienen distintos ambientes, generalmente un ambiente de prueba previo, separado de producción ',
                ' - Esto permite tener diferentes versiones y solamente desplegar la más estable en producción, y asi mantener mas segura la rama principal ',
                ' - Esta estrategia es ideal para controlar los lanzamientos, y las etapas que se deben pasar para que sean exitosos ',
                '',
                '<strong>Trunk-based:</strong>',
                ' - Es una estrategia que no requiere de bifurcaciones, si no que se sacan ramas muy pequeñas y de poca duración ',
                ' - Todas estas pequeñas ramas deben ser integradas al menos una vez al dia a la rama principal ',
                ' - Con la condición de que todo codigo integrado es estable, fue probado y debe estar listo para ser lanzado en cualquier momento ',
                ' - Esto permite un ambiente de CD/CI bastante frecuente, combinado con una estrategia de <strong>feature flags</strong> ',
                ' - Esta estrategia es ideal para evitar problemas en las fusiones, pero para equipos pequeños e inexpertos puede ser compleja de usar ',
                '',
                '<strong> Tipo de producto          Tamaño del             Madurez de los                  Modelo de ramas </strong>',
                '<strong>  y/o lanzamiento            equipo                colaboradores                    Aplicable     </strong>',
                '',
                '     Todos                   Pequeño                   Alto                         Trunk-based',
                '',
                ' Admite CD/CI como            Medio                  Moderado                  Github Flow y Trunk-based',
                '  productos SaaS',
                '',
                ' Lanzamientos periodicos      Medio                  Moderado                    Gitflow y Gitlab flow',
                '  y tiempos entre estos                                                           con release branch',
                '',
                ' Productos con calidad        Medio                  Moderado                        Gitlab flow',
                '  y admiten CD/CI',
                '',
                ' Productos con calidad       Grande                  Moderado                          Gitflow',
                '  y ciclos largos de ',
                '    mantenimiento ',
            ]),
        new Item('monoRepo',
            [
                '- Un monorepo es un repositorio unico que contiene multiples proyectos distintos, con relaciones y fronteras bien definidas ',
                '- Este se diferencia de un monolito, o de multiples componentes bajo un mismo repositorio ya que ',
                '',
                '- Con multiples repositorios, se tienen problemas como: ',
                '<strong>- Compartir codigo entre repositorios:</strong> Requiere configurar las herramientas, y el entorno, además de tareas extras ',
                '<strong>- Duplicación de codigo:</strong> Donde para evitar crear librerias compartidas y su mantenimiento, cada equipo crea sus propias implementaciones ',
                '<strong>- Cambios entre las librerias y los consumidores:</strong> Que suelen ser costoso, al tener que manejar la compatibilidad a travez de multiples proyectos ',
                '<strong>- Herramientas inconsistentes:</strong> Cada proyecto usa las herramientas que mejor le convengan, comandos, pruebas, compilación, ambientes, etc.. ',
                '',
                '- Con un solo repositorio, se tienen beneficios como: ',
                '<strong>- Menos problemas al crear nuevos proyectos:</strong> Ya que se pueden usar las herramientas preexistentes, con el mismo versionado ',
                '<strong>- Compromisos atomicos entre proyectos:</strong> Asi no hay problemas de compatibilidad, ya que se pueden cambiar todos a la vez ',
                '<strong>- Movilidad entre equipos:</strong> Es una forma coherente de crear y probar aplicaciones, entre equipos, ya que estan familiarizados con proyectos previos ',
                '',
                '- Pero esto solo es posible, con la ayuda de las debidas herramientas, con las que llevar el control adecuado, que permitan: ',
                '<strong>- Computación local:</strong> Al realizar un cambio local, este debe estar disponible para todos los demás, sin importar el proyecto al que pertenezca ',
                '<strong>- Orquestación de tareas:</strong> Cualquier herramienta, debe estar en capacidad de ejecutar multiples tareas y sin importar el orden y el proyecto ',
                '<strong>- Soporte para tareas distribuidas:</strong> Asi no sera necesario construir reiteradamente los mismos artefactos, o ejecutar las mismas tareas ',
                '<strong>- Detectar afectaciones en proyectos/paquetes:</strong> Asi solo se probara, compilara o ejecutara, las posibles partes afectadas ',
                '<strong>- Comprensible:</strong> Que entender el proyecto no requiera de trabajo adicional o herramientas complejas ',
                '<strong>- Visualizar las dependencias:</strong> Entre los proyectos, de manera grafica, además de que sea manipulable ',
                '<strong>- Compartir codigo:</strong> El intercambio de piezas entre proyectos, no debe ser una odisea ',
                '<strong>- Herramientas consistentes:</strong> El que esten hechos los proyectos, no debe ser un impedimento para que puedan ser analizados ',
                '<strong>- Generación de codigo:</strong> Debe permitir o estar en la capacidad de generar codigo fuente, o realizar acciones de scaffolding ',
                '<strong>- Restricciones entre proyectos:</strong> No todo se puede compartir, o se debe realizar de manera limitada, por lo que esto debe ser configurable ',
                '',
                '- Para ver una comparación entre diferentes herramientas y más articulos relacionados al tema, puedes revisar la publicación original ',
            ]),
        new Item(Keys.GIT_PULL_REQUESTS_TOXIC,
            [
                '- Las ramas y los pull requests son algo fundamental entre equipos, fomentan el aporte colectivo y garantizan softwares testeados y estables ',
                '- Pero tambien se pueden convertir en cuellos de botella, si son mal administrados; despues de analizar milones de ramas en miles de repositorios ',
                ' - se han encontrado ciertas similitudes que se pueden considerar como problemas para la productividad de los desarrolladores ',
                '',
                '<strong>Similitudes:</strong>',
                '- El tiempo de vida promedio, es de unos 7 dias ',
                '- Los PR se encuentran inactivos, al menos el 50% de su existencia ',
                '- A mayor cantidad de lineas de codigo, mayor sera su ciclo de existencia y de inactividad ',
                '',
                '<strong>Problemas principales:</strong>',
                '- No existe un proceso formal, para asignar y revisar las solicitudes ',
                '- No hay estandarización y/o orientación, sobre buenas practicas o del tamaño de estas solicitudes ',
                '- Los equipos tratan todos los PR, con la misma importancia, cuando cada uno tiene un nivel de riesgo diferente entre si ',
                '- A la hora de revisar, no se cuenta con un contexto o de una estimación de cuanto durara la revisión ',
                '',
                '<strong>Solicitudes demasiado pequeñas:</strong> Como cambios de documentación o de ortografia, esto desvia la atención de otros PR más grandes o importantes',
                '<strong>Cambios en el codigo deprecado:</strong> Esto no solo indica una falta de comunicación con el equipo, tambien incurre en un desperdicio de recursos ',
                '<strong>Solicitudes sin la adecuada documentación:</strong> Esto es como entrar en una habitación a oscuras, que se debe ir iluminando poco a poco,',
                ' - generando retrasos al adivinar las intenciones de los cambios o por un cambio de contexto demasiado brusco ',
                '',
                '<strong>PR de alto riesgo, sin la revisión adecuada:</strong> En casos como estos, deberian existir varios revisores, para garantizar ',
                ' - una mayor precisión y una mejor toma de decisiones ',
                '<strong>Cadena de retrasos:</strong> Tener varios PR represados es un problema, pero lo es más aun, cuando estos se deben revisar ',
                ' - de manera secuencial, por lo que esta cadena puede llevar a atrasos importantes e incluso obstaculizar el trabajo ',
                '<strong>Sin enfoque:</strong> Los PR deben tener claridad en su proposito, desde que son creados, por lo que aquellos que abordan ',
                ' - multiples problemas a la vez, puedan resultar confusos y generar descuidos, durante sus revisiones ',
                '',
                '<strong>Sin asesoria experta:</strong> Cada equipo suele tener expertos ya sea en areas de negocios o areas tecnologicas, ',
                ' - y tocar estas areas sin su asesoria, puede resultar en la perdida de información crucial para el desarrollo de la actividad ',
                '<strong>Sin testing:</strong> Un PR sin las respectivas pruebas asociadas, puede provocar errores no detectados y afectar la estabilidad ',
                '<strong>Eliminar codigo:</strong> La eliminación de codigo, en aras de la eficiencia, puede resultar en un efecto en cascada, y deben revisarse con precaución ',
                '',
                '- Estos problemas se pueden solventar como: ',
                '<strong>Pair Programing:</strong> Donde los desarrolladores puedan fungir tanto como implementadores, como revisores, y que puedan intercambiar con frecuencia ',
                '<strong>Merge continuos:</strong> Esto implica tener un flujo de CD/CI aunque sea basico, pero da grandes beneficios, al automatizar y reducir el tiempo asociado ',
            ]),
        new Item(Keys.GIT_REBASE_MERGE_SQUASH,
            [
                '- Git ofrece diferentes estrategias para unir cambios entre ramas, cada una con ventajas y deventajas ',
                '',
                '<strong>Merge:</strong> Combina ambas ramas de manera que todo el historial, queda accesible en la rama de destino, más un <em>merge</em> commit, ',
                ' - simple y facil de entender, util para trabajo compartido entre miembros del equipo, pero puede crecer de manera desmezurada con el tiempo ',
                '',
                '<strong>Git Rebase:</strong> Rebobina los commits y coloca el nuevo commit como el nuevo <em>head</em> de la rama, esto crea historiales más limpios',
                ' - pero existe la posibilidad de ocasionar problemas en repositorios locales y de otras personas del equipo ',
                '',
                '<strong>Squash:</strong> Se combinan todas las commits individuales en uno solo, lo que facilita el seguimiento, a costa de perder detalles ',
                '',
                '',
                '<strong>Cuando usarlos:</strong>',
                '- <em>Merge</em> Puede hacerse si resolver conflictos se vuelve dificil y las ramas suelen ser compartidas ',
                '- <em>Rebase</em> Es Ideal para ramas que no se comparten, ayudando a la administración ',
                '- <em>Squash</em> Es util para ambientes donde ser prioriza el seguimiento al solo contar con un commit que agrupo a todos y facilmente reversible ',
            ])
    ];

export const LEYES =
    [
        new Item('balas',
            [
                '- El software puede tener dificultades inherentes al software y accidentales ',
                '- Los errores son gajes del oficio, pero tienen diferentes grados de repercusión en el software ',
                '- Jamas sera lo mismo un error semantico a uno de diseño, el primero podria pasar por trivial, pero el segundo NO ',
                '',
                '<strong>Complejidad</strong>',
                '- La complejidad es directamente proporcional al tamaño ',
                '- Esta es una propiedad intrinseca del software, que no se puede desligar de su diseño o construcción ',
                '- De esta complejidad nacen las dificultades para crecer sin afectar al resto del sistema ',
                '- Sin contar con los problemas tecnicos ó las dificultades de aprendizaje ',
                '',
                '<strong>Conformidad</strong>',
                '- Tener que ajustarse a otros diseños, necesariamente implica algo más que una refactorización ',
                '- No hay una sola manera para trabajar, por lo que hay acostumbrarse a las diferentes formas de cada persona ',
                '',
                '<strong>Variabilidad</strong>',
                '- El software esta sometido a la necesiadad de cambio constante, pero esto no necesariamente significa un "cambio" ',
                '- Se podria sacar un nuevo modelo ó una nueva versión, más no obligatoriamente cambiar lo que ya funciona ',
                '',
                '<strong>Invisibilidad</strong>',
                '- El software es un recurso intangible, solo entendible por la capacidad de abstracción y de visualización de los humanos ',
                '- Por eso es dificil diseñar sistemas ya que se deben usar sistemas conceptuales que deben ser comunicados sin perder su intención ',
                '',
                '<strong>POO</strong>',
                '- Los tipos de datos jerarquicos y datos abstractos, ayudan a eliminar dificultades accidentales del proceso ',
                ' - sin tener que escribir grandes cantidades de codigo para expresar cualquier intención ',
                '',
                '<strong>Sistemas Expertos:</strong>',
                '- Es un sistema que tiene un motor de inferencia generalista, que toma entradas de datos, suposiciones, reglas y consige resultados ',
                '- Son más que algoritmos ya que no estan tan limitados como estos, y suelen poder soportar logica difusa y logica puramente determinista ',
                '',
                '<strong>Generación de codigo</strong>',
                '- Desde siempre se ha soñado con la capacidad para que un programa se genere para solucionar un problema ',
                '- Generalmente se debe especificar la solución o el contenido necesario para esta, más que el problema ',
                '',
                '- Para revisar los demás temas puedes ir a la fuente original ',
            ]),
        new Item(Keys.LEYES_LEHMAN,
            [
                '- El contenido(información) es eterno, pero no la materia que lo contiene(almacenamiento)',
                '',
                '<strong>Ley del cambio continuo:</strong> En la realidad las cosas deben seguir cambiando constantemente, de lo contrario eventualmente seran obsoletas ',
                '<strong>Ley de complejida creciente:</strong> Mientras algo siga creciendo, su complejidad tambien lo hara, a no ser que se tomen medidas para reducirla ',
                '<strong>Ley de evolución:</strong> Mientras algo crezca, tambien lo haran sus errores, casi siempre de manera promedio, estos se autoregulan ',
                '<strong>Ley de estabilidad organizacional:</strong> La velocidad de desarrollo sera casi siempre la misma, por más recursos que se inyecten ',
                '<strong>Ley de la conservación de la familiaridad:</strong> Un crecimiento desmesurado hara que el conocimiento basico sea insuficiente para seguir creciendo ',
                '<strong>Ley de crecimiento continuo:</strong> Las funcionalidades deben seguir mejorando para mantener a los clientes satisfechos ',
                '<strong>Ley de decremento de la calidad:</strong> La calidad de los sistemas comenzara a disminuir a menos que dichos sistemas se adapten a los cambios ',
                '<strong>Ley de retroalimentación:</strong> La comunicación con el cliente y con las personas conocedoras es fundamental ',
            ]),
        new Item(Keys.LEYES_CONWAY,
            [
                '- El impacto de la comunicación en tu empresa ',
                '- <em>Cualquier organización que diseñe un sistema producirá un diseño que copia la estructura de comunicación de dicha organización.</em>',
                '- El software es una habilidad intelectual humana, por lo que la comunicación es fundamental para la integración ',
                '',
                '- La manera de trabajar de tu empresa se vera reflejada en tu software, es el significado principal de esta frase ',
                ' - Equipos pequeños, crearan soluciones pequeñas, altamente modulares ',
                ' - Personas egoistas, generan problemas de integración de componentes y falencias al compartir su conocmiento ',
                ' - Empresas sin organización, generaran codigo complejo, pero funcional de manera rapida, que se convertira en una bola de nieve ',
                ' - Empresas orgullosas, que comparten su codigo y sus buenas practicas ',
                ' - Estos y más ejemplos hay, como empresas y personas halla ',
            ]),
        new Item('murphy',
            [
                '<strong>- Si algo malo puede pasar, pasara</strong>',
                '- Se inspira en el concepto fisico de la entropia, el cual dicta que todo sistema fluye del orden al desorden ',
                '- Puede ser util para ayudar a prevenir el desastre, si se usa para tomar precauciones ',
                '- No hay ninguna demostración matematica que la niegue ó la acepta, solo es un conocimiento nacido de lo cotidiano ',
            ]),
        new Item('pendulo',
            [
                '- Permite explicar comportamientos humanos cuando son llevados al extremo; Se puede producir por diferentes razones: ',
                '<strong>Idealización del opuesto:</strong> Cuando estamos constreñidos en algo, tendemos a idealizar el contrario ',
                '<strong>Necesidad de reafirmación:</strong> Buscando un gran impacto, generalmente elegimos los polos opuestos al ser vistosos ',
                '<strong>Comodidad del extremo:</strong> Son comodos ya que no tienen contenciones ni filtros, lo opuesto de una posicion intermedia ',
                '',
                '- Los extremos no necesariamente son malos, ya que permiten tener nuevas experiencias, y conocer nuevos puntos de vista ',
                '- Esto se debe hacer de manera racional, y bajo nuestra propia elección, para que podamos reflexionar en vez de seguir ciegamente ',
            ]),
        new Item(Keys.LEYES_HYRUM,
            [
                '- Cualquier cosa que ofrezcas será usada por alguien',
                '- El mantenimiento de las aplicaciones siempre va a ser una constante, por lo que reducir características inútiles es una opción de reducirlo ',
                '- El problema surge cuando algún cliente la estaba usando con otro fin, o simplemente le era útil para su nicho específico de mercado ',
                '- Hacer esto puede conllevar problemas con los clientes ya que estos cambios abruptos hacen sentir al cliente que no están siendo considerados ',
                '- También hay que tener en cuenta que estos cambios a veces son fundamentales y se deben hacer incomoden o no a tus usuarios ',
            ]),
        new Item('leblanc',
            [
                '- Esta ley nace debido a la tendencia natural de las personas de procastinar ',
                '- Haciendo referencia a esas cosas que se dice que se van a arreglar despues, pero... , nunca se terminan arreglando ',
                '- Despues es lo mismo que Nunca ',
                '- Estos pendientes se acumulan poco a poco y convertirse en una bola de nieve, lo ideal es hacerlos en el acto, o como tareas en el corto plazo ',
            ]),
        new Item('leyesInternet',
            [
                '- Las autoridades aun no encuentran una forma universal de controlar internet, porque este ha creado sus propias "leyes" para "autoregularse" ',
                '- Aunque se les llama leyes, son observaciones que se repiten a lo largo del tiempo y son poco contrariadas ',
                '- Un ejemplo de esto es la <em>Ley de murphy</em> que que tiene su propio ajuste para internet (ley de Skitt)',
                '',
                '<strong>Ley de Skitt:</strong> "Cualquier publicación que corrija un error en otra publicación contendrá al menos un error" ',
                '<strong>Ley de Godwin:</strong> "A medida que una discusión online se alarga, la probabilidad de que aparezca una comparación a Hitler o los nazis tiende a 1" ',
                '<strong>Ley de Poe:</strong> "Sin un emoticón u otra muestra de humor, es absolutamente imposible parodiar una idea sin que alguien la confunda con una opinión genuina" ',
                '<strong>Ley de Cunningham:</strong> "La mejor manera de conseguir una respuesta correcta en la red, no es haciendo la pregunta sino publicando una respuesta equivocada" ',
                '<strong>Ley de Exclamación:</strong> "Cuantos más signos de exclamación se usen, más probable es que sea una mentira. También aplica para el uso excesivo de mayúsculas" ',
                '<strong>Ley de Danth:</strong> "Si una persona tiene que insistir en la red que ha ganado una discusión, es probable que esa persona haya perdido el debate" ',
                '<strong>Regla 34:</strong> "Si existe, hay pornografía" ',
                '<strong>Regla 35:</strong> "Si no existe tal pornografía, se hará"',
                '<strong>Ley de Pommer:</strong> "La opinión de una persona puede cambiar en base a lo que lee en internet. La naturaleza del cambio será: de no tener, a estar equivocada" ',
                '<strong>Ley de Haig:</strong> "La fealdad de un diseño de una página en internet es directamente proporcional a la demencia de su contenido y de su creador" ',
                '<strong>Efecto Streisand:</strong> "Todo aquel que intente censurar u ocultar información en la red, acaba consiguiendo que se divulgue aún más" ',
            ]),
        new Item('pareto',
            [
                '- Tambien conocida como la regla de <strong>80/20</strong> que asegura que el 80% de las causas proviene del 20% del esfuerzo ',
                '- Termino acuñado en Italia en 1896 por el filosofo e ingeniero <em>Vilfredo Federico Pareto</em> ',
                '- Se utilizo conocimiento empirico para su comprobación, por medio de la propiedad de la tierra de esa epoca, ',
                ' - con la conclusión de que 20% de los propietarios poseia el 80%, mientras que el 80% restante solo poseia el 20% ',
                '- Con el paso del tiempo, esta relación se trasladado a diferentes ambitos de la sociedad, de manera equivalente ',
                '- Esta relación esconde un mensaje bastante importante, el cual es que debemos centrarnos en lo que realmente importa ',
                '- Asi no malgastaremos esfuerzos ni recursos en acciones que aportarian pocos o nulos beneficios ',
                '',
                '<strong> Ventajas de su aplicación:</strong> ',
                ' - Aumentar el ratio del trabajo eficiente, al identificar lo que es realmente importante ',
                ' - Mejor desarrollo de las actividades al gestionar mejor el tiempo ',
                ' - Reducción del efecto Burnout y del estres al simplificar y reducir las tareas a realizar ',
                ' - Mejora la toma de decisiones, al tener datos de lo que es realmente importante ',
                ' - Optimización de recursos, ya que se gastan donde realmente pueden generar un impacto '
            ]),
        new Item('brooksLaw',
            [
                '- <strong>Fred Brooks</strong>, Experto en computación e ingeniero de software desarrollador del sistema operativo OS/360 de IBM, además del ',
                ' - mitico libro del <em>hombre-mes</em>, uno de los libros más citados y utiles en el ejercicio de la ingenieria de software ',
                '- Una de las grandes enseñanzas que abordaba el libro es que la respuesta tipica ante un retraso es agregar mano de obra, ',
                ' - en la ingenieria de Software es practicamente como "apagar el fuego con gasolina" ',
                '- <em>Añadir recursos humanos a un proyecto retrasado hace que se retrase aún más</em> <strong>Tambien</strong> <em>Nueve mujeres no hacen un bebe en un mes</em>',
                '- Existe un lapso de tiempo en el que los programadores tienen que ponerse al dia, aprender nuevas tecnologias y/o metodologias, entre otras cosas ',
                '- Mientras el trabajo realizado <strong>aumentaba linealmente</strong>, la complejidad y los costos de comunicación <strong>crecian exponencialmente</strong>, si todo salia bien ',
                '- Además de que siempre existe la posibilidad de que el desconocimiento del proyecto provocase que el nuevo fichaje cometiera errores graves, ',
                ' - generando <strong>productividad negativa</strong>, al tener que corregir los errores ó realizar de nuevo lo que se trataba de hacer ',
                '- Sin embargo esta ley tiene algunas excepciones, como lo es Linux y el software libre, ',
                ' - en el cual miles de programadores estan dispuestos a revisar y corregir, aca se tienen una alta convicción para superar el desconocimiento ',
            ]),
        new Item('mooreAndWirth',
            [
                '- El software y el hardware van de la mano, no solo existen PC lentos, tambien existen software lentos ',
                '',
                '- El Software tiene la tendencia de ocupar todo el espacio disponible',
                '- El Software se ralentiza a mayor velocidad de lo que se acelera el hardware ',
                '',
                '- Esta afirmaciones, además de otras, encapsulan la complejidad y el costo de desarrollar software, se conocen como la <strong>La ley de Wirth </strong>',
                '- Acotada a Niklaus Wirth, padre de lenjuajes como Pascal o Modula, y que publico en 1995 un articulo con estas y otras observaciones ',
                '',
                '- <strong>Ley de Moore:</strong> Observo en 1965 que el numero de transistores en un circuito integrado, se dobla aproximadamente cada 24 meses ',
                '- No solo es lograr un Hardware más potente, tampoco se debe descuidar el Software, solamente porque sera compensado por mejores componentes '
            ]),
        new Item('amdahl',
            [
                '- Es una observación intuitiva, con una formula asociada, en que la mejora de rendimiento, que se puede obtener mediante procesamiento en paralelo ',
                ' - esta limitada por las partes de un sistema, que es inherentemente secuencial, donde la formula enseña la mejora maxima que se puede esperar ',
                '<strong> Smax = 1 / ((1-p) + p/s)</strong> Donde: ',
                '<strong> Smax:</strong> Es la maxima mejora teorica, en el tiempo de ejecución de toda la tarea, Por ejemplo, si es 2, significa que puede ser el doble de rapida',
                '<strong> p:</strong>    Es la proporción de tiempo total de ejecución invertido por la parte de la tarea, que se beneficia del procesamiento paralelo ',
                '<strong> 1-p:</strong>  Es la parte del tiempo total de ejecución que dedica la parte de la tarea que debe ejecutarse secuencialmente ',
                '<strong> s:</strong>    Es la mejora de rendimiento o aceleración de la parte de la tarea que se beneficia del procesamiento paralelo ',
                '',
                '- Para poner un ejemplo practico, si un programa con todas sus instrucciones en conjunto tarda 10 horas en ejecutarse en serie, ',
                ' - y una porcion no se puede paralelizar, lo mejor que se puede esperar es acercarse al limite de mejora de 10 veces, no importa ',
                ' - cuanto paralelices las nueve horas que pueden ser paralelas, nunca se podra eliminar la hora que debe ser ejecutada en secuencia ',
                '',
                '<strong>Ley de Gustafson</strong>',
                '- Esta ley se puede considerar un complemento, ya que agrega predicciones a la mejora, entre más nucleos se vayan agregando ',
                '- Esto debido a que la ley de Amdahl supone que el problema del tamaño es fijo, pero en la practica los recursos pueden crecer ',
            ]),
        new Item('gall',
            [
                '- Es una observación sobre la naturaleza y evolución de los sistemas complejos, un principio que resuena en el mundo del software ',
                '- <em>Invariablemente se descubre que un sistema complejo que funciona ha evolucionado a partir de un sistema simple que funcionó.</em>',
                '- <em>Un sistema complejo diseñado desde cero nunca funciona y no se puede reparar para que funcione.</em>',
                '- <em>Hay que empezar de nuevo con un sistema simple que funcione.</em>',
                '',
                '<strong>Observaciones:</strong>',
                '<strong>- Comienze simple:</strong> La idea es siempre empezar con el sistema más simple posible, esto suele estar en el linea con un <em>Minimo Producto Viable</em>',
                '<strong>- Evolución:</strong> Una vez el sistema funcione, ahora puede empezar a ampliarse y evolucionar a un sistema más complejo',
                '<strong>- Sobreingenieria:</strong> Tener una base compleja, por lo general trae más problemas que beneficios, además del desperdicio de recursos',
                '',
                '<strong>Aplicaciones en el Software</strong>',
                '- Implemente metodologias agiles, estas se alinean con el enfoque de un sistema simple y funcional ',
                '- Refactorización, como medidad de aseguarar el matenimiento a medida que crece',
                '- Monolitos modulares, en vez de un enfoque inicial de microservicios, asi los limites estan claros y una posible transición no seria tan dificil',
            ]),
        new Item(Keys.LEYES_KIDLIN,
            [
                '- Es una teoria de resolucion de problemas que dice: <em>Si escribes el problema claramente, el asunto está medio resuelto',
                '- La palabra <strong>Claramente</strong> te invita a conocer que es lo que falla, cual es el dolor principal y no los sintomas ',
                '- Si se comprende el problema de fondo, entonces podras idear una solución más adecuada ',
                '',
                '- Para aplicar esta ley se suele dividir el problema en partes más pequeñas y manejables',
                '- Tambien se suelen implementar etapas, que son bastante similares a las del <em>Ciclo de Deming</em>',
            ]),
        new Item(Keys.LEYES_GOODHARTS,
            [
                '<em>Cuando una medidad se convierte en un objetivo, deja de ser una buena medida</em>, Charles Goodhart',
                '- Cuando cualquier metrica se convierte en un objetivo o meta, las personas empezaran a cambiar su comportamiento para cumplir con esa metrica ',
                '- Esto a expensas del significado de la metrica y generalmente en detrimento de lo que intentaba representar ',
                '- Esto no significa que no se deban mediciones, sin mediciones no se puede saber que mejorar ',
                '',
                ' - Numero de lineas de codigo (Medir la productividad)',
                ' - Puntos de Historia completados (Velocidad del equipo)',
                ' - Cobertura de Codigo (Calidad de las pruebas)',
                '',
                '- Esto se evita teniendo estas metricas como guias hacia un objetivo y que se instauren de manera estatica ',
                '- Las metricas no siempre entregaran el mejor valor por solo ser cuantitativas, hay casos donde aporta más un enfoque cualitativo ',
            ]),
        new Item(Keys.LEYES_LINUS,
            [
                '<em>Si existen los suficientes ojos, todos los errores son osbservables</em>, Eric Raymond',
                '- Esta es una de las esencias del software libre, donde la participación activa de la comunidad ayuda a identificar y corregir errores ',
                '- De manera más eficaz que en los sitemas cerrados, al tener una mayor cantidad de manos identificando y solucionando errores ',
            ]),
        new Item(Keys.LEYES_HOFSTADTER,
            [
                '<em>Siempre lleva más tiempo del esperado, incluso cuando se tiene en cuenta la Ley de Hofstadter</em>, Douglas Hofstadter',
                '- Es un gran recordatorio de que somos consistentemente imprecisos al estimar el tiempo requerido para realizar tareas de Desarrollo ',
                '- Esto es especialmente util ya que los tiempos siguen siendo imprecisos, aun cuando se tiene en cuenta esta imprecisión ',
            ])
    ];

export const PEOPLE =
    [
        new Item(Keys.PEOPLE_PEOPLE_AND_PROCESS,
            [
                '- Las Personas, los Procesos y las Tecnologias son el sostenimiento de toda empresa ',
                '- Equilibrar estos 3 elementos de manera optima no es tarea facil, pero lograrlo genera una gestión del conocimiento más que adecuada ',
                '- Cualquier cambio de estas partes traera efectos secundarios sobre las demas, por lo que es ideal siempre tener un objetivo en comun ',
                '',
                '<strong>Personas:</strong> Siempre seran necesarias para pensar, planear y ejecutar ',
                '- Son las posedoras del conocimiento y las encargadas de mantenerlo y transformarlo ',
                '',
                '<strong>Tecnologia:</strong> Ayuda a las personas a llevar procesos de difusión del conocimiento personal ',
                '- Proporciona herramientas de enseñanza y entrenamiento ',
                '',
                '<strong>Procesos:</strong> Deben incluir tareas y proporcionar conocimiento de las actividades internas ',
                '- Ofrecen el valor agregado al cliente y ayudan a mejorar el conocimiento compartido ',
                '',
                '- Algunos de los objetivos de tener este equilibrio son: ',
                ' - Transformar los datos en información y a su vez en conocimiento ',
                ' - Permitir que el conocimiento se accesible para todos y generable por todos ',
                ' - Mejora continua de los procesos y aumentar la productividad ',
                ' - Generar valor agregado de manera que este conocimiento sea una ventaja competitiva ',
            ]),
        new Item('gestionDeServicios',
            [
                '- Es una metodologia que pone su foco en el cliente y como mejorar su atención ',
                '- Toda organización debe contar con personal competente en cuanto al uso de las tecnologias que se usen ',
                '- Los proveedores y los socios son partes importantes de toda empresa, no se pueden ignorar ',
                '- La creación de valor es importante para todo producto y servicio que se ofrezcan ',
                '',
                '<strong>7 principios para una correcta gestión:</strong>',
                '- Se debe crear el mayor valor para los clientes a la vez que se perjudican lo menos posible ',
                '- Siempre sera mejor revisar los procesos existentes y mejorarlos que empezar desde cero ',
                '- Es mejor avanzar seguro y constante con un enfoque concreto ',
                '- El trabajo en equipo es importante, todos deben ser visibles y colaborarse entre si ',
                '- Tener una consciencia holistica, ya que todas las areas se afectan entre si de alguna manera ',
                '- Entre más simple sea un proceso mejor ',
                '- La automatización y la optimización siempre deben ser aspectos a alcanzar ',
            ]),
        new Item('gestionDeActivos',
            [
                '- Los elementos fisicos y no fisicos de las empresas tambien deben ser considerados como partes del negocio ',
                '- Esto se puede aplicar a todo software que la empresa use o desarrolle y los elementos necesarios para su funcionamiento ',
                '- Tener un inventario actualizado garantiza que siempre se maneje lo necesario ',
                '- En un contexto informatico esto se puede aplicar de varias formas, principalmente al manejo de archivos electronicos ',
                ' - además de las licencias que se usan y que se generan desde la misma empresa ',
                '',
                '<strong>Ejemplos de activos:</strong>',
                '<strong>- Hardware:</strong> Dispositivos de redes, centros de datos, servidores',
                '<strong>- Infraestructura:</strong> Proporcionada por terceros, y dispositivos propios de la empresa usados por los usuarios finales ',
                '<strong>- Datos:</strong> Digitales derivados de las operaciones internas ',
                '',
                '- Estos suelen tener un ciclo de vida ciclico, el cual es el siguiente: ',
                '  -> <strong>Planear</strong> ->         -> <strong>Adquirir</strong> ->    -> <strong>Asignación</strong> ->       -> <strong>Mantenimiento</strong> ->    -> <strong>Retiro</strong> ->',
                '  Como obtenerlos       Construcción,     Introducción al        prolongar la vida      Al final del          ',
                '  y como se usaran      compra,           ambiente productivo    util o mitigar los     este debe ser         ',
                '  además de analizar    arrendamiento     y definiciones de      riesgos de posibles    retirado y desechado  ',
                '  costos/beneficios     o licencias       procesos y usos        fallos                 o solo cancelado      ',
                '',
                '<strong>Beneficios de esta gestión:</strong>',
                '- Mejores decisiones en base a información actual y verificable ',
                '- Continuidad del negocio al estar mejor preparados para las interrupciónes del negocio ',
                '- Manejo oportuno de las licencias y suscripciones de la empresa ',
                '- Costos totales de la empresa de manera global ',
                '- Permite la estandarización de manera transversal en la empresa ',
            ]),
        new Item('fidelizacion',
            [
                '- Fidelizar a un cliente, garantiza que esta siempre permanecera comprando nuestos productos y servicios ',
                '- Segun la ley de pareto el 80% de las ventas son de los clientes actuales y 20% de los nuevos ',
                '- Es un error comun concentrarse en adquirir nuevos clientes y descuidar los viejos ',
                '- Un cliente satisfecho es la mejor publicidad, aun asi, esto no siginifica que sea un cliente fiel ',
                '',
                '<strong>Algunas estrategias para fidelizar a los clientes:</strong>',
                '- Ser honestos en la justa medida, ya que no siempre todo sera una historia de exito ',
                '- Mantener una comunicación constante, haciendo saber los resultados de manera regular ',
                '- Preparar un plan a futuro que lo haga sentir importante ',
                '- Comparte los momentos de exito, no solo los fracasos merecen atención ',
                '- Solicita sus opiniones y hazlos sentir escuchados ',
                '- Las relaciones son mejores cuando son reciprocas ',
                '',
                '<strong>Clasificación de los clientes:</strong>',
                '<strong>- Apostoles:</strong> Clientes fijos bastantes satisfechos y que recomendaran tu marca ',
                '<strong>- Leales:</strong> Cuentan igual de satisfechos que los apostoles, pero que no divulgan tu marca ',
                '<strong>- Mercenarios:</strong> Tienen satisfacción alta, pero solo compraran cuando esto les aporte algun beneficio ',
                '<strong>- Rehenes:</strong> No estan satisfechos con tu producto, pero tampoco estan dispuestos a migrar ni asummir más costos ',
                '<strong>- Indiferentes:</strong> Son neutrales frente a la marca, y aunque esten satisfechos solo haran compras ocasionales ',
                '<strong>- Terroristas:</strong> Además de estar insatisfechos, estos hablaran mal de la marca en sus circulos de influencia ',
            ]),
        new Item('modeloDIKW',
            [
                '- Es un sistema jerarquico donde cada capa le da soporte a las caracteristicas de la siguiente ',
                ' &uarr;',
                ' Contexto ',
                ' &uarr;                                     Sabiduria        &#35;     Union de todas las partes ',
                ' &uarr;                      Conocimiento                   &#35;&#35;&#35;    Se forman las partes de un todo ',
                '           Información                                &#35;&#35;&#35;&#35;&#35;   Conexión de las partes',
                ' &uarr;  Datos                                            &#35;&#35;&#35;&#35;&#35;&#35;&#35;  Reunion de todas las partes ',
                '   &rarr;      &rarr;    &rarr;  Comprension    &rarr;',
                '  Busqueda  Absorción     Practica     Reflexion',
                ' ',
                '<strong>Datos:</strong> Son la materia prima para formar las siguientes capas, indeferentemente de la fuente ',
                '<strong>Información:</strong> Es una construcción más avanzada a partir de acopio de simples datos, gracias a nuestro raciocinio y reconocimiento de patrones',
                '<strong>Conocimiento:</strong> Ya con la información podemos actuar en base a esta, tomar decisiones especificas, o responder interrogantes de manera practica ',
                '<strong>Sabiduria:</strong> Generalmente es la capacidad de pensar y analizar las situaciones, que se presenten, además de poder abstraerlo a otros contextos',
            ]),
        new Item('gestionDeExpectativas',
            [
                '- Lo más probable es que estas esten formadas por diferentes factores y experiencias pasadas ',
                '- Muchas cosas pueden salir mal en un proyecto pero estas son algunas maneras de solucionarlo ',
                '',
                '<strong>Asumiendo lo obvio:</strong> Siempre hay diferencias entre lo que una persona escucha y lo que otra dice, ',
                ' - además de que hablamos de lo que consideramos importante y evitamos las obviedades, ',
                ' - sin comprender que estas no lo son para todos ',
                '',
                '<strong>Evitar el riesgo:</strong> Generalmente no nos gusta hablar de posibles problemas, ',
                ' - y si hay riesgos intentamos evitarlos hasta que sean inevitables, aunque esto nos traera problemas ',
                ' - en un futuro casi inmediato, preveer los problemas nos hace profesionales más confiables ',
                '',
                '<strong>Información incorrecta:</strong> Cuando vas al medico esperas una explicación a fondo de tus sintomas, ',
                ' - no simplemente un medicamento para calmarlos; puede que funcionen o solo enmascarar algo peor ',
                ' - en terminos de un equipo esto significa mantener a todos los involucrados al tanto ',
                '',
                '<strong>Reuniones sin agenda:</strong> Las reuniones no son de agrados de todos, y menos cuando estas son sorpresa, ',
                ' - además de que no se suele estar preparado para estas, generando frustaciones y estres, ',
                ' - lo mejor para evitar esto es simplemente agendarlas con anterioridad ',
                '',
                '<strong>Realización de contratos:</strong> La negociación es importante pero para segurar que todo funcione ',
                ' - es importante generar acuerdos y dejarlos por escrito, asi demostrar alguna equivocación, ',
                ' - y quien es el responsable o que este obligado a resolver el problema',
            ]),
        new Item(Keys.PEOPLE_CAPA_8,
            [
                '- Es un error relacionado directamente con el usuario final, ya sea por desconocimiento o por un mal diseño de la UX/UI',
                '- Esta capa no existe como tal, es una expresión para aludir la culpa directamente al usuario ',
                '- El nombre viene del modelo OSI que consta de 7 capas, donde la septima capa es la aplicación, la que usa el usuario final ',
                '- Estos errores son de las principales fuente de error en las organizaciones, al mismo tiempo que son los más evitables ',
                '- Son una puerta de entrada excelente para los hackers, aprovechandose de conductas tipicas y errores humanos '
            ]),
        new Item(Keys.PEOPLE_NO_NEWS_GOOD_NEWS,
            [
                '- Tan simple como ejecutar un comando y este no devuelve un mensaje de error, si no que se ejecuto con exito ',
                '- Los codigos de error se establecieron para poner de acuerdo a desarrolladores y usuarios ',
                '- Usarlos y dar información es una manera util de entender los problemas, en caso de Linux existe el siguiente estandar ',
                '',
                '0 - Success -> Proceso Exitoso',
                '1 - Failure -> Proceso Fallido',
                '2 - Abject failure -> Fracaso absoluto',
            ]),
        new Item('tiposHackers',
            [
                '- Un Hacker es aquel individuo que usa sus habilidades informaticas para violentar y penetrar la ciberseguridad ',
                '- Inicialmente solo existian 3 sombreros como clasificación, pero hay otros que han surgido con el tiempo ',
                '',
                '<strong>Sombrero Blanco</strong>',
                '- No importan su genero, nacionalidad, etnica, y demás caracteristicas, siempre defienden lo que es correcto ',
                '- Protegen a los civiles y a las organizaciones en general encontrando y reportando vulnerabilidades ',
                '- Trabajan en cargos como ingenieros de ciberseguridad, pruebas de penetración y otros puestos de seguridad, además de tareas como: ',
                '  - Escaneo de redes        - Configuracion de IDS (detección de intrusos) ',
                '  - Creación de honeypots   - Hackeo de equipos para encontrar vulnerabilidades ',
                '',
                '<strong>Sombrero Gris</strong>',
                '- Tambien defenden lo correcto, pero no siempre usaran metodos convencionales para hacerlo ',
                '- Esto puede ser moralmente ambiguo por lo que este punto medio a veces se decanta más por un extremo (Negro o Blanco)',
                '',
                '<strong>Sombrero Negro</strong>',
                '- Realizan actividades ilegales para obtener algun tipo de redito, generalmente finaciero ',
                '- Tambien suelen hacerlo por diversion, pero con fines de lucro, sin importar los daños que puedan generar, tambien pueden: ',
                '  - Instalar puertas traseras   - Mantener el acceso a los sistemas comprometidos ',
                '  - Escalar en privilegios      - Descargar datos valiosos y/o sensibles ',
                '  - Instalar malware            - Usar el Phishing ',
                '',
                '<strong>Sombrero Verde</strong>',
                '- Jovenes entusiastas, inexpertos y por lo tanto vulnerables al riesgo ',
                '- Actualmente con tantas herramientas y facilidades es comun que se mentan en problemas ',
                '- Que aprovechan para aprender de sus errores y convertirse en mejores hackers y cambiar de sombrero ',
                '',
                '<strong>Sombrero Azul</strong>',
                '- Son hackers experimentados que suelen ser vengativos y expondran tu vida digital ',
                '- Suelen ser profesionales de seguridad externos en busca de vulnerabilidades antes de los lanzamientos ',
                '',
                '<strong>Sombrero Rojo</strong>',
                '- Además de ser vengativos, defienden lo correcto por lo que si eres un criminal no tendran piedad alguna ',
                '- No solo desactivan las actividades delictivas permanentemente, tambien son temidos por otros hackers ',
                '- Son tan experimentados que no tienen problemas en piratear sistemas con Linux ',
                '- No se arrepienten y no dudan si su objetivo es destruir a los de sombreros negro ',
                '',
                '- Si quiere conocer sus equivalentes en los personajes de Marvel y DC, ó conocer casos famosos, puedes dar click en la fuente',
            ]),
        new Item('sindromesLaborales',
            [
                '- Un sindrome es una condición o sintoma caracteristico de una enfermedad, aunque en el contexto empresarial, es más metaforico que fisico ',
                ' - existen una gran variedad de sintomas y situaciones completamente relacionables ',
                '',
                '<strong>Sindrome de Burnout:</strong> Un trabajador quemado puede presentar depresión o ansiedad, asi como irritabilidad, ',
                ' - perdida de atención o falta de motivación, por muchas causas como, acoso laboral, exceso de responsabilidades, malos tratos, etc..',
                ' - la clave esta en la prevención mediante, incentivos laborales o estableciendo un mejor ambiente laboral ',
                '',
                '<strong>Sindrome de procusto:</strong> Las victimas son los subordinados, donde los jefes, se esfuerzan por degradar el trabajo, ',
                ' - de los mejores subordinados, ya sea por que se consideren una amenaza, o simples rencillas personales ',
                '',
                '<strong>Sindrome de Peter Pan:</strong> Las empresas no quieren crecer, ya que es un proceso dificil y lleno de riesgos ',
                '',
                '<strong>Sindrome del SuperHeroe:</strong> Los emprendedores pueden fracasar, ya que no saben o no quieren delegar, ',
                ' - y aunque saben que no pueden con todo, quieren tenerlo todo bajo su control, perdiendo valiosas alianzas y colaboradores ',
                '',
                '<strong>Sindrome de Abstinencia de ejecutivos:</strong> Cuando son forzados a tomar descansos, pueden presentar sintomas fisicos y psicologicos, ',
                ' - como si de una droga real, para esto es preciso ayuda de profesionales',
                '',
                '<strong>Sindrome del Fundador:</strong> Todo pasa y se vincula directamente con el fundador, es una referencia inevitable, ',
                ' - una verdadera prueba de exito, es que la empresa sea capaz de sobrevivir y proliferar sin el fundador, mediante buenos colaboradores ',
                '',
                '<strong>Sindrome del Impostor:</strong> Algunos empresarios y profesionales exitosos, no se creen merecedores de su exito y se subestiman, ',
                ' - por esto es necesario un ambiente que no descarte buenas opciones y que los impulse a creer en sus posibilidades ',
                '',
                '<strong>Efecto Dunin-Kruger:</strong> Hay personas son incapaces de comprender su incompetencia, creyendose mejores de lo que son, ',
                ' - con un desempeño pobre e inconscientes de este hecho; por eso se insta a realizar una autocritica constructiva ',
                '',
                '<strong>Sindrome de Hamlet:</strong> Directivos que no solo viven en un estado de duda constante, cuando son necesarios para decisiones importantes, ',
                ' - suelen fracasar y tener excusas del porque, por eso es habitual tenerlos en areas poco jerarquicas, con procesos más analiticos ',
                '',
                '<strong>Sindrome de Persona Alfa:</strong> Constantemente persiguen el liderazgo y los logros, suelen tener bastantes aspectos positivos, ',
                ' - pero se pueden convertir en amenazas si tienen estilos despoticos y agresivos para liderar, es importante que los objetivos, ',
                ' - no sobrepasen ciertos limites, ni pongan en riesgo a alguien debido a sus actos ',
                '',
                '<strong>Sindrome de Codigo Hamurabi:</strong> Se establecen complejas y extensas normas internas, que obstaculizan la comunicación ',
                ' - y generan cuellos de botella, para esto es necesario flexibilizar procesos o encontrar alternativas más eficientes ',
                '',
                '<strong>Sindrome de Estocolmo:</strong> Aca existe un trabajador perjudicado, pero que se encuentra emocionalmente vinculado, ',
                ' - por lo que se niega a abandonar, para esto es necesario tener un espacio de reflexión y toma de conciencia ',
                '',
                '<strong>Sindrome de Plena actividad:</strong> Donde siempre es necesario estar haciendo algo, o si no es esta desaprovechando el tiempo, ',
                ' - aca se menosprecia el tiempo para estrategias y planes, solo para concentrarse en el atareado ahora, ',
                ' - aca se deben hacer mejores esfuerzos en la planificación y un mejor control de los recursos, tanto humanos como fisicos ',
                '',
                '<strong>Principio de Peter:</strong> Los empleados pueden ascender y lo hacen, hasta el limite de sus competencias, llegados a ese punto es necesario ',
                ' - evitar que se conviertan en obstaculos, ya sea cambiando entre areas, mejorando la formación o fortaleciendo equipos, entre otras acciones ',
                '',
                '<strong>Sindrome de Oficina Enferma:</strong> En este caso existe una influencia directa del ambiente, tal como edificios mal ventilados, con poca iluminación ',
                ' - mucho ruido o con poca movilidad, afectando directamente la salud de los empleados, haciendo necesario analizar, cambiar el espacio o mudarse',
                '',
                '<strong>Sindrome de No Inventado aqui:</strong> Un rechazo frontal y categorico, a toda solución que sean ajenas, aunque sean más simples o eficientes, ',
                ' - prefiriendo gastar recursos innecesariamente, que abrirse a nuevas oportunidades y conocimientos, que podrian mejorar las cosas ',
            ]),
        new Item('icebergIgnorance',
            [
                '- En 1989 Sidney Yoshida desarrollo la teoria de <em>Iceberg de la ignorancia</em>, que refleja ciertos datos, sobre el funcionamiento de las organizaciones',
                '',
                '- El <strong>4%</strong>   de los problemas son conocidos por la alta dirección ',
                '- El <strong>9%</strong>   de los problemas son conocidos por los mandos medios ',
                '- El <strong>74%</strong>  de los problemas son conocidos por los supervisores ',
                '- El <strong>100%</strong> de los problemas son conocidos por los operarios de linea ',
                '',
                '- En otras palabras, entre mayor sea el rango, mayor sera el desconocimiento de los problemas, afectando multiples aspectos como: ',
                ' - Toma de decisiones de manera inadecuadas   - Ineficaz asignación de recursos',
                ' - Fugas de talento                           - Ineficiencia y errores costosos, entre otras',
                '- Debido a factores como:',
                ' - Falta de comunicación                       - Liderazgo inadecuado ',
                ' - Miedos a las consecuencias de los errores   - Fugas de información ',
                '',
                '<strong>Como conectar las altas jerarquias, con la primera linea</strong>',
                '- Escuchar con atención y preguntar con curiosidad                     - Fomentar el sentido de pertenencia ',
                '- Mostrar humildad y nunca dudar en solicitar ayuda                    - Entender porque y como se puede mejorar como equipo',
                '- Crear espacios de integración y colaboración                         - Delegar de manera real y a conciencia ',
                '- Que toda la jerarquia participe, a la hora de buscar soluciones      - Desterrar el miedo a las represalias',
            ]),
        new Item(Keys.PEOPLE_LANGUAGE_UBICUOS,
            [
                '- El lenguaje Ubicuo, es un termino usado por <em>Eric Evans</em> usa en el <em>Domain Driven Design</em> para la practica de tener un lenguaje comun ',
                ' - entre desarrolladores y usuarios, además de otras personas que tambien esten involucradas ',
                '- Esto hace parte de una estandarización profesional, que se refiere a la adopción de las mejores practicas y patrones de la industria ',
                '- Asi se puede hablar un mismo idioma, para que la comunicación sea efectiva y eficiente, mediante estandares compartidos ',
                '- De esta manera tener conversaciones entre congeneres y transmitir ideas, es algo que beneficia a todos los involucrados y no se pierde tiempo ',
                ' - al tener que explicar conceptos y metodologias que se usan en la ingenieria y que son transversales ',
            ]),
        new Item('hippoEfect',
            [
                '- <strong>La Opinion de la Persona Mejor Pagada</strong>, suele tener demasiado impacto cuando no se cuentan con datos para tomar decisiones ',
                '- Y es peor cuando se tienen los datos, pero estos no se toman en cuenta cuando prevalece la persona HIPPO en la habitación ',
                '- Esto ata a la organización a lo que esta persona quiere que se haga, y no lo que los datos indican que se debe hacer o ',
                ' - tenerlos en cuenta a la hora de visualizar el panorama ',
                '- Esto sucede cuando se debe tomar una decisión dificil, pero no hay datos o analisis suficientes, entonces el grupo a menudo cedera ',
                ' - ante este juicio, ya que suelen tener la mayor experiencia y poder en la sala, tanto que las voces disidentes no tienen lugar ',
                '- Esto es peligroso debido a que los humanos tienen una tendencia al sesgo de autoridad, ilustrado por el <em>Experimento de Milgram</em> de 1963',
                '- Resulta que las personas tienden a crear en aquello que dice o hace, aquellos que consideramos como expertos y no oponerse a sus ordenes ',
            ]),
        new Item('burnout',
            [
                '- Tener un enfoque sostenible dentro de la industria del software, es algo que cada vez es más importante, dentro de la industria del software ',
                '- Algunas reflexiones de como se puede obtener un enfoque sostenible dentro de la industria',
                '',
                '<strong>Reencuadre cognitivo:</strong> <em>El impedimento a la acción hace avanzar la acción. Lo que se interpone en el camino se convierte en el camino</em>. <strong>Marco Aurelio</strong>',
                '- Los impedimentos se pueden considerar algo procesable, con esta mentalidad, cada desafio se puede convertir en una oportunidad ',
                '- Las novedades y las experiencias, seran una gran fuente para enriquecer diferentes perspectivas',
                '- Pensar positivamente, enfocandose en lo bueno',
                '- Comprender los obstaculos impuestos por la naturaleza humana',
                '',
                '<strong>Orientación a la motivación:</strong> Esto se centra en como el trabajo esta ligado a la motivación personal, y como ',
                ' - el sentimiento de satisfacción esta bajo el propio auto-control, mientras que las recompensas extrínsecas estan fuera de nuestro control, ',
                ' - si se busca la validación externa, existe una mayor responsabilidad de que estas no se cumplan ',
                '- Es mejor orientar las recompensas en función de areas, que se alineen con los resultados que se estan logrando ',
                '- Escenarios donde todas las partes involucradas, tengan alguna experiencia o valor de crecimiento personal ',
                '- Retrasar compensaciones extrinsencas, como subroducto, de la produción de calidad, a traves de recompensas intrinsecas',
                '',
                '<strong>Planificación proactiva:</strong> Es la capacidad de anticipar eventos futuros, tomar iniciativa, y planificar el futuro ',
                '- Respirar profundamente y calmar la mente, recordando que el peligro no es fisico',
                '- Desacelere sus pensamientos, para evaluar lo que sabe y lo que no',
                '- Separe la planificación de la acción, su proximo paso es crear un plan, que tenga en cuenta el tiempo ',
                '',
                '<strong>Alegria & Felicidad:</strong> Un concepto fuertemente ligado a las areas de neurociencia y psicologia, tipos de sentimientos de recompensa: ',
                '<strong>- Hedonico(corto plazo):</strong>    Transitorio y ligado a experiencias momentaneas que traen alegria y satisfacción',
                '<strong>- Eudaimónico(largo plazo):</strong> Conectado con el crecimiento personal, la autorealización y la busqueda de autosuperación ',
                ' ',
                '         <strong>Endorfinas</strong>                <strong>Dopamina</strong>                         <strong>Serotonina</strong>                       <strong>Oxitocina</strong>',
                ' Los <em>Plazos</em>                La <em>Realización</em>                   El <em>Orgullo</em>                            El <em>Reconocimiento</em>',
                ' liberan endorfinas        de una tarea produce             por la calidad o el                   genera Oxitocina, ',
                ' preparando el cuerpo      dopamina para una sensación      crecimiento personal , incian la      para recompensarte al ',
                ' para realizar             momentanea de alegria            Serotonina, que genera                haber aportado algun ',
                ' los trabajos                                               satisfacción  a largo plazo           valor al equipo',
                '',
                '- En un ambiente desquilibrado, hay mayor presión de trabajo, y muchas tareas por realizar, ahora el orgullo y el crecimiento personal ',
                ' - pasan a un segundo plano, lo que resulta que las recompensas se orienten a factores extrinsencos, ',
                ' - teniendo una menor satisfacción en menor y mayor plazo ',
                '',
                '- Evalue su relación con el trabajo y como puede solucionar direfentes tipos de problemas',
                '- Motivación interna, para asegurar la priorización del cumplimiento, y la entrega de valor a largo plazo ',
                '- Reduzca el estres, evitando grandes cantidades de <strong>Cortisol</strong>, y generar una resiliencia hacia el estres cronico ',
            ]),
        new Item(Keys.PEOPLE_ONA,
            [
                '- En las empresas de creación de productos intelectuales, que manejan grupos y diferentes tipos de personal, ',
                ' - y que tienen estructuras jerarquicas tradicionales, han demostrado problemas debido a su complejidad y cambio constantes ',
                '',
                '- Esta herramienta ofrece una vision profunda de los patrones de las relaciones e interacciones, dentro de las empresas ',
                ' - permitiendo visualizar el flujo de la información y la colaboración entre areas ',
                '',
                '- <em>Rob Cross</em> uno de los pioneros en este campo, destaco como esta puede actuar como una radiografia de los entresijos organizacionales ',
                ' - revelando patrones invisibles que afectan directamente la efectividad de la empresa, y como influye la participación de los empleados ',
                '',
                '- En muchas organizaciones, un analisis ONA, ayuda a las personas encargadas a diseñar y cambiar, la organización de las empresas, ',
                ' - de manera más rapida y adaptable, enfocandose en las areas por mejorar ',
                '',
                '- El uso de ONA es indicativo de que tan agil es una empresa, y que tanto las relaciones humanas ayudan al flujo de información a traves de toda la organización '
            ]),
        new Item(Keys.PEOPLE_PROCESS_BLOAT,
            [
                '- En las etapas iniciales de un proyecto, el desarrollo es agil, la toma rapida de decisiones y el entusiasmo por ofrecer valor',
                '- Sin embargo en la medida que los proyectos ganan complejidad, muchos caen en antipatrones que disminuyen o matan la productividad',
                '- Uno de estos es poco conocido pero insidioso, este monstruo burocratico que obstaculiza la innovación y mata silenciosamente la productividad ',
                '- Esto inicia con el objetivo de optimizar las operaciones, mantener los estandares calidad y minimizar los riesgos ',
                '',
                '<strong>Cultura organizacional:</strong> Un proceso cauteloso puede instuir multiples capas de burocracia, suponiendo que más procesos equivalen a menos riesgos ',
                '<strong>Falta de confianza:</strong> Una dirección sin confianza en el equipo de desarrollo, puede imponer niveles de aprobación y documentación engorrosos',
                '<strong>Complejidad y escala:</strong> Crecer es sinonimo de complejidad, con más partes interesadas que a su vez tienen sus propios procesos <em>Leyes de Lehman</em>',
                '<strong>Equipaje heredado:</strong> A veces los procesos redundantes persisten simplemente, "Porque siempre ha sido asi"',
                '',
                '<strong>Consecuencias:</strong>',
                '<strong>- Productividad reducida</strong> Se dedica más tiempo al trabajo administrativo, que al desarrollo real',
                '<strong>- Sin innovación:</strong> La burocracia, apaga la creatividad y limita los esfuerzos experimentales o por mejorar ',
                '<strong>- Comercializacion retrasada:</strong> Más procesos y etapas, conducen a ciclos más largos, afectando la capacidad de respuesta hacia el mercado ',
                '<strong>- Disminución de la moral:</strong> La perdida de agilidad, y la monotonia de los procesos por cumplir, debilita la moral del equipo',
                '',
                '<strong>Ejemplos durante el desarrollo:</strong>',
                '- Revisiones excesivas de codigo, aun para cambios simples y monotonos',
                '- Emisión de tickets complicadas, llegando a extremos donde es más costoso registrar el problema que solucionarlo ',
                '- Informes obligatorios, tomando valioso tiempo para recopilar todas las tareas, y no en realizarlas ',
                '- Reuniones excesivas, la comunicación entre las partes involucradas es primordial, estos espacios deben ser efectivos y utiles ',
                '',
                '<strong>¿ Como combatirla ?',
                '- Auditorias periodicas, para evaluar la relevancia y eficacia de las acciones y procesos, asegurando que estas no contribuyan más al problema ',
                '- Principios <em>Lean</em> y <em>Agile</em>, Adopte y transforme metodologias que ayuden a dar valor, con la menor cantidad de gastos posibles ',
                '- Fomente la confianza y la autonomia en la medidad de lo posible',
                '- Mantenga los procesos en lo minimo viable, solo aquellos procesos que sean absolutamente necesarios para mantener la calidad ',
            ]),
        new Item(Keys.PEOPLE_TRIANGLES_SUCCESS,
            [
                '- Cuando se trabaja en el sector de las comunicaciones o la tecnologia, es inevitable no sentirse aludido con la Serie de HBO <em>Silicon Valley</em> ',
                '- Una gran serie que muestra la cultura de las empresas emergentes tecnologicas, y chistes que solamente un programador podria entender por completo ',
                '- Tambien introduce algo que casi todo el mundo en el sector tecnologico ha experimentado, el choque ocasional entre areas ',
                '',
                '- En esta serie se introduce un concepto ficticio de "Los Triangulos Unidos del Exito", que explica la relación entre Ventas e Ingenieria ',
                '- Que sea ficticio no le quita el hecho de que se base en comportamientos del mundo real y al mismo tiempo logra tener sentido ',
                ' - El triangulo superior, formado por <em>Ingeniería</em> y <em>Manofactura</em>, que se considera un "mal necesario" en los negocios ',
                ' - El triángulo inferior, compuesto por <em>Ventas</em> y <em>Crecimiento</em>, y que representa su único objetivo ',
                ' - Para unir los triángulos en un cuadrado, creó una línea de demarcación denominada <strong>compromiso</strong> ',
                '',
                '- Aunque se exponga de manera comica, tambien expone problemas del mundo real, como el obligar al area de ingenieria a renunciar a sus aspiraciones ',
                ' - a largo plazo en aras de obtener ganancias en el corto plazo, además de que no permite que ambas areas crezcan de manera separada ',
                '- Esto en el mundo real es inviable, el forzar a <em>compromisos</em> que vayan en detrimento del producto o de la calidad, solo por priorizar las ventas ',
                '- Hacer esto es una receta para el fracaso a largo plazo, a cambio de una ganancia en el corto plazo ',
            ]),
        new Item(Keys.PEOPLE_SOMBREROS_PENSAMIENTO,
            [
                '- La creatividad es esencial para la resolución de problemas, pero siempre habra problemas y obstaculos en el camino ',
                '- Esta metodologia estimula el pensamiento logico y creativo permitiendo abordar retos desde nuevas perpectivas y encontrar caminos alternativos ',
                '- Uno de los objetivos es facilitar el pensamiento paralelo para obtener un panorama más amplio y encontrar soluciones innovadoras ',
                '- Este metodo ideado por el psicologo y escritor <em>Edward Bono</em> propone 6 sombreros, con diferentes formas de pensar ',
                '',
                '<strong>Sombrero Blanco:</strong> Pensamiento Objetivo basado en hechos e información disponible recopilada previamente ',
                '- Evita opioniones e interpretaciones que no se basen en los datos ni aspectos relevantes ',
                '',
                '<strong>Sombrero Rojo:</strong> Pensamiento Emocional basado en sentimientos e intuiciones ',
                '- Permite expresar las sensaciones sin tener que justificar ni argumentar ',
                '',
                '<strong>Sombrero Amarillo:</strong> Pensamiento Optimista basado en los beneficios y oportunidades que ofrece el problema ',
                '- Se buscan las nuevas oportunidades que estan ocultan detras del problema ',
                '',
                '<strong>Sombrero Negro:</strong> Pensamiento Critico, analizando debilidades y amenazas asi como dificultades y obstaculos ',
                '- Se intenta identificar la mayor cantidad posible de riesgos e incovenientes, para prevenir problemas ',
                '',
                '<strong>Sombrero Verde:</strong> Pensamiento Creativo donde se generan nuevas ideas para resolver el problema ',
                '- Ayuda a romper con mapas mentales establecidos ó practicas antiguas ',
                '',
                '<strong>Sombrero Azul:</strong> Pensamiento Planificador que busca una correcta gestión de procesos',
                '- Se define el objetivo del problema, establece reglas y evaluaciones para medir los resultados ',
                '',
                '<strong>Beneficios:</strong>',
                '<strong>- Organización:</strong> Ordena los pensamientos y elimina información redundante o irrelevante ',
                '<strong>- Creatividad:</strong> Alienta a los participantes a salir de su zona de comfort ',
                '<strong>- Productividad:</strong> Se evitan discusiones improductivas y los bloqueos mentales ',
                '<strong>- Efectividad:</strong> Mejora la calidad de las soluciones al considerar multiples aspectos relevantes ',
                '<strong>- Inclusividad:</strong> Fomenta la participación y la colaboración mediante opiniones y multiples puntos de vista ',
                '<strong>- Habilidades Interpersonales:</strong> Habilidades de comunicación, negociación, liderazgo y trabajo en equipo ',
                '',
                '<strong>¿ Como usarla ?',
                '<strong>Definir el tema o problema a tratar:</strong> Se le entrega el sombrero Azul a aquel que va a coordinar la dinamica ',
                '- Deber ser alguien con capacidades de liderazgo, inteligencia emocional y que sea un buen mediador ',
                '',
                '<strong>Elegir el orden y los tiempos de cada sombrero:</strong> No hay normas rigidas ni secuencias que seguir ',
                '- El punto es que las sesiones sean agiles y se puedan alternar los roles de acuerdo a los participantes ',
            ])
    ];

export const NEURO_MARKETING =
    [
        new Item('pestel',
            [
                '- Es una herramienta de gran utilidad para conocer el entorno de tu empresa, y elaborar planes estrategicos acertados ',
                '- Nos ayuda a definir analisis macroeconomicos de la empresa y como diferentes factores externos afectan al negocio',
                '- Si quieres hacer un analisis aun mas profundo, puedes incluir más factores: ',
                '<strong> PESTELI:</strong> incluye la Industria  <strong> PESTALE:</strong> incluye la Etica  <strong> PESTALD:</strong> incluye la Demografia',
                '',
                '<strong>Factores Politicos</strong>',
                ' - Como las acciones y medidas del gobierno pueden influir en la operatividad y el rendimiento de la empresa, como: ',
                '  - Politicas fiscales                      - Tratados comerciales',
                '  - Subsidios de bienes o servicios         - Reglamentos y leyes coporativos',
                '',
                '<strong>Factores Economicos</strong>',
                ' - Variables macroeconomicas que afectan de manera positiva o negativa el desempeño, ya sea nacional o internacionalmente ',
                ' - Tambien se tienen en cuenta los periodos de cambio, como ascensos y crisis economicas, ademas de: ',
                '  - Fluctuaciones del PIB                   - Ciclos economicos ',
                '  - Tasa de desempleo                       - Balanza comercial ',
                '  - Inflación                               - Geopolitica, entre otros.. ',
                '',
                '<strong> Factores sociales</strong>',
                '  - Demografia                              - Educación ',
                '  - Cambios socioculturales                 - Consumo ',
                '  - Distribucion de ingresos                - Etnias y/o Religion',
                '',
                '<strong> Factores Tecnologicos</strong>',
                ' - Constantemente en evolución, determinando el alcance del negocio y sus posibles integraciones con el entorno ',
                '  - Tasa de obsolencia                      - Facilidad de acceso a nuevas herramientas ',
                '  - Inversiones en I + D                    - Internet & automatización de la producción ',
                '',
                '<strong> Factores Ecologicos</strong>',
                ' - Especialmente importantes, si el negocio contempla alguna afectación inmediata al medio ambiente ',
                '  - Leyes de protección                     - Contaminación producida',
                '  - Cambios climatico y desastres naturales - Consumo energetico & reciclaje',
                '',
                '<strong> Factores Legales</strong>',
                ' - Normativas y leyes que la empresa esta obligada a cumplir y respetar ',
                '  - Normativas sobre empleos                - Seguridad laboral',
                '  - Propiedad intelectual                   - Licencias',
            ]),
        new Item('matrizBcg',
            [
                '- Matriz de crecimiento para marketing estrategico, para saber la rentabilidad de los productos y decidir que estrategias usar ',
                '- Es un concepto proveniendte de los años 70, y fue creada por <em>Boston Consulting Group</em> ',
                '',
                '- El eje vertical corresponde a la tasa de crecimiento del mercado ',
                '- El eje horizontal representa la cuota de mercado de la empresa ',
                '',
                '                     Cuota de mercado relativa                                                        ',
                '                       Alto         Bajo                                                              ',
                '   Tasa de    Alto &brvbar; <strong>Estrella</strong> &brvbar; <strong>Interrogante</strong> &brvbar; ',
                ' crecimiento       &brvbar;----------&brvbar;--------------&brvbar; Costo                             ',
                ' del mercado  Bajo &brvbar;  <strong>Vaca</strong>    &brvbar;    <strong>Perro</strong>     &brvbar; ',
                '                          Liquidez                                                                    ',
                '',
                '<strong> Productos Estrella:</strong> Generan liquidez a cambio de una gran inversión consolidando su posición en el mercado ',
                '<strong> Productos Vaca:</strong> Generan mucha liquidez sin necesidad de una inversión cuantiosa, ya estan consolidados ',
                '<strong> Productos Perro:</strong> Tienen una poca cuota de mercado y generan poca liquidez, convirtiendolos en un desastre ',
                '<strong> Productos Interrogante:</strong> Son un misterio en cuanto a como evolucionara, como muchas de las novedades que se lanzan ',
                '',
                '- A menudo un producto puede rrecorrer las 4 etapas y de diversas formas, <strong>Ejemplo:</strong>',
                '- Cuando se lanza al mercado se convierte en una <em>Interrogante</em> que se convierte en una <em>Estrella</em> al crecer,',
                ' - pero cuando se consolida se convertira en <em>Vaca</em> hasta que se estanque y en el declive se convierta en <em>Perro</em> ',
            ]),
        new Item('b2b-b2c',
            [
                '- Son 2 Tecnicas de marketing bastante diferentes, que intentan atraer publicos diferentes con estrategias diferentes ',
                '<strong>B2B:</strong> Business to Business, Comercialización de productos y servicios con una empresa o profesional como cliente,',
                ' - con un enfoque donde bien se sabe el publico al que se dirige, y las relaciones son importantes ',
                '<strong>B2C:</strong> Business to Customer</strong>, Comercialización de productos y servicios con una persona particular como cliente, ',
                ' - donde todo se dirige directamente al consumidor y de forma masiva, la primera impresión es muy importante ',
                '',
                '<strong>Diferencias:</strong> ',
                '- B2C esta enfocado hacia las masas en cambio B2B se enfoca de manera selecta ',
                '- Los mensajes en B2C suelen ser directos, claros y sencillos, en B2B describen el valor agregado que pueden aportar ',
                '- La logica sigue siendo la misma, vender, lo que cambia es a quien le queremos vender y como se debe hacer ',
            ]),
        new Item('eric',
            [
                '- Como crear un nuevo modelo o reformular nuestro modelo ya existente, para brindar más valor hacia nuestros consumidores ',
                '<strong>Eliminar</strong> Completamente aquellas variables que no aportan valor hacia nuestro clientes existentes o futuros ',
                '<strong>Reducir</strong> La entrega de valor de algunas variables, ya sea porque no es apreciado por el cliente o reduce costos sin perder el atractivo ',
                '<strong>Incrementar</strong> La intesidad de aquellas variables que estan por debajo de las expectativas de los clientes ',
                '<strong>Crear</strong> Nuevas variables asociadas al producto o servicio no contenidas en las curvas de valor previamente analizadas ',
                '',
                '- Parte de la clave en estos modelos de negocio es tomar decisiones divergentes frente a las propuestas ya existentes ',
            ]),
        new Item('gamificacionMarketing',
            [
                '- La gamificación en marketing va más alla de usar juegos moviles, esta toma mecanicas y recursos de estos, aplicandolas a otros contextos ',
                '',
                '<strong>Ventajas:</strong>',
                '- Mas engagement, si esta bien planteada y se adecua al Buyer persona mediante el canal correcto, ',
                ' - las recompenas crearan estimulacion rapidamente y un sentimiento positivo frente a la marca',
                '- Es estimulante, la competencia entre los usuarios genera motivación al sentirse que son apreciados ',
                '- Mejor conocimiento de tus usuarios, debido a las multiples interacciones que se presentaran, indicando quienes son mas activos ',
                '- Mejorar la perpeción de la marca, lo que a su vez ayuda a la fidelización y la obtención de nuevos usuarios ',
                '',
                '<strong>Consejos:</strong>',
                '- No es necesario empezar a lo grande, a veces un simple juego es una buena manera de probar a tu publico ',
                '- Conoce a tu publico, de nada sirve un gran despliegue con una gran inversión, si no se ajusta al publico objetivo de la empresa ',
                '- Las recompensas, no siempre deben ser fisicas, a veces pueden ser simples codigos redimibles, lo importante es que le agrade al publico ',
                '- Sin riesgo no hay exito, la innovación es parte del proceso y nunca debe ser dejada de lado ',
            ]),
        new Item('maslow-barret',
            [
                '- Existen necesidades basicas que todo ser humano debe satisfacer, estas fueron planteadas por <em>Abraham Maslow</em> de forma piramidal ',
                '',
                '<strong> Necesidades Fisiologicas:</strong> Como respirar, alimentación, hidratación, descanso ',
                '<strong> Necesidades de Seguridad & Protección:</strong> Como una vivienda, sustento diario, salud ',
                '<strong> Necesidades Sociales:</strong> Desarrollo afectivo, asociación con los pares, afinidad y sexualidad ',
                '<strong> Necesidades de Autoestima:</strong> Respeto de si mismo, confianza, independencia, y libertad ',
                '<strong> Necesidades de Auto Realización:</strong> El desarrollo del potencial individual, creatividad e innovación ',
                '',
                '- Cada escalon puede ser alcanzado siempre y cuando el anterior este cubierto o bastante avanzados ',
                '- Tomando como base los escalones anteriores, <em>Richard Barret</em> desarrollo la teoria de las etapas universales y transformación cultural ',
                '',
                '<strong> Nivel 1: Supervicencia</strong> Cubre tanto las necesidades fisiologicas como las de Seguridad & Protección de Maslow ',
                '<strong> Nivel 2: Relaciones</strong> Se centra en el afecto y la pertenencia a un grupo o varios grupos afines, Necesidades sociales ',
                '<strong> Nivel 3: Autoestima</strong> 4 Nivel de Maslow, además de afecto, prestigio y respeto ',
                '<strong> Nivel 4: Transformación</strong> 5 Nivel de Maslow, tambien trata del desarrollo personal a partir de buscar y explorar la consciencia ',
                '<strong> Nivel 5: Cohesion Interna</strong> Despues de haber desarrollado una identidad individual, se buscan valores que envuelvan al grupo de manera colectiva ',
                '<strong> Nivel 6: Contribución</strong> Aca se focalizan los aportes individuales, de manera que sean utiles para el colectivo y dejen una "huella", un legado ',
                '<strong> Nivel 7: Servicio</strong> Complementa el Nivel 5 de Maslow como los anteriores, aca se conecta con un proposito mayor, el porque de nuestra existencia ',
            ]),
        new Item('cerebroTriurno',
            [
                '- El cerebro Triurno responde a una clasificación basada en la evolución del ser humano como especie ',
                '- Para un enfoque practico y con una mirada educativa, se pueden detallar 3 grandes funcionalidades del cerebro ',
                '',
                '<strong>Cerebro Reptiliano:</strong> Localizado en la parte inferior y trasera del craneo, la más antigua y primitiva ',
                ' - encargada de las funciones basicas de supervivencia, es pura impulsividad e instinto de conservación, un area con muy pocos cambios ',
                '<strong>Sistema Limbico:</strong> Parte exclusiva de los mamiferos, ubicado en la parte central y contiene el hipocampo ',
                ' - centrado en la memoria y la orientación, además de la amigdala, encargada de controlar las emociones y de repetir/no repetir patrones de conducta ',
                '<strong>Neocortex:</strong> Es la base fundamental para el raciocinio, con funciones cognitivas superiores como, ',
                ' - el pensamiento abstracto, el lenguaje, la planificación, reconocimiento de patrones, etc... ',
                '',
                '- Sabiendo esto, es posible mejorar los metodos de educación y aprendizaje enfocandose en diferentes grupos de edad, ',
                ' - ya que entre más avanzado el Neocortex, algo que se da cerca de los 20 años, hay cosas que no se podran realizar ',
                '- Para otras areas como el Marketing y los negocios, no solo se debe apelar al intelecto, tambien al lado emocional ',
                ' - de manera que la atención se centre en los aspectos que queremos estimular para vender nuestros productos, ',
            ]),
        new Item('elementValues',
            [
                '- Es un desglose de la matriz de Maslow, donde cada escalafon se puede dividir en más necesidades, con diferentes perpectivas ',
                '',
                '<strong>Impacto Social</strong>              Autotranscendencia ',
                '',
                '<strong>Cambio de vida</strong>           Afiliación y pertenencia ',
                '                       Proporciona Esperanza, Motivación',
                '                     Autorrealización, Reliquias familiares',
                '',
                '<strong>Emocional</strong>                 Diversion & entretenimiento',
                '                         Bienestar, Valor terapeutico',
                '                       Proporciona recompensas, Atractivo',
                '                    Reductores de ansiedad, Proporciona acceso',
                '                   Nostalgia, Diseño y estetica, Valor insignia',
                '',
                '<strong>Funcional</strong>             Ahorra tiempo, Reduce el esfuerzo ',
                '                 Simplifica, Informativo, Variedad, Reduce costos',
                '                 Hace dinero, Reduce el riesgo, Organiza, Integra',
                '               Atractivo sensorial, Calidad, Evita molestias, Conecta',
                '',
                'Para una descripción más detallada y ejemplos de la vida real, puedes ir a la fuente original de <em>Bain & Company</em>'
            ]),
        new Item('multi&omniCanal',
            [
                '- En una solución hacia los clientes multicanal, el cliente se enfrenta a una experiencia de compra fragmentada, ',
                ' - con diversas fuentes de interrupciones o cortes, cuando se pasa de un canal a otro ',
                '',
                '- Por otra parte la onmicanalidad representa una experiencia diferente, donde hay naturalidad para pasar de un canal a otro, ',
                ' - sin importar el momento o el lugar ',
                '',
                '- La omnicanalidad representa un desafio extra a nivel de tecnologias además del compromiso de todos los empleados ',
                ' - independientemente del nivel en que se encuentren ',
            ]),
        new Item('buyerPersona',
            [
                '- Un Buyer Persona, es la definición para todo negocio de su cliente ideal, un concepto que siempre esta presente en el marketing ',
                '- Es una descripción abstracta de un consumidor ideal, basado en investigaciones de mercado, competidores, y perfiles de clientes ',
                '',
                '<strong>Este es importante debido a que es una forma de saber:</strong>',
                '- Saber hacia que ambito orientar el desarrollo del producto         - Captar nuevos clientes y retener los actuales',
                '- Que tipo de contenido crear y como comunicarlo hacia los clientes  - El servicio al cliente puede mejorar su trabajo ',
                '- Como comunicarse con clientes potenciales                          - Mejorar las estrategias de marketink sabiendo a que publico se deben enfocar',
                '',
                '<strong>Un Buyer Persona puede ayudar a tomar decisiones de marketing al:</strong>',
                '- Tener una mejor segmentación de los clientes y crear mensajes más relevantes  - Identificar nuevos clientes potenciales ',
                '- Crear una experiencia de marca personalizada, con mensajes especificos        - Asegurarse de satisfacer las necesidades del consumidor ',
                '',
                '<strong>¿ Como crear una plantilla ? </strong>',
                '- Demografia: Edad, Genero, Ingresos, Ubicación, Estado familiar, Nivel de educación  - Proceso de compra',
                '- Estado profesional: Cargo, Nivel                                                    - Influencias y fuentes de información',
                '- Psicografia: Metas profesionales, Creencias y valores                               - Puntos debiles y retos ',
                '',
                '<strong>Recopilación de datos:</strong>',
                '- Realizar entrevistas a los clientes             - Realiza estudios de mercado',
                '- Información de analitica y datos de la empresa  - Consultar al equipo de ventas',
            ]),
        new Item(Keys.NEURO_MARKETING_WHAT_IS,
            [
                '- En pocas palabras es la neuro ciencia, aplicada al Marketing, y busca comprender los procesos de compra y el comportamiento con las marcas, ',
                ' - a partir de la actividad neuronal; esto como complemento de otras estategias más tradicionales como los Focus Group y las encuestas ',
                '- Para el cerebro no hay secretos, y aun menos para el inconsciente, se calcula que cerca del 95% ',
                ' - de las decisiones de compra son tomadas por este en alrededor de 2.5 segundos, por lo que es una mala idea pensar que comprar es 100% racional ',
                '',
                '<strong>Elementos a tener en cuenta</strong>',
                '<strong>- La mirada:</strong> La eficacia del contacto visual no siempre es acertada, aveces es mejor centrar las personas hacia un punto de interes ',
                '<strong>- Colores:</strong> Los colores estan directamente asociados a diferentes emociones, usar colores opuestos al objetivo de tu campaña puede arruinarla ',
                '<strong>- Velocidad:</strong> El sentimiento de velocidad/agilidad, atrae más personas, que la estabilidad y la seguridad ',
                '<strong>- Contar Historias:</strong> Tener un contexto en el que se apoye una buena historia, puede generar un mayor compromiso ',
                '<strong>- Los precios:</strong> Los precios <strong>$9.99</strong> No siempre es mejor que <strong>$10</strong>, hay una gran diferencia entre usar un numero redondo y uno compuesto ',
                ' - el primero es util cuando se deben tomar decisiones logicas, el segundo es ideal para decisiones emocionales, su uso dependera del enfoque a usar ',
                '<strong>- Titulos:</strong> Una de las primeras cosas que todo expectador observa, por lo que tener ligeras alteraciones ayuda a despertar la atención ',
                '<strong>- El Pago:</strong> Usar la palabra <em>Compra</em> puede crear ansiedad debido a la transacción economica, por lo que se usan frases y sinonimos ',
                '',
                '<strong>Tecnicas a tener en cuenta</strong>',
                '<strong>- Utiliza la psicologia de los colores</strong> Tu paleta de colores puede jugar en contra o a favor en la aceptación de la marca ',
                '<strong>- Explora gatillos mentales</strong> Que son factores que nos llevan a tomar decisiones de forma automatica, como: <em>Escasez, Urgencia, Exclusividad</em>',
                '<strong>- Pruebas A/B:</strong> Para saber si los conceptos escogidos son los idoneos, se pueden hacer diferentes versiones y escoger la que más aceptada ',
                '<strong>- Anclaje de Precios:</strong> Expresiones como <em>"2 por 1"</em> y <em>"5 por 3"</em> pueden ser atrayantes y hacen creer que hay un beneficio economico ',
                '<strong>- Repite ideas y conceptos estrategicamente</strong> "La repetición es la madre de la retención", Esto hace los mensajes más poderosos y persuasivos ',
                '<strong>- El diseño:</strong> Todo diseño que involucre a tu empresa, debe ser impecable y tener una razon de ser, acorde a tu negocio ',
                '<strong>- Ofrece pocas opciones de elección:</strong> No solo es saber que hacer, tambien es que evitar, por eso se dice que <em>"menos es más"</em>',
            ]),
        new Item('semanticaPragmatica',
            [
                '<strong>Semiosis:</strong> Se puede entender como el proceso o influencia, que suponga una colaboración entre 3 partes, como puede ser, ',
                ' - un signo, su objeto y el interprete, ampliando el concepto a algo mas que simples sujetos humanos, de ahi que se puedan distinguir 3 dimensiones: ',
                '',
                '<strong>Dimensión Sintactica:</strong> <em>Es el estudio de las relaciones de los signos entre si</em>, Asi el orden de los signos incide, en el proceso de interpretación ',
                ' - por lo que al elaborar cualquier mensaje, permite inferir que solo su orden lograria o afectaria la interpretación ',
                '',
                '<strong>Dimensión Semantica:</strong> <em>Es el estudio de los signos y sus posibles denotaciones</em>, Asi se diferencia de la sintaxis ya que aca se determina, ',
                ' - en que condiciones un signo es aplicable a algun objeto o situación, referenciando al significado de los signos ordenados de manera especifica ',
                '',
                '<strong>Dimesión Pragmatica:</strong> <em>Es la relación de los signos con sus interpretes</em>, Esto supone una complejidad extra y que es relativa, ',
                ' - para cada emisor y su respectivo interprete, ya que no necesariamente todo mensaje tenga el mismo significado, para ambas partes ',
            ]),
        new Item('pnl',
            [
                '- Son una series de estrategias que se centra en identificar y usar modelos de pensamiento que influyan sobre una persona, para resolver problemas ',
                '',
                '<strong>Principios:</strong>',
                '<strong>- El mapa interior es unico:</strong> El mundo que rodea a cada persona, es unico, y se contruye a traves de la propia experiencia ',
                '<strong>- Entre mas caminos, mejor:</strong> Entre mas completo sea el mapa, mas grande seran las posibilidades, de resolver los problemas ',
                '<strong>- Cada comportamiento tiene una intención positiva:</strong> Todo comportamiento intrinsecamente se hace por una buena razon, por lo que, ',
                '  - malas practicas se deben redirigir hacia un patron de conducta mas adaptativo y adecuado para la persona ',
                '<strong>- La estructura de la experiencia:</strong> Toda experiencia tiene ciertos elementos que pueden cambiar su significado y su efecto ',
                '<strong>- Todo problema tiene solución:</strong> Aunque suene utopico, esto dependera de la situación y del mapa de la persona ',
                '<strong>- Todo el mundo tiene la fuerza necesaria:</strong> Cada persona posee la fuerza necesaria para conseguir lo que se propone ',
                '<strong>- Mente y cuerpo son 2 caras de la misma moneda:</strong> Las emociones afectan el cuerpo y las enfermedades fisicas afectan a la mente ',
                '<strong>- La comunicación pueder sesgarse:</strong> Por eso es necesario establecer pautas claras entre ambas partes ',
                '<strong>- Todo fracaso es una oportunidad:</strong> Estos deben verse como medidas que permiten la auto superación ',
                '<strong>- Si algo no funciona, probar de otra manera:</strong> Si algo no funciona pero siempre intentas lo mismo, no esperes resultados diferentes ',
            ]),
        new Item('jobsToBeDone',
            [
                '- Es una metodologia desarrollada para conocer mejor a tu grupo de consumidores',
                '- Las personas no suelen comprar ropar para vestirse, al menos no exclusivamente por esta razon, pueden buscar autoestima, estatus, comodidad, etc.. ',
                '- Entender estas motivaciones es una tarea importante del marketing, para contextualizar las acciones y definir comportamientos del mercado ',
                '- El punto de partida es identificar que es lo que el consumidor quiere resolver en su vida, y a partir de ahi como puedes ayudarlo a resolverlo ',
                '- Con este cambio de perspectiva se busca que el marketing sea más eficiente y que la innovación sea más previsible y rentable ',
                '- Aca es importante enfocar lo que el cliente quiere resolver y no lo que el cliente quiere comprar',
                '- Muchas de las razones suelen tener una dimensión funcional, social o emocional, y tener un mercado el cual puede ser mejor explotado ',
                '- Para esto la <em>segmetación</em>, <em>Buyer persona</em> y <em>Big data</em> suelen ser herramientas utiles',
            ])
    ];

export const BUENAS_PRACTICAS =
    [
        new Item('practicas1',
            [
                '- Definir el alcance y los requisitos, estableciendo limites acerca del trabajo a realizar con las partes involucradas',
                '- Dividir el desarrollo en fases o entregables que sean factibles, asi se pueden tener avances tangibles con su retroalimentación',
                '- Elegir el mejor <em>IDE</em> de acuerdo a los conocimientos y las necesidades, ya que esta herramienta nos ayuda a ser productivos',
                '- Reutiliza código(<em>DRY</em>) y comentalo cuando sea necesario, pero no hay mejor codigo que aquel que esta autocomentado',
                '- Documenta lo que haz hecho, asi es más facil integrar personal y sera util para futuros desarrollos ',
                '- Parte esencial de la codificación es realizar testing, principalmente para tener una red de seguridad, frente a los cambios',
                '- Estandariza reglas de desarrollo, asi se define la forma de trabajar para el grupo y se genera un codigo más mantenible y homogeneo',
                '- Optimiza recursos, no todo programa requiere grandes capacidades de procesamiento; No reinventes la rueda, pocas veces es necesario'
            ]),
        new Item('practicas2',
            [
                '- Presencia activa de los clientes en el desarollo, ya que eso son la fuente de conocimiento primordial, del negocio y sus necesidades',
                '- Definir los requerimientos de mano con el cliente, asi se pueden manejar estimaciones y priorizarlos, mediante metodologias agiles ',
                '- Adaptar el lenguaje de acuerdo a los tipos de clientes, para evitar no comunicar informacion importante, o hacerla inentendible ',
                '- Nunca dejar funciones al azar, que las pruebas demuestren su funcionamiento, y asi reducir problemas de retrocompatibilidad'
            ]),
        new Item('practicas3',
            [
                '- Escoger un ciclo de vida adecuado segun cada desarrollo, además del personal humano con las destrezas y experiencia relevantes',
                '- Estimar y presupuestar razonablemente, pero esto es más facil decirlo que hacerlo, pero se puede intentar con tecnicas agiles ',
                '- Control de calidad y revisiones de código periodicas, además de manejar del control de versiones, en caso de necesitar una reversión',
                '- Planificar como se realizara el matenimiento, los despliegues y el soporte tecnico, para que estos procesos sean conocidos y seguidos',
            ]),
        // new Item('practicas4',
        //     [
        //         '- Usar tecnologias y frameworks consolidados',
        //         '- Promover que el uso de la aplicación sea intuitivo y accesible ',
        //         '- Distribución de tareas, no hay equipos de un solo hombre',
        //     ]),
        new Item('demeter',
            [
                '- Es una buena practica en <strong>POO</strong> enfocada en reducir el acoplamiento entre clases ',
                '- El encadenamiento de muchos metodos puede significar un alto acoplamiento, conllevando a un problema de mantenimiento',
                '- Entre más grande sea una pila de llamadas, sera más propensa a futuras refactorizaciones ',
                '- Algunas desventajas de esta ley, son que se debe abstraer una solución y su implementación puede conllevar perdidas de rendimiento',
                '- No aceptar caramelos de extraños, ó no hables con extraños, son 2 formas de resumir este concepto ',
            ]),
        new Item(Keys.BUENAS_PRACTICAS_COMPLEJIDAD,
            [
                '- Es una metrica del software que proporciona una medida cuantitativa de la complejidad logica del programa ',
                '- Son los diferentes caminos que puede seguir una aplicación desde la entrada hasta la salida, ',
                ' - teniendo en cuenta condiciones, sentencias de control, parametros, funciones y atributos ',
                '',
                '- Lo ideal es tener la menor complejidad ciclomatica posible ya que: ',
                ' - Facilita el la modificación y mantenimiento del codigo ',
                ' - Simplifica el entendimiento y posibles refactorizaciones ',
                ' - La escabilidad del proyecto se facilita, al tener elementos más simples y menos propensos a errores ',
                ' - Se reducen los tests necesarios para obtener la mayor cobertura posible ',
                '',
                '- Para reducirla se pueden aplicar los siguientes concejos: ',
                ' - No abusar de la identación ',
                ' - Aplicar el Principio de Responsabilidad Unica(<strong>SRP</strong>), además de los otros principios de <strong>SOLID</strong>',
                ' - Evitar las sentencias switch-case, este tipo de sentencia atentan contra <strong>SRP</strong> y el princio de abierto-cerrado',
                ' - Metodos pequeños para funcionalidades más desacopladas ',
                ' - Evitar sentencias y parametros innecesarios, ya que esto es un indicativo de que hay multiples opciones, violando <strong>SRP</strong>',
            ]),
        new Item(Keys.BUENAS_PRACTICAS_LOGGING,
            [
                '<em>“Depurar es como ser el detective de una película policial en la que también eres el asesino.”</em> <strong>Filipe Fortes</strong>',
                '',
                '- Depurar es recomendable cuando la pila de llamadas es demasiado extensa y compleja',
                '- Registrar es util cuando la aplicación ó funcionalidad es pequeña y de baja complejidad ',
                '- Con el auge de la nube y los sistemas distribuidos, esto ha hecho que la observavilidad sea aun más importante hoy en dia ',
                '- Esta elección tambien depende de la comodidad de cada programador y de su eficiencia con cada herramienta ',
            ]),
        new Item(Keys.BUENAS_PRACTICAS_DEBUGGING,
            [
                '- En 1940 la almirante Grace Hopper, que tambien escribio el primer compilador que existio, descubrio una polilla un <strong>(bug)</strong> ',
                ' - atrapada dentro de un rele de una computadora que se estaba desarrollando, como la causante de la falla del sistema ',
                '- Desde entonces se suele decir que se esta <em>depurando</em> (debugging) para indicar una busqueda de errores y/o fallos ',
                '- Los errores en la programación son comunes al ser una actividad tan conceptual y abstracta, en la cual se puede perder el foco ',
                '',
                '<strong>Preste atención a los mensajes de error:</strong> Si el codigo falla, casi todos los lenguajes son capaces de mostrar el error y su causa, ',
                ' - algunos con más exactitud que otros, entender el error es la base para encontrar una solución ',
                '',
                '<strong>Buscar en Internet:</strong> Si no conoce el error, o no sabe el porque de este, es probable que en internet ya exista una explicación, ',
                ' - del porque sucede, acompañado de posibles soluciones, y posiblemente en contextos similares ',
                '- En las comunidades existentes probablemente existan personas a la cuales ya les ha sucedido el mismo problema y hayan encontrado alguna solución ',
                '',
                '<strong>Usar fuentes confiables:</strong> Siempre es buena idea leer la documentación oficial para entender la raiz del problema, ',
                ' - tambien saber que todas las soluciones no son optimas, ya que pueden estar desactualizadas ó no funcionarian en todos los escenarios ',
                '',
                '<strong>Explica tu logica:</strong> Existe la posibilidad de que se haya malinterpretado la información ó se esten haciendo suposiciones erroneas, ',
                ' - por lo que revisar tu codigo con un pato de goma ó con un compañero explicandoselo, se pueden comprender cosas que antes no ',
                '',
                '<strong>Reduzca las posiblidades:</strong> Si un codigo funciona de cierta manera, deberiamos procurar que siga funcionando asi, por ejemplo ',
                ' - si una función recibe 3 parametros, deberiamos pasarle 3 parametros, y no 2, estas "pequeñeces" pueden ahorrar un gran tiempo despues ',
                '',
                '<strong>Tomar un descanso:</strong> Cuando los bugs son más grandes y complejos es posible que su resolución conlleve mucho tiempo, por lo que ',
                ' - en algun momento de frustación optemos por soluciones de fuerza bruta, en este caso lo mejor es tomarnos un descanso y hacer otra cosa ',
                '',
                '<strong>Buscar ayuda:</strong> Cuando los problemas son demasiado grandes o complicados, preguntarle a alguien con más experiencia es de los más normal, ',
                ' - generalmente las personas de la comunidad estan dispuestas a ayudar a sus congeneres ',
                '',
                '<strong>Verificación:</strong> Una vez resuelto el bug, verifique que la solución si haya funcionado y que no ha introducido nuevos problemas, ',
                '- Tambien no esta de más aumentar la cobertura del codigo existente, agregando pruebas automatizadas y/o unitarias ',
                '',
                '<strong>Codigo limpio:</strong> Tenga en cuenta que los principios como SOLID, KISS, DRY y muchos más estan ahi para mejorar nuestro codigo, ',
                ' - tenerlos en cuenta a la hora de codificar nos ayuda a crear implementaciones más limpias y mantenibles ',
                '',
                '<strong>Herramientas:</strong> Estas ayudan a construir un mejor codigo, como analizadores de codigo estatico, los IDE, navegadores, etc.. ',
            ]),
        new Item(Keys.BUENAS_PRACTICAS_COMPLEJIDAD_COGNITIVA,
            [
                '- Es una metrica de software complementaria a la complejidad ciclomatica ',
                '- Esta metrica trata sobre que tan dificil es de entender un fragmento de codigo ',
                '- La complejidad ciclomatica esta enfocada a su eficacia en la ejecución, Mientras que esta se enfoca en la mantenibilidad',
                '',
                '- Esta metrica aumenta de acuerdo a ciertas condiciones ',
                ' - Anidamiento',
                ' - Condicionales',
                ' - try/catch y retrasmision de excepciones',
                ' - Estructuras switch-case ',
                ' - sequencias largas de operadores logicos ',
                ' - recursividad ',
                ' - ciclos',
                '',
                '- Existen casos donde la complejidad ciclomatica sea igual en 2 algoritmos, pero la cognitiva no, por eso es importante analizar ambas ',
                '- Un codigo con una alta complejidad cognitiva es dificil de mantener y de entender, por lo que siempre se busca simplificarla, ',
                ' - sin cambiar su comportamiento, para que sea más facil de comprender y de modificar ',
            ]),
        new Item(Keys.BUENAS_PRACTICAS_COMPLEJIDAD_ALGORITMICA,
            [
                '- Un algoritmo es una manera de hallar un dato desconocido, o una secuencia de pasos para obtener un resultado ',
                '- Los problemas pueden ser resueltos de diversas maneras, sin embargo no todas son optimas o viables ',
                '- Esto nos permite medir un algoritmo de manera teorica de 2 maneras: ',
                '- <strong>Complejidad temporal</strong>(tiempo de ejecución) y <strong>Complejidad espacial</strong>(recursos/memoria)',
                '- Tambien se suelen describir mediante el tamaño del conjunto de datos <em>n</em> y el crecimiento de las instrucciones para cumplir el objetivo ',
                '- Para medir la complejidad cada instrucción suele tener un peso determinado, ',
                ' - despues de sumarlas y tener el mayor termino, este es el indicativo de la complejidad ',
                '',
                '- Grados de complejidad comunes: ',
                '- O(1)       -> constante         - O(n<sup>2</sup>) -> cuadratico  ',
                '- O(log n)   -> logaritmico       - O(n<sup>3</sup>) -> cubico      ',
                '- O(n)       -> lineal            - O(n<sup>a</sup>) -> polinomico  ',
                '- O(n log n) -> cuasi-lineal      - O(2<sup>n</sup>) -> exponencial ',
                '- O(n!)      -> factorial                                           ',
                '',
                '- Sabiendo analizar estas caracteristicas, se puede suponer el costo de los algoritmos, e intentar optimizarlos ',
                '- Si la optimización no es prioridad algunos de estos conceptos pierden relevancia, sin embargo',
                ' - conocerlos permite generar mejores soluciones, al tener más perspectivas a la hora de resolver un problema ',
            ]),
        new Item(Keys.BUENAS_PRACTICAS_NAMING_CONVENTION,
            [
                '- Cada lenguaje de programación tiene sus convenciones para nombrar metodos, clases, variables, constantes, etc... ',
                '- Se recomienda seguir estas convenciones para aumentar la legibilidad de nuestro codigo y facilitar el mantenimiento ',
                '',
                '<strong>camelCase:</strong> Se usan mayusculas para diferenciar una palabra de otra, generalmente usada para nombres de variables en diversos lenguajes ',
                '',
                '<strong>UpperCamelCase(PascalCase):</strong> La primera letra de las palabras es mayuscula, usado para nombrar clases y estructuras de datos: MiPaginaDeConceptos ',
                '',
                '<strong>lowerCamelCase:</strong> Igual, pero con la diferencia de que la primera letra es minuscula, usado para nombrar variables y metodos: miPaginaDeConceptos ',
                '',
                '<strong>snake_case:</strong> Las palabras estan separadas por guion bajo, usado para nombras columnas en Bases de datos: mi_pagina_de_conceptos ',
                '',
                '<strong>SCREAMING_SNAKE_CASE:</strong> Igual, pero todo es en mayusculas, usado para nombre de constantes: MI_PAGINA_DE_CONCEPTOS ',
                '',
                '<strong>lowercase:</strong> Las palabras se escriben en minusculas sin ninguna clase de separación: mipaginadeconceptos ',
                '',
                '<strong>uppercase:</strong> Las palabras se escriben en mayusculas sin ninguna clase de separación: MIPAGINADECONCEPTOS ',
                '',
                '<strong>camel_Snake_Case:</strong> La primera palabra es con minuscula inicial y las demás en Mayuscula, la separación es con guion bajo: mi_Pagina_De_Conceptos ',
                '',
                '<strong>kebab-case:</strong> Como snake case pero con guion medio, usado para nombramientos REST o clases en CSS: mi-pagina-de-conceptos ',
                '',
                '<strong>Train-Case:</strong> Variedad de kebab case pero mayuscula inicial, usado en encabezados HTTP: Mi-Pagina-De-Conceptos ',
                '',
                '<strong>SCREAMING-KEBAB-CASE:</strong> Variedad de kebab case pero con mayusculas, usado para macros: MI-PAGINA-DE-CONCEPTOS ',
                '',
                '<strong>Notacion hungara:</strong> Se usa para crear nombres de variables que indiquen su tipo, usado en lenguajes no tipados: nContador ó bActivo ',
            ]),
        new Item('estatico',
            [
                '- El analisis de codigo estatico permite corregir vulnerabilidades, errores y bugs, que no se ven y pueden conllevar problemas',
                '',
                '<strong>Pros</strong>',
                '- Ayuda a la reducción de la deuda tecnica y detectar code smells ',
                '- Fomenta el uso de buenas practicas y la mejora continua ',
                '',
                '<strong>Contras</strong>',
                '- Se debe hacer con herramientas especializadas, y consume tiempo de desarrollo ',
                '- No hay estandares concretos, cada lenguaje tiene especificaciones diferentes entre si ',
                '',
                '<strong>Algunas tecnicas de analisis</strong>',
                '<strong>- Analisis grep:</strong> Analiza el codigo con expresiones regulares para encontrar: ',
                ' - Contraseñas expuestas, metodos mal nombrados, variables incompresibles, etc... ',
                ' - Errores de identación cerrar y abrir llaves correctamente, para evitar problemas al ejecutar ',
                '<strong>- DataFlow:</strong> Se analiza desde un punto de partida hasta un punto final ',
                '<strong>- AliasAnalisis:</strong> Analiza los punteros, para los lenguajes que funcionan con estos ',
                '',
                '<strong>Posibles defectos</strong>',
                '<strong>- Bugs:</strong> Es cuando un programa difiere de lo que debe hacer, esto es más subjetivo que objetivo, ',
                ' - por lo que son errores que son más faciles de encontrar por humanos, mediante depuracion, testing, etc... ',
                '<strong>- Violación:</strong> Son errores de codificación entre lo que se pueda considerar "ideal", ',
                ' - en el marco del lenguaje y lo realizado por el programador ',
                '<strong>- Vulnerabilidad:</strong> Son comportamientos errores que a la larga pueden llevar a posibles problemas, ',
                ' - de rendimiento ó de seguridad, más no son considerados problemas graves ',
            ]),
        new Item(Keys.BUENAS_PRACTICAS_GUARD_CLAUSES,
            [
                '- La identación puede ser una aliada a la hora de leer el codigo, pero demasiada puede convertirse en un obstaculo ',
                '- Esto no solo complica el entendimiento, si no que puede indicar un alto grado de anidación y complejidad ',
                '- Esta practica lo que nos recomienda es comprobar sistematicamente cada una de las condiciones que se deben cumplir, ',
                ' - para continuar con el proceso, y si alguna es invalida, se retorna un valor o una excepción dado el caso ',
                '- Esto facilita seguir la pila de llamados y mejora el entendimiento al reducir el anidamiento y la identación ',
            ]),
        new Item('semanticConstructors',
            [
                '- Tambien conocidos como <em>named constructors</em> es un refactor para eliminar la complejidad de los constructores ',
                '- Evita que tengan responsabilidades extra, al requerir que conozcan los detalles de la implementación ',
                '- Encapsula la creación de objetos de modo que haya menos posibilidades de construir objetos invalidos y pueda ser bajo demanda',
                '- Evita tener constructores telescopicos, que basicamente son <em>n</em> combinaciones de constructores de acuerdo a las propiedades ',
                '- Son una manera de implementar sobrecarga de metodos(constructores) en lenguajes que no lo permiten ',
            ]),
        new Item(Keys.BUENAS_PRACTICAS_EXCEPTIONS,
            [
                '- No use solo excepciones genericas, especializar trae ventajas como un mejor manejo de los errores ',
                '- No abuse de las excepciones, lo ideal es solo crearlas para requisitos de negocios realmente importantes ',
                '- Registrar los errores es importante, pero no toda excepcion, debe estar acompañada de un log ',
                '- Diferenciar entre excepciones comprobadas y no comprobadas, ya que esto obliga a manejarlas en tiempo de compilacion o de ejecución ',
                '- Capturar las expresiones de manera que se silencien, asi no habra errores a la vista, e incrementara la dificultad al buscarlos ',
                '- Definir una jerarquia clara de las excepciones, quien debe capturarlas y quien puede lanzarlas ',
                '- Usar mensajes claros, que proporcionen información relevante del error, ayudando a encontrar potenciales problemas ',
                '- Cierre recursos y evite posible fugas de memoria, al tener acciones que hagan esto despues de manejar los errores ',
                '- Es importante saber retransmitir la información, de manera que no se pierda información de pila de errores ',
            ]),
        new Item(Keys.BUENAS_PRACTICAS_GOOD_HABITS,
            [
                '- Un desarrollador no solo codifica, un buen desarrollador tiene una gran cantidad de habilidades que van más alla de la codificación ',
                '- Los items acontinuación son una recopilación subjetiva y no son una guia en que confiar ciegamente',
                '',
                '<strong>Centrarse más alla del codigo:</strong> La codificación es para un desarrollador lo que un pincel para un pintor, ',
                ' - esta es la herramienta principal, pero un pincel no sabe lo que hace, toda linea de codigo y todo trazo de pintura ',
                ' - deben tener un significado, cuando se escribe codigo se busca resolver algun problema en un contexto dado, además ',
                ' - de que se debe tener un pensamiento critico y sistemico, de como afectara al sistema en general , como se mantendra, entre otras ',
                '',
                '<strong>Eficiencia:</strong> No es necesario que siempre se corra y se entregue antes de tiempo, tampoco de susbestimar las tareas, ',
                ' - se relaciona más a tener un progreso constante, y aunque encontremos errores que nos atasquen, los avances por pequeños que sean, ',
                ' - se pueden tomar como progreso, ya que de todos modos resolver problemas dificiles requiere tiempo ',
                '',
                '<strong>Curiosidad:</strong> Un buen desarrollador no solo es habil o inteligente, tambien es apasionado y busca mejores maneras, ',
                ' - experimenta con nuevas tecnologias, y se mantiene actualizado, en una profesión tan cambiante ',
                '',
                '<strong>Saber el porque:</strong> Las herramientas modernas y la necesidad de abstracciones de alto nivel, ha descentivado la curiosidad ',
                ' - de saber como funcionan las herramientas y sus bases sobre las cuales se erige la programación, ',
                ' - aunque tambien esta el punto de vista de que no es necesario ni obligatorio saberlo, para saber como usarlo, ',
                ' - pero este conocimiento extra puede ser util en el analisis del problema, su resolución',
                ' - y en la toma de decisiones, ya que se conoce mejor el panorama y hay más información para analizar ',
                '',
                '<strong>Pensamiento de sistemas:</strong> No solo se debe ver el panorama particular, tambien se debe comprender el rompecabezas completo, ',
                ' - todas las piezas estan unidas y pueden afectar a otras aunque no lo parezca, o sea de manera imperceptible ',
                '',
                '<strong>Desconectarse del mundo digital:</strong> Una larga exposición/uso de las pantallas puede conllevar a problemas fisicos y mentales, ',
                ' - por lo que tambien es parte importante del trabajo, saber cuando se debe tomar un descanso ',
                '',
                '<strong>El arte de Estimar:</strong> No es necesario saber valores exactos ni de tener todo estrictamente medido, pero si es importante ',
                ' - tener herramientas y conocimentos para hacernos una idea y generar aproximaciones concordantes, aunque este proceso parezca un arte ',
                '',
                '<strong>Conocimiento flexible:</strong> No solo basta con entender y aprender una gran multitud de temas, se trata de interiorizarlos de manera que',
                ' - el concepto base se pueda aplicar y/o adaptar en otros ambitos y situaciones, asi sabemos que se ha dominado el conocimiento',
                '',
                '<strong>Hacer faciles las cosas dificiles:</strong> Una gran forma de mostrar dominio del conocimiento es de manera que conocimientos complejos, ',
                ' - puedan ser comprendidos por cualquiera',
                '',
                '<strong>Pensar a largo plazo:</strong> Cada vez que se hace algo, se debe hacer para que sea funcional en el corto plazo e ideal a largo plazo, ',
                ' - engendrar soluciones faciles y descuidadas puede ser un exito en el corto plazo, pero sera una bola de nieve más adelante ',
                ' - por lo que se trata de mantener un equilibrio, y realizar las cosas bien sin perder el horizonte',
            ]),
        new Item(Keys.BUENAS_PRACTICAS_FUNCTIONS,
            [
                '- <strong>Clean Code</strong> de <em>Robert C Martin</em> se enfoca en como escribir codigo limpio y con buenas practicas, ',
                ' - por eso existe todo un apartado dedicado a las funciones, a continuación es un compendio de los puntos principales ',
                '',
                '<strong>- Funciones pequeñas:</strong> Asi son faciles de entender y de mantener, cumpliendo casi siempre el principio de Single Responsability <strong>(SOLID)</strong> ',
                '<strong>- Solo una cosa:</strong> Realizar una sola accion permite que las funciones cumplan el principio <strong>KISS</strong> y reduzcan su complejidad ',
                '<strong>- Nombres descriptivos:</strong> Debe reflejar el proposito, pero si es demasido extenso, probablemente la función tiene demasiada responsabilidad ',
                '<strong>- Argumentos:</strong> Se deben minimizar la cantidad en lo posible',
                ' 0 - Ideal           (niladic) ',
                ' 1 - Aceptable       (monadic) ',
                ' 2 - Aceptable       (dyadic)  ',
                ' 3 - Evitarlas       (triadic) ',
                '+4 - No recomendable (polyadic)',
                '',
                '<strong>- Comand-Query Separatión:</strong> Como en <strong>CQRS</strong>, una función debe consultar información ó cambiar estados, mezclar ambas puede llevar a confusiones',
                '<strong>- Preferir Excepciones, sobre codigos de error:</strong> Comprobar estos codigos suele ocultar las causas de los errores, además de que no ayudan ',
                ' - a una clara separación entre la logica de negocio y el manejo de errores, además de ser una solución proveida por el lenguaje ',
                '<strong>- Principio DRY:</strong> No te repitas, la duplicación suele ser malvada, genera inconsistencias y aumenta el riesgo de errores ',
            ]),
        new Item(Keys.BUENAS_PRACTICAS_AGGREGATES,
            [
                '<strong>¿ Qué es un Aggregate ?</strong> Es un grupo de entidades relacionadas y Value Objects que se tratan como una unidad para el modelo de dominio ',
                '- Encapsulan elementos estrechamente vinculados que deben mantenerse juntos para no perder la consistencia ',
                '- Definen limites claros dentro del modelo de dominio y sus interacciones con el mundo exterior ',
                '- Aseguran que las reglas de negocio se cumplan internamente y funcionan como unico punto de entrada para realizarlas ',
                '- Esto evita que la logica se disperse, sea dificil de mantener y evitan la construcción de sistemas fragiles o con malas asociaciones ',
                '',
                '<strong>¿ Qué es un Aggregate Root ?</strong> Es la entidad principal dentro del agregado, que se encarga de mantener la integridad propia y del conjunto ',
                '- Es el unico punto de entrada por el cual todas las operaciones deben pasar y ser validadas para respetar las reglas de negocio ',
                '- Gestionan el almacenamiento y la recuperación de los datos como un todo, evitando interacciones directas con otras entidades ',
                '- Los agregados definen limites, mientras que los aggregate root los refuerzan asegurando una mejor consistencia y cohesión ',
            ]),
        new Item(Keys.BUENAS_PRACTICAS_INDIRECTION,
            [
                '- Es una tecnica sencilla para desacoplar componentes mediante la introducción de una capa entre 2 unidades sin afectarlas directamente ',
                '',
                '- <em>Todos los problemas informáticos pueden resolverse mediante otro nivel de indirección.</em> <strong>David Wheeler</strong>',
                '- <em>La mayoría de los problemas de rendimiento en informática se pueden resolver eliminando una capa de indirección.</em> <strong>Desconocido</strong>',
                '',
                '<strong>Extensibilidad:</strong> Facilita la extensión de comportamientos que son transversales y no deberian afectar la logica de negocio ',
                '- Esto agrega comportamientos que no necesariamente pertenecen al cliente o al objetivo, generando comportamientos reutilizables ',
                '- El Patron Proxy hace esto mediante una capa previa de logica y el Patron Decorator aumenta la funcionalidad del objetivo sin contaminarlo ',
                '',
                '<strong>Contratos:</strong> Cuando una interfaz no puede ser modificada para satisfacer las necesidades del cliente ',
                '- El Patron Adapter modifica la interfaz de destino para que coincida con la esperada por el cliente ',
                '- El Patron Mediador modifica el origen y el destino de manera que tengan una comunicación bidireccional a traves del mediador ',
                '',
                '<strong>Encapsulación:</strong> De manera que el diseño oculte los detalles hacia los clientes del <em>como</em> y se preocupen solo del <em>que</em> ',
                '- Independencia tecnologica, de manera que el sistema sea flexible y evolucionable, generando un mayor retorno de la inversión ',
                '- Encapsulación de la complejidad, cuando suele haber tanta complejidad que no quiere visualizarse o no debe visualizarse ',
                '- El Patron Facade oculta la complejidad de uso, exponiendo una forma de realizar las acciones más abstraida y simple ',
                '- Una API Gateway protege al cliente de la mayoria de cambios internos, mientras que los sistemas pueden evolucionar internamente ',
                '',
                '- La indirección es una forma elegante de "envolver" casi cualquier cosa, ejemplos: ',
                '&bull; Un balanceador de carga actua como una capa indirección entre un consumidor y un servidor web, permitiendo la escalabilidad ',
                '&bull; La <strong>JVM</strong> es un empaquetador de codigo independiente de la plataforma y que funciona de acuerdo al Sistema Operativo adyacente ',
                '&bull; Las colas crean una barrera entre 2 sistemas, especialmente util si los sistemas funcionan a diferentes velocidades ',
                '',
                '<strong>Rendimiento</strong>',
                '- Cualquier capa de indirección siempre conlleva una degradación del rendimiento, generalmente es leve e imperceptible ',
                '- En la Orientación a Objetos implica la creación adicional de objetos y un procesamiento adicional que suele ser despreciado ',
            ])
    ];

export const MALAS_PRACTICAS =
    [
        new Item(Keys.MALAS_PRACTICAS_CALLBACK_HELL,
            [
                '- Generalmente es un problema al hacer codigo con caracteristicas asincronas (generalmente javascript) ',
                '- Un <em>callback</em> son funciones de primera clase, diseñadas para pasarse como argumento a otra función y ejecutarse posteriormente ',
                '- El problema va más alla del simple asincronismo, cuando se incrementa la anidación y estos incluyen callbacks se dificulta el entendimiento ',
                '- Por lo que el orden en que se copia el codigo no necesariamente es en el que va a ser ejecutado',
                '- Cambiar el orden de las llamadas puede evitar el anidamiento innecesario',
                '- Usar el encadenamiento de Promesas ó el Async/Await, hara que el codigo se más entendible y que se comporte de manera más sincronica ',
            ]),
        new Item('contraCalidad',
            [
                '- Desconocimiento del negocio, clases mal diseñadas o condiciones sin sentido',
                '- Mala o nula formulación de requerimientos y requisitos ',
                '- Desconocimiento de las tecnologias que se usen, la experiencia de un desarrollador toma tiempo para conseguirse ',
                '- Malas estimaciones de los tiempos, obligando a mucho trabajo extra',
                '- No aplicar patrones y/o arquitecturas',
            ]),
        new Item('contraGestion',
            [
                '- Asignación erronea del personal en roles inadecuados o sin la experiencia necesaria ',
                '- Asumir información sin tener una confirmación previa',
                '- Empezar a planear sin tener todas las variables a tener en cuenta',
                '- No se debe abusar de la capacidad de multitarea del equipo',
                '- La falta de comunicación en el equipo puede conllevar al desastre',
                '- No poner limites es tan malo como ser inflexible, siempre hay un punto medio',
                '- Entregar productos incompletos, lo ideal seria pedir más tiempo o recursos',
                '- Asignación erronea del personal en roles inadecuados o sin la experiencia necesaria ',
                '- Exceso de control, cerrando el paso a nuevas iniciativas y causando descontento en el equipo'
            ]),
        new Item('contraAgilidad',
            [
                '- Usar practicas tecnicas o metodos sin los comportamientos de una cultura agil ',
                ' - no es realmente agilidad es solo algo cosmetico que enmascara otro modelo de desarrollo ',
                '',
                '<strong>Temor de compromiso:</strong> Los procesos de cambio son complejos, ',
                ' ya que estos retan las viejas costumbres, y funcionaron en los viejos tiempos, ',
                ' por eso se toman mejores practicas que no requieran poca adaptación ',
                '',
                '<strong>Falta de disciplina:</strong> La busqueda de la perfección es un camino sin fin, ',
                ' por eso es necesario experimentar y mantener constancia con las practicas que se realizen, ',
                '',
                '<strong>Persona con multiples roles:</strong> Cada rol tiene sus deberes y responsabilidades, ',
                ' romper estas barreras puede conllevar problemas en el personal y su productividad ',
                '',
                '<strong>Grupos de individuos:</strong> En un equipo cada integrante tiene sus actividades y responsabilidades ',
                ' definidas, que al final se suman para armar un todo, que puede resultar en un Frankenstein ',
                ' ,en un grupo todos los integrantes deben poder participar y llenar vacios de ser necesarios, ',
                ' de manera que no hayan silos de especialidades ',
                '',
                '<strong>Falta de auto organización:</strong> Los equipos agiles buscan ser autogestionados, ',
                ' por medio de una inteligencia colectiva, la colaboracion de los miembros y la experiencia compartida, ',
                ' sin necesidad de tener un gestor que este controlando las dinamicas del grupo',
                '',
                '<strong>Falta de formación:</strong> Tambien existe la posibilidad de que los antipatrones se den ',
                ' por simple desconocimiento, por lo que manejar espacios de capacitación siempre va a ser necesario ',
            ]),
        new Item('malasPracticasSCRUM',
            [
                '- SCRUM es una metodologia agil, que te da guias, pero no reglas, por lo que esta subjetividad puede llegar a crear problemas, ',
                ' - a la hora de que cada equipo interprete e implemente los ajustes al marco de trabajo base ',
                '',
                '<strong>Usarlo no significa ser agil</strong>, sin conocer el manifiesto agil o sus 12 principios, solo se estaria usando el <strong>como</strong> sin saber el <strong>porque</strong>',
                '',
                '<strong>En la planeación, el PO dice como hacer el trabajo al desarrollador</strong>',
                ' - Esto atento en contra de la autonomia el compromiso y la autoorganización que los desarrolladores tienen',
                '',
                '<strong>Usar el <em>Daily</em> como reunión de seguimiento</strong>',
                ' - Esta debe ser para la comunicación entre desarrolladores, el seguimiento debe ser una consecuencia del avance ',
                '',
                '<strong>Eventos incompletos</strong>',
                ' - Si un evento se realiza sin todos los roles que deben estar involucrados, es posible que otros eventos se entremezclen, ',
                '  - debido a la falta de información de los roles que se han ausentado ',
                '',
                '<strong>Eventos que perdieron el sentido </strong> ',
                ' - Cuando se pierde el sentido de eventos como las <em>Reviews</em> se conviertes en simples reuniones que solo consumen tiempo ',
                '',
                '<strong>Combinaciones de roles </strong> ',
                ' - Una persona no deberia fungir 2 posiciones, ya que además de tener más responsabilidades, desdibuja los roles y sus funciones ',
                '',
                '<strong>Sprints convertidos en Cronogramas</strong>',
                ' - La agilidad implica usar y medir el tiempo diferente, por lo que no se deben usar cronogramas apretados disfrazados de sprints',
                '',
                '<strong>SCRUM permite terminar antes</strong>',
                ' - Una falsa creencia, SCRUM permite fallar y evaluar de manera mas rapida, no terminar antes pero si corregir más rapido ',
                '',
                '<strong>Ampliar los Sprints</strong>, evita que se tenga constancia y puede arruinar las estadisticas del equipo ademas de futuras estimaciones ',
                '',
                '<strong>Dividir o priorizar mal las Historias de Usuario</strong>',
                ' - Esto puede desencadenar en una cascada agil, donde no se ven incrementos pequeños ni funcionales, solo partes terminadas e inconexas ',
            ]),
        new Item(Keys.MALAS_PRACTICAS_DEATH_BY_MICROSERVICES,
            [
                '- La complejidad excesiva no es sinonimo de buenos sistemas, y tener un sistema complejo, adaptado para crecer, pero que simplemente nunca crecera ',
                ' - es un desperdicio de tiempo y dinero, solo por estar al lado de las grandes compañias tecnologicas y sus practicas ',
                '',
                '- Los sistemas distribuidos eran uno de los ultimos recursos a usar, ya que son complejos y resuelven problemas igual de complejos ',
                '- Un monolito no es malo, mantienen una base solida y evitan una constelación de microservicios más paquidermica que un monolito bien mantenido ',
                '',
                '- Tambien esta la cuestión de si es necesario crecer mediante microservicios, la escalabilidad y el rendimiento son realmente un problema ? ',
                ' - esta interrogante es dificil de responder pero lo más seguro es guiarse de los principios, como <strong>KISS</strong>, entre otros, ',
                ' - si no es un problema, no necesita ser resuelto y menos aun desperdiciar recursos en un tal vez',
                '',
                '- La teoria dicta que equipos pequeños, pueden manejar microservicios pequeños, sin grandes problemas de versiones o compatibilidad ',
                '- Un monolito no sera una panacea, pero no agrega más problemas de los que ya existen, cosa que los microservicios pueden hacer con solo existir ',
                '',
                '- Un gran perdida y que poco se menciona con el uso de microservicios, es que se deja de aplicar <strong>DRY</strong>, ya que es preferible copiar y pegar, ',
                ' - lo que se necesite, y en caso de que sea aplique y se extraiga en una libreria en comun, esta introduce nuevos aspectos a tener en cuenta, ',
                ' - como el manejo de las versiones, manejo de los repositorios de codigo, hasta problemas de contexto y de alcance ',
                '',
                '- Tampoco se pueden ignorar las pruebas de integración, las unitarias puede que sigan funcionando con normalidad, pero la división y distribución ',
                ' - de los componentes, hace que probarlos sea un autentico calvario, por lo que para solventar este problema, se dice que un microservicio debe ',
                ' - ser <em>observable</em>, una manera más elegante de depurar, esto no cambia que es una forma reactiva para encontrar errores, en vez de proactiva ',
            ]),
        new Item(Keys.MALAS_PRACTICAS_ANTI_PATRONES_ARQUITECTURAS,
            [
                '- Por mejor pensada que este alguna arquitectura, siempre tendra algun defecto o problema conocido, no hay ninguna que sea perfecta ',
                '- Esto tambien depende del manejo, correctamente solo seran problemas de poco peso, ó de lo contrario seran problemas sistemicos ',
                '',
                '<strong>Multiinquilino</strong>',
                '<strong>- Fiesta de fantasmas:</strong> No separar adecuadamente los datos de inquilinos puede provocar fugas entre estos y violar leyes de protección de datos ',
                '<strong>- Mantenimiento Frankestein:</strong> Las personalizaciones puede hacer que el codigo base sea confuso y dificil de mantener, más si esta mal modularizado ',
                '',
                '<strong>Backend For Frontened(BFF)</strong>',
                '<strong>- The poltergeist payload:</strong> Sin optimizaciónes adecuadas, la recuperación de datos puede ser excesiva o insuficiente ',
                '<strong>- Duplicacion Is Evil:</strong> La logica de negocio se puede llegar a ver duplicada, en multiples fronts, y multiples servicios ',
                '',
                '<strong>Outbox pattern</strong>',
                '<strong>- Lost in phantom zone:</strong> Si la publicación de eventos falla, es posible que los mensajes se atasquen en la bandeja de salida ',
                '<strong>- Zombie messages:</strong> Sin mecanismos de deduplicación adecuados, los consumidores pueden procesar el mismo mensaje, multiples veces ',
                '',
                '<strong>CQRS</strong>',
                '<strong>- Eventual Terror:</strong> La consistencia eventual puede sorprender a los desarrolladores que no estan acostumbrados y conllevar a estados impredecibles ',
                '<strong>- The Two-Faced monster:</strong> Tener modelos separados para lectura y escritura, aumenta la complejidad y necesita mecanismos de sincronización ',
                '',
                '<strong>API Gateway</strong>',
                '<strong>- Bottleneck:</strong> Si no se escala u optimiza adecuadamente, la entrada del sistema se convertira en un cuello de botella ',
                '<strong>- The Hexed Transformation:</strong> Una dependencia excesiva de esta entrada para realizar transformaciones, puede conllevar a problemas monoliticos ',
                '',
                '<strong>Circuit Breaker</strong>',
                '<strong>- Premature Haunting:</strong> Umbrales mal configurados pueden hacer que el circuito se abre con mucha frecuencia, aun cuando el servicio esta funcionando ',
                '<strong>- Ghouls Delay:</strong> Si el intervalo de reinicio no se optimiza, puede provocar interrupciones prolongadas ',
                '<strong>- Eternal Nights Lock:</strong> En sistemas mal configurados, los circuitos pueden quedarse abiertos indefinidamente, ',
                ' - ya sea por fallas en el reinicio, o fallas continuas cuando intenta cerrarse, permaneciendo en un estado de falla permanente ',
            ]),
        new Item(Keys.MALAS_PRACTICAS_ANEMIC_DOMAIN,
            [
                '- Se refiere a un modelo de dominio que carece de detalles y profundidad, en el contexto de <em>DDD</em>',
                '- Este modelo no proporciona una comprensión suficiente del dominio, ni de los problemas que se pretenden resolver ',
                '- Esto hace dificil aplicar tecnicas propias de <strong>DDD</strong> como analisis de contexto, o la identificación de entidades ',
                '- Tambien limita la capacidad del modelo, para abordar temas complejos o tomar decisiones bien informadas',
                '- Un sintoma inequivoco es que aparenta ser real, tienen nombres de sustantivos asociados al dominio y con las relaciones indicadas',
                '- El problema surge cuando se observan sus comportamientos, de los cuales carecen o son bastante pobres ',
                '- En cambio La logica y la manipulación de los objetos, suele estar en los servicios, o capas superiores al dominio',
                '- El principal problema de este enfoque es que encurre en los costos de <em>DDD</em> sin aprovechar sus beneficios',
                '- Este antipatron suele ser comun, ya que hay tecnologias y frameworks que fomentan este enfoque',
            ]),
        new Item(Keys.MALAS_PRACTICAS_TRAIN_WECKS,
            [
                '- En la vida real un choque de trenes son acontecimientos nefastos, donde suelen resultar gente herida',
                '- Sin embargo no es raro que suceda en el desarrollo de software, cuando un metodo llama a otro y a otro, creando una cadena demasiado larga',
                '- <strong>Ejemplo:</strong><em> university().getFaculty().getDean().getName() </em>',
                '- Cosas como estas existen debido a problemas de fondo como una mala modularización ó una división ineficaz de responsabilidades ',
                '- Esto atenta contra los principios de POO ya que existe un acoplamiento indebido ó una envidia de caracteristicas, dependiendo del caso ',
                '- Tambien esta en contra de la <em>Ley de demeter</em> que consiste en no hablar con extraños, ni inmiscuirnos en sus responsabilidades',
                '- No es una excepción, pero tampoco esta mal visto, que este mismo encadenamiento de metodos se de, en flujos y/o operaciones con datos'
            ]),
    ];