import * as Keys from '../keys';
import { Item } from "../models";

export class Content7 {

    public temas: Item[] = [
        ...AGILES,
        ...WEB,
        ...UML,
        ...FRAMEWORKS,
        ...CONOCIMIENTOS_EMPIRICOS,
        ...PATRONES,
        ...NEURO_MARKETING,
    ];

}

export const AGILES =
    [
        new Item(Keys.AGILES_MOSCOW,
            [
                '- Es una tecnica para la priorización de requisitos y funciones para lograr un alcance especificado, ya sea en etapas iniciales o para un <em>MVP</em>',
                '',
                '<strong><em>M</em>ust Have</strong> (Debe tener):      Este requisito debe estar implementado si ó si, si no, el producto es un fracaso ',
                '<strong><em>S</em>hould have</strong> (Deberia tener): Requisito de alta prioridad que en la medida de lo posible deberia quedar en el producto final ',
                '<strong><em>C</em>ould have</strong> (Podria tener):   Caracteristica deseable, pero que no es necesaria y solo sera implementada si hay posibilidades ',
                '<strong><em>W</em>on´t have</strong> (No tendra):      Son requisitos que estan descartados por esta vez, pero seran incluidos a futuro ',
                '',
                '<strong>Pros:</strong> Tecnica simple de usar, al basarse en principios simples, además de la experiencia humana',
                '<strong>Contras:</strong> Si no hay liderazgo o experiencia previa, la subjetividad sera poco efectiva ',
            ]),
        new Item(Keys.AGILES_SCORING,
            [
                '- Permite determinar la prioridad de las funcionalidades, basandose en diferentes criterios como (valor para el negocio, riesgo, esfuerzo, etc...)',
                ' - cada elemento tambien constan con diferentes pesos, cada caracteristica de la Historia de Usuario tendra un valor ',
                '',
                '- Determinar el peso de las caracteristicas es más objetivo ya que se hace en base a una comparación, ',
                ' - donde previamente se ha tomado una HU como punto base y las demás se miden con esta base ',
                '',
                '- Esta es una herramienta de apoyo y no debe ser tomada como el ultimo criterio, ya que se debe seguir contando con todas las partes interesadas ',
                '',
                '- Todo esto siempre es con el objetivo de tomar decisiones informadas sobre que temas abordar primero y su respectivo <strong>Porque</strong> debidamente justificado ',
            ]),
        new Item(Keys.AGILES_MUDA,
            [
                '- El desperdicio en las empresas viene del termino japones <strong>MUDA</strong>, que es todo lo inutil, superfluo, despilfarro, inservible, ocioso ',
                '',
                '<strong>Sobreproducción:</strong> Producir más de lo demandado, esperando que el mercado lo necesite es una mala praxis, que despilfarra recursos de otras areas ',
                '<strong>Esperas:</strong> Son los famosos cuellos de botella, donde un proceso alenta a los demás, haciendo perder tiempo a todo el proceso ',
                '<strong>Transporte:</strong> Todo movimiento innecesario de elementos que no aporta valor debe ser minimizado ',
                '<strong>Sobre procesos:</strong> Son procesos que aunque pueden ser utiles, no van a volver ser usados, por eso su realización es un desperdicio ',
                '<strong>Exceso de inventario:</strong> Puede conllevar a perdidad monetarias a la empresa, debido a que se pueden volver obsoletos, o nunca usarse ',
                '<strong>Movimientos innecesarios:</strong> Todo movimiento que no aporte valor al producto es un despedicio, hasta caminar al trabajo puede serlo ',
                '<strong>Defectos:</strong> Todo error consume tiempo para ser resuelto, independientemente de su tamaño, además de la insatisfacción del cliente ',
            ]),
        new Item(Keys.AGILES_5S,
            [
                'La metodologia <strong>Kaizen</strong> es una concepción oriental hacia la calidad total, la base de la mejora continua ',
                '',
                '<strong>Seiri:</strong> Clasifica y organizar de manera apropiada, retirarando del area todo aquello que no es necesario ',
                '<strong>Seiton:</strong> Orden, organizar los elementos necesarios de manera que sean de facil acceso ',
                '<strong>Seiso:</strong> Limpieza, ya con un orden establecido y areas limpias, es más facil detectar malas practicas ',
                '<strong>Seiketsu:</strong> Estandares, este estado solo se obtiene cuando la limpieza y la organización se mantienen constantes ',
                '<strong>Shitsuke:</strong> Disciplina, es la creación de habitos que eviten el rompimiento de los conceptos anteriores ',
                '',
                '¿ Porque no la aplican algunas empresas ? ',
                '<strong>- La maquinaria no puede parar:</strong> Los cronogramas no dan tiempo de mantenimiento de la maquinaria ',
                '<strong>- La limpieza como perdida de tiempo:</strong> Algunos empleadores pagan para trabajar, no para limpiar su area de trabajo ',
                '<strong>- Costumbre:</strong> Crear nuevos habitos y cambiar los viejos es un cambio fuerte y prolongado de paradigma ',
                '',
                '<strong>Beneficios</strong>',
                '- Mayor seguridad de los empleados ',
                '- Reducción de las perdidas y mermas por defectos ',
                '- Mayor calidad, y menos tiempo de respuesta ',
                '- Genera una cultura organizacional ',
            ]),
        new Item(Keys.AGILES_MUDA_SOFTWARE,
            [
                '<strong>Trabajo hecho a medias:</strong> Desplegar sin probar y tener errores conocidos más no solucionados, ',
                ' - daran problemas a futuro, de manera que aveces es mejor un nuevo desarrollo que corregir lo existente ',
                '',
                '<strong>Funcionalidad extra:</strong> Toda funcionalidad que no haya sido pedida significa, recursos gastados sin redito alguno ',
                '',
                '<strong>Reaprendizaje:</strong> Nuestra memoria no es absoluta, por lo que inevitablemente olvidaremos cosas, ',
                ' - y gastaremos tiempo volviendolas a aprender, tambien aplica para personas expertas o proyectos mal documentados; ',
                ' - que ya existe el conocimiento, pero nos empeñamos por aprenderlo nosotros mismos, sumando tiempo al desperdicio ',
                '',
                '<strong>Transferencia de conocimiento:</strong> Todo proceso de comunicación es ineficiente ya que, ',
                ' - durante el proceso se suelen perder datos u omitir detalles importantes, y asi entre más niveles ',
                ' - haya que permear, de las mejores manera para evitar esto son la comunicación cara a cara ',
                '',
                '<strong>Retrasos:</strong> Algunas funcionalidades requieren que sean lineales, por lo que si la etapa previa se retrasa, ',
                ' - las etapas subsiguientes tambien lo haran, por lo que estas situaciones deben ser evitadas lo más posible ',
                '',
                '<strong>Cambios de contexto:</strong> Cuando tenemos varias cosas por hacer de manera inmediata, tendemos a ser multitarea, ',
                ' - esto no es más que un cambio de contexto que requiere tiempo y esfuerzo, y que entre más se hagan, más desperdicio habra ',
                '',
                '<strong>Defectos:</strong> Uno de los más peligrosos, ya que entre más tarde se encuentre un error, más costoso sera corregirlo ',
                ' - estos errores se pueden disminuir por medio de las pruebas, e integración continua ',
            ]),
        new Item(Keys.AGILES_PLANNING_POKER,
            [
                '- Las estimaciones son de mucha ayuda, para definir tiempo, costos y esfuerzos, en base a la información disponible ',
                '- Independientemente de la certeza, con que se hayan realizado, generalmente casi nunca se cumplen ',
                '- Ayuda a visualizar desde diferentes puntos de vista, esto es bastante util para analizar un problema ',
                '- Los riesgos pueden ser detectados de manera previa, además de prever posibles obstaculos ',
                '- Todo el equipo involucrado deberia estar presente en este evento, ya que todos pueden aportar desde sus areas ',
                '',
                '<strong>Material necesario:</strong> Cada participante debe tener su baraja, que es una secuencia de <em>Fibonacci</em> modificada, junto a ciertas cartas especiales: ',
                '  <strong>Infinito:</strong>   Es una HU que es demasiado grande para ser estimada, por lo que debera ser dividida y reorganizada ',
                '  <strong>Cero:</strong>       Significa que la HU ya fue realizada ',
                '  <strong>Coffee cup:</strong> Puede significar una actividad de esfuerzo minimo o simplemente la necesidad de realizar una pausa ',
                '',
                '<strong>Trabajo previo:</strong> ',
                ' - Es necesario indicar que indica cada numero antes de realizar el ejercicio, (horas, dias, esfuerzo, etc...)',
                ' - Indicar que incluye y que no la HU, documentación, tests unitarios, tests de integración ',
                '',
                '<strong>Dinamica:</strong> ',
                ' - Se especifica todo lo que se va a estimar y se hacen las preguntas y respuestas pertinentes ',
                ' - Se leen la historia de usuario y se vota por medio de la baraja ',
                ' - Si no hay consenso se abre una breve discusión y se vuelve a votar, si vuelve a suceder se podra realizar un promedio o escoger un extremo ',
                ' - Se repite el proceso hasta completar todas las HU ',
            ]),
        new Item(Keys.AGILES_MANIFEST_AGIL,
            [
                '- Nace con el proposito de reformar el desarrollo de software para hacerlo más eficiente y eficaz ',
                '- Son 4 principios que toda metodologia agil lleva a cabo para mejorar el desarrollo ',
                '',
                '- Individuos e interacciones <strong>SOBRE</strong> procesos y herramientas ',
                '- Software funcionando <strong>SOBRE</strong> documentación extensiva ',
                '- Colaboración con el cliente <strong>SOBRE</strong> negociación contractual ',
                '- Respuesta ante el cambio <strong>SOBRE</strong> seguir un plan ',
            ]),
        new Item(Keys.AGILES_MANIFEST_PRINCIPLES_AGIL,
            [
                ' 1 - La maxima prioridad es satisfacer al cliente mediante la entrega temprana y continua de software de valor ',
                ' 2 - Los requisitos cambiantes son bienvenidos, estos se aprovechan para la ventaja competitiva del cliente ',
                ' 3 - Entrege software funcional, con frecuencia y a en la menor escala posible ',
                ' 4 - El negocio y los desarrolladores deben trabajar juntos, constatemente durante el proyecto ',
                ' 5 - Construir proyectos en torno a personas motivadas, y confie en ellas para hacer el trabajo ',
                ' 6 - El metodo más eficiente para transmitir información, siempre sera una conversación cara a cara ',
                ' 7 - Software que funciona es la medida principal del progreso ',
                ' 8 - Los procesos agiles promueven el desarrollo sostenible, todas las partes involucradas deberian ser constantes ',
                ' 9 - Atención continua a la excelencia tecnica, un buen diseño y la mejora continua ',
                '10 - La simplicidad es el arte de maximizar el trabajo no realizado es esencial ',
                '11 - Las mejores arquitecturas, requisitos y diseños surgen de equipos colaborativos y autoorganizados ',
                '12 - Regularmente, el equipo reflexiona en como volverse más efectivo, luego sintoniza y ajusta su comportamiento ',
            ]),
        new Item(Keys.AGILES_SPIKE,
            [
                '- Es un termino que viene desde Xtreme Programing y que esta rodeado por la incertidumbre ',
                '- Este es un elemento del backlog del producto, que tiene bastante incertidumbre tecnica o funcional, y no se puede planificar o estimar ',
                '- Aun con esta incertidumbre, se debe definir un tiempo maximo de duración, y los resultados o conclusiones que se esperan obtener ',
                '',
                '<strong>Spike tecnico:</strong> Son ocasiones donde no se conoce la tecnologia a usar o hace falta profundizar en ella, ',
                ' - buscar información o aprender de la documentación, con el fin de tomar deciones tecnicas ',
                '<strong>Spike funcional:</strong> Hace falta conocer más sobre los requisitos y/o alcance, como que se va a incluir, ',
                ' - documentar escenarios, entrevistar a un experto del negocio, revision de codigo ',
            ]),
        new Item(Keys.AGILES_DEMING,
            [
                '- Es un sistema que busca la optimización constante de las actividades empresariales, constando de 4 etapas ciclicas ',
                '- Tambien es conocido como ciclo PDCA por sus etapas <em>Plan, Do, Check, Act </em>',
                '',
                '<strong>Planificar </strong> 1 etapa, Donde se identifican los problemas, se crean objetivos para solucionarlos y se asignan deberes',
                '<strong>Hacer      </strong> 2 etapa, Se empiezan a trabajar en los cambios, de manera supervisada, para lograr lo planteado ',
                '<strong>Verificar  </strong> 3 etapa, Despues de un periodo de tiempo previamente definido se evaluan los resultados, ',
                ' - en base a los KPI seleccionados para cada objetivo, determinando la eficiencia y eficacia ',
                '<strong>Actuar     </strong> 4 etapa, Se toman decisiones en base a los aprendizajes obtenidos, ',
                ' - ya sea tomando acciones correctivas si hubo fallas, ó documentando e integrando nuevos cambios si los resultados fueron optimos ',
                '',
                '- Generalmente este ciclo es usado para mejorar la logistica de las empresas, pero tambien es aplicable a otras areas ',
                '',
                '<strong>Ventajas:</strong>',
                '<strong>- Mejora continua:</strong> Mejorando las areas debiles y manteniendo fuertes las ya existentes ',
                '<strong>- Incremento de la productividad:</strong> Al reducir tiempos muertos, y procesos tardios ',
                '<strong>- Ilimitado:</strong> Al ser un ciclico, puede ser aplicado cuantas veces sea necesario, e incluir otras areas tambien ',
                '',
                '<strong>Desventajas:</strong>',
                '<strong>- Lentitud:</strong> La ejecución de las etapas debe ser metodica, y no es aplicable para situaciones a corto plazo, como emergencias ',
                '<strong>- Suceptible a imprevistos:</strong> Su efectividad depende de que el ambiente sea favorable y sin contratiempos ',
            ]),
        new Item(Keys.AGILES_ESTIMATION_LAWS,
            [
                '- La estimación agil es de algun modo un arte algo engañoso, y al mismo tiempo es fundamental en el exito del proyecto/producto/servicio ',
                '',
                '<strong>Ley de Parkinson:</strong> El trabajo se extiende hasta agotar el tiempo posible, debido a la tendencia humana de prolongar una tarea, ',
                ' - para ajustarse al tiempo estimado, por lo que se deben establecer plazos realistas y evitar retrasos innecesarios en lo posible ',
                '',
                '<strong>Ley de Deuda Tecnica:</strong> El costo a largo plazo, debido a acortar demasiado los plazos estimados, y haciendo un trabajo deficiente ',
                ' - puede ser eficiente al inicio, pero a largo plazo puede generar retrasos y problemas, e incluso acarrear una bola de nieve insostenible ',
                '',
                '<strong>Ley del Error:</strong> Toda estimación esta atada al error, es algo inherente que siempre se debe tener en cuenta en el proceso ',
                '',
                '<strong>Ley de Precisión de la estimación:</strong> A medida que avanzamos en un proyecto, las estimaciones se vuelven más precisas, mientras que ',
                ' - la incertidumbre se va reduciendo y la gestión de riesgos se vuelve cada vez más madura; el <em>Cono de incertidumbre</em> ilustra este concepto ',
                '',
                '<strong>Ley de Probabilidad 0 a la hora de subestimar:</strong> Por más que se inyecten recursos/personal las tareas siempre tendran un umbral ',
                ' - minimo que no se puede superar, por más que se recorten la estimación ',
                '',
                '<strong>Ley de Brooks:</strong> Agregar más personas, no es garantia de recortar tiempo, contrario a lo que se espera, agregar personal ',
                ' - a un proyecto atrasado, no garantiza una finalización más rapida, lo atrasara aun más ',
            ]),
        new Item(Keys.AGILES_REQUISITOS_AGILES,
            [
                '- La Prescripción, una de las diversas formas de llamar la intención de adivinar o acotar el futuro',
                '- Existen 3 leyes que nos recuerdan los problemas de intentar adivinar el futuro, y documentarlo sin siquiera haber empezado ',
                '',
                '<strong>Ley de Ziv:</strong> Los requisitos nunca se entienden completamente ',
                '<strong>Ley de Humphrey:</strong> Los usuarios no saben realmente el software que quieren, hasta que lo ven funcionando ',
                '<strong>Lema de Wegner:</strong> Un sistema interactivo, nunca podra ser ni especificado ni testeado por completo ',
            ]),
        new Item(Keys.AGILES_OUTPUT_AND_OUTCOME,
            [
                '- En la actualizadad, todavia es dificil determinar la relación de lo que realizan los equipos y el valor de negocio generado a la compañia ',
                '- Los gerentes piensan en maximizar el valor generado (<em>Impacto</em>), lo cual se puede traducir en en mayores ingresos, mejor imagen, o nuevos mercados ',
                '- Por otro lado los equipos agiles, estan preocupados del <em>Output</em> que consiste en indicadores asociados a realizar entregables, como: ',
                ' - puntos de historia, velocidad, nuevos features, cantidad de usuarios por sprint, sin embargo ambos indicadores no tienen relación entre si ',
                '- Sin una relación directa, es dificil medir causas y efectos, sin contar el retraso, ya que las acciones no tienen una afectación inmediata ',
                '- Una solución a este problema es el concepto de <em>Outcome</em> el cual une ambos conceptos, se define como: ',
                ' - <em>Un cambio en el comportamiento humano que conduce a un resultado positivo, en el negocio(impacto)</em> como clientes o colaboradores ',
                '- Para encontrar estos Outcomes, no es una tarea sencilla, se requiere practica y dedicación con foco en el cliente, y existen tecnicas como: ',
                '',
                '<strong>Las 3 preguntas:</strong>',
                '- La primera pregunta, es determinar los comportamientos de los clientes(Outcomes) que son beneficiosos para el Impacto',
                '- Luego se debe descubrir como generar más de esos comportamientos y mediante cuales entregables(Outputs) se pueden aumentar ',
                '- Finalmente se debe retroalimentar sobre los resultados de estas acciones para comprobar los beneficios, mediantes ciclos cortos',
                '',
                '             <strong> Output                                           Outcome                                Impacto        </strong> ',
                ' Mejorar la cobertura de las pruebas unitarias      Disminuir reclamos de los clientes      Mejorar la impresión con los clientes      ',
                ' Reducción de la deuda tecnica                      Reducción y solución de errores         Aumentar la calidad del software           ',
                ' Realización de pruebas de regresión                                                                                                   ',
                '',
                ' Construir un pozo de agua, en el pueblo            Disminución de tiempos de traslado      Mejor calidad de vida para el pueblo       ',
                '',
                '',
                '<strong>Tecnica PRO:</strong> Problema-Remedio-Outcome',
                '- Se basa en la subjetividad y en la experiencia de los clientes para encontrar problemas',
                '- Y luego consultan con personas calificadas para encontrar posibles o viabilidad de las propuestas ',
                '- Sin embargo, no se tiene en cuenta la profundidad de los resultados(Outcomes)',
                '',
                '<strong>Outcome Mapping:</strong>',
                '- Esta tecnica permite encontrar los Outcomes deseados mediante reuniones presenciales y una exposición de ideas, con los objetivos deseados',
                '- Asi se definen los impactos estrategicos más deseados y como aumentarlos',
            ]),
        new Item(Keys.AGILES_PRIORITIZATION,
            [
                '- Priorizar los elementos del negocio, es un pilar fundamental en el desarrollo agil, para asegurar la entrega constante de valor ',
                '- Una adecuada priorización garantiza que los elementos de mayor impacto y valor para el cliente se aborden de manera relevante ',
                '- La priorización es importante ya que no solo ayuda a entregar valor, tambien maximiza la eficiencia y la adaptabilidad de los equipos ',
                '',
                '&brvbar;                  <strong>Matriz de Eisenhower</strong>                  &brvbar;  Permite centrarse en lo que es crucial a corto y largo plazo ',
                '&brvbar;  Importante, No urgente:    &brvbar;  Importante y urgente:   &brvbar; ',
                '&brvbar;   Decidir cuando hacerlo    &brvbar;   Hacer inmediatamente   &brvbar; ',
                '&brvbar; ------------------------------------------------------ &brvbar;        ',
                '&brvbar;  Ni Importante, Ni urgente  &brvbar;  No importante, urgente  &brvbar; ',
                '&brvbar;   Se puede demorar          &brvbar;   Delegarlo              &brvbar; ',
                '',
                '',
                '&brvbar;    <strong>Matriz de Impacto - Esfuerzo</strong>    &brvbar;  Se puede enfocar los recursos en actividades ',
                '&brvbar;  Alto Impacto   &brvbar;  Alto Impacto    &brvbar;   con maxima recompensa y menor esfuerzo',
                '&brvbar;  Poco Esfuerzo  &brvbar;  Mucho Esfuerzo  &brvbar;',
                '&brvbar; ---------------------------------- &brvbar;',
                '&brvbar;  Poco Impacto   &brvbar;  Poco Impacto    &brvbar;',
                '&brvbar;  Poco Esfuerzo  &brvbar;  Mucho Esfuerzo  &brvbar;',
                '',
                '',
                '&brvbar;                     <strong>Matriz de Kano</strong>                    &brvbar;  Ayuda a comprender que caracteristicas satisfacen al cliente ',
                '&brvbar;  Funcionalidad atractiva    &brvbar;  Funcionalidad Deseada  &brvbar;   y construir productos que destaquen en el mercado ',
                '&brvbar;  Me satisface tenerla       &brvbar;  Me satisface tenerla   &brvbar;',
                '&brvbar; ----------------------------------------------------- &brvbar;       ',
                '&brvbar;  Funcionalidad Irrelevante  &brvbar;  Funcionalidad Basica   &brvbar;',
                '&brvbar;  No me satisface            &brvbar;  Me molesta no tenerla  &brvbar;',
            ]),
        new Item(Keys.AGILES_STAR,
            [
                '- Es una tecnica usada por Recursos humanos para seleccionar personal pero puede ser usada en la creación de Tareas y HUs',
                '',
                '<strong>Situación:</strong> Se describe una situación o reto por el cual se deba atravesar en un lenguaje neutro ',
                '- La situación debe ser relevante y especifica de manera que fomente la reflexión pero se eviten ambiguedades/malentendidos ',
                '',
                '<strong>Tarea:</strong> Se indaga sobre la tarea o responsabilidad que se tiene para evaluar la situación descrita ',
                '- Es importante tener en cuenta detalles y el contexto sobre el que se da la acción ',
                '',
                '<strong>Acción:</strong> Son las acciones que se van a hacer para acercarse a la situación y que decisiones se han tomado ',
                '- Fomentar el analisis y observar desde que perspectivas se va a abordar el problema ',
                '',
                '<strong>Resultado:</strong> Se buscan resultados cuantificables y medibles, consecuencias de las acciones a corto y largo plazo',
                '- Es importante evaluar el aprendizaje y como se puede aplicar para futuras situaciones ',
            ]),
        new Item(Keys.AGILES_CRC,
            [
                '- Aunque nacieron como una forma de modelar clases en POO, se han convertido en una gran utilidad para modelar conceptos y en la programación extrema ',
                '- Ayuda a los equipos a entender los procesos de una manera más facil y concisa, sin la necesidad inmediata de realizar el codigo ',
                '- Al tener todos las posibles parte del sistema a la disposición se reduce la redundancia y se asignan mejor las responsabilidades ',
                '- Es ideal hacer esto mediante una lluvia de ideas, donde todos participen y se tengan en cuenta multiples perspectivas ',
                '- Cuando hay demasiadas tarjetas, estas empiezan a añadir complejidad al entendimiento del modelado ',
                '- En caso de que se empiecen a acumular, se deberian desarrollar casos de uso, y explorar diferentes flujos o especializaciones ',
                '',
                '<strong>Clase:</strong> Nombre de la clase en si, el cual debe ser diciente y que ayude a entender el porque de su creación ',
                '<strong>Responsabilidad:</strong> Es lo que es y que funciones tiene, se debe ser especifico, pero no puede estar cerrada a modificaciones ',
                '<strong>Colaborador:</strong> Son otras clases ó entidades que son necesarias para el correcto funcionamiento de la clase ',
            ]),
    ];

export const WEB =
    [
        new Item('spa',
            [
                '- Es una aplicación web donde todo el contenido se muestra en una sola sin regargar el navegador ',
                '- Los componentes son segmentos individuales de HTML que juntos dan la impresión de unidad ',
                '- Este tipo de paginas tambien maneja las url para cambiar entre vistas ',
                '- La transición entre las paginas es fluida y el rendimiento es mayor en general ',
                '- Los frameworks actuales trabajan de esta manera ',
            ]),
        new Item('pwa',
            [
                '- Estas aplicaciones nacen de paginas web normales para parecerse a aplicaciones nativas de telefonos moviles ',
                '- NO se necesita descargar nada desde una tienda de aplicaciones, solo tener acceso a un navegador con internet ',
                '- Aunque necesitan internet para actualizaciones de la información, tambien puede funcionar sin este ',
                '- Bastante acorde con el enfoque mobile-first, que le da prioridad al movil que al escritorio ',
            ]),
        new Item(Keys.WEB_SEO,
            [
                '- Los motores de busqueda rastrean el contenido en la web de manera continua para presentar mejores resultados y tener mejores busquedas ',
                '- La indexación de contenido es una gran herramienta para buscar lo que se necesita ',
                '- El contenido de calidad es una de las mejores formas de aumentar el trafico del sitio web ',
                '- La accesibilidad al contenido y la experiencia del usuario tambien son importantes ',
                '- Saber como funcionan los motores de busqueda, permite optimizar el sitio para que sea más <strong>visible</strong> para estos ',
            ]),
        new Item(Keys.WEB_SPACE,
            [
                '- Es el espacio que se encuentra alrededor del objeto en cuestión, es bastante util para crear diseños simples pero atractivos ',
                '- El uso del espacio positivo y negativo puede dar pie a ilustraciones con mensajes directos pero sutiles ',
                '- Un gran artista sabe manejar estos conceptos, e imprimirles su toque unico, como en el articulo fuente se denota ',
                '',
                '<strong>- Espacio Positivo:</strong> Es la parte donde recae principalmente la atención en el diseño, y que espera llamar la atención ',
                '<strong>- Espacio Negativo:</strong> Es el resto del espacio que se encuentra entre los elementos, lo que <em>no esta ahi</em>, enmarca y contiene la composición ',
            ]),
        new Item('diseno',
            [
                '- El diseño grafico es importante en la programación debido a que este sera la cara visible de tu producto ',
                '- Es importante contestar respuestas previamente como: ¿ cual es tu objetivo ? & ¿ cual es tu producto ? ',
                '- NO descuides el color, tener una paleta de colores es tener una identidad ',
                '- Además de la identidad es importante saberlos combinar y tener un buen contraste y legibilidad entre si ',
                '- El uso de las imagenes y las fuentes tipograficas son más importantes de lo que parecen ',
            ]),
        new Item(Keys.WEB_USER_INTERFACE,
            [
                '<strong>Principios para el diseño de una UI</strong>',
                '<strong>- Familiaridad con el usuario:</strong> Utilizar conceptos y la experiencia del usuario para que le sea más "facil" de usar ',
                '<strong>- Consistencia:</strong> Las operaciones del mismo tipo deberian hacerse del mismo modo siempre ',
                '<strong>- Minima sorpresa:</strong> El comportamiento del sistema no debe provocar sorpresa en el usuario ',
                '<strong>- Recuperabilidad:</strong> Los usuarios deben tener mecanismos para recuperase en caso de error ',
                ' -  para este apartado se pueden usar confirmaciones o recursos para deshacer opciones ',
                '<strong>- Guia al usuario:</strong> Cuando un error ocurra, la interfaz debe ayudar al usuario a entenderlo ',
                '',
                '<strong>Prototipos de una UI',
                '<strong>- Estaticos:</strong> No permiten la alteración de sus componentes, pero si dan un bosquejo inicial ',
                '<strong>- Dinamicos:</strong> Estos diseños involucran un poco más de detalle tecnico, como especificaciones de rendimiento ',
                '<strong>- Robustos:</strong>  Ya presentan caracteristicas dinamicas, como validación de errores y edición de datos ',
                '',
                '<strong>Interacción del usuario en la UI',
                '<strong>- Manipulación directa:</strong> Interacción directa con los objetos de la pantalla ',
                '<strong>- Selección de menus:</strong> Se limitan las opciones, a cambio de ser más lenta y menos propensa a errores ',
                '<strong>- Formularios:</strong> Introducción de datos, por parte del usuario ',
                '<strong>- Comandos:</strong> Los usuarios emiten comandos y sus parametros asociados para realizar acciones más complejas ',
                '<strong>- Lenguaje:</strong> Usar un lenguaje natural que el usuario comprenda, lo hara accesible a más tipos de usuarios ',
                '',
                '<strong>Pautas de evaluación de una UI</strong>',
                '- Semejanza con el mundo real ',
                '- Consistencia y estandarización ',
                '- Estetica y diseño minimalista ',
                '- Reconocimiento, manejo y recuperación de errores ',
                '- Flexibilidad, control y libertad para el usuario ',
                '- Reconocimiento de acciones y ayudas ',
            ]),
        new Item(Keys.WEB_USER_XPERIENCE,
            [
                '- Es la percepción del usuario al interactuar con un producto ',
                '- Una buena UX se logra cuando el producto sea util y usable por el cliente a la hora de usarse',
                '- La UX no es lo mismo que la usabilidad, ya que esta la contiene además de otras caracteristicas ',
                '- Este objetivo no se logra agregando funcionalidades, si no, estando en el lugar de un cliente ',
                '',
                '<strong>Es necesario tener en cuenta:</strong>',
                '- Necesidades del cliente ',
                '- Objetivos del negocio ',
                '- Limitaciones tecnicas ',
                '',
                '<strong>Tambien investigar cosas como:</strong> ',
                '- Investigacion de los grupos de mercado y entrevistas con stakeholders ',
                '- Pruebas de usabilidad y analisis de datos ',
                '- Manejo y estructuración de la información presente ',
                '',
                '<strong>Habilidades blandas como:</strong>',
                '- Estudios en Psicologia, Sociologia o Antropologia ',
                '- Conocimientos en Comunicación , Marketing, y experiencia en ventas ',
                '- Diseño industrial o grafico, y conocimientos en tecnologias ',
                '',
                '<strong>        UX Designer                                   UI Designer<strong>',
                ' Diseño de interacciones                       Diseño visual',
                ' Traza caminos para el usuario                 Elige colores y tipografias',
                ' Jerarquia y segmentación de la información    Planes esteticos ',
                ' Prototipos e investigación                    Maquetación y diseño grafico',

            ]),
        new Item('logos',
            [
                '<strong>- Isotipo:</strong>   Parte reconocible de una marca sin presencia de texto ',
                '<strong>- Isologo:</strong>   El texto y el icono son parte de un mismo conjunto, no funcionan por separado ',
                '<strong>- Logotipo:</strong>  Texto que representa la marca y es la parte reconocible de esta ',
                '<strong>- Imagotipo:</strong> Combinación de imagen y texto, que tambien pueden separarse y ser efectiva ',
            ]),
        new Item(Keys.WEB_GESTALT,
            [
                '- Es una manera de encontrar sentido en como nuestras mentes perciben las cosas, como un todo y no solo como los elementos que lo forman ',
                '- <em>El todo es mayor que la suma de sus partes </em>',
                '',
                '<strong>Aparición:</strong> Surge cuando se percibe un objeto a partir de información previa que conozcamos ',
                '<strong>Cosificación:</strong> Los objetos se pueden reconocer incluso cuando hace falta parte de ellos, ',
                ' - Nuestro cerebro hace coincidir lo que se ve con patrones familiares en nuestra memoria ',
                '<strong>Multiestabilidad:</strong> Se basa en que los objetos ambiguos pueden ser interpretados de diferentes maneras, ',
                ' - y que dado esto se puedan ver varias formas, sin tener certeza de la verdadera ',
                '<strong>Invariabilidad:</strong> Los objetos simples pueden ser reconocidos independientemente de, su escala, rotación, traslación o perspectiva ',
                '',
                '<strong>Leyes aplicadas al diseño grafico</strong>',
                '',
                '<strong>Principio de semejanza:</strong> Si elementos que esten proximos entre si, y son similares ',
                ' - tenderemos a verlos como parte de un grupo, ya sea por color, tamaño o textura ',
                '<strong>Principio de continuidad:</strong> El ojo puede crear visualmente la continuidad de una linea, ya que el ojo ',
                ' - va a seguir el camino visual más suave, menos forzado y coherente ',
                '<strong>Principio de cierre:</strong> Cuando una figura no esta cerrada o delimitada por lineas, nuestra mente ',
                ' - tiende a transmitir una sensación de cierre, rellenando las formas ',
                '<strong>Principio de proximidad:</strong> Teoriza como tendemos a agrupar los elementos visuales proximos entre si ',
                ' - estos deben compartir alguna caracteristica en comun como forma, color, textura, tamaño ',
                '<strong>Figura y fondo:</strong> Usando el espacio negativo y la tendencia de ver un objeto separado de lo que lo rodea ',
                '<strong>Principio de Simetria y Orden:</strong> Si los elementos cuentan con cierta simetria y orden, son percibidos como parte del mismo grupo ',
                '<strong>Dirección comun:</strong> Los elementos que parecen construir un patron o flujo continuo y que estan en la misma dirección ',
                ' - son a su vez percibidos como parte de un grupo mayor ',
            ]),
        new Item('ssr-csr-ssg-isr',
            [
                '<strong>Server Side Rendering (SSR)</strong>',
                '- El HTML de la pagina es generado en el lado del servidor, ya sea mediante petición, o previamente ',
                '- Ventajas: ',
                ' - Mejora el SEO y la indexación del contenido ',
                ' - La carga inicial es más rapida al no tener que ejecutar nada más para mostrar el contenido ',
                ' - Puede funcionar, incluso si el Javascript dentro del navegador esta desactivado ',
                '- Desventajas: ',
                ' - Mala capacidad de respuesta si la conectividad a internet es baja o nula ',
                ' - Mayor carga al servidor, al tambien ser responsable de generar o entregar el HTML a mostrar ',
                '',
                '<strong>Client Side Rendering (CSR)</strong>',
                '- Ya es responsabilidad del navegador, y mediante Javascript se manipula el DOM para construir los nodos HTML ',
                '- Ventajas: ',
                ' - Rapido y con una mayor capacidad de interactividad con solo la carga inicial ',
                ' - Se puede escoger que partes del DOM se pueden actualizar para mostrar nueva información ',
                '- Desventajas: ',
                ' - La carga inicial es más lenta al tener que esperar para ejecutar javascript ',
                ' - Inutil si javascript esta deshabilitado en el navegador ',
                ' - El SEO se puede ver dificultado por el contenido inicial en blanco ',
                '',
                '- Desde la creación de NodeJs, se abrio la posibilidad de crear paginas hibridas, que comparte caracteristicas de ambos mundos ',
                '- Creando contenido inicial en el lado del servidor que no este completamente vacio y agregarle más funcionalidades en el navegador ',
                '- El proceso de agregar más interactividad a estos sitios estaticos se conoce generalmente como "Hidratación" ',
                '',
                '<strong>Static Site Generators(SSG)</strong>',
                ' - Estos ejecutan el codigo SPA en el momento de la compilación, y generan previamente el HTML en el servidor ',
                ' - Algunos frameworks como NextJs, Gatsby, NuxtJs, VuePress usan estas estrategias, ',
                ' - sin de dejar de ofrecer las caracteristicas de React y Vue en los cuales estan basados ',
            ]),
        new Item('esqueumorfismo',
            [
                '- Es un termino proveniente del griego <em>skeuos</em>, que significa vasija ó herramienta; y <em>morfo</em>, que significa forma ',
                '- La aplicación más reciente y generalizada esta ligada al primer Iphone, ya que cada icono intentaban evocar a su contraparte fisica ',
                '- Todo esto buscaba ser amigable con el usuario, además de jugar con el color y las sombras para acercarse aun más ',
                '',
                '<strong>Flat Design:</strong> Con el paso del tiempo, los usuarios nos acostumbramos a usar y hasta diseñar interfaces, ',
                ' - por lo que la necesidad de tener un icono el cual fuera una copia exacta fue perdiendo relevancia en el tiempo ',
                '- Esto con el fin de tener más relevencia en otras areas como el rendimiento y la funcionalidad ',
                '- Este tipo de diseño apuesta por iconos más abstractos y simples, de manera que llegan a carecer de colores, sombras y bordes ',
                '',
                '<strong>Diseño neomorfico:</strong> Como el arte mismo, el diseño avanza, y esta evolución no significa que las corrientes mueran ',
                '- Este diseño se puede considerar una fusión de los 2 estilos anteriores ',
                '- Se mantienen los iconos realistas sin caer en un exceso de detalles que sobrecarguen la experiencia ',
                '- A su vez se usan colores mezclas y degradados bastante expresivos, que van más alla de la cotidianidad ',
            ]),
        new Item(Keys.WEB_MENOR_SORPRESA,
            [
                '- Es una guia de diseño para las interfaces de usuario, donde cada componente debe comportarse  ',
                ' - de la manera que la mayoria de los usuarios se comporte o ya esten acostumbrados ',
                '- Los comportamientos deberian poder anticiparse, basandose en experiencias previas, con sistemas similares ',
                '- Esto garantiza que la aplicación sea intuitiva y facil de usar, en cierto modo ',
                '',
                '- Esto tambien aplica para el diseño de las APIs, si esta se comporta diferente y sorprende al usuario, se deberia pensar en rediseñarla ',
                '- El patron de Segregación de consultas y queries(CQRS), va de la mano con este principio, ',
                ' - separando los metodos que cambian un objeto(comando), de los que hacen preguntas(consultas)',
            ]),
        new Item(Keys.WEB_MICRO_FRONTENED,
            [
                '- El desarrollo de front es dificil, y escalarlo entre multiples equipos es aun más dificil ',
                '- La eficiencia de desarrollo se reduce proporcionalmente entre más equipos haya, debido a las multiples vias de comunicación ',
                '- Y más si solo se tienen una vista unica, para multiples micro servicios, ya que cada micro servicio, necesita cambios distintos ',
                '',
                '<strong>¿ Que es un microfrontend ?</strong>',
                '- Son una extensión del concepto de microservicios, aplicado al diseño web, Es un estilo arquitectonico y organizacional',
                '- Estos son micro aplicaciones autonomas, con dominios acotados, e independientes de la tecnologia o framework usado ',
                '- Para tener una mejor autonomia y eficiencia, lo mejor seria poseer una función de extremo a extremo, que se formaria en torno a un subdominio ',
                '- Los limites de cada microfrontend se establecen en función de los usuarios y no de los desarrolladores, por medio de <em>Domain Driven Design</em> (<strong>DDD</strong>)',
                '',
                '<strong>¿ Como funciona, el microfrontened ?</strong>',
                '- Existe una aplicación contenedora, que combina cada microfrontened y esta construida con HTML, CSS y Javascript minimos, tambien: ',
                ' - Representa los elementos en comun de la pagina, como encabezados, pies de pagina, menus, etc.. ',
                ' - Renderiza los microfronteneds bajo demanda',
                ' - Realiza cuestiones transversales como la autenticación, roles, permisos, manejo de rutas, etc.. ',
                '',
                '<strong>Aislamiento de CSS:</strong>',
                '- Existe el riesgo latente de que hayan estilos que se anulen entre si, al no tener espacios de nombres ni una adecuada encapsulación ',
                '- Esto se puede prevenir usando, preprocesadores, teniendo convenciones de nombres ó usando biblotecas de Css en Js',
                '',
                '<strong>Componentes compartidos:</strong>',
                '- Una biblioteca compartida ofrece coherencia visual y reutilizacón de codigo',
                '- Sin embargo deben ser componentes genericos, que no compartan logica empresarial, o se crearia un acoplamiento indeseado ',
                '- Deben ser manejados por un solo equipo, para una mejor calidad, pero no puede estar cerrado a contribuciones y sugerencias de otros equipos ',
                '',
                '<strong>Arquitectura:</strong>',
                '- Deben ser modelados entorno al dominio empresarial',
                '- Descentralizados a traves de equipos autonomos ',
                '- Se deben poder automatizar su implementación ',
                '',
                '<strong>Comunicación entre microfrontends:</strong>',
                '- Estos no deben compartir su estado y solo comunicarse si es estrictamente necesario, para evitar el acoplamiento, se pueden comunicar por: ',
                ' - Eventos personalizados                                     - Workers',
                ' - Pasar devoluciones de llamadas (callbacks)                 - Enrutamiento a travez de la barra de direcciones',
                '',
                '<strong>Tipos segun la composición:</strong>',
                ' <strong>Tiempo de construcción:</strong> Se publica como un paquete, que es incluido por la aplicación contenedora, centralizando las versiones ',
                ' <strong>Tiempo de ejecución:</strong> Se puede realizar con iframes, Javascript y webcomponents, de manera que los cambios sean independientes entre si',
                '- Ambos tienen ventajas y deventajas, como necesitar un release completo para cambiar alguna parte o problemas con las rutas, respectivamente ',
                '',
                '<strong>Ventajas:</strong>',
                '- Ciclos de desarrollo y de entrega rapida, debido a implementaciones aisladas y una base de codigo más simple',
                '- Tiempo de carga inicial reducido, ya que se cargan bajo demanda',
                '- Mayor confiabilidad y mantenibilidad al tener equipos pequeños y debidamente enfocados',
                '- La experimentación y las reversiones son más faciles de realizar',
                '',
                '<strong>Desventajas:</strong>',
                '- Mayor complejidad debido a gastos operativos',
                '- Trabajo adicional, para crear estandares y mantener una Experiencia de usario consistente',
                '- Tiempos de cargas más lentos, al navegar por la aplicación y un mayor consumo de red al tener dependencias duplicadas ',
            ]),
        new Item('buenasPracticasFront',
            [
                '- El desarrollo web es bastante amplio, abarca desde el diseño y creacion de interfaces de usuario, hasta areas como la optimización ',
                '',
                '<strong>HTML Semantico</strong>',
                '- Proporciona una estructura, con un significado intrinseco, mejorando la accesibilidad y la optimización de los motores de busqueda <strong>SEO</strong> ',
                '',
                '<strong>Metodologias CSS</strong>',
                '- Metodologias como: <em>Block, Element, Modifier</em> <strong>BEM</strong> & <em>Scalable and Modular Architecture for CSS</em> <strong>SMACSS</strong>',
                '- Promueven la modularidad, reutilización y la mantenibilidad de las Hojas de estilo, al seguir convenciones y facilitar la colaboración ',
                '',
                '<strong>Diseño Responsive</strong>',
                '- Esto es esencial para garantizar que los sitios web se adapten al mayor numero de pantallas y dispositivos posibles',
                '- Usando Media Queries, layouts, y unidades porcentuales, entre otros metodos, permiten una correcta visualización sin importar la plataforma ',
                '',
                '<strong>Mejora Progresiva</strong>',
                '- Se empieza una base de codigo funcional, donde se va mejoran progresivamente la experiencia del usuario',
                '',
                '<strong>Optimización</strong>',
                '- Un aspecto crucial para ofrecer experiencias de usuario rapidas y eficientes, en diferentes tipos de redes y capacidades ',
                '- Existen tecnicas como la mimificación, la carga diferida, almacenamiento en cache, compresión de imagenes, etc... ',
                '',
                '<strong>Compatibilidad entre navegadores</strong>',
                '- Esto es importante debido a que se espera llegar a una audiencia diversa, y los navegadores no estan completamente estandarizados entre si ',
                '- Pruebas de depuración periodicas, en diferentes navegadores como Chrome, Firefox, Safari y Edge ayudan a identificar y resolver estos problemas ',
                '',
                '<strong>Estandares de Accesibilidad</strong>',
                '- Estandares descritos en el <em>Web Content Accessibility Guidelines</em> <strong>WCAG</strong>, promueven la inclusión y la usabilidad, ',
                ' - para usuarios con discapacidades, o que necesiten de tecnologias de asistencia ',
                '',
                '<strong>Multimedia optimizada</strong>',
                '- Una carga rapida de este tipo de contenido, reduce los tiempos de carga y su visualización, mejorando la experiencia general del usuario ',
                '',
                '<strong>Versionamiento</strong>',
                '- Manejar un sistema de control de versiones, como <em>Git</em> permite flujos de trabajo colaborativos y una manera simple de revertir cambios',
                '- Ademas de otros beneficios, como la experimentación, el manejo de ramas, sin desestabilizar entornos importantes como producción ',
                '',
                '<strong>Aprendizaje Continuo</strong>',
                '- Igual que muchas areas de la tecnologia, el desarrollo web constantemente cambia y evoluciona, ya sea por tendencias o por avances tecnologicos ',
                '- Mantenerse informado y seguir aprendiendo, permite ofrecer soluciones de vanguardia y mantener un perfil profesional competitivo ',
            ]),
        new Item(Keys.WEB_GOLDEN_SIGNALS,
            [
                '- <em>El silencio es oro</em> ó <em>No news, good news</em> Significan de manera general que el silencio es indicativo de normalidad, ningun ruido es bueno ',
                '- Lamentablamente la mayoria de los sistemas de software no son silenciosos, pueden generar cientos de metricas y rastros difentes ',
                '- Site Reliability Engineering <strong>SRE</strong> es una disciplina de TI enfocada en la gestión y optimización del rendimiento ',
                '- La combinación de estas señales brindan una comprensión integral del estado general y el rendimientos de sistemas complejos ',
                '',
                '<strong>Latencia:</strong> Mide el intervalo entre el envio de la solicitud y su respuesta, si es alta generalmente indica errores o codigo ineficiente ',
                '',
                '<strong>Trafico:</strong> Es la cantidad de solicitudes que maneja la aplicación, las tasas bajas y altas de trafico no son indicativos directos de problemas',
                ' - pero si la latencia aumenta casi proporcionalmente al trafico, generalmente es indicativo de problemas con grandes volumenes de datos ',
                '',
                '<strong>Errores:</strong> Miden la cantidad de solicitudes que fallaron, por razones como peticiones corruptas, o errores en el procesamiento ',
                '',
                '<strong>Saturación:</strong> Es el consumo de recursos de la aplicación, tanto en codiciones normales como en altas cargas de trabajo ',
                ' - La falta de recursos puede estar asociada o ser la causa directa de una Alta latencia o una gran Cantidad de errores ',
                '',
                '<strong>Importancia:</strong>',
                '- El impacto de estos datos no solo ayudan a dar sentido a los datos complejos que provienen de la observabilidad, ',
                ' - tambien unifican multiples señales en 4 categorias basicas que brindan información significativa del estado de la aplicación ',
                '- Un analisis conjunto de estos datos permite la correlación para ayudar a encontrar la causa raiz de los problemas y mejorar la confiabilidad ',
                '- Optimización de recursos, al determinar las necesidades y reasignar los recursos de acuerdo a la oferta y la demanda ',
                '- Mejora la experiencia de usuario ya que (latencia, trafico, errores) son señales percibidas directamente por el usuario final ',
                '',
                '<strong>Consideraciones:</strong>',
                '- Existen metodos más simples y faciles de implementar como <strong>RED</strong>(tasa, errores, duración) y <strong>USE</strong>(utilización, saturación, errores)',
                '- Estas señales son categorias de información en lugar de tipos especificos de datos, y no son obtenibles en primera instancia ',
                '- La recopilación de datos se debe hacer de manera que tambien se incluyan alertas sobre alguna de las señales y el uso de <em>APM</em>',
            ]),
        new Item(Keys.WEB_SIMPLIFY_DESIGN,
            [
                '- La paradoja de la elección puede atrapar a cualquier profesional, hasta los más experimentados ',
                '- Afortunadamente cuando hay muchas opciones la toma de decisiones se puede simplificar basandose en la opcion más inteligente ',
                '- No es necesario reiventar la rueda, cuando se puede confiar en la experiencia y conocimientos de aquellos que nos precedieron ',
                '- Para esto existen heuristicas, que son atajos mentales, basados en reglas o metodos que ayudan a usar la razon y la experiencia, ',
                ' - para resolver problemas de manera eficiente y evitar sobrecargas cognitivas ',
                '',
                '<strong>La regla MAYA(Most Advanced, Yet Acceptable)</strong> de <em>Raymond Loewy</em> aboga por que los diseños amplien los limites de la innovación ',
                '- Sin dejar de ser aceptables o familiares para los usuarios, este balance debe tenerse siempre en mente ',
                '',
                '<strong>Dont Make Me Think</strong> de <em>Steve Krug</em> Enfatiza la importancia de crear interfaces que se expliquen por si solas ',
                '- Realizar una interfaz requiere mucho pensamiento, pero usarla no debe ser asi ',
                '',
                '<strong>Ley de Gaiman:</strong> Los usuarios son buenos para identificar problemas, pero malos para proponer soluciones efectivas ',
                '- <em>cuando las personas le dicen que algo está mal o que no les funciona, casi siempre tienen razón.</em>',
                '- <em>Cuando le dicen exactamente lo que creen que está mal y cómo solucionarlo, casi siempre están equivocados</em>',
                '',
                '<strong>Ley de Miller</strong> Toda experiencia debe estar guiada y diseñada de manera que tenga en cuenta las limitaciones cognitivas del ser humano ',
                '- <em>La persona promedio sólo puede retener 7 (más o menos 2) elementos en su memoria de trabajo, George Miller</em>',
                '',
                '<strong>Usarlo por defecto o diseñarlo</strong> No todo debe ser personalizado, hay elementos que pueden ser perfectamente elementos predeterminados ',
                '',
                '<strong>Ley de Tesler</strong> <em>En cualquier sistema existe una cierta cantidad de complejidad que no se puede reducir, Larry Tesler</em>',
                '- La tendencia de sobresimplificar tambien es contraproducente y debe tener un limite ',
                '',
                'Para enfatizar algo, primero hay que quitarle importancia a todo lo demás, enfatizar todo solo conduce a confusiones ',
                '- Cuanto todo es <strong>importante</strong>, nada lo es ',
                '',
                '<strong>Umbral de Doherty</strong> El rendimiento es importante a la hora de crear cualquier software agradable de usar ',
                '<em>La productividad aumenta cuando una computadora y sus usuarios interactúan a un ritmo (<400 ms)</em>',
                '<em>que garantiza que ninguno tenga que esperar al otro</em>',
            ])
    ];

export const UML =
    [
        new Item('uml',
            [
                '- Desarrollado para ayudar a todos los involucrados en el desarrollo y modelado de un sistema ',
                '- Pueden servir como planos para la codificación ó como documentación despues de la etapa de desarrollo ',
                '- El nivel de detalle que puede llegar a ser superficial ó increiblemente complejo ',
                '- Es un lenguaje independiente de la plataforma de desarrollo, por lo cual depende de la capacidad de abstracción ',
            ]),
        new Item(Keys.UML_CLASES,
            [
                '- Esta orientado al modelo y se basa especialmente en la Programación Orientada a Objetos ',
                '- Representan las interacciones y las clases o interfaces que conforman el sistema ',
                '- Se pueden diagramar los modificadores de acceso, la multiplicidad, los atributos, relaciones, etc.. ',
            ]),
        new Item('componentes',
            [
                '- Pueden representar la agrupación de modulos que componen cualquier función de la aplicación ',
                '- Se centra en la relación entre las partes a alto nivel, más que en los detalles de la implementación ',
                '- Tambien se puede mezclar con el diagrama de paquetes ',
                '- Las interfaces muestran como componentes separados se comunican entre si, por medio de un protocolo en comun ',
                '- Cuando un componente necesita de otro, se considera que hay una relación de dependencia ',
            ]),
        new Item('despliegue',
            [
                '- Permite identificar los nodos que usara el sistema una vez sea funcional, externos e internos ',
                '- Expone de manera clara la arquitectura fisica de la red, dando una idea global del sistema ',
                '- Las interfaces cobran especial relevancia en este, ya que indican como se comunican los componentes ',
                '- Normalmente representa una vista general de la aplicación ',
            ]),
        new Item('secuencia',
            [
                '- Representa el intercambio de mensajes entre los diferentes componentes del sistema para lograr una funcionalidad ',
                '- El tiempo es importante ya que un mensaje debe terminar para que otro empieze (generalmente) ',
                '- Los objetos que interactuan puede ser simple clases, hasta modulos y sistemas completos ',
            ]),
        new Item('actividades',
            [
                '- Representa el flujo de control que se puede llegar a dar, con enfasis en la secuencia y las condiciones del flujo ',
                '- Por lo general tienen un punto inicial y final ',
                '- Modelan un flujo de trabajo sin dar mucho enfasis a la peculiaridad de cada subsistema ',
                '- Estos diagrama se pueden encandenar entre si para crear secuencias más complejas ',
            ]),
        new Item('paquetes',
            [
                '- Representa la estructura basica de los componentes del sistema ',
                '- Un <strong>paquete</strong> es conjunto de elementos concretos que contienen una función especifica ',
                '- Estos pueden representar dependencias de paquetes entre si, ayudando a enteder la gerarquia interna ',
            ]),
        new Item(Keys.UML_STATES,
            [
                '- Representa el fluir de una situación a otra del sistema ',
                '- Pueden tener condiciones externas, o simplemente ser inherente al sistema ',
                '- Se conforma por el estado inicial, los estados del sistema, los estados finales (uno ó varios) y las transiciones de un estado a otro ',
                '- Un estado puede tener multiples transiciones a otros estados o asi mismo, siempre desde el origen hasta un destino ',
            ]),
        new Item(Keys.UML_USE_CASES,
            [
                '- Representan los requisitos funcionales de manera grafica ',
                '- Especifica que actores y como pueden involucrarse con el sistema ',
                '- Pueden ser un punto de partida para desarrollar los sistemas, aunque demasiada complejidad es contraproducente ',
                '- La comunicación entre el cliente y el desarrollador puede ser más eficiente, más no es garantia de esto ',
            ]),
        new Item(Keys.UML_4_1_VISTA,
            [
                '- Modelo diseñado para describir la arquitecturas de los sistemas basados en distintas vistas concurrentes ',
                '- Cada vista suele describir el mismo sistema pero desde una optica diferente, directamente relacionada con el interesado ',
                '',
                '<strong>Vista Logica:</strong> Describe la estructura y la funcionalidad del sistema  ',
                '- Se pueden usar diagramas de clase, comunicación ',
                '',
                '<strong>Vista Desarrollo:</strong> Enfocada a la administración del software y sus componentes, generalmente desde la perspectiva del desarrollador ',
                '- Se pueden usar diagramas de componentes, paquetes ',
                '',
                '<strong>Vista Proceso:</strong> Trata los aspectos dinamicos del sistema, como se comunican los componentes entre si y su comportamiento ya en ejecución ',
                '- Se puede usar el diagrama de actividad, secuencia ',
                '',
                '<strong>Vista Fisica:</strong> Maneja los aspectos tangibles del sistema, como la infraestructura, las redes, y como son en la realidad ',
                '- Se puede usar el diagrama de despliegue ',
                '',
                '<strong>Escenarios:</strong> Describen la secuencia de interacciones entre objetos o procesos, generalmente para identificar y validar el diseño de la arquitectura ',
                '<strong>Escenarios:</strong> Generalmente son los casos de uso, aun se usan pero han perdido relevancia frente al agilismo y las HU ',
                '',
                '<strong>| Vistas    |   Escenarios    Diseño    Procesos    Implementación    Despliegue</strong>                 ',
                '<strong>| Diagramas |</strong>                                                                                    ',
                '',
                '<strong> Clases     </strong>                     X          X                                                    ',
                '<strong> Objetos    </strong>                     X          X                                     Estructurales  ',
                '<strong> Componentes</strong>                                              X                                      ',
                '<strong> Despliegue </strong>                                                              X                      ',
                '',
                '<strong> Casos de Uso</strong>        X                                                                           ',
                '<strong> Secuencia   </strong>                    X                                         X                     ',
                '<strong> Colaboración</strong>                    X                                         X     Comportamentales',
                '<strong> Estados     </strong>        X           X          X                              X                     ',
                '<strong> Actividad   </strong>        X           X          X                              X                     ',
            ]),
        new Item(Keys.UML_TYPES,
            [
                '- Existen 2 tipos principales, los cuales a su vez agrupan diversos modelos para diferentes necesidades ',
                '',
                '<strong>Estructurales:</strong> Representan la estructura estatica de un sistema, mostrando diferentes niveles de detalle en cuanto abstracción e implementación ',
                ' - Ayudando a mostrar las diversas partes que conforman el sistema, como se conectan y su jerarquia ',
                '  - De clase          - De componentes          ',
                '  - De objetos        - De estructura compuesta ',
                '  - De despliegue     - De paquetes             ',
                '  - De perfiles                                 ',
                '',
                '<strong>Comportamiento:</strong> Se enfoca en los aspectos dinamicos del sistema o del proceso, y se enfatiza lo que debe ocurrir en tiempo de ejecución ',
                '  - De actividades    - De interacción      ',
                '  - Casos de uso      - De tiempos          ',
                '  - De secuencia      - Maquinas de estados ',
                '  - De comunicación                         ',
                '',
                '- Si bien UML no tiene un diagrama especifico para Bases de datos o redes, tambien puede ser usado para estos propositos con algunos cambios ',
            ]),
        new Item(Keys.UML_MODEL_C4,
            [
                '- EL arquitecto tiene a menudo la tarea de visualizar la arquitectura de su aplicación, ya sea existente o para un potencial cambio',
                '- Estos conceptos deben ser plasmados de manera que se entienda por diferentes partes, negocio, clientes, desarrolladores, directivos, etc...',
                '- Para cada grupo, debe adquirir un aspecto diferente, esta herramienta debe describir y comunicar la arquitectura del sistema',
                '- Existen 4 niveles, donde cada abstraccion debe brindar más información y aumentar los detalles que el anterior ',
                '',
                '<strong>Contexto del sistema:</strong> El nivel principal, donde se muestra el panorama general, visualizando las interacciones entre el sistema y ',
                ' - los actores, para las personas sin conocimientos tecnicos, pero que desean tener un panorama, resulta bastante util',
                '<strong>Contenedores:</strong> Nivel para aprender sobre la estructura interna del sistema, estos deben tratarse como unidades ejecutables, ',
                ' - o implementables por separado, como dependencias externas y el almacenamiento de datos',
                '<strong>Componentes:</strong> En este nivel, se pueden entrar en detalles de un contenedor especifico, este nivel tiene una gran conexión, ',
                ' - con el codigo base y suele estar derivado directamente de este',
                '<strong>Codigo:</strong> En el ultimo nivel se deben proporcionar algo de codigo, como diagramas UML, diagramas ERD, entre otros, ',
                ' - estos diagramas solo deben incluir si aportan valor, de lo contrario se deben omitir',
                '',
                '- Estos diagramas se pueden generar mediante fragmentos de codigo DSL, por lo que tambien se les puede hacer seguimiento en nuestro codigo base'
            ])
    ];

export const FRAMEWORKS =
    [
        new Item(Keys.FRAMEWORKS_FRAMEWORKS,
            [
                '- Son marcos de trabajo con la finalidad de acelerar y aumentar la calidad del codigo desarrollado ',
                '- Evitan perder tiempo desarrollando funciones que el propio entorno ya tiene ',
                '- Aumentan la productividad y la reutilización de codigo ',
                '- Existen infinidad de frameworks tanto para back como front, desarrollo movil, persistencia y analisis de datos, etc... '
            ]),
        new Item(Keys.FRAMEWORKS_CASE,
            [
                '- Ingeniería Asistida por Computador, es el desarrollo y mantenimiento de proyectos de software por medio de herramientas de software ',
                '- Existen herramientas para cada etapa de desarrollo, ahorrando recursos además de otros beneficios como consistencia y unificación ',
                '',
                '<strong>Documentación:    </strong> Crea documentos de cualquiera de las etapas del proyecto y para diferentes tipos de personas(DrExplain)',
                '<strong>Configuración:    </strong> Son utiles para el control de versiones y la evolución del software(Git & Mercurial)',
                '<strong>Diseño:           </strong> Creación de la estructura del programa y de su desglose para detallarlos y refinarlos(Star UML) ',
                '<strong>Analisis:         </strong> Ayuda a cumplir con los requisitos al analizar los diagramas por posibles falencias, omisiones ó redundancias(casecomplete) ',
                '<strong>Implementación:   </strong> Programas como los IDEs(Intellij) y herramientas para hacer prototipos(Mockup Builder) y generación de codigo base(Jhispter) ',
                '<strong>Calidad & Pruebas:</strong> Usadas para realizar pruebas de software(Jmeter) y aumentar la calidad(Sonar)',
                '<strong>Mantenimiento:    </strong> Sirven para documentar errores y seguimiento de defectos(HP Quality Center) ',
            ]),
        new Item(Keys.FRAMEWORKS_IOC,
            [
                '- La inversion de control es la implementación del principio de Hollywood en la que se basan muchos frameworks para funcionar ',
                '- El framework es quien toma el control de la ejecución del codigo del usuario modificando el ciclo de vida como tal ',
                '- Permite añadir nuevas funciones prefabicadas sin tener que modificar el codigo por medio de la inyección de dependencias ',
            ]),
        new Item(Keys.FRAMEWORKS_IOD,
            [
                '- La inyección de dependencias Permite modificar y extender nuestro codigo mucho más facil ',
                '- Solo es especificar que funcionalidades queremos añadir y estaran disponibles de manera transversal ',
                '- El codigo modificado se vuelve más reutilizable, compacto y manejable, además de que tiene un mejor reparto de responsabilidades ',
                '- Asi se tiene un codigo compuesto, menos acoplado y mejor abstraido, donde lo más importante es que hace, en vez de como lo hace ',
                '- Tambien ayuda al manejo implicito de las dependencias y una mejor visión de como se relacionan las diferentes partes del sistema'
            ]),
        new Item(Keys.FRAMEWORKS_SCAFFOLDING,
            [
                '- Es la generación automatica de codigo funcional, archivos, carpetas, configuraciones, interfaces graficas, etc... ',
                '- Generalmente se basa en la creación de las operaciones CRUD, basandose en un modelo de datos previo ',
                '- Algunos frameworks pueden ayudar en este sentido, e incluso existen aplicaciones con este proposito ',
                '',
                '- No solo se genera el codigo funcional, tambien se generan las bases para crear las pruebas unitarias y de integración respectivas ',
                '- Un problema comun suele ser la sobre ingenieria ya que se genera una base enorme de codigo que se debe comprender y mantener ',
                '- Cada generación se debe acomodar al framework que se escoja y a la forma de trabajar del equipo, no al reves ',
            ]),
        new Item(Keys.FRAMEWORKS_IOD_SPRING,
            [
                '- La inyección de depencias es un patron de diseño que promueve un bajo acoplamiento y una gran modularidad ',
                '- El framework de Spring ha adoptado este principio y permite 3 formas diferentes de implementarlo ',
                '- Esto permite delegar la administración de los objetos necesarios al framework y asi preocuparse en el porque, en vez del como ',
                '',
                '<strong>Inyección por constructor:</strong> Proporciona todas las dependencias de un objeto al momento de su inicialización ',
                ' - la cual se realiza mediante el propio constructor de la clase',
                '<strong>Inyección por campo:</strong> Establece directamente las dependencias en los campos de una clase, siempre que se anote con <em>@Autowired</em> ',
                ' - esto se hace por medio de reflexión, iterando sobre los campos e inyectando las dependencias despues de crear la instancia ',
                ' - esto se puede evitar y hacer que las inyecciones de este tipo, sean perezosas, ',
                ' - validandose e inyectandose, solamente justo antes de usarse, si el campo tambien se anota con <em>@Lazy</em>',
                '<strong>Inyección por setter:</strong> Se proporciona la dependencia, a traves de un metodo setter, esto es adecuado para escenarios ',
                ' - donde la mutabilidad de las dependencias es posible ',
                '',
                '- Los primeros 2 tipos son similares, pero con diferencias sutiles que hacen que se prefiera la de constructor sobre la de campo ',
                '',
                '<strong>Inmutabilidad:</strong> La instancia puede ser marcada como <em>final</em> por lo que se evitaran errores, ',
                ' - si se intentara modificar el valor inyectado por error ',
                '<strong>Dependencias Explicitas:</strong> Esto hace que todas las depencias necesarias para el funcionamiento sean claras y visibles ',
                ' - desde el principio, ayudando a entender mejor la relacion entre las clases y sus dependencias ',
                '<strong>Testing unitario:</strong> Se facilitan los tests ya que se pueden pasar los objetos simulados(mocks) como argumentos al crear la prueba ',
                ' - sin tener que usar reflexión o otros metodos, para configurar el ambiente ',
                '<strong>Fail Fast:</strong> Si hay algun fallo en alguna dependencia, o en las subdependencias, la aplicación fallara justo al iniciar ',
                ' - por lo que cualquier fallo o dependencia requerida, sera detectado como un fallo temprano, y no cuando se este en ejecución ',
                '<strong>Seguridad en tiempo de compilación:</strong> De esta manera es posible asegurarse de proporcionar todas la instancias necesarias ',
                ' - antes de que se ejecute la aplicación, reduciendo errores en tiempo de ejecución ',
                '',
                '- Aunque los otros tipos tienen casos donde son más convenientes, e incluso la unica opción, la Inyeción por Constructor ',
                ' - se considera la mejor opción, creando aplicaciones más testeables, robustas y mantenibles ',
            ]),
        new Item(Keys.FRAMEWORKS_CODE_STRUCTURE,
            [
                '- Al desarrollar una aplicación con Spring, a menudo el desarrollador se enfrenta con la decisión de como ordenar los paquetes de la aplicación',
                '- 2 enfoques comunes suele ser el de dividir los paquetes por <em>capas</em>(roles) o por <em>feature</em>(vertical slice) ',
                '- Esta forma de dividir los archivos afecta directamente la arquitectura del proyecto, simplificando o complicando su entendimiento ',
                '',
                '<strong>Por capas:</strong> Los componentes se organizan en función de capas funcionales, representado una responsabilidad distinta dentro de la arquitectura',
                '<strong>Por funcionalidad:</strong> Se organizan en función de caracteristicas comunes o funcionalidades, estando contenida junto a los componentes necesarios ',
                '',
                '<strong>Para Monolitos:</strong> VSA ayuda a evitar la temida "gran bola de lodo" al mantener las caracteristicas encapsuladas y faciles de comprender/refactorizar ',
                '<strong>Para Microservicios:</strong> Proporciona una transición fluida, ya que los servicios estan estructurados y divididos de manera independiente ',
                '',
                'com.example.myapp                               com.example.myapp             ',
                '├── controller                                  ├── user                      ',
                '│   ├── UserController.java                     │   ├── UserController.java   ',
                '│   ├── ProductController.java                  │   ├── UserService.java      ',
                '│   └── ...                                     │   ├── UserRepository.java   ',
                '├── service                                     │   └── User.java             ',
                '│   ├── UserService.java                        ├── product                   ',
                '│   ├── ProductService.java                     │   ├── ProductController.java',
                '│   └── ...                                     │   ├── ProductService.java   ',
                '├── repository                                  │   ├── ProductRepository.java',
                '│   ├── UserRepository.java                     │   └── Product.java          ',
                '│   ├── ProductRepository.java                  ├── config                    ',
                '│   └── ...                                     │   ├── AppConfig.java        ',
                '├── model                                       │   ├── SecurityConfig.java   ',
                '│   ├── User.java                               │   └── ...                   ',
                '│   ├── Product.java                            └── util                      ',
                '│   └── ...                                         ├── StringUtils.java      ',
                '├── config                                          └── ...                   ',
                '│   ├── AppConfig.java                                                        ',
                '│   ├── SecurityConfig.java                                                   ',
                '│   └── ...                                                                   ',
                '└── util                                                                      ',
                '    ├── StringUtils.java                                                      ',
                '    └── ...                                                                   ',
                '',
                '<strong>Vertical Slice:</strong> Mayor cohesión y una mejor encapsulación',
                '<strong>- Pros</strong>',
                '&bull; Alta cohesión al agrupar componentes directamente relacionados, promoviendo la encapsulación, modularización y mantenibilidad ',
                '&bull; Nuevas funciones son independientes entre si, reduciendo posibles efectos segundarios y abstracciones innecesarias',
                '&bull; Permite una rapida incorporación de los desarrolladores, ya que pueden concentrarse en comprender una sola caracteristica ',
                '<strong>- Contras</strong>',
                '&bull; Componentes tranversales pueden generar codigo duplicado ',
                '&bull; Reutilizar componentes y mantener la coherencia se dificulta debido a la misma separación ',
                '&bull; La navegabilidad se puede complicar si existen muchos componentes compartidos, es especial si no hay disciplina ',
                '',
                '<strong>Capas tecnicas:</strong> Se enfoca en el Principio de Responsabilidad Unica(SRP)',
                '<strong>- Pros</strong>',
                '&bull; Separación clara de responsabilidades, mejorando la mantenibilidad ',
                '&bull; Modificar una capa, no necesariamente afecta a las demas ',
                '&bull; Es tradicional y muchos formas de trabajar, ejemplos y documentación se encuentran de esta manera ',
                '<strong>- Contras<strong>',
                '&bull; Rigidez para agregar nuevas funciones, afectando multiples capas',
                '&bull; Acoplamiento estrecho entre capas ',
                '&bull; Dificulta la modularidad y una división, basado en contextos para microservicios',
            ])
    ];

export const CONOCIMIENTOS_EMPIRICOS =
    [
        new Item(Keys.CONOCIMIENTOS_EMPIRICOS_CRISTALES_ROTOS,
            [
                '- Esta teoria predice que los desperfectos del ambiente van a generar la sensación de que la ley no existe ',
                '- Corregir los errores, aun por más por pequeños que sean evitara que el software se degenere ',
                '- Las pequeñas faltas pueden conllevar a transgresiones mayores ',
                '- Establecer normas claras y realizar revisiones periodicas ayuda a evitar este fenomeno ',
            ]),
        new Item(Keys.CONOCIMIENTOS_EMPIRICOS_STATUS_QUO,
            [
                '- Es la preferencia innata del ser humano a la estabilidad ',
                '- Nuestras emociones son un punto de inflexión a la hora de tomas decisiones que arriesguan esta estabilidad ',
                '- Este fenomeno esta ligado a otros más comunes y que se viven casi a diario ',
                '',
                '<strong>Aversión a la perdida:</strong> Es más facil aferrarse a una cantidad u objeto en el que haya invertido tiempo y dinero aunque este genere perdidas ',
                '<strong>Efecto de dotación:</strong> Los bienes se perciben de manera más valiosa cuando son de nuestra propiedad ',
                '<strong>Evitar las consecuencias:</strong> Las personas tienden a evitar decisiones que conlleven arrepentimientos, aunque ironicamente estp mismo puede generarlos ',
                '',
                '- Estos fenomenos se pueden dar en el mundo del software al no realizar refactors, o limpiezas debido a que "funciona" ',
                '- Este negación del cambio solo permite que comportamientos complejos o poco optimos perduren y crezcan con el tiempo ',
            ]),
        new Item(Keys.CONOCIMIENTOS_EMPIRICOS_COSTO_HUNDIDO,
            [
                '- La falacia del costo hundido es la tendencia a mantener proyectos fracasados ó obsoletos ',
                '- Esto se debe al tiempo y gastos invertidos en los proyectos, que no queremos soltar por la aversion a las perdidas ',
                '',
                '- En la industria del software es comun tener casos donde hay sistemas que constantemente deben ser parcheados, ',
                ' - costando tiempo y dinero, y donde la solucion más optima seria rehacer el sistema que continuar con este tipo de situaciones ',
                '',
                '- Tambien estan los casos donde las personas se niegan a abandonar proyectos estables, pero que eventualmente seran obsoletos ',
                ' - ya que migrar esto implica un costo, que puede ser menor que mantener a un proyecto legacy; pero esto no se ve a corto plazo ',
            ]),
        new Item(Keys.CONOCIMIENTOS_EMPIRICOS_TIPOS_PROGRAMADORES,
            [
                '<strong>The duct tape:</strong> Este programador arreglara el error sin importale como, la prioridad para el siempre sera arreglar el error, ',
                ' - sin importar la complejidad de la solución ni lo que se deba hacer y/o dañar ',
                '',
                '<strong>The perfectionist programmer:</strong> Cada segmento de codigo es una obra de arte, no le importan las fechas limites ó los presupuestos, ',
                ' - solo que el codigo generado sea hermoso, eficiente, e inmutable, a menos que sea el mismo quien lo cambie ',
                '',
                '<strong>The anti-programming programmer:</strong> Es aquel que siempre evitara reinventar la rueda, ya sea usando librerias de terceros',
                ' - ó usando codigo ya hecho por alguien más, pero siempre se decantara por la solución más simple, ',
                ' - aunque esta no sea eficiente o retrocompatible, pero si sera facil de entender',
                '',
                '<strong>The half-assed programmer:</strong> Este programador es el más odiado por los demás Programadores, ya que solo le importa cumplir con su tarea, ',
                ' - la calidad ó la eficiencia son solo utopias con el; y lo más seguro es que generara problemas a largo plazo, ',
                ' - siempre sera eficaz a cuanto a los tiempos de entrega, aunque esto dañe otras partes del sistema ',
                '',
                '<strong>The theoretical programmer:</strong> Para este programador siempre habra diferentes maneras de resolver algo, y la mayoria del tiempo lo ocupara pensando ',
                ' - como resolverlo de la mejor manera, por lo que la manera que escoja para hacerlo nunca lo satisfacera al 100%, ',
                ' - pero entregara codigo a tiempo y con buena calidad ',
            ]),
        new Item(Keys.CONOCIMIENTOS_EMPIRICOS_SESGOS_COGNITIVOS,
            [
                '- Son impulsos inherentes a cada ser humano que se basan en sus emociones, conocimientos, experiencias, creencias, etc.. ',
                '- Es la interpretación erronea de la información disponible, y como esto afecta nuestra emisión de juicios ',
                '',
                '<strong>Sesgo de confirmación:</strong> Es la busqueda de sucesos ó interpretaciones para confirmar algo que creemos de manera arraigada ',
                '<strong>Disponibilidad heuristica:</strong> Atajo mental que otorga más valor o credibilidad a la primera información que recordemos ',
                '<strong>Sesgo de anclaje:</strong> Es basarse en la primera información y solo esta fuente para tomar una decisión, sin evaluar otras posibilidades ',
                '<strong>Sesgo de observación selectiva:</strong> Es cuando diriges toda tu atención solamente a lo que te interesa, sin presta atención a los demás datos ',
                '<strong>Sesgo negativo:</strong> Te enfocas en los sucesos negativos en vez de tomar una posición más neutra ',
                '<strong>Resistencia reactiva:</strong> Se enfoca en hacer lo contrario de lo que alguien te dice ó aconseja, de manera selectiva y racional ',
                '<strong>Sesgo de impacto:</strong> Tendencia a sobrestimar un evento o lugar extraordinario, que pasara de lo excepcional a lo comun ',
            ]),
        new Item(Keys.CONOCIMIENTOS_EMPIRICOS_PREJUICIOS,
            [
                '- El primer paso es aceptar que todos tenemos segos cognitivos, estemos concientes o no de ellos ',
                '- Para combatirlos se pueden usar diferentes estrategias como: ',
                '',
                '- Evitar el <em>punto ciego</em> todos estamos sesgados, el primer paso para evitarlo es aceptarlo ',
                '- Para evitar la <em>subjetividad</em> es ideal tener un equipo diverso y participativo ',
                '- No usar el <em>muro tecnico</em> para eludir o evitar cuestionamientos incomodos ',
                '- Planificar e investigar para salir de nuestra <em>zona de comfort</em>, nos ayuda a encontrar más soluciones ',
                '- Realiza pruebas, no siempre todo funciona o funciona como deberia ',
                '- Mantener afinidad con una persona no significa que debemos de dejar de prestar atención a los demás ',
                '- No aceptar la innovación puede ser tan malo como siempre estar al filo de la vanguardia ',
            ]),
        new Item(Keys.CONOCIMIENTOS_EMPIRICOS_MULTI_TASKING,
            [
                '- Es la capacidad de manejar y realizar multiples tareas al mismo tiempo, este concepto es muy buscado actualmente, aunque tiene pros y contras ',
                '',
                '<strong>Ventajas</strong>',
                '- Si se logra hacerlo de manera eficiente, se pueden ahorrar recursos y aumentar la productividad ',
                '- Mejor reacción a las tareas complejas y un mejor manejo de las responsabilidades ',
                '',
                '<strong>Contras</strong>',
                '- Menor eficacia, al tener un mayor ruido de las acciones por hacer ',
                '- Decaimiento de la memoria y posibles problemas de estres, además de una peor salud fisica y mental ',
                '- Mayor riesgo de errores al tener que estar atento a más cosas ',
                '- Menor calidad del trabajo, además de posibilidades de sufrir de deficit de atención ',
            ]),
        new Item(Keys.CONOCIMIENTOS_EMPIRICOS_MAXWELL_CURVE,
            [
                '- Más horas de trabajo no es sinonimo de productividad, al contrario, esto es un atentado directo',
                '- Este estudio fue realizado principalmente para Scrum, y demuestra de que se puede ser tan optimo como en cascada, usando menos tiempo ',
                '',
                '- Jornadas más cortas no necesariamente significan menos productividad, estas pueden ayudar a: ',
                '&bull; Atraer nuevos talentos',
                '&bull; Mejorar el equilibrio entre vida personal y laboral, teniendo trabajadores más felices y colaborativos ',
                '&bull; Reduce los sentimientos de insatisfacción ',
            ]),
        new Item(Keys.CONOCIMIENTOS_EMPIRICOS_DUNNIN_KRUGGER,
            [
                '- Es la tendencia natural de personas menos habilidosas a sobreestimar sus conocimientos y habilidades ',
                '- Tambien se da de la manera contraria, en la cual personas calificadas tienden a subestimar sus capacidades ',
                '- Una clara representación de este sesgo cognitivo se da con la siguente frase de: <strong>Charles Darwin</strong> ',
                '- <em>La ignorancia genera confianza más frecuentemente que el conocimiento</em>',
                '',
                '<strong>Ejemplos:</strong>',
                '- Cantantes que se creen muy talentosos sin tener tecnica vocal ',
                '- Pacientes que se automedican ya que creen saber más que sus doctores ',
                '- Personas que se entrenan y aumentan sus niveles de competencias, dandose cuenta de sus falencias ',
            ]),
        new Item(Keys.CONOCIMIENTOS_EMPIRICOS_REFORZAMIENTO_SKINNER,
            [
                '- Mediante la manipulación experimental y la observación conductual se esbozo una de las primeras terorias en este ambito ',
                '- Para modificar la conducta humanan o animal se puede utilizar los llamados reforzamientos, ya sean positivos o negativos',
                '- Esto con el fin de eliminar, potenciar o inhibir conductas especificas ',
                '- Los estimulos desencadenan respuestas especificas en las personas, por lo que mediante alguno refuerzo, ',
                ' - se puede ejercer una influencia en dicha reacción o conducta para potenciarse o inhibirse ',
                '',
                '- Algunos tipos de refuerzos pueden ser: ',
                '<strong>Primarios o intrinsecos:</strong> Conductas que generan satisfacción inmediata, comer por ejemplo ',
                '<strong>Secundarios:</strong> Son aprendizajes externos y pueden ser materiales como el dinero o sociales como el recnocimiento ',
                '<strong>Eliminacion de consecuencias:</strong> Son considerados negativos y van de la mano con eliminar actividades desagradables para las personas ',
                '',
                '- Los refuerzos pueden ser continuos o intermitentes dependiendo de la forma mas efectiva para el caso dado ',
            ]),
        new Item(Keys.CONOCIMIENTOS_EMPIRICOS_PASTA_THEORY,
            [
                '- Escribir codigo reutilizable y mantenible es lo ideal, pero siempre es más facil decirlo que hacerlo ',
                '- Un desarrollo exitoso no solo requiere que el codigo funcione, si no que sea mantenible y entendible ',
                '- Para que esto sea posible, se deben evitar antipatrones y tener ciertas estrategias y hasta metodologias propias ',
                '',
                '<strong>Codigo espagueti:</strong> Data de los 70 para hacer referencia a un codigo descuidado y altamente acoplado ',
                '<strong>Codigo lasaña:</strong>    No solo se tiene problemas al ser desprolijos, tambien cuando hay un sobrediseño, que aporta complejidad innecesaria ',
                '<strong>Codigo raviolis:</strong>  Demasiadas piezas pequeñas e individuales, haciendo crecer la pila de llamados sin control ',
                '<strong>Codigo pizza:</strong>     Es una arquitectura plana, donde hay divisiones a nivel codigo, pero no se tienen una estructura logica definida ',
                '<strong>Codigo stromboli:</strong> Es un codigo demasiado acoplado, donde cualquier cambio, por inocuo que sea, puede desembocar un caos en otro sitio ',
                '',
                '- Cualquiera sea la metafora, hay que tener en cuenta que incluso las mejores practicas no son eternas, estas pueden cambiar ',
                ' - por lo que nuestro codigo tambien debe cambiar con ellas, y nunca dejar de lado la mantenibilidad como una meta constante '
            ]),
        new Item(Keys.CONOCIMIENTOS_EMPIRICOS_THINGS_THAT_ARE_NOT_TAUGHT,
            [
                '- Aunque son puntos subjetivos provenientes del Autor, estos ejemplifican gran parte de las vivencias que se pueden tener en la Ingenieria de Software ',
                '',
                '- Rara vez se escriben codigos pequeños o desde cero, ya que hay pocos problemas que puedan ser solucionados de manera facil y rapida ',
                '- No siempre se tiene un lienzo en blanco, en el cual se pueda crear todo una solución, casi siempre habra que mantener o modificar algo que ya existe ',
                '- Es más importante saber el porque de la codificación, que el como, ya que se sabe que caracteristicas debe tener la solución a grandes rasgos ',
                '- La documentación es una gran pieza que no tiene el enfasis suficiente, no solo es escribir codigo funcional, tambies es hacerlos de manera clara ',
                '',
                '- Más importante que la solución, es el valor que esta agrega al negocio, no se gana nada con un buen codigo que no resuelve ningun problema ',
                '- Buenas practicas, Diseño, Principios, y demas cosas se realizan para tener productos escalables y que fallen lo menos posible ',
                '- El codigo no es estatico, significa que debera ser mantenido por otros y mantendremos al de otros tambien, entre más se facilite esto mejor para todos ',
                '- Trabajar con personas tambien puede significar que puede haber incompetencia, sortearla o afrontarla se vuelve necesario con el tiempo ',
                '',
                '- <em>La unica constante es el cambio</em> "Heraclito" todo puede cambiar, ya sea porque no haya requerimientos correctos o se deba ahondar para obtenerlos ',
                '- Todo tiene errores, Asi es más facil de entender que por más usado o testeado que algo sea, jamas estara libre de errores ',
                '- No es un trabajo perfecto, Tendras que hacer cosas que no te agraden, los plazos pueden ser sofocantes, las tecnologias se vuelven obsoletas, etc...',
                '- Se pediran presupuestos, aun cuando no se puedan dar, y aun con las diversas tecnicas que hay, solo la experiencia lo acerca más a la realidad ',
                '',
                '- No todo es codificar, tambien hay tiempo malgastado en reuniones, pero no todas las reuniones son inutiles, ',
                ' - la información debe compartirse con los demas involucrados para que las cosas sigan funcionando de manera eficiente ',
                '- El conocimiento del negocio es tan importante como tus habilidades de codificación, este conocimiento adquirido suele ser subyacente, ',
                ' - pero tambien mejora los resultado y puede evitar problemas debido a desconocimiento o a la falta de claridad en los requisitos ',
                '- El codigo suele ser un ente vivo que evoluciona y cambian con el tiempo, eso en cierto modo lo dota de un estilo y/o estetica en su apariencia general ',
                ' - este "sentido" se va aprendiendo con el tiempo, y es intrinseco para cada desarrollador haciendolo subjetivo y no enseñable ',
                ' - tanto asi que un codigo "agradable" puede ser considerado limpio, organizado, mantenible, o en caso contrario te hace sentir "incomodo" cuando es terrible '
            ]),
        new Item(Keys.CONOCIMIENTOS_EMPIRICOS_CODING_EASY_PART,
            [
                '- Los tutoriales hacen parecer que todo proyecto es facil, que de principio a fin no encontraras problemas, algo que es poco realista ',
                '',
                '- Jamas se trata de solo codificar, hay que analizar lo que existe, y como esto puede verse afectado, si se descarta totalmente, si es modificado, ',
                ' - como pueden verse afectados partes de terceros, e incluso los mismos clientes que usan/requieren del proyecto',
                '',
                '- Hacer un plan es fundamental, dependiendo de lo que se requiera, un nuevo desarrollo, una migracion, una nueva funcionalidad, ',
                ' - un refactor, una actualización, además de que realizar estimaciones y presentar plazos de entrega, etc... ',
                '',
                '- Habra momentos donde se deberan hacer cambios contrareloj, estos plazos ajustados vienen generalmente desde negocio y tienen razones de peso detras,  ',
                ' - cumplimiento de normas, contratos firmados, integraciones con proveedores, migraciones de datos, acuerdos de servicio, etc.. ',
                '',
                '- Comunicarse con otros equipos y/o personas, es comun necesitar realizar acciones que afectan a otras areas o que son compentencia de otras areas ',
                ' - donde solo es necesario brindarles apoyo, en cualquiera de los casos, la comunicación empresarial e interpersonal es fundamental ',
                '',
                '- Hay que dañar para arreglar, por más control o separación que se tenga, siempre habra algo que dejara de funcionar o cambiara su comportamiento, ',
                ' - por lo que tener un contro total es improbable y una estimación poco realista, un ejemplo practico de la <em>Ley de Hyrum</em>',
                '',
                '- Los requisitos no son claros, y si son claros estan incompletos, nunca faltara el requisito que es intrinseco y por lo tanto nunca se menciona, ',
                ' - o el requisito que solo existe a nivel de codigo, pero que es fundamental y nadie documento, entre otros casos, que suceden despues de iniciar ',
            ]),
        new Item(Keys.CONOCIMIENTOS_EMPIRICOS_BOILING_FROG,
            [
                '- Este sindrome se basa en una leyenda urbana, donde una rana es hervida lentamente, con un premisa simple, si la rana se coloca de repente, ',
                ' - esta saltara y se salvara, pero si se coloca en agua tibia y la temperatura va subiendo lentamente, esta no percibira el peligro, ',
                ' - hasta que sea demasiado tarde, debido a que esta ha intentando adaptarse a sus nuevas condiciones, ',
                '- El modelo más adecuado para hablar de este sindrome, es la evolución, donde se evidencia la <em>supervivencia del más apto</em>',
                '- Esto es aplicable a diversas areas, desde los negocios y mercados de inversión, hasta situaciones laborales y personales ',
                '',
                '- Este sindrome tiene una base tecnica, que la teoria del <em>efecto domino</em>, que sugiere que una acción iniciara una cadena ',
                ' - de eventos que culminaran en un evento posterior predecible',
                '- Tambien se puede encontrar una relación directa con el <em>efecto mariposa</em>(matematicas) y la <em>paradoja de sorites</em>(filosofia)',
            ]),
        new Item(Keys.CONOCIMIENTOS_EMPIRICOS_BOYS_SCOUTS,
            [
                '- Los Boys Scouts tienen una regla general <em>Dejar siempre el campamento más limpio de lo que se encontro</em>',
                '- Si encuentras algun desorden, limpialo, mejoras intencionalmente el entorno, para el siguiente grupo de personas ',
                '- Esta misma regla aplica para nuestros desarrollos, asi se frenaria o se reduciaria al menos el implacable deterioro de los sistemas ',
                '- Asi no solo estas cuidando de tu propio codigo, tambien de otros equipos, ayudandose entre todos, con grandes beneficios a largo plazo ',
            ]),
        new Item(Keys.CONOCIMIENTOS_EMPIRICOS_ZEIGARNIK,
            [
                '- En general la sensación de no haber terminado algo que se empezo nos deja con una sensación desagradable, este es el efecto <em>Zeigarnik</em>',
                '',
                '- A principios del siglo XX la investigadora sovietica <em>Bluma Zeigarnik</em> junto al psicologo <em>Kurt Lewin</em> observaron un comportamiento curioso, ',
                ' - en los meseros, que recordaban mejor los pedidos de las mesas que aun estaban sin servir o sin pagar, que de las que ya estaban completadas',
                '',
                '- La memoria de los meseros parecia dar mayor prioridad a evocar información sobre pedidos inconclusos, ',
                ' - sin importar si habian sucedido antes o despues de otros, que ya habian sido pagados o entregados, estos se perdian con mayor facilidad',
                '',
                '- Esto desemboco en un estudio, donde un grupo de voluntarios debia resolver diferentes tipos de problemas, ',
                ' - el experimento se centro en el efecto que tenia la interrupción de las tareas y no en su rendimiento o su finalización',
                '',
                '- Despues se comprobo que estas personas recordaban mejor los datos acerca de las pruebas, que habian sido interrumpidas y no de las finalizadas',
                '',
                '- Además de este y otros estudios, tambien tuvieron influencia en la <strong>Teoria de Gestalt</strong>',
                '',
                '- Esto es importante ya que afecta a cualquier estudio relacionado con la memoria, además de que se extiende a cualquier proceso de aprendizaje ',
            ]),
        new Item(Keys.CONOCIMIENTOS_EMPIRICOS_PAIR_PROGRAMMING,
            [
                '- En la actualidad con los modelos de lenguaje y las aplicaciones para generar codigo han estado relativamente disponibles por un tiempo ',
                '- Los desarrolladores han descubierto sus fortalezas y debilidades, y han visto como ofrecer más rapido valor a los clientes ',
                '- Pero esta generación de codigo no es infalible, siempre necesitara revisión y si es demasiado exhaustiva, reducira la productividad ',
                '- Sin embargo existe un modelo de programación que integra la revisión continua del codigo, la programación por pares ',
                '- Esto produciria un mejor codigo, de lo que hubiera sido producido individualmente; de esta manera la IA se puede convertir en la pareja ideal ',
                '',
                '- En el pair programing generalmente siempre existe el <em>conductor</em> quien realmente escribe el codigo y el otro es el <em>navegante</em> ',
                ' - que comprueba el trabajo realizado conforme se va haciendo y vigila el panorama en general',
                '- Diversos estudios han demostrado que contrario a las objeciones y el pensamiento de que seria el doble de costosa, esta manera de trabajar, ',
                ' - solo añade un 15% más de tiempo de desarrollo y en cambio retribuye con un 15% menos de errores y defectos',
                '- Esto en parte a que el proceso de revisión se hace durante y no despues, asi compartir el conocimiento y posibles correciones eran más eficientes ',
                '- Este ejercicio se ha llegado a comparar con 2 pilotos en una cabina de avión, donde ambos son capaces de tomar el control en cualquier momento ',
                '- Por lo que el nivel de los programadores debe ser similar, de lo contrario podria tornarse en una sesión de mentoria ó de entrenamiento',
                '',
                '- El principal problema de la IA y su codigo generado, es cuando toma la posición de conductor, con un navegante incapaz',
                '- Generando codigo que es directamente copiado y pegado, ya sea por mediocridad, desconocimiento o pereza',
                '- Esta falta de control de calidad suele repercutir en la necesidad de refactorizar y hacer correcciones en el plazo cercano ',
                '- La IA es sumamente eficiente en la generación de codigo, pero esto no puede realizarse sin supervisión, la calidad proviene del desarrollador ',
                '- Aca más que nunca es importante la experiencia, la aplicación de patrones, principios, arquitecturas, etc..',
                '',
                '- <em>El trabajo de la IA es ser rápida. Tu trabajo es ser bueno</em>, la programación en pareja es un multiplicador de fuerza, ',
                ' - mientras que uno se centra en la sintaxis y la implementación, el otro cuida el panorama en general, comprende y revisa el codigo generado ',
            ]),
        new Item(Keys.CONOCIMIENTOS_EMPIRICOS_STAGES_COMPETENCE_MODEL,
            [
                '- Este modelo diseñado por <em>Noel Burch</em> identifica y gerarquiza 4 etapas por las que pasan los individuos cuando aprenden una nueva habilidad ó conocimiento ',
                '',
                '<strong>Incompetencia inconsciente:</strong> <em>1Era Etapa</em>, Las personas no son conscientes de su falta de conocimiento y/o habilidades ',
                '- No saben lo que no saben, y posiblemente no vean la necesidad de mejorar, su intuición suele ser erronea ',
                '',
                '<strong>Incompetencia consciente:</strong> <em>2da Etapa</em>, Las personas se dan cuenta de su falta de conocimiento y pueden sentirse frustradas o abrumadas ',
                '- Son conscientes de la cantidad de aprendizaje que les falta para mejorar, sus analisis suelen ser erroneos ',
                '',
                '<strong>Competencia consciente:</strong> <em>3ra Etapa</em>, Las personas han desarrollado los conocimientos y habilidades necesarios para desempeñarse eficazmente ',
                '- Es posible que necesite practicar de manera regular para mantener un buen desempeño, sus analisis suelen ser correctos ',
                '',
                '<strong>Competencia inconsciente:</strong> <em>4ta Etapa</em>, Las personas han desarrollado un nivel de competencia tan alto que logran hacer tareas sin pensarlo ',
                '- Han internalizado el conocimiento y la habilidad hasta el punto de que se ha convertido en algo natural, su intuición suele ser correcta ',
            ]),
        new Item(Keys.CONOCIMIENTOS_EMPIRICOS_EXPIERENCE_LESSONS,
            [
                '- Las soluciones inteligentes no siempre son buena opción, lo ideal siempre sera hacer las cosas los más simple posibles ',
                '- Dar valor, retener algo hasta que este totalmente perfeccionado, esta frenando la creación de valor para la empresa ',
                '- Las relaciones son importantes si se quiere progresar, no te limites a hacer solamente tu trabajo, se servicial con todos los integrantes de tu empresa ',
                '- Nunca seas invisible visualiza tus capacidades frente a la dirección y que no solamente tus compañeros lo sepan ',
                '- Construye una red de contactos que se expanda más alla de tu empresa actual, nunca se sabe cuando estas conexiones pueden ser utiles ',
                '- Este dispuesto a realizar tareas que desconozca o que requieran de esfuerzo adicional, esto siempre sera bien visto por los jefes ',
                '- Persigue la aventura e interesate por nuevas tecnologias, no te enfoques solamente en crecer salarialmente ',
                '- Desafia las tendencias naturales, no siempre se tiene que ser competitivo, pero hay momentos donde es necesario serlo ',
                '- Un buen trabajo regularmente conlleva tiempo, más del deseado, ser perfeccionista generalmente solo trae un mayor uso de recursos ',
                '- EL software que se esta creando, algun dia sera descontinuado o dejara de funcionar, por eso cree incrementos pequeños y entregables ',
            ]),
        new Item(Keys.CONOCIMIENTOS_EMPIRICOS_CODE_MAINTAINER,
            [
                '- El mantenimiento del codigo es una fase fundamental de cualquier aplicación y a menudo tambien una de las más dificiles ',
                '- A manera de adagio popular, codifique siempre como si la siguiente persona fuera un psicopata violento que sabe donde vive ',
                '- Intente dejar un codigo tan entendible que cualquier persona con o sin experiencia pueda comprenderlo y hasta disfrutar de realizar cualquier cambio ',
                '- Esto no solo evita costos y reduce el tiempo, tambien evita errores debido a un mal entendimiento de la aplicación ',
            ])
    ];

export const PATRONES =
    [
        new Item(Keys.PATRONES_DEFINITION,
            [
                '- Son soluciones especificas y reutilizables a problemas comunes, o con abstracciones similares, los más conocidos son: ',
                '<strong>GOF:</strong> Que se dividen en 3, creacionales, estructurales y de comportamiento ',
                '<strong>GRASP:</strong> Representan los principios básicos de la asignación de responsabilidades a objetos, en forma de patrones ',
            ]),
        new Item(Keys.PATRONES_GOF,
            [
                '- Los creadores de de GoF, proponen 2 principios basicos: ',
                '<strong>Programar orientado a interfaces y no a una implementación:</strong> El codigo se deberia comportar como una <em>Caja negra</em>, ',
                ' - donde solo interesa lo que puede hacer y lo que necesita, en vez del como, no nos debe interesar el funcionamiento interno ',
                '<strong>Favorecer la composición sobre la herencia:</strong> Aunque funcionalmente son similares conceptualmente no lo son, aunque ambas ',
                ' - permiten la adición de funcionalidades y evitan la duplicación, la herencia lo hace exponiendo el funcionamiento de la clase, ',
                ' - mientras que la composición no, llegando a afirmaciones como que la herencia no es compatible con la encapsulación',
                '',
                '<strong>Creacionales:</strong> Se usan para la creación de objetos ya sea ocultando o simplificando la creación de estos ',
                '<strong>Estructurales:</strong> Separan la interfaz de su implementación por medio de la abstracción ',
                '<strong>Comportamiento:</strong> Definen la comunicación entre objetos, y la independencia de esta de los objetos ',
            ]),
        new Item(Keys.PATRONES_DESGLOSE_GOF,
            [
                'Creacionales ',
                '<strong>- Singleton:</strong> Restringe la instancia de la clase a un solo Objeto ',
                '<strong>- MVC:</strong> Plantea la separación en 3 capas, cada una con una función especifica ',
                '<strong>- Abstract factory:</strong> Permite crear familias de objetos relacionados sin especificarlas directamente ',
                '<strong>- Builder:</strong> Permite crear objetos bajo demanda, y solo con las propiedades especificadas ',
                '',
                'Estructurales ',
                '<strong>- Adapter:</strong> Permite la comunicación entre objetos de tipos diferentes, independientemente del tipo de cada objeto ',
                '<strong>- Decorator:</strong> Añade funcionalidades extra añadiendo clases que ya las tienen, sin afectar al codigo existente ',
                '<strong>- Facade:</strong> Permite acceder facilmente a muchas funciones, muy usado en librerias y frameworks ',
                '<strong>- Bridge:</strong> Permite dividir clases muy relacionadas en otras más pequeñas e independientes ',
                '',
                'Comportamiento ',
                '<strong>- Iterator:</strong> Permite recorrer los elementos de una colección ',
                '<strong>- Mediador:</strong> La comunicación entre objetos se da solo mediante un elemento central ',
                '<strong>- Observer:</strong> Permite generar subscripciones y que todos los oyentes se enteren de los cambios ',
                '<strong>- Estrategia:</strong> Permite que una clase escoja la mejor implementación de acuerdo al caso',
            ]),
        new Item(Keys.PATRONES_GRASP,
            [
                '- Intentan hacer que la Asignación de responsabilidades sea lo más optima posible',
                '- Alta cohesion mediante la refactorización, y bajo acoplamiento al no abusar de la herencia ',
                '- Cada componente tiene una función especifica en la que es experto',
                '- Conocer las peculiaridades de cada lenguaje como ciclos de vida e integración con el SO ',
                '- Darle prioridad al polimorfismo más que a las sentencias de control al usarse en los objetos ',
                '- Evitar el uso de variables globales, especialmente en el desarrollo web ',
                '- La creación de factorias y clases intermedias ayudan a la mantenibilidad del código',
            ]),
        new Item(Keys.PATRONES_DESGLOSE_GRASP,
            [
                '<strong>Indirección:</strong> Mejorar el acoplamiento entre 2 clases, asignando a una clase como mediadora entre ellas ',
                '- Ideal para clases con alta volutibilidad y uso de librerias de externas, como clientes y servicios ',
                '',
                '<strong>Fabricación pura:</strong> Son clases que no representan un objeto o una abstracción especifica del dominio ',
                '- Se creo para reducir el acoplamiento y aumentar la reutilización al tener clases constructoras personalizadas ',
                '',
                '<strong>Creación:</strong> Una clase <strong>B</strong> es responsable de crear otra clase <strong>A</strong> si se cumplen ciertos criterios',
                ' - B contiene a A',
                ' - B es una agregación/composición de A',
                ' - B usa/almacena a A',
                ' - B tiene toda la información necesaria para crear a A',
                '',
                '<strong>Experto en Información:</strong> La responsabilidad de realizar una acción, solo es de aquel que conoce todo lo necesario ',
                '- Reduce el acoplamiento, aumentando la cohesión y encapsulamiento, siempre y cuando se tengan consideraciones como: ',
                ' - Logica de Negocio ',
                ' - Persistencia',
                ' - Interfaz de Usuario ',
                '',
                '<strong>Controlador:</strong> Sirve como intermediario entre una interfaz y el algoritmo que la implementa ',
                '- Es aquel que contiene la logica necesaria para redireccionar a los componentes indicados segun los datos ingresados ',
                '',
                '<strong>No hables con extraños:</strong> Un metodo solo invocara a metodos de ',
                ' - De si mismo (this)',
                ' - De su area de parametros ',
                ' - Un objeto creado en su propio ambito (los demás se dan por incluidos)',
            ]),
        new Item(Keys.PATRONES_PERSISTENCE_PATTERNS,
            [
                '- Son usados para el acceso la y manipulación de los datos (persistencia), desde diferentes fuentes, como Bases de Datos',
                '- Tambien son una forma de diferenciar entre la Programación Orientada a Objetos y la Programación Orientada a Datos',
                '- Mientras que en <em>POO</em> pone enfasis en conceptos como la Encapsulación, Polimorfismo y la Abstracción',
                '- En <em>POD</em> se hace enfasis en la separación entre los datos y su manipulación, la generalización y la inmutabilidad',
                '',
                '<strong>Driver Pattern:</strong> Este patron es el más cercado a la BD, es el responsable de establecer la respectiva conexión y comunicación ',
                ' - Esto es beneficioso en que se hace una extracción de datos, sin procesar e inmutable desde la BD',
                ' - La abstracción puede traer complejidad extra y errores en la conversión a objetos de dominio, necesaria para manipularlos',
                '',
                '<strong>Data Mapper:</strong> Es una capa mediadora entre los objetos y su representación en BD, de manera que se garantize la independencia de ambos enfoques ',
                ' - Puede ser aplicado a Sql y NoSql sin problemas, además de que multiples frameworks ya tienen este patron implementado y listo para ser usado',
                '',
                '<strong>Objeto de Acceso a Datos(DAO):</strong> Esta abstracción encapsula todas las interacciones con la fuente de datos',
                ' - Permitiendo que ambas partes cambien sin verse afectadas, solamente con el requerimiento de que cumplan el contrato especificado ',
                '',
                '<strong>Active Record:</strong> Similar a los enfoques anteriores, con la diferencia, de aca es la propia entidad la que realiza todas sus operaciones ',
                ' - Este empoderamiento simplifica la integración con la BD, pero lleva a penalizaciones y una violación del principio de responsabilidad unica ',
                '',
                '<strong>Repository:</strong> Es el patrón más orientado hacia el manejo de objetos y su importancia para el dominio, mediante el uso de metodo declarativos ',
                '',
                '<strong> Patron                      Ventajas                                                  Desventajas                 </strong>                ',
                '            - Enfoque directo de comunicación con la BD            - Reduce la portabilidad al estar vinculado directamente a la BD                 ',
                ' Driver     - Permite ajustes y un control de bajo nivel           - Puede tener codigo de bajo nivel o muy detallado, haciendolo poco mantenible   ',
                '            - Util para optimizaciones especificas por BD                                                                                           ',
                '',
                ' Data       - Separa el acceso a BD del Dominio                    - La complejidad del mapeo, puede afectar el rendimiento y la codificación       ',
                ' Mapper     - Admite personalizaciones en las transformaciones     - Puede requerir codigo repetitivo para la transformación entre ambas partes     ',
                '',
                ' DAO        - Mayor modularidad al separar los datos del dominio   - Puede agregar complejidad extra y aumentar el tiempo de desarrollo             ',
                '            - Admite el intercambio entre multiples motores de BD                                                                                   ',
                '',
                ' Active     - Simplifica las operaciones de cada entidad           - Acoplamiento indebido entre los datos y la logica del dominio                  ',
                ' Record     - Reduce la necesidad de una capa de datos separada    - No respeta el principio de responsabilidad unica, dificultando el mantenmiento ',
                '',
                '            - Alinea el lenguaje de dominio, con los datos         - Requiere una capa adicional, agregando complejidad                             ',
                ' Repository - Esta union genera un codigo más expresivo            - Los metodos especificos de dominio varian entre si, si no hay algun estandar   ',
                '            - Mantiene la separación entre las 2 capas                                                                                              ',
                '',
                '<strong>Data Transfer Object(DTO):</strong> Estrictamente hablando no es un patron para la persistencia de datos, pero si para su manipulación ',
                ' - Es un patron versatil multiproposito, como el movimiento fluido de datos entre diferentes capas ó sistemas ',
                ' - Esto tambien representa la responsabilidad de mantener el correcto aislamiento entre capas y la coherencia dentro de la aplicación ',
                '<strong>CQRS:</strong> Es una estrategia arquitectonica, para mejorar el rendimiento y separar las acciones entre lectura y escritura',
                ' - Esta separación puede conllevar problemas potenciales como la sincronización de los datos ó la complejidad adicional de esta separación ',
            ]),
        new Item(Keys.PATRONES_ANTI_PATTERNS,
            [
                '- Son malas soluciones a problemas comunes que parecen buena idea, y nacen del afan de implementar patrones o de  mezclarlos de manera icorrecta ',
                '',
                '<strong>- Golden Hammer:</strong> Pretende que todo se solucione de la misma manera o con el mismo lenguaje',
                '<strong>- Lava Flow:</strong> Es la codificación de manera continua, sin un orden alguno, y lleno de redundancias',
                '<strong>- Spaghetti Code:</strong> Aparece cuando se suelen mezclar muchos lenguajes, aumentando la complejidad de la solución ',
                '<strong>- God Class:</strong> Sucede cuando todo se soluciona en un solo archivo metodo o clase',
                '<strong>- Poltergeist:</strong> Es la existencia de elementos injustificadamente',
                '',
                'Tambien se pueden aplicar para temas de arquitectura',
                '<strong>- Reinventar la rueda:</strong> Es la implementación de soluciones que ya existen de antemano',
                '<strong>- Casarse con el diablo:</strong> Es la dependencia total de algun elemento sin contingencia alguna ',
            ]),
        //new Item('dobleDespacho',
        //    [
        //        '- Es un patron de diseño que resuelve 2 problemas: ',
        //        '- Cuando el comportamiento depende del objeto y los parametros recibidos ',
        //        '- Esto se puede hacer mediante varias maneras, herencia, polimorfismo, reflexion, etc... ',
        //    ]),
        new Item(Keys.PATRONES_SAGA,
            [
                '- Es un patron que ayuda a garantizar la integridad de las transacciones, es especialmente util para aplicaciones distribuidas y microservicios ',
                '- Esta secuencia de transacciones ayuda a lograr un flujo de trabajo, mediante 2 acciones importantes que cada micro esta en potestad de realizar ',
                '<strong>&bull; Principio de continuación:</strong> Garantiza que se alcanze el estado deseado final mediante el avance de la secuencia, con reintentos si es necesario ',
                '<strong>&bull; Principio de compensación:</strong> Decide la recuperación hacia atras, regresando al estado inicial en caso de errores o intentos superados ',
                '',
                '<strong>Mediante coreografia:</strong> Sucesión de eventos donde cada uno llama al siguiente, despues de terminar su tarea',
                ' - en este caso cada servicio debe saber como responder ante cada caso posible y manejar operaciones idempotentes ',
                '- Facil de implementar y con poco acoplamiento, pero se complicara entre más operaciones e involucrados hallan ',
                '',
                '<strong>Mediante orquestación:</strong> De esta manera un solo proceso o servicio es el encargado de coordinar, todas las llamadas de los procesos',
                ' - definiendo cual es la secuencia o si sea necesario realizar el rollback completo si alguna de las operaciones falla ',
                '- Más facil de mantener a cambio de convertirse en un posible cuello de botella e incluso en un Punto Unico de falla <strong>SPOF</strong>',
            ]),
        new Item(Keys.PATRONES_CQRS,
            [
                '- <strong>S</strong>egregación de <strong>R</strong>esponsabilidades de <strong>C</strong>omandos y <strong>Q</strong>ueries(Consultas)',
                '- Las operaciones de lectura y escritura utilizan diferentes modelos de datos ',
                '- Las consultas no pueden modificar los datos y los comandos pueden ser procesados de manera asincrona ',
                '- Esto permite facilitar leer y escribir operaciones, agregando tanto seguridad como complejidad ',
                '- Los datos no solo se manejan de maneras diferentes, tambien pueden ser almacenados de distintas formas ',
                '- Especialmente util cuando las operaciones de lectura y de creacion/modificación difieren sustancialmente ',
                '- Es un patron usado en las Arquitecturas basadas en eventos, sistemas que manejan consistencia eventual y colas de mensajeria '
            ]),
        new Item(Keys.PATRONES_UNDO_REDO,
            [
                '- Es un patron de comportamiento muy usado en la actualidad ',
                '- Este patron dicta que cualquier cambio que se realize puede ser devuelto a un estado previo ',
                '- Ademas de que se debe ser capaz de volver a un estado previo desde uno anterior ',
                '- Manejar estados y tener memoria de estos puede implicar mayor complejidad y afectaciones de rendimiento para la aplicacion ',
                '- Los estados no deben ser modificables y sus cambios no deben tener efectos colaterales ',
                '',
                '- Este patron puede tener 2 enfoques: ',
                '<strong>Todo o nada:</strong> No hay puntos intermedios de que guardar y que no, toda acción realizada deber ser recordada ',
                '<strong>Calculados:</strong> Los estados anteriores y proximos, se pueden calcular en base al actual ',
            ]),
        new Item(Keys.PATRONES_TYPES,
            [
                '- Existen diferentes clasificaciones para los patrones de acuerdo a su nivel de abstracción, segun la clasificación de Frank Buschmann serian: ',
                '',
                '<strong>Patrones Arquitectonicos:</strong> Se centran en la estructura del sistema, definición de subsistemas, ',
                ' - manejo de responsabilidades, lineas guia para organizar las relaciones ',
                '',
                '<strong>Patrones de Diseño:</strong> Esquemas para refinar subsistemas, componentes o las relaciones de estos, ',
                ' - estos describen una estructura recurrente y comun que resuelve un problema de diseño, ',
                ' - en un contexto especifico, algunos de estos pueden ser los patrones GRASP o lo GOF ',
                '',
                '<strong>Patrones de codificación(idioms):</strong> Ayudan a implementar aspectos particulares del diseño, en un lenguaje especifico'
            ]),
        new Item(Keys.PATRONES_STRANGLER_FIG,
            [
                '- Una higuera estranguladora, es una planta peculiar, debido a que su semilla crece desde las ramas del arbol, hasta que echan raices en el suelo ',
                '- Durante años van creciendo poco a poco sofocando y matando a su huesped, hasta quedar una sombra del arbol original ',
                '- Una gran metafora a la hora de hablar de migrar y reemplazar sistemas anticuados con otros más actuales ',
                '- Esto sonaria como simplemente realizar una aplicación que haga exactamente lo mismo, lo cual para nada es simple ',
                '- Además de que esto involucra nuevas funciones, correciones o incluso mantener los errores ya conocidos ',
                '- Tambien se ha de tener en cuenta que esto es proceso arduo y constante, con miras de que futuros estrangulamientos se simplifiquen ',
                '- Mantener ciclos cortos y hacer lanzamientos frecuentes, permite que esta aplicación no solo tome menos, si no que entregue valor más pronto ',
                '- Para evitar que los mismos errores se repitan, es necesario que se produzcan cambios organizacionales más amplios para evitar un caos similar ',
                '- Si no realizan cambios y no se aprende de la experiencia del pasado, el nuevo sistema terminara en un caos similar, como dice la <em>Ley de Conway</em> ',
                '',
                '<em>Ian Cartwright, Rob Horn</em> y <em>James Lewis</em> Definierón 4 actividades a alto nivel necesarias para este enfoque incremental ',
                '- Comprender los resultados que se desean lograr',
                '- Decidir como dividir el problema en partes más pequeñas',
                '- Entregar piezas con exito',
                '- Cambiar la organización para permitir que esto se haga de manera continua ',
            ]),
        new Item(Keys.PATRONES_ANTI_PATRONES_PM,
            [
                '- Todo trabajo relacionado al desarrollo de software necesita comunicación e interacción humana, los antipatrones en esta gestión, destruyen ',
                ' - y entorpecen esta actividad humana fundamental, principalmente en las 3 areas más involucradas, Gestion de procesos, recursos y relaciones ',
                '',
                '<strong>Blowhard Jamboree:</strong> Las opiniones de los expertos influyen en las decisiones tecnologicas, las criticas y la atención a informes negativos',
                ' - que aparecen en medios importantes y publicaciones privadas, consumen tiempo en dar respuestas, ',
                ' - ya que los tomadores de decisiones les surgen inquietudes, para entender o refutar estas publicaciones ',
                '',
                '<strong>Paralisis de analisis:</strong> Esforzarse por alcanzar la perfección y la integridad, en la fase de analisis, puede inducir un estancamiento ',
                ' - ya que se busca evitar realizar cambios, algo impractico, ya que el software crece y soluciona problemas de manera incremental/iterativa ',
                '',
                '<strong>Ingeniería de Viewgraph:</strong> Los proyectos se atascan al producir demasiados diagramas y documentación, en lugar de desarrollar ',
                ' - la gerencian que era quien los solicita nunca obtiene las herramientas de desarrollo adecuadas, ',
                ' - y los desarrolladores se ven condenados a usar software para automatizar la creación de estos documentos, que suelen ser pseudotecnicos ',
                '',
                '<strong>Muerte por planificación:</strong> Demasiada planificación conduce a cronogramas más apretados y complejos para etapas posteriores, ',
                ' - en vez de tomarse de manera que integre desarrollo con etapas iterativas y planificación incremental ',
                '',
                '<strong>Miedo al exito:</strong> Cuando un proyecto esta al borde del exito, suelen aflorar preocupaciones y miedos que antes no estaban presentes, ',
                ' - sobre cosas que pueden salir mal, inseguridades, e incluso casos de paranoia y sucesos altamente improbables ',
                '',
                '<strong>Corncob:</strong> Las personas dificiles, frecuentemente destruyen y desvian los procesos del software, a traves de diversas maneras ',
                '',
                '<strong>Violencia Intelectual:</strong> Ocurre cuando alguien con un conocimiento que otros no tienen, lo usa para intimidar o amendrentar en reuniones ',
                '',
                '<strong>Gestión Irracional:</strong> La indecisión habitual, y malas decisiones tomadas de facto, conducen a crisis de desarrollo cronicas, y malos caminos ',
                '',
                '<strong>Humo y Espejos:</strong> Aveces se suele mostrar desarrollos incompletos y promesas de nuevas funcionalidades',
                ' - sin saber los riesgos y los desafios tecnicos que esto involucra, para erroneamente compremeter a la organización más alla de sus capacidades ',
                '',
                '<strong>Mala gestión:</strong> La falta de supervisión e involucramiento, puede conducir a una desorientación que afecta a los procesos y acciones internas ',
                '',
                '<strong>Fire Drill:</strong> Volar suele ser descrito como <em>horas de aburrimiento, seguidas de 15 segundos de terror</em>, lo mismo suele pasar',
                ' - cuando existen meses de poco desarrollo, seguidos de demandas de entrega inmediatas, debido a una gran variedad de causas y situaciones ',
                '',
                '<strong>The Feud:</strong> Las peleas entre gerentes, suelen ser más que personales, estos conflictos influyen y hasta pueden afectar directamente',
                ' - a los subalternos, desde simples malos tratos, hasta acciones disciplinarias ',
                '',
                '<strong>Los correos son peligrosos:</strong> El correo electronico es una gran herramienta de comunicación, pero no es apta para todos los mensajes ',
                ' - ni para escribir acerca de comunicaciones delicadas, ya que suelen ser temas inapropiados o muy delicados',
            ]),
        new Item(Keys.PATRONES_CLOUD_DESIGN_PATTERNS,
            [
                '- La administración de datos es un elemento clave de las aplicaciones en la nube, e influye en la mayoria de atributos de calidad ',
                ' - los datos tienen una naturaleza distribuida de manera intrinseca, que representa desafios como la coherencia y la sincronización',
                '- Un buen diseño incluye el mantenimiento y la reutilización para permitir que componentes y subsistemas, se puedan utilizar en otras aplicaciones ',
                '- La naturaleza distribuida de las aplicaciones requiere una infraestructura de mensajeria, que permita conectar los componentes y servicios',
                '',
                '<strong>Anti-Corruption Layer:</strong> Implementa una capa de fachada o de adatador entre una aplicación moderna y un sistema heredado',
                '',
                '<strong>Backends for Frontends:</strong> Servicios independientes de back-end que determinadas aplicaciones ó front-end puedan usar ',
                '',
                '<strong>Cache-Aside:</strong> Carga datos a petición en una memoria caches desde algun almacen de datos',
                '',
                '<strong>Circuit Breaker:</strong> Controla errores que pueden tardar una cantidad variable de tiempo, durante la conexión o uso de servicios remotos',
                '',
                '<strong>Competing Consumers:</strong> Permite que varios consumidores simultaneos, procesen los mensajes recibidos en un mismo canal ',
                '',
                '<strong>Event Sourcing:</strong> Usa un almacen de solo anexar para registrar la serie completa de eventos, que describen las acciones realizadas sobre el dominio ',
                '',
                '<strong>Federated Identity:</strong> La autenticación se delega a un proveedor de identidad externo ',
                '',
                '<strong>Index Table:</strong> Crea indices en los campos de los almacenes de datos que suelen hacer referencia las consultas ',
                '',
                '<strong>Materialized View:</strong> Genera vistas previamente construidas con sus datos, cuando los datos no tienen el formato idoneo para las consultas requeridas ',
                '',
                '<strong>Priority Queue:</strong> Clasifica por orden de prioridad las solicitudes a ser procesadas, a mayor prioridad, más rapido se procesan ',
                '',
                '<strong>Pipes And Filters:</strong> Desglosa una tarea compleja, en una serie de elementos independientes reutilizables ',
                '',
                '<strong>Publicador/Suscriptor:</strong> Permite que una aplicación produzca eventos asincronos, para todos los consumidores interesados ',
                '',
                '<strong>Retry:</strong> Permite tratar errores temporales previamente anticipados, como en un servicio o recurso de red, siendo trasparentes con los errores ',
            ]),
        new Item(Keys.PATRONES_ENRICHED_MODEL,
            [
                '- En <strong>POO</strong> la forma como se diseñan las clases tiene un impacto significativo en la calidad y mantenibilidad del codigo ',
                '- En Java es comun el uso de modelos(entidades), DTO, y Objetos planos (POJO), que se pueden crear como simples clases con atributos ',
                '',
                '<strong>Clases anemicas:</strong>',
                '- Clases contenedoras de datos, sin logica significativa para el negocio ',
                '- La logica de negocio se encuentra en otras partes/capas, como servicios o controladores ',
                '- Mantener la logica de una clase fuera de ella, esta violando multiples principios como el encapsulamiento y la cohesión ',
                '',
                '<strong>Clases enriquecidas:</strong>',
                '- La clase encapsula tanto los datos como las operaciones relacionadas con esos datos ',
                '- Una clase no solo debe transportar datos como un DTO, tambien debe comportamientos y validaciones sobre estos ',
                '- Al ser la misma clase la encargada de su manipulación se mejora la encapsulación y la cohesión ',
                '',
                '<strong>Inmutabilidad:</strong>',
                '- Las clases inmutables son incompatibles con este tipo de logica para enriquecer las clases ',
                '- Esto debido a la imposibilidad de cambiar sus atributos, pero existen escenarios donde esta caracteristica es requerida ',
                '- Cada enfoque se debe usar de acuerdo a las necesidades y como mejor se adecuen ',
            ]),
        new Item(Keys.PATRONES_OUTBOX,
            [
                '- Con el auge de los microservicios el patron <strong>outbox</strong> surge como una forma de ayudar con el orden y la coherencia ',
                '- Este patrón organiza la comunicación de eventos y garantiza la coherencia de los datos debido a los desafios de la comunicacion asyncrona ',
                '',
                '- En primer lugar este patron define un almacenamiento temporal donde se registran los cambios en los datos salientes ',
                '- Despues se transmiten los registros serializados hacia el o los servicios externos ',
                '- Como ultimo paso se actualizan los registros para confirmar el exito en el envio ó su fallo y asi reintentar posteriormente ',
                '',
                '- Esto permite que en caso de cualquier falla los datos permanezcan hasta que puedan ser enviados sin contratiempos ',
                '- Este mecanismo permite crear sistemas resilientes al mismo tiempo que mantiene la consistencia de los datos, en especial en sistemas complejos ',
                '',
                '- Cuando se alteran los datos los datos siempre se registran inicialmente en la BD ',
                '- El envio no se hace de inmediato, por lo que suele existir un proceso o tarea segundaria que revisa periodicamente los mensajes pendientes por enviar ',
                '- Tambien debe considerar un mecanismo de limpieza, si los mensajes no son esenciales o no se considera mantener un historico de los datos ',
                '',
                '<strong>Ventajas & Desventajas</strong>',
                '- Mantiene la consistencia de los datos y no se pierden envios sin al menos haberse reintentado ',
                '- Se agrega complejidad ya que se deben guardar y actualizar los mensajes antes y despues del envio ',
                '- Tambien se gasta más espacio debido a la necesidad de almacenar los mensajes, ralentizado el sistema de envios ',
            ]),
        new Item(Keys.PATRONES_INBOX,
            [
                '- Es el complemento del patron Outbox, en este caso del lado del consumidor/receptor ',
                '- Los mensajes siempre se almacenan antes de ser procesados y solo despues se da el ACK a la cola/topic ',
                '- Tambien es una forma de garantizar la idempotencia de manera que se compruebe si el mensaje ya fue procesado ',
                '- Para evitar bloqueos en el consumidor es recomendable realizar el procesamiento de los mensajes en segundo plano con tareas asincronas ',
                '',
                '<strong>Ventajas & Desventajas</strong>',
                '- Garantiza que los mensajes se procesen al menos una vez ',
                '- Igual que con el patron Outbox se debe gastar más espacio y ralentiza el sistema debido a validaciones de duplicación ',
            ]),
        new Item(Keys.PATRONES_UNIT_OF_WORK,
            [
                '- Rastrea los cambios de los objetos durante las transacciones y confirma todos los cambios como una sola unidad(Atomicidad) ',
                ' - garantizando la consistencia y la reducción de las operaciones al agrupar todo ',
                '- Especialmente util cuando los cambios se hacen individualmente, pero a nivel de negocio se considera un solo movimiento ',
                '- Esta coordinación tambien es necesaria cuando se trabaja con algun <strong>ORM</strong>',
                '- Este patron suele usarse en <strong>DDD</strong> para manejar temas de infraestructura y transacciones ademas de otros como Repository ',
            ]),
        new Item(Keys.PATRONES_CRITERIA,
            [
                '- Cuando se implementa el patron <strong>Repository</strong>, como puede ser en una arquitectura hexagonal ',
                '- Entre más consultas y funciones se vayan agregando es normal que el Repository sufra una explosión de metodos desmesurada ',
                ' - que suele surgir en el intento de NO romper el principio de Open/Close, parte de <strong>SOLID</strong>, volviendose necesario usar Criteria ',
                '- Lo que busca es poder consultar de manera modular y reutilizable con criterios de busqueda flexibles ',
                '- Asi se pueden realizar busquedas complejas mediante la union de operaciones genericas definidas por el dominio ',
                '- Para una correcta implementación, deben existir adaptadores que conviertan la consulta expresada de manera generica, ',
                ' - a un Query listo para ser ejecutado y totalmente compatible con el Motor de BD a usar ',
            ]),
        new Item(Keys.PATRONES_DYSTRIBUTED_SYSTEMS,
            [
                '- Los sistemas distribuidos resuelven muchos problemas actuales, y en parte eso obliga a diseñar sistemas escalables y eficientes ',
                '',
                '<strong>Patron Embajador:</strong> Actua como un intermediario entre una aplicación y los multiples servicios que puede llegar a necesitar ',
                '- Kubernetes utiliza este patron para simplificar la comunicación entre los servicios y ocultar detalles de implementación, mejorando la seguridad ',
                '',
                '<strong>Circuit Breaker:</strong> En caso de problemas, estos se deberian controlar para que se extiendan lo menos posible ',
                '- De esta manera se previenen fallos en cascada, evitando que un servicio que no este disponible, deje de ser consultado hasta que se recupere ',
                '',
                '<strong>Bulk Head:</strong> Implica dividir el sistema en compartimentos separados, como en el casco de un barco y los mamparos ',
                '- Al aislar estos compartimentos las fallas o sobrecargas se contienen dentro del compartimento afectado, sin propagarse al resto del sistema ',
                '',
                '<strong>CQRS:</strong> Las operaciones de lectura y escritura se encuentran separadas, especialmente util si hay grandes diferencias en su uso ',
                '- De esta manera las operaciones se pueden escalar y evolucionar de manera independiente ',
                '',
                '<strong>Event Sourcing:</strong> Los eventos son el insumo principal, de esta manera se guardan todos los cambios y no existen las actualizaciones ',
                '- Esto proporciona un historial completo del sistema y permite una mejor auditoria y depuración, similar a la forma de trabajar de Git ',
                '',
                '<strong>Elección del lider:</strong> Entre multiples nodos se elige un solo responsable, ya sea de una tarea o recurso especifico ',
                '- Si el lider falla es necesario elegir un nuevo lider, asi se evitan conflictos y la toma decisiones se encuentra centralizada ',
                '',
                '<strong>Publicador/Suscriptor:</strong> Es similar a una editorial de periodicos, se emiten eventos sin saber quien los recibira ',
                '- Y los suscriptores solo escuchan los eventos que le interesan, ideales donde es necesario propagar cambios y/o actualizaciones a multiples interesados ',
                '',
                '<strong>Sharding:</strong> Fragmentar es dividir una pieza de gran tamaño, en otras más pequeñas y manejables ',
                '- En grandes volumenes de datos se hace esto para gestionarlos de manera eficiente, además de reducir la latencia al estar mejor localizados ',
            ]),
        new Item(Keys.PATRONES_STATE,
            [
                '- Este patron de comportamiento permite que un objeto cambie su comportamiento cuando cambie su estado, sin tener que recurrir a una saturación de if/else ',
                '- Un buen ejemplo son las notificaciones de nuestro celular, estas cambian de acuerdo al modo que se escoja <em>Normal/Silencio/Vibración</em> ',
                '- Entre más condiciones y estados existan, si solo se usaran <strong>if</strong> el mantenimiento creceria y seria más propenso a errores ',
                '- Con este patron se recurre al polimorfismo para que las instancias y sus comportamientos cambien de acuerdo al modo seleccionado ',
                '- Esto evita la complejidad condicional y tener que modificar multiples clases con cada adición, siguiendo los principios Open/Close y Single Responsibility ',
                '- <em>Las operaciones tienen sentencias condicionales extensas y multiparte que dependen del estado del objeto… </em>',
                ' - <em>El patrón State ubica cada rama de la condición en una clase independiente, tratando el estado como un objeto por derecho propio</em>',
                '',
                '<strong>Cuando No usarlo:</strong>',
                '- Si el objeto tiene pocos estados y diferencias de comportamientos muy simples, implementar este patron es excesivo y dificulta la legibilidad ',
                '- Si los cambios son poco frecuentes y el rendimiento es importante, la sobrecarga de clases no es rentable ',
                '- Si existe un numero definido de estados y no van a crecer, este patron realmente destaca en escenarios complejos y que cambian con el tiempo ',
                '- Un enfoque inicial puede darse perfectamente con if o enumeraciones y evolucionar en la medida en que el mantenimiento se dificulte ',
            ]),
        new Item(Keys.PATRONES_FOR_INTEGRATION,
            [
                '- Las aplicaciones no son islas, casi siempre cuentan con interaciones con otros sistemas, lo cual puede suceder de multiples formas ',
                '- Este intercambio de mensajes se amolda a las necesidades e idoneidad para cada escenario ',
                '',
                '<strong>&bull; Operaciones Sincronas:</strong> Esperan una respuesta antes de continuar, obligando a que toda la operación siempre siga un orden secuencial ',
                '- Se suele decir que son operaciones bloqueantes, ya que abren un canal por cada solicitud y lo mantienen abierto hasta obtener una respuesta ',
                '<strong>&bull; Operaciones Asincronas:</strong> No esperan la respuesta antes de continuar, permitiendo que las operaciones no se bloquen y ocurran de forma paralela ',
                '- Si las operaciones son demoradas y no necesitan una retroalimentación inmediata, este patron es ideal ',
                '',
                '<strong>Request-Response:</strong> Un cliente solicita información, y un servidor procesa la solicitud dandole una respuesta ',
                '- Todo esto mediante un canal que se mantiene abierto desde que inicia la petición, hasta que se obtiene una respuesta ',
                '',
                '<strong>Fire and Forget:</strong> Enfoque de comunicación cliente-servidor que permite cerrar la conexión una vez que el servidor inicia el proceso ',
                '- El servidor se encargara de manera asincrona de todo el proceso y cuando este finalizado, informara los resultados, generalmente mediante notificaciones ',
                '- Este sistema depende de un buen enrutamiento de mensajes y de una trazabilidad confiable para todas las operaciones ',
                '',
                '<strong>Enriquecimiento de datos:</strong> Si la solicitud original no contiene todos los datos necesarios para generar una respuesta satisfactoria ',
                '- Se pueden realizar llamadas adicionales para obtener más información y complementar los datos ',
                '',
                '<strong>Agregación de datos:</strong> Los datos existen, pero no tienen la estructura requerida y necesitan ser transformados de acuerdo algun criterio ',
                '- De esta manera se resumen un conjunto de datos, procesando y combinando los datos para generar una unica respuesta ',
                '',
                '<strong>Publicador/Suscriptor:</strong> Cualquier aplicación participante publica eventos, los cuales pueden ser consumidos por cualquier interesado ',
                '- Esta comunicación asincrona debe permitir cierta durabilidad de los mensajes ',
                '- Los eventos son acontecimientos importantes en cualquier sistema, estos no deberian ser efimeros. ya que se requieren disponibles para ser consumidos ',
            ]),
        new Item(Keys.PATRONES_RESILIENCIA,
            [
                '- El diseño de un sistema generalmente suele estar dirigido por el <em>camino feliz</em> o <em>happy path</em> que es el flujo principal de la aplicación ',
                '- Es normal que existan errores y que las cosas no sucedan como deberian, y en ciertas situaciones las consecuencias tienen fuertes repercusiones ',
                '- Implementar acciones para ser resilientes y crear contingencias antes situaciones de fallos, asumiendo que van a suceder tarde o temprano ',
                '',
                '<strong>Reintentos</strong>',
                '&bull; Problema a solucionar: Situaciones que producen pequeños fallos o perdidas de servicio de corta duración ',
                '&bull; Consideraciones: No es util aplicarlo en todas los casos, es necesario definir los casos relevantes que se puedan solucionar <em>esperando</em> un poco más ',
                '&bull; Efectos adversos: El tiempo de procesamiento se aumenta por cada reintento, además de la posibilidad de duplicados/reprocesos en servicios no idempotentes ',
                '',
                '<strong>Fallback</strong>',
                '&bull; Problema a solucionar: Busca evitar fallos en cascada cuando una peticion a un servicio da error, generando una respuesta sintetica que la simule ',
                '&bull; Consideraciones: La respuesta deber lo más <em>vacia</em> posible indicando la ausencia de información ',
                '&bull; Efectos adversos: Se oculta el fallo a los consumidores, en situaciones de alta confiabilidad puede no ser lo indicado ',
                '',
                '<strong>Circut Breaker</strong>',
                '&bull; Problema a solucionar: Busca evitar un fallo en cascada, cuando una petición a un servicio da error ',
                '&bull; Consideraciones: Es necesario agregar logica para controlar el resultado de las peticiones, con el fin de controlar la apertura o cierre del <em>circuito</em>',
                '&bull; Efectos adversos: Intermitencia en la recuperación del servicio, por lo que la periodicidad de la prueba puede generar condiciones adversas ',
                '',
                '<strong>Timeout</strong>',
                '&bull; Problema a solucionar: Es la acción más basica e implementada en muchos frameworks, para evitar esperas <em>infinitas</em> donde no hay ningun tipo de respuesta ',
                '&bull; Consideraciones: Se pueden presentar falsos positivos si los valores no se ajustan de manera adecuada, especialmente durante tiempos con una alta carga ',
                '&bull; Efectos adversos: Los valores por defecto pueden generar comportamientos inesperados, especialmente si es un flujo con distintos servicios ',
                '',
                '- Estos patrones no son mutuamente excluyente, para su implementación y/o combinación se deben tener claras las cargas de trabajo y factores como: ',
                '&bull; Complejidad en el diseño, Más complejidad más comportamientos a revisar, por lo que se puede preferir la simplicidad junto a un plan de recuperación ',
                '&bull; Costos de implementación, Especialmente por nuevos componentes de infraestructura o software ',
                '&bull; Esfuerzo operativo, La madurez de los procesos debe estar a la par de la capacidad operativa y las habilidades tecnicas necesarias ',
                '&bull; Impacto ambiental, Debido al mayor numero de componentes, generalmente es una correlación directa con el incremento de recursos usados ',
            ]),
        new Item(Keys.PATRONES_MESSAGING,
            [
                '- En las aplicaciones modernas que son distribuidas, escalables y que se comunican a traves de mensajes de forma asincrona ',
                '- Hay patrones comunes para definir como se establece esta comunicación entre las aplicaciones ',
                '',
                '<strong>Patrones para el intercambio de mensajes</string>',
                '',
                '<strong>Point-to-Point:</strong> Un mensaje va dirigido expresamente a un solo consumidor ',
                '- Su comportamiento suele ser el de una cola(<em>FIFO</em>) Primero en entrar, primero en salir ',
                '- Esto puede cambiar si tiene prioridades o es una cola distribuida, el orden deja de garantizarse ',
                '',
                '<strong>Publish-Subcribe:</strong> Un productor y sus mensajes, pueden dirigirse a multiples interesados ',
                '- Es importante conocer que tanto publicador como suscriptor, tienen Garantias de entrega, lo que puede evitar o permitir la duplicación de mensajes ',
                '',
                '<strong>Request-Reply:</strong> Un servicio manda una solicitud, para la cual espera obtener una respuesta despues del procesamiento ',
                '- Mensajeria bidireccional, este procesamiento puede ser tanto asincrono como sincrono, pero ambos deben tener un ID que los correlacione ',
                '- Muy usado cuando se necesitan confirmaciones o resultados, pero no necesariamente de inmediato ',
                '',
                '<strong>Fan-Out/Fan-In(Scatter-Gather):</strong> Se envia un mensaje a multiples servicios, que son recolectados por un agregador al final ',
                '- Procesamiento paralelo, busquedas distribuidas o enriquecimiento de datos, que al final se combinan en una respuesta ',
                '- Distribuir las cargas de trabajo tambien distribuye los errores y su manejo ',
                '- Tambien suele tener <em>timeouts</em> para evitar esperar tiempos indefinidos a la completitud de las tareas ',
                '',
                '<strong>Dead Letter Queue(DLQ):</strong> Mensajes que requieren atención, despues de haber haber fallado multiples veces, sin corregir el problema de raiz ',
                '- Estas previenen el bloqueo del sistema antes errores, al mismo tiempo que evita o reduce la perdida de mensajes y pueden activar alertas ',
            ])
    ];

export const NEURO_MARKETING =
    [
        new Item('pestel',
            [
                '- Es una herramienta de gran utilidad para conocer el entorno de tu empresa, y elaborar planes estrategicos acertados ',
                '- Nos ayuda a definir analisis macroeconomicos de la empresa y como diferentes factores externos afectan al negocio',
                '- Si quieres hacer un analisis aun mas profundo, puedes incluir más factores: ',
                '<strong> PESTELI:</strong> incluye la Industria  <strong> PESTALE:</strong> incluye la Etica  <strong> PESTALD:</strong> incluye la Demografia',
                '',
                '<strong>Factores Politicos</strong>',
                ' - Como las acciones y medidas del gobierno pueden influir en la operatividad y el rendimiento de la empresa, como: ',
                '  - Politicas fiscales                      - Tratados comerciales',
                '  - Subsidios de bienes o servicios         - Reglamentos y leyes coporativos',
                '',
                '<strong>Factores Economicos</strong>',
                ' - Variables macroeconomicas que afectan de manera positiva o negativa el desempeño, ya sea nacional o internacionalmente ',
                ' - Tambien se tienen en cuenta los periodos de cambio, como ascensos y crisis economicas, ademas de: ',
                '  - Fluctuaciones del PIB                   - Ciclos economicos ',
                '  - Tasa de desempleo                       - Balanza comercial ',
                '  - Inflación                               - Geopolitica, entre otros.. ',
                '',
                '<strong> Factores sociales</strong>',
                '  - Demografia                              - Educación ',
                '  - Cambios socioculturales                 - Consumo ',
                '  - Distribucion de ingresos                - Etnias y/o Religion',
                '',
                '<strong> Factores Tecnologicos</strong>',
                ' - Constantemente en evolución, determinando el alcance del negocio y sus posibles integraciones con el entorno ',
                '  - Tasa de obsolencia                      - Facilidad de acceso a nuevas herramientas ',
                '  - Inversiones en I + D                    - Internet & automatización de la producción ',
                '',
                '<strong> Factores Ecologicos</strong>',
                ' - Especialmente importantes, si el negocio contempla alguna afectación inmediata al medio ambiente ',
                '  - Leyes de protección                     - Contaminación producida',
                '  - Cambios climatico y desastres naturales - Consumo energetico & reciclaje',
                '',
                '<strong> Factores Legales</strong>',
                ' - Normativas y leyes que la empresa esta obligada a cumplir y respetar ',
                '  - Normativas sobre empleos                - Seguridad laboral',
                '  - Propiedad intelectual                   - Licencias',
            ]),
        new Item('matrizBcg',
            [
                '- Matriz de crecimiento para marketing estrategico, para saber la rentabilidad de los productos y decidir que estrategias usar ',
                '- Es un concepto proveniendte de los años 70, y fue creada por <em>Boston Consulting Group</em> ',
                '',
                '- El eje vertical corresponde a la tasa de crecimiento del mercado ',
                '- El eje horizontal representa la cuota de mercado de la empresa ',
                '',
                '                     Cuota de mercado relativa                                                        ',
                '                       Alto         Bajo                                                              ',
                '   Tasa de    Alto &brvbar; <strong>Estrella</strong> &brvbar; <strong>Interrogante</strong> &brvbar; ',
                ' crecimiento       &brvbar;----------&brvbar;--------------&brvbar; Costo                             ',
                ' del mercado  Bajo &brvbar;  <strong>Vaca</strong>    &brvbar;    <strong>Perro</strong>     &brvbar; ',
                '                          Liquidez                                                                    ',
                '',
                '<strong> Productos Estrella:</strong> Generan liquidez a cambio de una gran inversión consolidando su posición en el mercado ',
                '<strong> Productos Vaca:</strong> Generan mucha liquidez sin necesidad de una inversión cuantiosa, ya estan consolidados ',
                '<strong> Productos Perro:</strong> Tienen una poca cuota de mercado y generan poca liquidez, convirtiendolos en un desastre ',
                '<strong> Productos Interrogante:</strong> Son un misterio en cuanto a como evolucionara, como muchas de las novedades que se lanzan ',
                '',
                '- A menudo un producto puede rrecorrer las 4 etapas y de diversas formas, <strong>Ejemplo:</strong>',
                '- Cuando se lanza al mercado se convierte en una <em>Interrogante</em> que se convierte en una <em>Estrella</em> al crecer,',
                ' - pero cuando se consolida se convertira en <em>Vaca</em> hasta que se estanque y en el declive se convierta en <em>Perro</em> ',
            ]),
        new Item('b2b-b2c',
            [
                '- Son 2 Tecnicas de marketing bastante diferentes, que intentan atraer publicos diferentes con estrategias diferentes ',
                '<strong>B2B:</strong> Business to Business, Comercialización de productos y servicios con una empresa o profesional como cliente,',
                ' - con un enfoque donde bien se sabe el publico al que se dirige, y las relaciones son importantes ',
                '<strong>B2C:</strong> Business to Customer</strong>, Comercialización de productos y servicios con una persona particular como cliente, ',
                ' - donde todo se dirige directamente al consumidor y de forma masiva, la primera impresión es muy importante ',
                '',
                '<strong>Diferencias:</strong> ',
                '- B2C esta enfocado hacia las masas en cambio B2B se enfoca de manera selecta ',
                '- Los mensajes en B2C suelen ser directos, claros y sencillos, en B2B describen el valor agregado que pueden aportar ',
                '- La logica sigue siendo la misma, vender, lo que cambia es a quien le queremos vender y como se debe hacer ',
            ]),
        new Item('eric',
            [
                '- Como crear un nuevo modelo o reformular nuestro modelo ya existente, para brindar más valor hacia nuestros consumidores ',
                '<strong>Eliminar</strong> Completamente aquellas variables que no aportan valor hacia nuestro clientes existentes o futuros ',
                '<strong>Reducir</strong> La entrega de valor de algunas variables, ya sea porque no es apreciado por el cliente o reduce costos sin perder el atractivo ',
                '<strong>Incrementar</strong> La intesidad de aquellas variables que estan por debajo de las expectativas de los clientes ',
                '<strong>Crear</strong> Nuevas variables asociadas al producto o servicio no contenidas en las curvas de valor previamente analizadas ',
                '',
                '- Parte de la clave en estos modelos de negocio es tomar decisiones divergentes frente a las propuestas ya existentes ',
            ]),
        new Item('gamificacionMarketing',
            [
                '- La gamificación en marketing va más alla de usar juegos moviles, esta toma mecanicas y recursos de estos, aplicandolas a otros contextos ',
                '',
                '<strong>Ventajas:</strong>',
                '- Mas engagement, si esta bien planteada y se adecua al Buyer persona mediante el canal correcto, ',
                ' - las recompenas crearan estimulacion rapidamente y un sentimiento positivo frente a la marca',
                '- Es estimulante, la competencia entre los usuarios genera motivación al sentirse que son apreciados ',
                '- Mejor conocimiento de tus usuarios, debido a las multiples interacciones que se presentaran, indicando quienes son mas activos ',
                '- Mejorar la perpeción de la marca, lo que a su vez ayuda a la fidelización y la obtención de nuevos usuarios ',
                '',
                '<strong>Consejos:</strong>',
                '- No es necesario empezar a lo grande, a veces un simple juego es una buena manera de probar a tu publico ',
                '- Conoce a tu publico, de nada sirve un gran despliegue con una gran inversión, si no se ajusta al publico objetivo de la empresa ',
                '- Las recompensas, no siempre deben ser fisicas, a veces pueden ser simples codigos redimibles, lo importante es que le agrade al publico ',
                '- Sin riesgo no hay exito, la innovación es parte del proceso y nunca debe ser dejada de lado ',
            ]),
        new Item('maslow-barret',
            [
                '- Existen necesidades basicas que todo ser humano debe satisfacer, estas fueron planteadas por <em>Abraham Maslow</em> de forma piramidal ',
                '',
                '<strong> Necesidades Fisiologicas:</strong> Como respirar, alimentación, hidratación, descanso ',
                '<strong> Necesidades de Seguridad & Protección:</strong> Como una vivienda, sustento diario, salud ',
                '<strong> Necesidades Sociales:</strong> Desarrollo afectivo, asociación con los pares, afinidad y sexualidad ',
                '<strong> Necesidades de Autoestima:</strong> Respeto de si mismo, confianza, independencia, y libertad ',
                '<strong> Necesidades de Auto Realización:</strong> El desarrollo del potencial individual, creatividad e innovación ',
                '',
                '- Cada escalon puede ser alcanzado siempre y cuando el anterior este cubierto o bastante avanzados ',
                '- Tomando como base los escalones anteriores, <em>Richard Barret</em> desarrollo la teoria de las etapas universales y transformación cultural ',
                '',
                '<strong> Nivel 1: Supervicencia</strong> Cubre tanto las necesidades fisiologicas como las de Seguridad & Protección de Maslow ',
                '<strong> Nivel 2: Relaciones</strong> Se centra en el afecto y la pertenencia a un grupo o varios grupos afines, Necesidades sociales ',
                '<strong> Nivel 3: Autoestima</strong> 4 Nivel de Maslow, además de afecto, prestigio y respeto ',
                '<strong> Nivel 4: Transformación</strong> 5 Nivel de Maslow, tambien trata del desarrollo personal a partir de buscar y explorar la consciencia ',
                '<strong> Nivel 5: Cohesion Interna</strong> Despues de haber desarrollado una identidad individual, se buscan valores que envuelvan al grupo de manera colectiva ',
                '<strong> Nivel 6: Contribución</strong> Aca se focalizan los aportes individuales, de manera que sean utiles para el colectivo y dejen una "huella", un legado ',
                '<strong> Nivel 7: Servicio</strong> Complementa el Nivel 5 de Maslow como los anteriores, aca se conecta con un proposito mayor, el porque de nuestra existencia ',
            ]),
        new Item('cerebroTriurno',
            [
                '- El cerebro Triurno responde a una clasificación basada en la evolución del ser humano como especie ',
                '- Para un enfoque practico y con una mirada educativa, se pueden detallar 3 grandes funcionalidades del cerebro ',
                '',
                '<strong>Cerebro Reptiliano:</strong> Localizado en la parte inferior y trasera del craneo, la más antigua y primitiva ',
                ' - encargada de las funciones basicas de supervivencia, es pura impulsividad e instinto de conservación, un area con muy pocos cambios ',
                '<strong>Sistema Limbico:</strong> Parte exclusiva de los mamiferos, ubicado en la parte central y contiene el hipocampo ',
                ' - centrado en la memoria y la orientación, además de la amigdala, encargada de controlar las emociones y de repetir/no repetir patrones de conducta ',
                '<strong>Neocortex:</strong> Es la base fundamental para el raciocinio, con funciones cognitivas superiores como, ',
                ' - el pensamiento abstracto, el lenguaje, la planificación, reconocimiento de patrones, etc... ',
                '',
                '- Sabiendo esto, es posible mejorar los metodos de educación y aprendizaje enfocandose en diferentes grupos de edad, ',
                ' - ya que entre más avanzado el Neocortex, algo que se da cerca de los 20 años, hay cosas que no se podran realizar ',
                '- Para otras areas como el Marketing y los negocios, no solo se debe apelar al intelecto, tambien al lado emocional ',
                ' - de manera que la atención se centre en los aspectos que queremos estimular para vender nuestros productos, ',
            ]),
        new Item('elementValues',
            [
                '- Es un desglose de la matriz de Maslow, donde cada escalafon se puede dividir en más necesidades, con diferentes perpectivas ',
                '',
                '<strong>Impacto Social</strong>              Autotranscendencia ',
                '',
                '<strong>Cambio de vida</strong>           Afiliación y pertenencia ',
                '                       Proporciona Esperanza, Motivación',
                '                     Autorrealización, Reliquias familiares',
                '',
                '<strong>Emocional</strong>                 Diversion & entretenimiento',
                '                         Bienestar, Valor terapeutico',
                '                       Proporciona recompensas, Atractivo',
                '                    Reductores de ansiedad, Proporciona acceso',
                '                   Nostalgia, Diseño y estetica, Valor insignia',
                '',
                '<strong>Funcional</strong>             Ahorra tiempo, Reduce el esfuerzo ',
                '                 Simplifica, Informativo, Variedad, Reduce costos',
                '                 Hace dinero, Reduce el riesgo, Organiza, Integra',
                '               Atractivo sensorial, Calidad, Evita molestias, Conecta',
                '',
                'Para una descripción más detallada y ejemplos de la vida real, puedes ir a la fuente original de <em>Bain & Company</em>'
            ]),
        new Item('multi&omniCanal',
            [
                '- En una solución hacia los clientes multicanal, el cliente se enfrenta a una experiencia de compra fragmentada, ',
                ' - con diversas fuentes de interrupciones o cortes, cuando se pasa de un canal a otro ',
                '',
                '- Por otra parte la onmicanalidad representa una experiencia diferente, donde hay naturalidad para pasar de un canal a otro, ',
                ' - sin importar el momento o el lugar ',
                '',
                '- La omnicanalidad representa un desafio extra a nivel de tecnologias además del compromiso de todos los empleados ',
                ' - independientemente del nivel en que se encuentren ',
            ]),
        new Item('buyerPersona',
            [
                '- Un Buyer Persona, es la definición para todo negocio de su cliente ideal, un concepto que siempre esta presente en el marketing ',
                '- Es una descripción abstracta de un consumidor ideal, basado en investigaciones de mercado, competidores, y perfiles de clientes ',
                '',
                '<strong>Este es importante debido a que es una forma de saber:</strong>',
                '- Saber hacia que ambito orientar el desarrollo del producto         - Captar nuevos clientes y retener los actuales',
                '- Que tipo de contenido crear y como comunicarlo hacia los clientes  - El servicio al cliente puede mejorar su trabajo ',
                '- Como comunicarse con clientes potenciales                          - Mejorar las estrategias de marketink sabiendo a que publico se deben enfocar',
                '',
                '<strong>Un Buyer Persona puede ayudar a tomar decisiones de marketing al:</strong>',
                '- Tener una mejor segmentación de los clientes y crear mensajes más relevantes  - Identificar nuevos clientes potenciales ',
                '- Crear una experiencia de marca personalizada, con mensajes especificos        - Asegurarse de satisfacer las necesidades del consumidor ',
                '',
                '<strong>¿ Como crear una plantilla ? </strong>',
                '- Demografia: Edad, Genero, Ingresos, Ubicación, Estado familiar, Nivel de educación  - Proceso de compra',
                '- Estado profesional: Cargo, Nivel                                                    - Influencias y fuentes de información',
                '- Psicografia: Metas profesionales, Creencias y valores                               - Puntos debiles y retos ',
                '',
                '<strong>Recopilación de datos:</strong>',
                '- Realizar entrevistas a los clientes             - Realiza estudios de mercado',
                '- Información de analitica y datos de la empresa  - Consultar al equipo de ventas',
            ]),
        new Item(Keys.NEURO_MARKETING_WHAT_IS,
            [
                '- En pocas palabras es la neuro ciencia, aplicada al Marketing, y busca comprender los procesos de compra y el comportamiento con las marcas, ',
                ' - a partir de la actividad neuronal; esto como complemento de otras estategias más tradicionales como los Focus Group y las encuestas ',
                '- Para el cerebro no hay secretos, y aun menos para el inconsciente, se calcula que cerca del 95% ',
                ' - de las decisiones de compra son tomadas por este en alrededor de 2.5 segundos, por lo que es una mala idea pensar que comprar es 100% racional ',
                '',
                '<strong>Elementos a tener en cuenta</strong>',
                '<strong>- La mirada:</strong> La eficacia del contacto visual no siempre es acertada, aveces es mejor centrar las personas hacia un punto de interes ',
                '<strong>- Colores:</strong> Los colores estan directamente asociados a diferentes emociones, usar colores opuestos al objetivo de tu campaña puede arruinarla ',
                '<strong>- Velocidad:</strong> El sentimiento de velocidad/agilidad, atrae más personas, que la estabilidad y la seguridad ',
                '<strong>- Contar Historias:</strong> Tener un contexto en el que se apoye una buena historia, puede generar un mayor compromiso ',
                '<strong>- Los precios:</strong> Los precios <strong>$9.99</strong> No siempre es mejor que <strong>$10</strong>, hay una gran diferencia entre usar un numero redondo y uno compuesto ',
                ' - el primero es util cuando se deben tomar decisiones logicas, el segundo es ideal para decisiones emocionales, su uso dependera del enfoque a usar ',
                '<strong>- Titulos:</strong> Una de las primeras cosas que todo expectador observa, por lo que tener ligeras alteraciones ayuda a despertar la atención ',
                '<strong>- El Pago:</strong> Usar la palabra <em>Compra</em> puede crear ansiedad debido a la transacción economica, por lo que se usan frases y sinonimos ',
                '',
                '<strong>Tecnicas a tener en cuenta</strong>',
                '<strong>- Utiliza la psicologia de los colores</strong> Tu paleta de colores puede jugar en contra o a favor en la aceptación de la marca ',
                '<strong>- Explora gatillos mentales</strong> Que son factores que nos llevan a tomar decisiones de forma automatica, como: <em>Escasez, Urgencia, Exclusividad</em>',
                '<strong>- Pruebas A/B:</strong> Para saber si los conceptos escogidos son los idoneos, se pueden hacer diferentes versiones y escoger la que más aceptada ',
                '<strong>- Anclaje de Precios:</strong> Expresiones como <em>"2 por 1"</em> y <em>"5 por 3"</em> pueden ser atrayantes y hacen creer que hay un beneficio economico ',
                '<strong>- Repite ideas y conceptos estrategicamente</strong> "La repetición es la madre de la retención", Esto hace los mensajes más poderosos y persuasivos ',
                '<strong>- El diseño:</strong> Todo diseño que involucre a tu empresa, debe ser impecable y tener una razon de ser, acorde a tu negocio ',
                '<strong>- Ofrece pocas opciones de elección:</strong> No solo es saber que hacer, tambien es que evitar, por eso se dice que <em>"menos es más"</em>',
            ]),
        new Item('semanticaPragmatica',
            [
                '<strong>Semiosis:</strong> Se puede entender como el proceso o influencia, que suponga una colaboración entre 3 partes, como puede ser, ',
                ' - un signo, su objeto y el interprete, ampliando el concepto a algo mas que simples sujetos humanos, de ahi que se puedan distinguir 3 dimensiones: ',
                '',
                '<strong>Dimensión Sintactica:</strong> <em>Es el estudio de las relaciones de los signos entre si</em>, Asi el orden de los signos incide, en el proceso de interpretación ',
                ' - por lo que al elaborar cualquier mensaje, permite inferir que solo su orden lograria o afectaria la interpretación ',
                '',
                '<strong>Dimensión Semantica:</strong> <em>Es el estudio de los signos y sus posibles denotaciones</em>, Asi se diferencia de la sintaxis ya que aca se determina, ',
                ' - en que condiciones un signo es aplicable a algun objeto o situación, referenciando al significado de los signos ordenados de manera especifica ',
                '',
                '<strong>Dimesión Pragmatica:</strong> <em>Es la relación de los signos con sus interpretes</em>, Esto supone una complejidad extra y que es relativa, ',
                ' - para cada emisor y su respectivo interprete, ya que no necesariamente todo mensaje tenga el mismo significado, para ambas partes ',
            ]),
        new Item('pnl',
            [
                '- Son una series de estrategias que se centra en identificar y usar modelos de pensamiento que influyan sobre una persona, para resolver problemas ',
                '',
                '<strong>Principios:</strong>',
                '<strong>- El mapa interior es unico:</strong> El mundo que rodea a cada persona, es unico, y se contruye a traves de la propia experiencia ',
                '<strong>- Entre mas caminos, mejor:</strong> Entre mas completo sea el mapa, mas grande seran las posibilidades, de resolver los problemas ',
                '<strong>- Cada comportamiento tiene una intención positiva:</strong> Todo comportamiento intrinsecamente se hace por una buena razon, por lo que, ',
                '  - malas practicas se deben redirigir hacia un patron de conducta mas adaptativo y adecuado para la persona ',
                '<strong>- La estructura de la experiencia:</strong> Toda experiencia tiene ciertos elementos que pueden cambiar su significado y su efecto ',
                '<strong>- Todo problema tiene solución:</strong> Aunque suene utopico, esto dependera de la situación y del mapa de la persona ',
                '<strong>- Todo el mundo tiene la fuerza necesaria:</strong> Cada persona posee la fuerza necesaria para conseguir lo que se propone ',
                '<strong>- Mente y cuerpo son 2 caras de la misma moneda:</strong> Las emociones afectan el cuerpo y las enfermedades fisicas afectan a la mente ',
                '<strong>- La comunicación pueder sesgarse:</strong> Por eso es necesario establecer pautas claras entre ambas partes ',
                '<strong>- Todo fracaso es una oportunidad:</strong> Estos deben verse como medidas que permiten la auto superación ',
                '<strong>- Si algo no funciona, probar de otra manera:</strong> Si algo no funciona pero siempre intentas lo mismo, no esperes resultados diferentes ',
            ]),
        new Item('jobsToBeDone',
            [
                '- Es una metodologia desarrollada para conocer mejor a tu grupo de consumidores',
                '- Las personas no suelen comprar ropar para vestirse, al menos no exclusivamente por esta razon, pueden buscar autoestima, estatus, comodidad, etc.. ',
                '- Entender estas motivaciones es una tarea importante del marketing, para contextualizar las acciones y definir comportamientos del mercado ',
                '- El punto de partida es identificar que es lo que el consumidor quiere resolver en su vida, y a partir de ahi como puedes ayudarlo a resolverlo ',
                '- Con este cambio de perspectiva se busca que el marketing sea más eficiente y que la innovación sea más previsible y rentable ',
                '- Aca es importante enfocar lo que el cliente quiere resolver y no lo que el cliente quiere comprar',
                '- Muchas de las razones suelen tener una dimensión funcional, social o emocional, y tener un mercado el cual puede ser mejor explotado ',
                '- Para esto la <em>segmetación</em>, <em>Buyer persona</em> y <em>Big data</em> suelen ser herramientas utiles',
            ])
    ];