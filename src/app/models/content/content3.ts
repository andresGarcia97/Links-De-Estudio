import { Item } from "../models";

export class Content3 {

    public temas: Item[] = [
        ...REQUISITOS,
        ...SMELLS_CODES,
        ...VERSIONAMIENTO,
        ...POO,
        ...PRINCIPIOS,
        ...REFACTORIZACION,
        ...SEGURIDAD,
        ...UML,
    ];

}

export const REQUISITOS =
    [
        new Item('funcionales',
            [
                '- Son la declaración de los servicios y funciones que tendra la aplicación ',
                '- Estos se basan en una serie de requerimientos del software previamente realizada ',
                '- Gran parte del exito del producto depende de que este proceso sea realizado efectivamente ',
                '- La ambiguedad es normal, pero debe ser reducida al minimo ',
                '- Las Historias de Usuario son una gran ayuda en este ambito, aun asi estas tambien pueden equivocarse ',
                '- Los requisitos deben ser coherentes, sin contradicciones entre si, más no significa que no puedan cambiar ',
            ]),
        new Item('NOfuncionales',
            [
                '- No son caracteristicas que son expresadas directamente por el cliente ',
                '- Son una declaración de como se debe comportar el sistema, de que propiedades son importantes ',
                '- Tambien pueden contar con restricciones como, sistema operativo, dispositivos compatibles, paleta de colores, etc... ',
                '',
                ' - Requisitos del producto -> especifican que debe cumplir el producto (rapido, bonito, confiable, etc...) ',
                ' - Requisitos del producto -> estos criterios, y otras más son terriblemente ambiguos, por lo que deben ser previamente acordados ',
                '',
                ' - Requisitos organizacionales -> se derivan de politicas y procedimientos de la empresa ya existentes ',
                ' - Requisitos organizacionales -> como lenguajes a usar, documentación a entregar, etc... ',
                ' - Requisitos organizacionales -> tales como la interoperabilidad, leyes a seguir, etc... ',
                '',
                ' - Requisitos externos -> son afectados directamente por factores externos al software ',
            ]),
        new Item('negocio',
            [
                '- Es el impacto real de una funcionalidad en el software, por lo que es subjetivo y depende de quien lo este visualizando ',
                '- Generalmenete son responsabilidad del Product Owner y de los analistas, si se trabaja con metodologias agiles ',
                '- Es necesario definir objetivos a cumplir, para tener una meta clara y visualizar un camino ',
                '- Adoptar formas de medir el progreso y hacerlo de manera periodica ',
                '- Cuestionarse a si mismos, conforme va avanzando el proyecto las cosas pueden cambiar y con estas nuestros objetivos ',
                '- Es necesario definir objetivos a cumplir, para tener una meta clara y visualizar un camino ',
            ]),
        new Item('ambiguedad',
            [
                '- Menos es Más, una frase bastante diciente pero que es más facil decirla que aplicarla ',
                '- La redacción debe ser clara y concisa, ya que muchas personas en diferentes ambitos leeran los requisitos y todos deben entenderlos ',
                '- Los detalles son importantes, pero estos no deben ser abrumadores ni irrelevantes ',
                '- Si una requisito es demasiado extenso este puede ser desglosado en otros más pequeños y concisos ',
                '- Igual que las Historias de Usuario pueden tener criterios de aceptación ',
                '- Se puede incluir lenguaje tecnico y escenarios especificos, si estos ayudan a definir un contexto ',
            ]),
        new Item('calidad',
            [
                '- Es una propiedad medible del sistema que indica si el sistema satisface una caracteristica en especifico ',
                '- Dependiendo de la complejidad, un sistema puede cumplir una o varias de las siguentes caracteristicas ',
                '  - Compatibilidad -> capacidad de los sistemas para intercambiar información ó compartir software/hardware ',
                '    - subcaracteristicas -> interoperabilidad, coexistencia ',
                '  - Usabilidad -> capacidad del producto para ser entendido, que sea usado y que sea atractivo ',
                '    - subcaracteristicas -> idoneidad, aprendizaje, manejo de errores, accesiblidad, estetica ',
                '  - Confiabilidad -> capacidad para cumplir con las funciones especificadas en un ambiente predispuesto ',
                '    - subcaracteristicas -> madurez, disponibilidad, tolerancia a fallos, recuperación ',
                '  - Eficiencia -> desempeño del sistema y cuanto recursos consume ',
                '    - subcaracteristicas -> comportamiento temporal, recursos usados, capacidad ',
                '  - Seguridad -> protección de los datos, ya sea de intromisiones externas o internas ',
                '    - subcaracteristicas -> confidencialidad, integridad, responsabilidad, autenticidad ',
                '  - Portabilidad -> capacidad para ser trasladado de un ambiente a otro, ya sea hardware o software ',
                '    - subcaracteristicas -> adaptabilidad, instalación, sustitución ',
                '  - Mantenibilidad -> capacidad de que pueda cambiar a traves del tiempo ',
                '    - subcaracteristicas -> modularidad, reusabilidad, analisable, modificable, testeable ',
            ]),
        new Item('tradeoff',
            [
                '- Que un software cumpla con lo que se necesitaba no significa que sea agradable o facil de usar',
                '- Un producto excelente no se limita a hacer lo que tiene que hacer, es aquel que da un poco más al usuario ',
                '- Existe una gran cantidad de atributos que todo software de "calidad" puede cumplir, no todos son necesarios, ',
                ' - pero si es importante saber cuales son los más necesitados ',
                '-Esto tambien depende de cuales atributos son necesariamente criticos, y cuales son ideales, por lo que se requiere, ',
                ' - un analisis previo para realizar un buen diseño y asi sopesar los pro y los contra ',
                '- Tambien se ha de tener en cuenta que hay requsitos que siempre estaran se afectaran de manera negativa entre si, ',
                ' - por lo que no se podran escoger ambos, si se quiren cumplir ambos de manera idonea ',
                '',
                '-El siguiente recuadro nos enseña un pequeño resumen de los principales atributos de calidad de cualquier sistema ',
                ' - Por cada fila existen 2 posibilidades: ',
                '  (+) -> afecta positivamente el atributo de esa columna ',
                '  (-) -> afecta negativamente el atributo de esa columna ',
                '',
                'Disponibilidad-> +confiabilidad  +robustez',
                'Eficiencia    -> +disponible  -interoperable  -modificable    +rendimiento   -portable      -robustez     +escalable   -usabilidad   ',
                'Instalabilidad-> +disponible  +fiabilidad                                                                                            ',
                '',
                'Integridad    -> -instalable  -interoperable  -rendimiento    -reusabilidad  +seguridad     -usabilidad   -verificable               ',
                'Interoperable -> +disponible  -instalable     -integridad     -rendimiento   +portable      +fiabilidad   +robustez    -seguridad    ',
                'Modificable   -> +disponible  -instalable     -rendimiento    +fiabilidad    +reutilizable  +escalable    +verificable               ',
                '',
                'Rendimiento   -> +eficiencia  -interoperable  -modificable    -portable      -robusto       -escalable    -usabilidad                ',
                'Portabilidad  -> -eficiencia  +interoperable  -modificable    -rendimiento   +reusabilidad  -seguridad    -usabilidad  -verificable  ',
                'Fiabilidad    -> +disponible  -eficiencia     +integridad     +modificable   -rendimiento   +robustez     +seguridad   +usable      +verificable       ',
                '',
                'Reusabilidad  -> -eficiencia  -integridad     +interoperable  +modificable   -rendimiento   +portable     +verificable               ',
                'Robustez      -> +disponible  -eficiencia     +instalable     +integridad    +interoperable -rendimiento  +fiabilidad  +seguridad   +escalable +usable ',
                'Seguridad     -> +integridad  -rendimiento    +robustez       -usabilidad    -verificable                                            ',
                '',
                'Escalabilidad -> +disponible  +eficiencia     +integridad     +rendimiento   +portable      +fiabilidad   +robustez                  ',
                'Usabilidad    -> -eficiencia  +instalable     -rendimiento    -portable      +fiabilidad    +robustez     -verificable               ',
                'verificable   -> +disponible  +instalable     +integridad     +modificable   +fiabilidad    +reusable     +robustez    +seguridad   +usabilidad        ',
                '',
                '(nota) el atributo de seguridad se puede entender de 2 maneras, por lo que en este caso solo se considera que cumplen aquellos que,   ',
                '  afecten negativamente o positivamente a ambos; la seguridad de los datos y el acceso a estos ',
            ]),
        new Item('objetivos',
            [
                '- Un proyecto consta de ambos, y esta más relacionados de lo que parecen, ya que: ',
                '',
                '- <strong> Los requisitos son objetivos concretos </strong>',
                ' - Al ser pocos en comparacion con la lista de requisitos, ya que son objetivos desglosados y detallados para el proyecto ',
                '',
                '- <strong> Los objetivos son requisitos abstraidos </strong>',
                ' - Estos son el resumen de los requisitos, y provienen de un nivel superior de abstracción y de un panorama más amplio ',
                '',
                '- <strong> Los objetivos son el QUE y los requisitos el COMO </strong>',
                ' - Mediante la ingenieria de requisitos se asienta alguna de las diferentes acciones concretas, ',
                ' - que puede tener algun objetivo, aunque muchas de estas decisiones, se tomen de manera insidiosa y poco consciente ',
            ]),
    ];

export const SMELLS_CODES =
    [
        new Item('codesmells',
            [
                '- Son cosas en el codigo que se pueden hacer de una mejor manera, o que a la larga se convertiran en malas practicas ',
                '- Aunque no son un problema prioritario, estos haran crecer la deuda tecnica e inclusive podran crear fallos en el futuro ',
                '- Que el codigo funcione no significa que sea tecnicamente correcto ',
                '- No todos los smells codes son malos, hay casos donde se pueden ignorar debido al efecto cobra ',
            ]),
        new Item('tiposSmellCodes',
            [
                '- Bloaters -> metodos y clases que han incrementado su tamaño a proporciones gigantezcas ',
                ' - estos se suelen dar por descuidos y más cuando nadie se ocupa de esto hasta que son un problema ',
                '',
                '- Object-Orientation Abusers -> este se da cuando los principios de POO son mal aplicados ó se cumplen a medias ',
                '',
                '- Changue Preventers -> sucede cuando se realiza un cambio y este requiere más modificaciones de las pensadas ',
                ' - resultando más complejo y costoso de lo necesario ',
                '',
                '- Dispensables -> se puede considerar cualquier cosa que no sea necesaria, y que pueda ser cambiada o removida ',
                ' - haciendo un codigo más limpio y facil de entender ',
                '',
                '- Couplers -> surgen de un acoplamiento excesivo entre los componentes, o en su defecto por una delegación excesiva ',
            ]),
        new Item('desglose',
            [
                '- Bloaters ',
                ' - Long Method -> es aquel metodo que contiene demasiadas lineas, tantas que es dificil seguir el proceso que realiza ',
                ' - Large Class -> aquella clase que contiene demasiados metodos, atributos ó lineas de codigo ',
                ' - Primitive Obsession -> se da cuando todos los datos se quieren manejar con tipos primitivos, en vez de clases especializadas ',
                ' - Long Parameter List -> sucede cuando un metodo recibe demasiados parametros, generalmente empieza con más de 4 ',
                ' - Data Clumps -> pasa cuando diferentes parte del codigo tienen grupos identicos de variables, que se pueden agrupar en una sola clase ',
                '',
                '- Object-Orientation Abusers ',
                ' - Switch Statements -> sucede cuando se tiene un switch o una secuencia de if demasiado grandes, en vez de usar polimorfismo ',
                ' - Temporary Field -> son valores que son usados en circunstancias especificas, y de resto son instancias vacias ',
                ' - Refused Bequest -> sucede cuando la herencia se aplica mal y las clases hijas heredan metodos o atributos que no van a usar ',
                ' - Alternative classes -> clases con funciones identicas, pero metodos diferentes ',
                '',
                '- Changue preventers ',
                ' - Divergent Change -> sucede cuando una clase requiere demasiados cambios, sean grandes o pequeños ',
                ' - Shotgun Surgery -> surge cuando una modificacón requiere hacer muchos cambios individuales, en diferentes lugares ',
                ' - Parallel Inheritance Hierarchies -> siempre que se necesite una subclase cuando se cree una clase, y se aplique para otras clases ',
                '',
                '- Dispensables ',
                ' - Comments -> los comentarios surgen de metodos y clases mal nombrados o con complejidad arbitraria ',
                ' - Duplicate Code -> fragmentos de codigo que son casi identicos y no estan centralizados ',
                ' - Lazy Class -> es el costo de mantener clases que no tienen utilidad, solo porque pueden o tuvieron utilidad ',
                ' - Data Class -> clases que solo contienen metodos para acceder a las propiedades, sin algun otro comportamiento util ',
                ' - Dead Code -> cualquier cosa que no se usa más, generalmente se vuelven obsoletos ',
                ' - Speculative Generality -> es codigo realizado para soportar futuras funcionalidades, que no tiene uso actual alguno ',
                '',
                '- Couplers ',
                ' - Feature Envy -> metodos y clases que usan los atributos y propiedades de otros, más que los propios ',
                ' - Intimidad inapropiada -> clases que usan atributos y metodos que no son propios como si lo fueran ',
                ' - Message Chains -> sucede cuando el codigo tiene una gran pila de llamados ',
                ' - Middle Man -> la delegación de responsabilidades es importante, más no debe ser la unica responsabilidad de una clase ',
            ]),
        new Item('casos',
            [
                '- Algunos Smells codes se pueden ignorar, debido a que su solución conlleva a problemas peores, o simplemente es demasiado esfuerzo ',
                ' - Si el rendimiento es esencial para la aplicación, algunas soluciones pueden aumentar el tiempo de ejecución y empeorarlo ',
                ' - Si la solución conlleva a un acoplamiento indeseado entre varias clases ',
                ' - Cuando el smells code tiene un alcanze muy pequeño y su cambio puede afectar el comportamiento general del sistema ',
                ' - Hace parte de la implementación de un patron ',
                ' - Puede incluir mayor complejidad de la que habia anteriormente ',
                ' - Cuando hay motivos validos e importantes para mantenerlos ',
                ' - Si el desarrollo va a ser corto plazo y se delinio una linea a seguir ',
                ' - El uso de ciertos frameworks puede traer condiciones de uso ',
                ' - Cuando la solución de un smell code crea otro ',
            ]),
        new Item('payoff',
            [
                '- Generalmente la solución de estos problemas siempre tiene consecuencias positivas sobre la calidad del software ',
                ' - Simplifica clases y mejora la asignación de responsabilidades ',
                ' - El codigo suele ser más flexible y facil de modificar ',
                ' - La duplicación de codigo se reduce, mejorando la mantenibilidad ',
                ' - La legibilidad aumenta, haciendo que futuros cambios sean más rapidos ',
                ' - Mejora la organización y la abstracción ',
                ' - Reduce el tamaño del codigo ',
            ])
    ];

export const VERSIONAMIENTO =
    [
        new Item('git',
            [
                '- El control de versiones ayuda a mantener una trazabilidad de todos los cambios en una aplicación ',
                '- El más conocido es GIT pero tambien existen otros como Mercurial',
                '- GIT puede ser usado en repositorios locales o distribuidos en la nube, permitiendo la colaboración entre desarrolladores ',
                '- Permite crear ramificaciones para trabajar de manera aislada sin afectar a todo el flujo en general',
                '- Tambien se pueden crear etiquetas para marcar commits y que sean más faciles de encontrar',
            ]),
        new Item('dependencias',
            [
                '- Los gestores de dependencias son ampliamente usados ya que evitan dolores de cabeza al manejar codigo de terceros o externos ',
                '- Son herramientas, plugins, librerias, frameworks, necesarios para desarrollar aplicaciones de gran envergadura ',
                '',
                ' - NPM   -> nacido sobre NodeJs se ha convertido en uno de los principales y más grandes repositorios de dependencias y modulos ',
                ' - Bower -> hecho con NPM tiene menos funcionalidades, pero su apuesta principal es la ligereza y la optimización ',
                ' - JAM   -> es un gestor de paquetes que funciona directamente en el navegador, por lo que mantener y actualizar es más sencillo ',
                ' - Composer -> Similar a NPM pero para las librerias de PHP, incluso algunos frameworks como laravel lo manejan por defecto ',
            ]),
        new Item('gradlevsmaven',
            [
                '- Maven -> es una forma de manejar proyectos en entornos JAVA ',
                ' - La configuración se base en un archivo XML ',
                ' - Maneja los jars necesarios para la ejecución del programa, ya sea de manera fisica o descargalos de repositorios ',
                ' - Gestiona las dependencias y las declaraciones que necesiten los jars para funcionar',
                '',
                '- Gradle -> esta basada en varios conceptos de Apache Maven por lo que tiene varias mejores frente a este ',
                ' - Se basa en un lenguaje DSL, siendo más mantenible en el tiempo ',
                ' - Tambien puede gestionar los ciclos de vida, igual que Maven ',
                ' - Su rendimiento es mayor en comparación directa con Maven ',
            ]),
        new Item('versionamiento',
            [
                '- Las versiones se pueden dar por numero o por estabilidad ',
                '- No existe una regla que indique que siempre se deben manejar asi, pero es util conocer las convenciones ',
                '',
                ' - Numeros ->  X.Y.Z',
                '  - El primero numero -> indica la version principal del software ',
                '  - El segundo numero -> indica nuevas funcionalidades en la version mayor ',
                '  - El tercero numero -> es la correción de fallas, parches de seguridad, cambios menores, etc... ',
                '',
                ' - Estabilidad -> &alpha;, &beta;, RC',
                '  - Alpha -> version inestable que probablemente contenga errores y deba ser corregida ',
                '  - Beta -> una version más estable que alpha y a la que se le deben hacer pruebas para verificarla ',
                '  - Release Candidate -> son los ultimos toques previos para poder ser lanzada oficialmente ',
            ]),
        new Item('licencias',
            [
                '- Software libre &ne; Software gratuito ',
                ' - Software libre -> puede ser usado como quiera el usuario, sin ninguna restricción ',
                ' - Software gratuito -> aunque este no requiera de un pago, el usuario esta limitado en su actuar ',
                '',
                '- Licencias GPL -> el desarrollador conserva los derechos de autor, pero permite su libre distribucion, modificacion y uso, ',
                ' - siempre y cuando la nueva version se cobije bajo el mismo tipo de licencia ',
                '- Licencia BSD -> es una licencia permisiva donde se puede vender sin dar acceso al codigo fuente ',
                '- Licencia Apache -> esta licencia permite la modificación y distribución del original en cualquier modalidad, ',
                ' - siempre y cuando se especifique el codigo fuente de terceros usado, presente en la distribución ',
                '',
                '- Licencias Creative Commons: ',
                ' - Atribucion -> se debe dar credito al autor para poder ser usada, expuesta, distribuida, etc... ',
                ' - No comercial -> su uso esta prohibido para fines comerciales ',
                ' - No derivadas -> la obra no puede ser modificada ',
                ' - Compartir igual -> las derivaciones solo se permiten manteniendo la licencia original y con permiso del autor ',
            ])
    ];

export const POO =
    [
        new Item('poo',
            [
                '- Alta integridad, Bajo acoplamiento',
                '- Mejora la abstracción de los problemas al acercarlos a lo cotidiano ',
                ' - Clases      -> abstracciones de la realidad, convertidas en plantillas ',
                ' - Objetos     -> instancia de una clase, con propiedades unicas ',
                ' - Propiedades -> atributos o caracteristicas de un objeto',
                ' - Metodos     -> comportamientos o acciones de un objeto',
            ]),
        new Item('pooPilares',
            [
                '- Encasulapción -> todas las propiedades del objeto son solo del objeto ó de la clase ',
                '- Abstracción   -> las acciones son publicas pero su complejidad esta oculta; todos necesitan el que, más no interesa el como ',
                '- Herencia      -> los hijos tienen acceso a los metodos y atributos del padre, además de las propias, pero el padre no conoce a sus hijos ',
                '- Polimorfismo  -> cada objeto se puede comportar diferente, aunque tenga una misma base, solamente cambiando la instancia ',
            ]),
        new Item('herencia',
            [
                '- Propiedad de que una clase pueda ser creada a partir de otra ya existente ',
                '- Todo comportamiento heredado puedo ser sobrescrito por cualquiera de los hijos, dando lugar al polimorfismo ',
                '- Es usada para la reutilización de codigo, definir jerarquias, y obtener comportamientos especializados ',
                '- Puede ser de diferentes tipos: ',
                ' - Simple -> cada hijo SOLO puede heredar de una clase padre ',
                ' - Multiple -> las clases pueden heredar a partir de una o más clases, esto puede traer problemas si hay atributos o metodos con nombres iguales ',
                ' - Implementación -> los metodos pueden ser sobreescritos, y usarse tal cual vengan del padre o modificarlos para cambiar el comportamiento ',
                ' - Interfaz -> los metodos son heredados, pero su implementación no, esta es propia de cada hijo ',
            ]),
        new Item('composicion',
            [
                '- En los diagramas UML se suele representar por medio de un diamante con o sin relleno, ubicado en la clase contenedora ',
                '',
                ' - Agregación -> Indica que una clase es parte de otra, y que los componentes pueden ser compartidos por otros ',
                '  - La destrucción del compuesto no necesariamente indica la destrucción de todos los formantes ',
                '  - Se suele representar mediante un diamante sin relleno en UML',
                '  - Cualquier Empresa Tiene 0..* Clientes, los clientes y la empresa pueden vivir independientemente el uno del otro ',
                '',
                ' - Composición -> La clase contenida y el contenedor deben tener los mismmos ciclos de vida ',
                '  - Los objetos contenidos son solamente del objeto contenedor, si este se destruye, todos sus componentes tambien ',
                '  - Su representación en UML se da mediante un diamante con relleno ',
                '  - Una Empresa tiene 1..* Empleados, si NO existe una empresa, NO pueden existir sus empleados ',
                '',
                '- En cuestion de codigo ambas relaciones no se diferencian entre si (en la mayoria de lenguajes) ',
                '- La principal diferencia es a nivel conceptual, donde esta si puede ayudar a entender mejor el problema y su modelado ',
            ]),
        new Item('pooStatic',
            [
                '- Metodos o atributos que pertenecen a la clase y no a un objeto como tal',
                '- Son accesibles de manera global, por lo que hay que tener cuidado con su uso ',
                '- No necesitan ser instanciados para ser usados',
            ]),
        new Item('sobrecarga',
            [
                '- Algunos lenguajes permite sobrecargar los metodos y constructores',
                '- El nombre sera el mismo pero pueden recibir diferente numero de parametros o de tipos',
                '- Deben tener diferencias entre si, de lo contrario el compilador interno se da cuenta de esto y sacara error ',
            ]),
        new Item('acoplamiento',
            [
                '- Aferente -> hace referencia a una clase con un alto grado de responsabilidad y una jerarquia bastante alta',
                ' - Esto es indicativo de la herencia, por lo que es pertinente modificarla con cuidado debido a posibles efectos colaterales ',
                ' - Este tipo de clases solo usa atributos y metodos principalmente de las clases padre ó propios y poco o nada de entidades externas ',
                '',
                '- Eferente -> es un paquete o clase con un alto grado de dependencia, esto condiciona el comportamiento de la clase ',
                ' - siendo casi totalmente dependiente de las entidades externas, por lo que es más suceptible a efecto colaterales por cambios en estas ',
                '',
                '- Idealmente se debe evitar el acoplamiento Eferente y buscar el Aferente, ya que este conlleva una mejor estabilidad y mantenimiento ',
            ]),
        new Item('contratos',
            [
                '- Mejora la compresión de POO al mejorar la especificación de los elementos ',
                '- Tambien puede servir como documentación, al mismo tiempo que se programa ',
                '- Uso eficaz de la herencia y la reutilización ',
                '- Las Responsabilidades estan previamente definidas y estas no se deben romper ',
                '- Se manejan los conceptos de precondiciones y postcondiciones con mayor importancia ',
                '- Ademas de incluir el concepto de inmutabilidad, al entrar como al salir ',
            ]),
        new Item('descomposicion',
            [
                '- La descomposición funcional Se refiere al proceso de resolución de las funciones de las partes consituyentes, ',
                ' - de tal manera que la función original se pueda reconstruir ',
                '- Este proceso se lleva a cabo con la idea de desmenuzar la realidad en sus partes constitutivas más elementales ',
                ' - esto ayuda a la modularización del diseño, y a la definición de responsabilidades unicas ',
                '- Se debe realizar de manera responsable y bien planeada, ya que su abuso puede resultar en un antipatron, ',
                ' - donde el costo de integración entre elementos es demasiado elevado, no es partir porque si, es hacerlo donde se debe ',
            ]),
        new Item('polimorfismo',
            [
                '- El polimorfismo es la capacidad de adoptar diferentes comportamientos ante un mismo estimulo, dependiendo de si se es un tipo o un super tipo ',
                '- Es una relajación del sistema de tipos en lenguajes tipados, además de que es un consecuencia directa de la herencia ',
                '- Este se puede lograr de diversas maneras, como uso de interfaces, sobrecarga de metodos, herencia y uso de genericos '
            ]),
        new Item('herVScomp',
            [
                '        Caso             Diseño basado en herencia                            Diseño basado en composición               ',
                '- Inicio del desarrollo       Más rapido                                           Más lento                             ',
                '- Diseño del software         Facil pero pobre                                     Más complejo                          ',
                '- Efectos no deseados         Propicia                                             Reducidos                             ',
                '- Adaptabilidad               Más niveles más complejidad                          Facil de cambiar (instancias)         ',
                '- Testing                     Entre más sobre escritura más dificil de cambiar     Piezas acotadas y fronteras claras    ',
                '- Extension                   Debe hacerse con cuidado de no extender "basura"     Facil incorporación de piezas nuevas  ',
                '- Polimorfismo                No es necesario ningun mecanismo extra               Se puede lograr mediante interfaces   ',
            ]),
        new Item('enlaces',
            [
                '- La asociación entre la definición de los metodos y variables, se suele dar de 2 maneras, durante tiempo de ejecución y de compilación ',
                '- Todo lo se pueda conocer en tiempo de compilación, y que es necesario para que el programa se pueda ejecutar se conoce como enlace estatico ',
                '- Las cosas de las cuales es necesario ejecutar el programa para conocer su valor y su comportamiento, se conoce como enlace dinamico ',
            ]),
        new Item('acoplamientoComponentes',
            [
                '- Los componentes deberian estar estructurados de manera jerarquica, y de manera que tengan poca complejidad entre sus relaciones, ',
                ' - además de la menor dependencia entre si que sea posible',
                '- Existen varios principios a tener en cuenta: ',
                '',
                '- Principio de dependencia aciclicas -> ADP',
                ' - Las dependencias circulares no deberian existir ',
                ' - Si estan existen, deberian convertirse en un solo componente para no afectar al resto ',
                ' - A mayor tamaño del software, más problemas en cuanto a relaciones y la compilación de este ',
                ' - Utilizar la inversion de dependencias para evitar relaciones arbitrarias y/o acopladas ',
                ' - Separar y tener claro que puede ser volatil y que es más constante ',
                '',
                '- Principio de dependencias estables -> SDP',
                ' - Un componentes dificl de cambiar (estable) no deberia depender de un componente volatil ',
                ' - Esta relación se puede calcular sabiendo quienes son dependientes y de quien depende el componente ',
                ' - Dependencias entrantes: quienes estan afuera y dependen de este (interno) ',
                ' - Dependencias salientes: quien esta adentro y dependen de otros (externos) ',
                '  - 0   == estabilidad       esto se calcula mediante la siguiente formula: ',
                '  - 0-1 == intermedio        inestabilidad =        salidas       ',
                '  - 1   == inestable                         (entradas + salidas) ',
                '',
                '- Principio de abstracciones estables -> SAP ',
                ' - Los componentes deben abstraerte hasta el grado de estabilidad deseado ',
                ' - Los partes criticas de nuestro sistema deberian ser estables y de alto nivel ',
                ' - Las partes volatiles deben poder ser cambiadas con gran facilidad, con minimas afectaciones a los demás ',
                ' - Las clases abstractas e interfaces son indicativos de estabilidad ',
            ]),
        new Item('beginingPoo',
            [
                '- Los paradigmas funcional e imperativo se iniciaron a explorar matematicamente en 1930, ',
                ' - gracias al calculo lambda y la maquina de turing ',
                '- Ya en 1940 aparecen los lenguajes de bajo nivel y de ensamblaje ',
                '- A finales de 1950 aparecen los primeros lenguajes de alto nivel, los dialectos Lisp como FORTRAN Y COBOL, ó clojure ',
                ' - más recientemente son usados en la actualidad ',
                '',
                '- POO fue acuñada por Alan Kay alrededor de 1966 mientras estudiaba su posgrado ',
                '- El primer lenguaje Orientado a objetos reconocido fue Simula, este presentaba objetos, herencia, clases y subclases, ademas de metodos virtuales ',
                '- La gran idea era usar minicomputadoras encapsuladas en software que se comunicaran a traves del paso de mensajes en vez de datos directamente ',
                '- Con esto en mentes se desarrollo Smalltalk, más de objetos que Simula, aca todo es un objeto, aun asi, estaba inspirado en Lisp y Simula ',
                '- Segun Alan kay, la principal idea era la mensajeria y no los "objetos" como lo es hoy en dia ',
                '',
                '  Ingredientes esenciales                                             Elementos NO esenciales ',
                '   - Paso de mensajes                                                   - Clases y tipos estaticos ',
                '   - Encapsulación                                                      - Herencia y polimorfismo',
                '   - Union dinamica (adaptación en tiempo de ejecución)                 - Tratamiento especial para objetos/funciones/datos ',
                '   - Evitar la mutabilidad y estados compartidos                        - la palabra clave (new) ',
                '',
                '- Muchas de las caracteristicas esenciales para Alan Kay fueron ignoradas por los lenguajes de la familia C, C++, Java, C#, etc... ',
                '- Los sistemas de tipos demasiado restrictivos para la libre expresión de ideas dinamicas y funcionales dificultan la simplicidad del codigo ',
                '- La orientación a objetos modernas no refleja los conceptos que la iniciaron, más bien seria una Programación orientada a mensajes (MOP)',
                '',
                '- POO significa (segun Alan Kay): ',
                ' - Programación con componentes "objetos"',
                ' - El estado del componentes debe estar encapsulado y solo puede ser manipulado por si mismo ',
                ' - El paso de mensajes para la comunicacion entre objetos y que estos sean ',
                ' - Los componentes se pueden agregar/cambiar/reemplazar en tiempo de ejecución ',
                ' - La mayoria de los comportamientos se pueden especificar de manera generica usando estructuras de datos algebraicas, sin herencia '
            ]),
        new Item('inmutability',
            [
                '- Es la propiedad de un objeto de no cambiar su estado, una vez haya sido declarado ',
                '- Esto permite que sean seguros en lenguajes que soportan el uso de hilos (thread-safe) ',
                '- En diferentes lenguajes y en el paradigma funcional, esto es inherente, pero en otros como Java se puede lograr por otros medios ',
                '',
                '- Ventajas: ',
                ' - Los objetos siempre seran los mismos, facilitando la depuración de ser necesario ',
                ' - Menos propenso a errores y efectos segundarios (side-effects) ',
                ' - Sin problemas para la paralelización y posibles mejoras de rendimiento al manejar menos referencias ',
                ' - Mejora el encapsulamiento y la abstracción '
            ]),
        new Item('typesPolimorfismo',
            [
                '- El polimorfismo no es un concepto exclusivo de los lenguajes Orientados a Objetos',
                '- Este esta estrechamente relacionado con las capacidades que se le otorgan al programador y el comportamiento del lenguaje ',
                '- Existen 2 tipos principales según, pero estos pueden diferir de acuerdo al autor respectivamente ',
                '',
                '<strong>- Universal -> </strong> Inclusión, Parametrico, En fila ',
                '<strong>- Ad-hoc -> </strong> Sobrecarga, Cohesión ',
                '',
                '<strong>- Sobrecarga </strong> ',
                ' - Es el proceso de utilizar un mismo nombre para una función, pero con algun cambio en la declaración ',
                ' - Aca es donde el compilador se encarga de diferenciar y saber a cual se debe usar ',
                '',
                '<strong>- Coerción </strong> ',
                ' - Es una operación de traducción/mapeadora para convertir el tipo del argumento al tipo esperado ',
                ' - Se diferencia del de Sobrecarga ya que este es un enfoque sintactico y el Coerción es de tipo semnatico ',
                ' - El proceso puede ser explicito o implicito, e incluso dinamico o estatico, dependiendo del sistema de tipos subyacente ',
                '',
                '<strong>- Parametrico </strong> ',
                ' - La idea es implementar generalizaciones sobre funciones, para hacerlas disponibles a diferentes tipos de datos ',
                ' - Dependiendo del lenguajes se puede considerar programación generica o de plantillas ',
                ' - Tambien permite la inferencia se de por el propio sistema de tipos para las operaciones a realizar ',
                '',
                '<strong>- Inclusivo </strong>',
                ' - Al establecer una jerarquia, es posible heredar propiedades y metodos en comun entre ellos ',
                ' - Esto da lugar a 2 aspectos de generalizaciónn y especialización simultaneamente ',
                ' - Es importante saber cuando se deben usar los "subtipos" y cuando no, de aca se desprenden otros 2 subtipos',
                '  <strong>- Nominal: </strong> Es una declaración explicita de la relación y una forma de hacerlo seria la Herencia ',
                '  <strong>- Estructural: </strong> Mediante una equivalencia que exprese la relación intrinseca, como serian las interfaces',
                ' - Este 2do suele ser más facil de reutilizar en casos no previstos, aunque no tiene control sobre la jerarquia que el 1ero ',
                '',
                '<strong>- De fila </strong>',
                ' - Este tipo aplica especialmente para registros, ya que estos tienen un desafio particular cuando son pasados a función ',
                ' - Para evitar esta perdida de información se suele usar un enfoque estructural evitando perdidas por la conversion implicita ',
                ' - No se usa un enfoque de subtipos, ya que que no suele haber una relación entre registros',
                ' - Un ejemplo donde se evidencia podria ser un Narrowing casting donde se pasa de Auto a Vehiculo, sin perdidad de información ',
                ' - No todos los lenguajes lo soportan, por lo que es poco conocido ',
            ]),
        new Item('factoryMethods',
            [
                '- Los metodos de fabrica funcionan como un constructor, entregando instancias completamente inicializadas ',
                '',
                '-<strong>Ventajas:</strong> ',
                ' - No tienen nombres significativos, por lo que un factory method puede ser más explicito en lo que hace ',
                ' - Pueden devolver el mismo tipo, un subtipo e incluso primitivos si se da el caso, por lo que son más flexibles ',
                ' - Encapsulan toda la logica requerida para la construcción de los objetos, aliviniando la carga del constructor ',
                ' - Pueden controlar las instancias, por ejemplo el patron Singleton ó un constructor semantico ',
                ' - La inmutabilidad puede ser una caracteristica inherente a su uso ',
                '',
                '- Estos tambien pueden ser personalizados o venir previamente incluidos en el SDK como la clase <strong>Collections</strong>',
            ])
    ];

export const PRINCIPIOS =
    [
        new Item('solid',
            [
                ' S -> Responsabilidad única',
                ' - Una cosa x solo deberia hacer y conocer cosas de su competencia, de resto se tendria un acoplamiento indeseado ',
                ' O -> Abierto/Cerrado',
                ' - Siempre sera mejor añadir nuevos comportamientos o funciones que modificar los existentes ',
                ' L -> Sustitución de Liskov',
                ' - Todo objeto hijo es remplazable por sus padres, sin alterar el funcionamiento del sistema ',
                ' I -> Segregación de interfaces ',
                ' - Es mejor tener interfaces especializadas, que interfaces genericas con metodos que no se usaran ',
                ' D -> Inversión de dependencias ',
                ' - las implementaciones pueden cambiar, pero las abstracciones no, por lo que el sistema se debe basar en estas ',
            ]),
        new Item('kiss',
            [
                '- Código entendible',
                '- Mantener muchos modulos y metodos pequeños en vez de uno grande ',
                '- Código autocomentado, nombres claros para las variables',
                '- Divide y venceras, dividir el problema en subproblemas',
                '- No abusar de los comentarios, y mantenerlos actualizados',
                '- Implementa código reutilizable, evitar el copiar y pegar',
            ]),
        new Item('yagni',
            [
                '- No lo añadas hasta que no lo necesites',
                '- Define prioridades, evita trabajo innecesario y que no aporta valor ',
            ]),
        new Item('occam',
            [
                '- Preferir siempre la solución más simple, asi se evita agregar complejidad arbitraria ',
                '- En igualdad de condiciones la solución más optima prevalecera',
            ]),
        new Item('dry',
            [
                '- Evita repertir código siempre que sea posible y que no se genere acoplamiento',
                '- Incrementa la mantenibilidad del código, modularizando y haciendo partes pequeñas ',
                '- Facilita la refactorización, y la creación de partes pequeñas e independientes ',
            ]),
        new Item('hollywood',
            [
                '- Se basa en la inversion de dependencias para crear la inversion de control ',
                '- Esto logra obtener las referencias y datos necesarios para funcionar mediante una entidad externa (frameworks)',
                '- Generalmente las entidades externas son los frameworks que ejecutan el codigo del usuario ',
                '- Las instancias se crean y se eliminan de manera más eficiente, mejorando el rendimiento ',
            ]),
        new Item('tellDontAsk',
            [
                '- La responsabilidad debe ser delegada al objeto correspondiente, en lugar de extraerla en un componente afuera ',
                '- En lugar de pedir los datos a los objetos, debemos decirles que hacer y esperar el resultado de la operación ',
                '- Esto es un refuerzo del concepto de encapsulación, propio de la orientación a objetos ',
            ]),
        new Item('stupid',
            [
                ' S -> Patron singleton ',
                ' - Es el unico patron que mal usado puede convertirse en un antipatron, no lo uses si no es necesario ',
                ' T -> Acoplamiento indebido ',
                ' - Sucede cuando un cambio afecta más partes de las debidas, esto indica una mala modularización ',
                ' U -> Inestabilidad',
                ' - El software no deberia ser dificil de testear, ni de modificar ',
                ' P -> Optimización prematura ',
                ' - Un codigo eficiente, por lo general es ilegible, por lo que optimizarlo sin necesidad solo trae complejidad innecesaria ',
                ' I -> Nombres indescriptivos ',
                ' - El ideal de todo codigo es que sea autocomentado, por lo que nombrar mal las cosas hace inalcanzable este ideal ',
                ' D -> Duplicación ',
                ' - El codigo duplicado deberia evitarse siempre que se pueda, aplicando DRY & KISS, además de otras practicas ',
            ]),
        new Item('twice-one',
            [
                '- Un dicho proveniente desde la carpinteria y aplicado a distintas y variadas profesiones ',
                '- Este dicho encarna la mentalidad de una planificacion minuciosa puede evitar errores, en especial si son costosos',
                ' - especialmente cuando se pueden realizar acciones faciles de hacer, pero dificiles de deshacer ',
                '- Debido a que el software es intangible y puede ser reversible, se puede convertir en una <em>"puerta de 2 vias"</em> segun Jeff Bezzos',
                '- Aun asi esto evitara malgastar tiempo y recursos, al solo cortar y deshacer, solo porque es posible conllevando menos efectos adversos ',
            ]),
        new Item('divide-conquer',
            [
                '- Un adagio popular dedicado a la resolución de problemas, donde al dividir un problema en partes más pequeñas, ',
                ' - se pueden encontrar soluciones a problemas más acotados y menos complejos, permitiendo que la suma de todos los esfuerzos ',
                ' - a la larga solucione el problema del cual se derivaron ',
                '',
                '- Esto se puede ver como una muñeca Rusa, donde cada muñeca esta formada por más partes que se van haciendo más pequeñas ',
                ' - pero juntas son capaces de conformar un todo, mayor a la suma de sus partes ',
            ])
    ];

export const REFACTORIZACION =
    [
        new Item('codigolimpio',
            [
                '- Menos es Más, el poder de la simplicidad hecho codigo',
                '- Es más facil de entender para otros, y a traves del tiempo ',
                '- Es más facil de mantener a lo largo del tiempo ',
                '- El codigo duplicado se reduce considerablamente ',
                '- Los tests son satisfactorios de manera regular ',
            ]),
        new Item('deudatecnica',
            [
                '- Todo desarrollador desea crear un buen codigo pero las omisiones o errores crecen sigilosamente ',
                '- La mala modularización del codigo puede hacer que los cambios tengan un gran impacto',
                '- Apurar el desarrollo puede crear soluciones rapidas pero incompletas',
                '- La falta de pruebas puede tener efectos colaterales inmesamente destructivos',
                '- La Documentación siempre sera necesaria, y omitirla entorpecera futuros cambios',
                '- Sin comunicación o interacciones incompletas pueden generar pequeñas islas dentro de la empresa ',
                '- Tambien existe el elemento humano cuando el desarrollador es inexperto o incompetente',
            ]),
        new Item('tiposDeudaTecnica',
            [
                '- No realizar los cambios necesarios con premura hara que en el futuro sea más dificil y costoso refactorizar ',
                '',
                '                            Deuda imprudente                       Deuda prudente          ',
                '',
                '                       -Falta de tiempo/presupuesto          -Prioridad de funcionalidades ',
                'Deuda deliberada       -Refactor descuidado                   con la promesa de mejora     ',
                '                       -Insuficiencia de pruebas             -Minimo de pruebas a hacer    ',
                '',
                '                       -Falta de conocimiento                -El refactor constante evita  ',
                'Deuda involuntaria     -Sobreingenieria                       estos problemas, mientras se ',
                '                       -Anti patrones de diseño               aprende de los errores       ',
            ]),
        new Item('comentarios',
            [
                '- Comentar el codigo es sumamente util para determinar los segementos que necesitan correciones ',
                '- La mayoria de IDEs admiten comentarios con etiquetas como:  ',
                ' - TODO -> lugares que se pueden mejorar, ya sea legilibilidad, complejidad, etc.. ',
                ' - FIXME -> porción de codigo que falla en circuntancias especificas y debe ser revisada ',
                ' - NOTE -> funcionamiento interno ó posibles problemas no documentadas ',
                ' - KLUDGE -> codigo ineficiente, complejo ó insondable ',
            ]),
        new Item('cuandorefactorizar',
            [
                '- Cuando se inicia a duplicar codigo, eventualmente sera necesario refactorizarlo',
                '- Cuando se empieza se arregla un error es una excelente oportunidad para hacerlo',
                '- Cuando se hagan revisiones, siempre hay espacio para la mejora',
                '- Cuando se agregan nuevas funciones, tambien se pueden refactorizar las existentes ',
            ]),
        new Item('comorefactorizar',
            [
                '- El resultado debe ser mejor que lo anterior, de lo contrario sera tiempo perdido ',
                '- No se deben crear nuevas funciones, eso es estrictamente en tiempo de desarrollo ',
                '- Los tests deben seguir pasando tal y como antes de empezar',
            ]),
        new Item('tecnicasRefactoring',
            [
                '- Composicion de metodos -> Se base en descomponer metodos grandes en, ',
                ' - metodos más pequeños y manejables evitando metodos innecesariamente largos y complejos ',
                ' - PROS -> los metodos se hacen más entendibles y se eliminan variables de poca utilidad',
                ' - CONTRAS -> la complejidad cognitiva puede ser mayor de la inicial, ',
                '   además de pequeñas afectaciones al rendimiento ',
                '',
                '- Mover funciones entre clases -> Aunque un sistema se encuentre bien diseñado, ',
                ' - habra clases con más responsabilidades que otras, ',
                ' - con la posibilidad de que estas no les correspondan ',
                ' - PROS -> se hace un mejor reparto de las responsabilidades ',
                ' - CONTRAS -> si se abusan de estos se pueden convertir en code smells ',
                '',
                '- Organización de los datos -> Esto ayuda a pensar en clases y funciones, ',
                '  - en vez de operaciones con datos primitivos ',
                ' - Mejora la encapsulacion y el manejo de los datos ',
                ' - PROS -> permite aprovechar mejor los conceptos de POO ',
                ' - CONTRAS -> la complejidad del codigo puede crecer ',
                '',
                '- Simplificación de condiciones -> las condiciones siempre tienden a crecer, ',
                '  - por lo que siempre se deben revisar y evitar bolas de nieve ',
                ' - Se reduce la complejidad cognitiva resultando en un codigo más entendible ',
                ' - PROS -> se reduce la complejidad y se aumenta la mantenibilidad ',
                ' - CONTRAS -> en ciertos casos se debe implementar más codigo ',
                '',
                '- Simplificación de metodos -> los metodos deben ser dicientes en cuanto a lo que hacen ',
                ' - Mejora el manejo de las excepciones, en vez de que se usen como condiciones del flujo ',
                ' - PROS -> un metodo diciente es más facil de comprender ',
                ' - CONTRAS -> los metodos se pueden volver más largos o hacer más llamados ',
                '',
                '- Lidiar con la generalización -> Abstraer las generalidades del codigo, ',
                '  - como creacion de interfaces, cambios de jerarquias, remover o modificar la herencia ',
                ' - Se mejora la defición de atributos y comportamientos al tratar con la herencia ',
                ' - PROS -> se mejora el diseño de las clases y se disminuye el acoplamiento ',
                ' - CONTRAS -> se debe realizar un analisis más profundo del porque y su solución ',
            ])
    ];

export const SEGURIDAD =
    [
        new Item('firewall',
            [
                '- Tiene la función de denegar ó permitir el acceso a nuestra red privada',
                '- El trafico debe cumplir con una serie de reglas previamente definidas para su libre circulación ',
                '- Se puede implementar por medio de Hardware, Software, ó ambos ',
                '- Estas son algunas de sus funciones: ',
                '',
                ' - Bloquear accesos no permitidos',
                ' - Evitar accesos no autorizados, estando dentro de la red privada ',
                ' - Supervisar el trafico interno ',
                ' - Posibilidad de bloquear aplicaciones peligrosas ',
                ' - Advertir de posibles accesos malintencionados ',
            ]),
        new Item('protocolos',
            [
                '- SSL -> capa de sockets seguros ',
                ' - Es una tecnologia para mantener segura una conexión de internet ',
                ' - Esto protege toda la información privada que se envia entre 2 sistemas, (cliente-servidor)',
                '',
                '- TSL -> una versión más actual y segura de SSL ',
                ' - La principal difirencia es el algoritmo de cifrado ',
                '',
                '- HTTPS -> Hyper Text Transfer Protocol Secure o protocolo seguro de transferencia de hipertexto ',
                ' - Basicamente indica si una conexion es segura, por medio de un certificado de TSL ó SSL ',
            ]),
        new Item('proxy',
            [
                '- Son un puente entre el origen y el destino de una petición ',
                ' - Pueden servir para controlar el acceso, segun los usuarios que intenten acceder ',
                ' - Filtrar el contenido segun las politicas de la empresa ',
                ' - Almacenar en cache el contenido de las paginas que hayan sido accesadas previamente ',
                '',
                '- Pueden ser inversos, conviertiendose en un puente entre el destino y el origen ',
                ' - Los proxies inversos pueden ser usados como balanceadores de carga ',
            ]),
        new Item('ciberSeguridad',
            [
                '- Es la practica de defender toda la infraestructura fisica y logica necesaria para nuestra negocio ',
                '- Aplica desde diferentes ramas de negocios, hasta los dispositivos moviles ',
                '',
                '- Categorias comunes',
                ' - De red: Consiste en proteger una red informatica de ataques dirigidos o malware oportunista ',
                ' - De aplicaciones: Se enfoca en mantener el software libres de amenazas o vulnerabilidades ',
                ' - De la información: Protege la integridad y la privacidad de los datos ',
                ' - Operativa: Incluye los procesos y decisiones de que recursos son accesibles y a quienes ',
                ' - Recuperación ante desastres: Ya sea un evento natural o un incidente de ciberseguridad, ',
                '  - la empresa ha de tener planes de recuperación, para garantizar la continuidad del negocio ',
                ' - Usuarios: El eslabon más debil de la cadena casi siempre han de ser los usuarios, ',
                '  - estos son impredecibles y pueden ser atacados de diversas maneras ',
                '',
                '- Tipos de ciberamenazas',
                ' - Delito cibernetico: incluye agentes individuales o grupos que atacan sistemas para, ',
                '  - obtener beneficios financieros o causar interrupciones en sistemas criticos ',
                ' - Ciberataques: recopilan información para exponer y dañar organizaciones ',
                ' - Ciberterrorismo: debilitar o destruir sistemas electronicos para causar panico o terror ',
                '',
                '- Metodos usados',
                ' - Malware: software malicioso creado para interrumpir o dañar los equipos de los usuarios, ',
                '  - suelen ser propagados mediante archivos infectados, ya sean descargas o correos electronicos ',
                ' - Virus: programa capaz de reproducirse y extenderse por todo un sistema ',
                ' - Troyanos: es un malware que se disfraza de software legitimo para recopilar datos de los usuarios ',
                ' - Spyware: registra todas las operaciones de los usuarios para robar información personal y sensible ',
                ' - Ransomware: bloquea los archivos y datos del usuario hasta que no se pague un rescate ',
                ' - Adware: software publicitario que puede difundir malware ',
                ' - Botnets: redes de equipos infectadas y que son usadas por los cibercriminales sin autorizacion previa ',
                '',
                '- Ataques',
                ' - Inyección de SQL: se puede usar para robar datos o tomar el control de bases de datos, ',
                '  - por medio de comandos maliciosos especificos que la base de datos ejecutara ',
                ' - Phishing: Son correos electronicos que aparentan ser legitimos, ',
                '  - pero solo buscan robar información personal, entregada por el mismo usuario ',
                ' - Man-in-the-middle: es la interceptación de comunicaciones entre 2 dispositivos, ',
                '  - por ejemplo una red publica y un dispositivo conectado a esta ',
                ' - Ataque de denegación de servicio(DoS): ',
                '  - se impide que un sistema pueda satisfacer a sus usuarios al sobrecargar e inutilizar ',
                '  - los servidores mediante inmensas cantidades de trafico ',
                '',
                '- Protecciones',
                ' - Mantenga actualizado su sistema operativo ',
                ' - Use software antivirus de su preferencia ',
                ' - Utilizar contraseñas seguras y cambiarlas con periocidad ',
                ' - No abrir archivos adjuntos de fuentes desconocidas ',
                ' - No hacer clic en los vinculos de remitentes desconocidos ',
                ' - Evitar el uso de redes wifi publicas',
            ]),
        new Item('cia',
            [
                '- Esta triada es tan fundamental para la seguridad, a tal punto que cada filtración de datos que se produce, ',
                ' - significa la violación de alguno de estos principios ',
                '- Los profesionales y las organizaciones evaluan las amenazas y vulnerabilidades basandose en el impacto, ',
                ' - que pueda causar en alguna de estas caracteristicas, para implementar planes y soluciones que minimicen el riesgo ',
                '',
                '- Confidencialidad -> esfuerzo que emplean las organizaciones para mantener sus datos privados, o en su defecto restringidos ',
                ' - una de las maneras para lograr esto es controlar el acceso a las personas ',
                ' - realizar capacitaciones para dar a entender la importancia de los datos ',
                ' - encriptación y/o autenticación para acceder a estos ',
                '',
                '- Integridad -> hace referencia a la garantia de que los datos no hayan sido manipulados ni alterados ',
                ' - encriptación de los datos por medio de funciones hash ',
                ' - firmas digitales y certificados digitales de autoria ',
                ' - control de versiones y control de acceso ',
                '',
                '- Accesibilidad -> los datos no tienen valor si no se pueden usar o consultar cuando sean necesarios ',
                ' - para garantizar el acceso a estos se puede tener servidores en redundancia ',
                ' - parches y actualizaciones regulares al software ',
                '',
                '- No todas las organizaciones necesitan las mismas caracteristicas, pero si todas deben cumplir las 3 en cierto grado ',
                '- Darle prioridad a alguna sobre las otras no significa su descuido, ',
                ' - solo es una elección consciente sobre cual es las más importante para el negocio ',
            ]),
        new Item('noRepudio',
            [
                '- Es un principio fundamental en lo que concierne a la seguridad informatica ',
                '- Garantiza que todo mensaje haya sido originado por el emisor y que este no haya sido suplantado ',
                '- Igual que todo mensaje debe ser recibido por el receptor, y por nadie más ',
                '- Es la capacidad para demostrar la paticipación de todas las partes involucradas ',
                '',
                '- Para garantizar esto, se pueden seguir 2 mecanismos basicos para este fin: ',
                ' - Identificación -> proceso o mecanimos para identificar a un usuario ',
                ' - Autenticación -> permite verificar la identidad del usuario y su acceso al sistema ',
                '',
                '- Tipos de repudio: ',
                ' - En origen -> el remitente no puede negar haberlo enviado ya que hay evidencia por parte del destinatario de haberlo enviado ',
                ' - En destino -> se avala que se recibio el mensaje y no se podra rebatir ya que el remitente tiene evidencia de haberlo recibido ',
                '',
                '- Firmas electronicas ',
                '- Es una manera de afirmar que cada persona es unica y que tiene una manera de identificarse, ',
                ' - esta solo debe ser conocida por la persona y su organización, tanto la clave publica como la privada ',
                '',
                '- Esto se puede dar de diversas maneras: ',
                ' - Simple -> solo se rechaza o acepta el contenido del documento ',
                ' - Avanzada OTP -> se recibe un codigo mediante un canal diferente al usado, con un codigo para ser verificado ',
                ' - Biometria -> es necesario una firma fisica o una identificación tangible de que es quien se dice ser ',
                ' - Certificado digital -> documento cifrado mediante un algoritmo hash que cuenta con una llave publica y una privada ',
                '  - este hash puede ser cifrado y descifrado por ambas partes y debe ser igual para ambos, garantizando la integridad del mensaje ',
                '  - previo a esta operación ambas partes deben haber compartido una clave publica y cada quien tener su clave privada ',
            ]),
        new Item('matrizDeRiesgo',
            [
                '- Permite identificar de manera rapida y visual las probabilidades de accidentes, riesgos y peligros ',
                '- Esto ayuda al proceso de tomas de decisiones y saber si estan controlados, si no, saber cuales se deben priorizar ',
                '',
                '- Probabilidad: ',
                ' - Alta -> [50% , 100%] posibilidades de que ocurra a menudo en circunstancias similares ',
                ' - Media -> [10% , 50%) no pasa con frecuencia ',
                ' - Baja -> [1% , 10%) podria suceder, dandose el caso ',
                '- Impacto: ',
                ' - Grave -> consecuencias negativas en una o varias areas, impidiendo su funcionamiento o generando fallos ',
                ' - Moderado -> podria crear problemas que tengan consecuenias negativas para ciertos procesos o personas ',
                ' - Leve -> si se llegara a dar su impacto seria bajo en la organización ',
                '',
                '    P\I    Grave    Moderado  Leve ',
                '    Alta   Critico                 ',
                '    media           Moderado       ',
                '    Bajo                      Leve ',
            ]),
        new Item('condicionDeCarrera',
            [
                '- Sucede cuando varios subprocesos intentan acceder a un recurso compartido, de manera simultanea ',
                '- Esto es indeseable ya que puede alterar los datos, o dañar la secuencia de las operaciones provocando errores ',
                '- A nivel de codigo pueden suceder algunos de los siguientes escenearios',
                '  - Bloqueo del ordenador',
                '  - Operaciones ilegales ',
                '  - Apagado del programa ',
                '  - Errores al leer o escribir datos ',
                '',
                '- Estos errores se pueden solventar al manejar los hilos y subprocesos de manera correcta, ',
                '  - más no se pueden eliminar totalmente, debido a la naturaleza multihilos y procesos de la informatica ',
            ]),
        new Item('honeypot',
            [
                '- Son una forma de defensa para vectores de ataque, phishing, exploits y malware, funcionando como un sebo para los atacantes, ',
                ' - resguardando la información valiosa, al desviar el trafico de los atacantes hacia esfuerzos inutiles ',
                '- No son una medida infalible ya que si el atacante se da cuenta lo evitara, ',
                ' - por lo que se deben tener más medidas de seguridad internas, externas y perimetrales ',
                '- Tambien es necesario tener en cuenta que pueden ser un arma de doble filo al servir como distracción para un ataque, ',
                ' - o como punto de acceso hacia nuestro sistema; aun asi siguen siendo una gran opción para reforzar nuestra seguridad ',
            ]),
        new Item('zeroDayExploit',
            [
                '- Son vulnerabilidades de software recien descubiertas sin medidas para solucionarlas ',
                '- Estos ataques suceden antes o recien sean descubiertas las vulnerabilidades por lo que se han tenido "cero dias" para arreglarlo ',
                '- Debido a que no se tienen registros de estos problemas, es comun que los ataques tengan exito hasta que el sistema sea parchado ',
                '',
                '- Esta tactica es usada generalmente por: ',
                ' - Hacktivistas -> quienes visibilizan los ataques para llamar la atención por una causa ',
                ' - Cibercriminales -> hackers cuyo objetivo es tener ganancias o destruir sistemas ',
                ' - Espionaje corporativo -> hackers de empresas atacando a la competencia ',
                ' - Guerra informatica -> paises o entidades politicas que atacan la infraestructura cibernetica de otro pais ',
                '',
                '- Blancos comunes: ',
                ' - Sistemas operativos',
                ' - Navegadores web',
                ' - Aplicaciones de oficina',
                ' - Codigo abierto ',
                ' - Hardware, firmware e Internet de las cosas (IoT)',
                '',
                '- Identificar ataques del dia 0: ',
                ' - Debido a su mutabilidad y a su desconocimiento no hay medidas infalibles para detectarlos',
                ' - Se recomienda usar bases de datos de malware existentes ya que estas se actualizan con relativa rapidez ',
                ' - Puede ser util examinar la interacción de los archivos entrantes con el sistema en vez de su codigo, ',
                '  - y asi detectar si su comportamiento es malicioso ',
                ' - Aprendizaje automatico basandose en datos y situaciones previas del sistema ',
                '',
                '- Formas de protección: ',
                ' - Actualizaciones constantes del software y de los sistemas operativos ',
                ' - Evitar usar aplicaciones de terceros que no sean necesarias ',
                ' - Educación basica para los usuarios y asi evitar errores comunes ',
                ' - Usar software antivirus ',
            ]),
        new Item('pentest',
            [
                '- Es una prueba de seguridad que simula un ciber ataque real dentro de un entorno controlado, para identificar brechas y problemas de seguridad ',
                '',
                '- Algunos ataques comunes pueden ser: ',
                ' - Instalación de malware, virus, troyanos, keylogger, ransomware    - Fallos de configuración ',
                ' - Busqueda y explotación de puertas traseras                        - Ingenieria social y recopilación de datos ',
                '',
                '- Estos tipos de testing son una forma hacking etico por lo que estan amparados bajo la ley y pueden ser contractuales ',
                '- Este consta de 3 fases: ',
                ' - Reconocimiento de datos para identificar posibles puertos de acceso ',
                ' - Analisis de vulnerabilidades y sus posibles formas de explotarlas ',
                ' - Explotación, se comprueba que no se puedan hacer ataques de los siguientes tipos: ',
                '  - Inyección de codigo                    - Inclusion de ficheros',
                '  - Evasión de autenticación               - Carencias en el control de autorización ',
                '  - Ejecución de comandos en el servidor   - Ataques de tipo CSRF',
                '  - Manejo de errores                      - Gestion y/o secuestro de sesiones ',
                '  - Ataques de DDOS                        - Fugas de información ',
                '',
                '- Si se llega a encontrar alguna de estos errores, se redactara un informe con las vulnerabilidades encontradas, ',
                ' - evidencias, daños causados ó información robada por el atacante, y finalmente medidas correctivas o de mitigación ',
                '',
                '- Estos tests tambien pueden tener cierto grado de conocimiento de la aplicación ',
                ' - Caja negra -> No se tiene conocimiento alguno del sistema a testear ',
                ' - Caja Gris -> Se tiene información limitada como tecnologias, dominios, cuentas legitimas y otros datos que pueden ser utiles ',
                ' - Caja Blanca -> No se oculta ningun tipo de información, todos los detalles son previamente conocidos ',
            ]),
        new Item('owaspTop',
            [
                '- Open Web Security Application Security ',
                ' - Es una colección de recursos en los que incluye una guia de desarrollo para evitar problemas de seguridad ',
                ' - Regularmente sacan un top 10 con los problemas más comunes y peligrosos a nivel general de las aplicaciones ',
                '',
                ' 1 Broken access control -> fallo o intrusion de los permisos de acción de los usuarios, exponiendo o perdiendo información sensible ',
                ' 2 Cryptografic failures -> fallos en la ocultación de la información debido a falencias en la encriptación ',
                ' 3 Injection -> la información no es filtrada ni valida previamente por lo que se pueden inyectar scripts de SQL y NoSQL maliciosos ',
                ' 4 Insecure Design -> fallas en los diseños iniciales que no contemplan validaciones de seguridad ',
                ' 5 Security Misconfiguration -> privilegios y configuraciones laxas o innecesarias ',
                ' 6 Vulnerable and Outdated Components -> desconocimiento de las versiones manejadas en los diferentes componentes de la aplicación ',
                ' 7 Identification and Authentication Failures -> contraseñas debiles o conocidad por los atacantes son usadas en la aplicación ',
                ' 8 Software and Data Integrity Failures -> uso de fuentes desconocidas o librerias de terceros de poca confianza ',
                ' 9 Security Logging and Monitoring Failures -> el registro y monitoreo de la seguridad puede ser insuficiente por lo que habrian lugares sin supervisión ',
                ' 10 Server-Side Request Forgery -> esto ocurre cuando se obtiene un recurso de una url sin validar la confiabilidad de esta ',
                '',
                '- Estos son los incidentes de seguridad para el top del 2021',
            ]),
        new Item('stride',
            [
                '- Modelado de amenazas, es una estrategia para identificar y eliminar posibles vulnerabilidades antes de escribir codigo ',
                '- Desarrollado en la decade del 90 por ingenieros de Microsoft, teniendo en cuenta 6 categorias: ',
                '',
                ' S -> Suplantacion de indentidad: ocurre cuando un hacker se hace pasar por otra persona, asumiendo la información de esta nueva identidad ',
                '  - Esto con el fin de cometer fraude y/o robar datos personales ',
                ' T -> Manipulación de datos: esto sucede cuando los datos son modificados sin autorización ',
                '  - Por estas y otras razones es importante tener monitorear y revisar la integridad de los datos ',
                ' R -> Repudio: cuando un actor desconocido realiza una operación ilegal o maliciosa en el sistema ',
                '  - Y este no cuenta con la capacidad de rastrear la actividad maliciosa ',
                ' I -> Divulgación de la información: Estas fugas de información sucede cuando los sitios revelan información confidencial involuntariamente ',
                '  - Esto puede afectar el flujo normal de los datos, el acceso al codigo fuente, o mensajes de error con especificaciones internas ',
                ' D -> Denegación de servicios: Estos impiden el correcto acceso a las aplicaciones para dejarlas fuera de servicio ',
                '  - Estos ataques son principalmente de fuerza bruta ya que se requiere una gran capacidad para lograr su objetivo ',
                ' E -> Elevación de privilegios: Usuarios con o sin autorización pueden acceder a posibilidades que previamente no tenian ',
                '  - Estos accesos se dan debido a modificaciones ilegales en los permisos de los usuarios o accesos ilegales a la aplicación ',
            ]),
        new Item('ciam',
            [
                '- La experiencia de los clientes es algo fundamental hoy en dia, ya no es diferenciador, es un requisito basico ',
                '- No solo eso, tiempos de crisis como la pandemia reciente han demostrado que las empresas que mejor conocen a sus clientes, estan mejor posicionadas ',
                '- Parte de esto es la Gestion de Acceso e Identidad de Cliente (CIAM)',
                '- Esto busca el equilibrio optimo entre comodidad, privacidad y seguridad para los clientes ',
                '- Además de esto tambien se tiene en vista el uso, recopilación y almacenamiento de estos datos ',
                '',
                '- Centralizar estos datos permite tomar decisiones estrategicas con mayor precisión y efectividad ',
                '- Hacer esto, se puede volver abrumador por lo que que se puede relegar a un tercero experto en este ambito (IDaaS) Identity as a Service ',
                '',
                '- Beneficios:',
                ' - Escalabilidad -> manejar miles o millones de usuarios, ya sea trafico normal o de temporada, es un aspecto fundamental ',
                ' - Experiencia del cliente -> diferentes formas de iniciar sesión y datos que se autorecopilan son buena formas de mejorarla ',
                ' - Seguridad -> nada se gana una mejor experiencia de usuario si los datos son vulnerables, por esto es importante, ',
                '  - el resguardo correcto de las credenciales y el correcto manejo de la autenticacion como de las sesiones ',
                ' - Privacidad -> la centralización de los datos es necesaria para cumplir con las leyes e informes de privacidad de datos, ',
                '  - estas leyes han puesto en foco la importancia del manejo de los datos, la recopilacion y su control ',
            ]),
        new Item('lateralChanel',
            [
                '- Es un exploit de seguridad con el fin de recopilar información o influir en la ejecución del programa, apuntando o midiendo el hardware ',
                '- Historicamente dificiles de hacer, si no fuera por la actualidad donde la sensibilidad y la cantidad de estos ha aumentado constantemente ',
                '- Estos son dificiles de defender y aun más de detectar, y son efectivos contra sistemas aislados la nube y hasta maquinas virtuales ',
                '',
                '- Tipos conocidos: ',
                ' <strong>- Electromagnetismo -></strong> Se mide la radiación u ondas de radio emitidas por el dispositivo, para reconstruir las señales internas ',
                ' <strong>- Acustico -></strong> Los sonidos emitidos por el dispositivo pueden reconstruir información como las pulsaciones de las teclas del usuario ',
                ' <strong>- Energia -></strong> Al medir la cantidad de enercia consumida y el tiempo de utilización, se puede inferir la actividad de este ',
                ' <strong>- Optico -></strong> Algo como tan simple como ver una grabación o mirar encima del hombro de alguien, pueden caer dentro de esta categoria ',
                ' <strong>- Cache -></strong> El almacenamiento cache, usado para mejorar el rendimiento, puede ser usado para obtener información bloqueada ',
                ' <strong>- Hardware -></strong> Atacar partes especificas de los dispositivos de maneras peculiares para generar fallos o robar datos como, ',
                '  - un ataque de martilleo de filas para dañar sectores de la RAM o un arranque en frio leyendo datos de chips enfriados bruscamente ',
            ])
    ];

export const UML =
    [
        new Item('uml',
            [
                '- Desarrollado para ayudar a todos los involucrados en el desarrollo y modelado de un sistema ',
                '- Pueden servir como planos para la codificación ó como documentación despues de la etapa de desarrollo ',
                '- El nivel de detalle que puede llegar a ser superficial ó increiblemente complejo ',
                '- Es un lenguaje independiente de la plataforma de desarrollo, por lo cual depende de la capacidad de abstracción ',
            ]),
        new Item('clase',
            [
                ' - Esta orientado al modelo y se basa especialmente en la programación orientada a objetos ',
                ' - Representan las interacciones y las clases que conforman el sistema ',
                ' - Se pueden diagramar los modificadores de acceso, la multiplicidad, los atributos, relaciones, etc.. ',
            ]),
        new Item('componentes',
            [
                ' - Pueden representar la agrupación de modulos que componen cualquier función de la aplicación ',
                ' - Se centra en la relación entre las partes a alto nivel, más que en los detalles de la implementación ',
                ' - Tambien se puede mezclar con el diagrama de paquetes ',
                ' - Las interfaces muestran como componentes separados se comunican entre si, por medio de un protocolo en comun ',
                ' - Cuando un componente necesita de otro, se considera que hay una relación de dependencia ',
            ]),
        new Item('despliegue',
            [
                ' - Permite identificar los nodos que usara el sistema una vez sea funcional, externos e internos ',
                ' - Expone de manera clara la arquitectura fisica de la red, dando una idea global del sistema ',
                ' - Las interfaces cobran especial relevancia en este, ya que indican como se comunican los componentes ',
            ]),
        new Item('secuencia',
            [
                ' - Representa el intercambio de mensajes entre los diferentes componentes del sistema para lograr una funcionalidad ',
                ' - El tiempo es importante ya que un mensaje debe terminar para que otro empieze (generalmente) ',
                ' - Los objetos que interactuan puede ser simple clases, hasta modulos y sistemas completos ',
            ]),
        new Item('actividades',
            [
                ' - Representa el flujo de control que se puede llegar a dar, con enfasis en la secuencia y las condiciones del flujo ',
                ' - Por lo general tienen un punto inicial y final ',
                ' - Modelan un flujo de trabajo sin dar mucho enfasis a la peculiaridad de cada subsistema ',
                ' - Estos diagrama se pueden encandenar entre si para crear secuencias más complejas ',
            ]),
        new Item('paquetes',
            [
                ' - Representa la estructura basica de los componentes del sistema ',
                ' - Paquete -> conjunto de elementos concretos que contienen una función especifica ',
                ' - Pueden representar la dependencia de paquetes entre si ',
            ]),
        new Item('estados',
            [
                ' - Representa el fluir de una situación a otra del sistema ',
                ' - Pueden tener condiciones externas, o simplemente ser inherente al sistema ',
                ' - Se conforma por el estado inicial, los estados del sistema, los estados finales (uno ó varios) ',
                '  - y las transiciones de un estado a otro ',
            ]),
        new Item('usos',
            [
                ' - Representan los requisitos funcionales de manera grafica ',
                ' - Especifica que actores y como pueden involucrarse con el sistema ',
                ' - Pueden ser un punto de partida para desarrollar los sistemas, aunque demasiada complejidad es contraproducente ',
                ' - La comunicación entre el cliente y el desarrollador puede ser más eficiente, más no es garantia de esto ',
            ]),
        new Item('vista',
            [
                '- Modelo diseñado para describir la arquitecturas de los sistemas basados en distintas vistas concurrentes ',
                '',
                '  - Vista Logica -> describe la estructura y la funcionalidad del sistema  ',
                '  - Vista Logica -> se pueden usar diagramas de clase, comunicacion, secuencia  ',
                '',
                '  - Vista Desarrollo -> esta enfocada a la administración del software y sus componentes, generalmente desde la perspectiva del desarrollador ',
                '  - Vista Desarrollo -> se pueden usar diagramas de componentes, paquetes ',
                '',
                '  - Vista Proceso -> trata los aspectos dinamicos del sistema, como se comunican los componentes entre si y su comportamiento ya en ejecución ',
                '  - Vista Proceso -> se puede usar el diagrama de actividad ',
                '',
                '  - Vista Fisica -> trata los aspectos que son tangibles del sistema, como la infraestructura, las redes, y como estan desplegadas en la realidad ',
                '  - Vista Fisica -> se puede usar el diagrama de despliegue ',
                '',
                '  - Escenarios -> estos describen la secuencia de interacciones entre objetos y procesos ',
                '  - Escenarios -> generalmente son los casos de uso, aun se usan pero han perdido relevancia frente al agilismo y las HU ',
                '',
                '|     Vistas|   Escenarios    Diseño    Procesos    Implementación    Despliegue        ',
                '|  Diagramas|                                                                           ',
                '',
                '      Clases                    X          X                                            ',
                '     Objetos                    X          X                                     estruc ',
                ' Componentes                                              X                      turales',
                '  Despliegue                                                              X             ',
                '',
                'Casos de Uso        X                                                                   ',
                '   Secuencia                    X                                         X      Compor ',
                'Colaboración                    X                                         X      tamen  ',
                '     Estados        X           X          X                              X      tales  ',
                '   Actividad        X           X          X                              X             ',
            ])
    ];