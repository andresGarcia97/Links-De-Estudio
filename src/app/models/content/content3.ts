import * as Keys from '../keys';
import { Item } from "../models";

export class Content3 {

    public temas: Item[] = [
        ...REQUISITOS,
        ...SMELLS_CODES,
        ...VERSIONAMIENTO,
        ...PRINCIPIOS,
        ...REFACTORIZACION,
        ...SEGURIDAD,
        ...CD_CI_INFRAESTRUCTURE
    ];

}

export const REQUISITOS =
    [
        new Item(Keys.REQUISITOS_FUNCIONALES,
            [
                '- Son la declaración de los servicios y funciones que tendra la aplicación ',
                '- Estos se basan en una serie de requerimientos del software previamente realizada ',
                '- Gran parte del exito del producto depende de que este proceso sea realizado efectivamente ',
                '- La ambiguedad es normal, pero debe ser reducida al minimo ',
                '- Las Historias de Usuario son una gran ayuda en este ambito, aun asi estas tambien pueden equivocarse ',
                '- Los requisitos deben ser coherentes, sin contradicciones entre si, más no significa que no puedan cambiar ',
            ]),
        new Item(Keys.REQUISITOS_NO_FUNCIONALES,
            [
                '- No son caracteristicas que son expresadas directamente por el cliente ',
                '- Son una declaración de como se debe comportar el sistema, de que propiedades son importantes ',
                '- Tambien pueden contar con restricciones como, sistema operativo, dispositivos compatibles, paleta de colores, etc... ',
                '',
                '<strong>Requisitos del producto:</strong> Especifican que debe cumplir el producto (rapido, bonito, confiable, etc...) ',
                '<strong>Requisitos del producto:</strong> Estos criterios, y otras más son terriblemente ambiguos, por lo que deben ser previamente acordados ',
                '',
                '<strong>Requisitos organizacionales:</strong> Se derivan de politicas y procedimientos de la empresa ya existentes ',
                '<strong>Requisitos organizacionales:</strong> Como lenguajes a usar, documentación a entregar, etc... ',
                '<strong>Requisitos organizacionales:</strong> Tales como la interoperabilidad, leyes a seguir, etc... ',
                '',
                '<strong>Requisitos externos:</strong> Son afectados directamente por factores externos al software ',
            ]),
        new Item(Keys.REQUISITOS_BUSINESS_VALUE,
            [
                '- Es el impacto real de una funcionalidad en el software, por lo que es subjetivo y depende de quien lo este visualizando ',
                '- Generalmente son responsabilidad del Product Owner y de los Analistas, si se trabaja con metodologias agiles ',
                '- Es necesario definir objetivos a cumplir, para tener una meta clara y visualizar un camino ',
                '- Adoptar formas de medir el progreso y hacerlo de manera periodica ',
                '- Cuestionarse a si mismos, conforme va avanzando el proyecto las cosas pueden cambiar y con estas nuestros objetivos ',
                '- Dar un valor para el negocio implica directamente que estos items se deben comparar y priorizar, lo cual se hace con tecnicas como <em>MOSCOW</em> '
            ]),
        new Item(Keys.REQUISITOS_AMBIGUITY,
            [
                '- Menos es Más, una frase bastante diciente pero que es más facil decirla que aplicarla ',
                '- La redacción debe ser clara y concisa, ya que muchas personas en diferentes ambitos leeran los requisitos y todos deben entenderlos ',
                '- Los detalles son importantes, pero estos no deben ser abrumadores ni irrelevantes ',
                '- Si una requisito es demasiado extenso este puede ser desglosado en otros más pequeños y concisos ',
                '- Igual que las Historias de Usuario pueden tener criterios de aceptación ',
                '- Se puede incluir lenguaje tecnico y escenarios especificos, si estos ayudan a definir un contexto ',
                '- Un requisito mal hecho, conlleva a perdidas y correcciones desde la documentación hasta llegar a ambientes productivos '
            ]),
        new Item('calidad',
            [
                '- Es una propiedad medible del sistema que indica si el sistema satisface una caracteristica en especifico ',
                '- Dependiendo de la complejidad, un sistema puede cumplir una o varias de las siguentes caracteristicas ',
                '',
                '<strong>Compatibilidad:</strong> Capacidad de los sistemas para intercambiar información ó compartir software/hardware ',
                '<strong>- Subcaracteristicas:</strong> Interoperabilidad, coexistencia ',
                '',
                '<strong>Usabilidad:</strong> Capacidad del producto para ser entendido, que sea usado y que sea atractivo ',
                '<strong>- Subcaracteristicas:</strong> Idoneidad, aprendizaje, manejo de errores, accesiblidad, estetica ',
                '',
                '<strong>Confiabilidad:</strong> Capacidad para cumplir con las funciones especificadas en un ambiente predispuesto ',
                '<strong>- Subcaracteristicas:</strong> Madurez, disponibilidad, tolerancia a fallos, recuperación ',
                '',
                '<strong>Eficiencia:</strong> Desempeño del sistema y cuanto recursos consume ',
                '<strong>- Subcaracteristicas:</strong> Comportamiento temporal, recursos usados, capacidad ',
                '',
                '<strong>Seguridad:</strong> Protección de los datos, ya sea de intromisiones externas o internas ',
                '<strong>- Subcaracteristicas:</strong> Confidencialidad, integridad, responsabilidad, autenticidad ',
                '',
                '<strong>Portabilidad:</strong> Capacidad para ser trasladado de un ambiente a otro, ya sea hardware o software ',
                '<strong>- Subcaracteristicas:</strong> Adaptabilidad, instalación, sustitución ',
                '',
                '<strong>Mantenibilidad:</strong> Capacidad de que pueda cambiar a traves del tiempo ',
                '<strong>- Subcaracteristicas:</strong> Modularidad, reusabilidad, analisable, modificable, testeable ',
            ]),
        new Item(Keys.REQUISITOS_TRADE_OFF,
            [
                '- Que un software cumpla con lo que se necesitaba no significa que sea agradable o facil de usar',
                '- Un producto excelente no se limita a hacer lo que tiene que hacer, es aquel que da un poco más al usuario ',
                '- Existe una gran cantidad de atributos que todo software de <strong>calidad</strong> puede cumplir, no todos son necesarios y deben ser priorizados ',
                '- Esto tambien depende de cuales atributos son necesariamente criticos, y cuales son ideales, por lo que se requiere, ',
                ' - un analisis previo para realizar un buen diseño y asi sopesar los pro y los contra ',
                '- Tambien se ha de tener en cuenta que hay requsitos que irremediablemente se afectaran de manera negativa entre si, ',
                ' - por lo que no se podran escoger ambos si se quieren cumplir de manera idonea ',
                '',
                '-El siguiente recuadro nos enseña un pequeño resumen de los principales atributos de calidad de cualquier sistema, hay 2 posibilidades: ',
                ' (<strong>+</strong>) Afecta positivamente el atributo de esa columna ',
                ' (<strong>-</strong>) Afecta negativamente el atributo de esa columna ',
                '',
                '<strong>Disponibilidad</strong>  <strong>+</strong>robustez    <strong>+</strong>confiabilidad',
                '<strong>Eficiencia</strong>      <strong>+</strong>disponible  <strong>-</strong>interoperable  <strong>-</strong>modificable    <strong>+</strong>rendimiento   <strong>-</strong>portable      <strong>-</strong>robustez     <strong>+</strong>escalable   <strong>-</strong>usabilidad   ',
                '<strong>Instalabilidad</strong>  <strong>+</strong>disponible  <strong>+</strong>fiabilidad                                                                                            ',
                '',
                '<strong>Integridad</strong>      <strong>-</strong>instalable  <strong>-</strong>interoperable  <strong>-</strong>rendimiento    <strong>-</strong>reusabilidad  <strong>+</strong>seguridad     <strong>-</strong>usabilidad   <strong>-</strong>verificable               ',
                '<strong>Interoperable</strong>   <strong>+</strong>disponible  <strong>-</strong>instalable     <strong>-</strong>integridad     <strong>-</strong>rendimiento   <strong>+</strong>portable      <strong>+</strong>fiabilidad   <strong>+</strong>robustez    <strong>-</strong>seguridad    ',
                '<strong>Modificable</strong>     <strong>+</strong>disponible  <strong>-</strong>instalable     <strong>-</strong>rendimiento    <strong>+</strong>fiabilidad    <strong>+</strong>reutilizable  <strong>+</strong>escalable    <strong>+</strong>verificable               ',
                '',
                '<strong>Rendimiento</strong>     <strong>+</strong>eficiencia  <strong>-</strong>interoperable  <strong>-</strong>modificable    <strong>-</strong>portable      <strong>-</strong>robusto       <strong>-</strong>escalable    <strong>-</strong>usabilidad                ',
                '<strong>Portabilidad</strong>    <strong>-</strong>eficiencia  <strong>+</strong>interoperable  <strong>-</strong>modificable    <strong>-</strong>rendimiento   <strong>+</strong>reusabilidad  <strong>-</strong>seguridad    <strong>-</strong>usabilidad  <strong>-</strong>verificable  ',
                '<strong>Fiabilidad</strong>      <strong>+</strong>disponible  <strong>-</strong>eficiencia     <strong>+</strong>integridad     <strong>+</strong>modificable   <strong>-</strong>rendimiento   <strong>+</strong>robustez     <strong>+</strong>seguridad   <strong>+</strong>usable      <strong>+</strong>verificable ',
                '',
                '<strong>Reusabilidad</strong>    <strong>-</strong>eficiencia  <strong>-</strong>integridad     <strong>+</strong>interoperable  <strong>+</strong>modificable   <strong>-</strong>rendimiento   <strong>+</strong>portable     <strong>+</strong>verificable               ',
                '<strong>Robustez</strong>        <strong>+</strong>disponible  <strong>-</strong>eficiencia     <strong>+</strong>instalable     <strong>+</strong>integridad    <strong>+</strong>interoperable <strong>-</strong>rendimiento  <strong>+</strong>fiabilidad  <strong>+</strong>seguridad   <strong>+</strong>escalable   ',
                '<strong>Seguridad</strong>       <strong>+</strong>integridad  <strong>-</strong>rendimiento    <strong>+</strong>robustez       <strong>-</strong>usabilidad    <strong>-</strong>verificable                                            ',
                '',
                '<strong>Escalabilidad</strong>   <strong>+</strong>disponible  <strong>+</strong>eficiencia     <strong>+</strong>integridad     <strong>+</strong>rendimiento   <strong>+</strong>portable      <strong>+</strong>fiabilidad   <strong>+</strong>robustez                  ',
                '<strong>Usabilidad</strong>      <strong>-</strong>eficiencia  <strong>+</strong>instalable     <strong>-</strong>rendimiento    <strong>-</strong>portable      <strong>+</strong>fiabilidad    <strong>+</strong>robustez     <strong>-</strong>verificable               ',
                '<strong>verificable</strong>     <strong>+</strong>disponible  <strong>+</strong>instalable     <strong>+</strong>integridad     <strong>+</strong>modificable   <strong>+</strong>fiabilidad    <strong>+</strong>reusable     <strong>+</strong>robustez    <strong>+</strong>seguridad   <strong>+</strong>usabilidad  ',
                '',
                '(nota) el atributo de seguridad se puede entender de 2 maneras, por lo que en este caso solo se considera que cumplen aquellos que,   ',
                '  afecten negativamente o positivamente a ambos; la seguridad de los datos y el acceso a estos ',
            ]),
        new Item(Keys.REQUISITOS_OBJETIVOS,
            [
                '- Un proyecto consta de ambos, y esta más relacionados de lo que parecen, ya que: ',
                '',
                '<strong>Los requisitos son objetivos concretos:</strong> Son pocos en comparacion con la lista de requisitos, tambien estan desglosados y detallados por proyecto ',
                '',
                '<strong>Los objetivos son requisitos abstraidos:</strong> Son el resumen de los requisitos, provienen de un nivel superior de abstracción con un panorama más amplio ',
                '',
                '<strong>Los objetivos son el <em>QUE</em> y los requisitos el <em>COMO</em>:</strong> Mediante la ingenieria de requisitos se asienta alguna de las diferentes acciones concretas, ',
                ' - que puede tener algun objetivo, aunque muchas de estas decisiones, se tomen de manera insidiosa y poco consciente ',
            ]),
        new Item('cambioDeRequisitos',
            [
                '- Hablar e intentar especificar los requisitos antes de construir el software, es ciertamente un tema complejo',
                '',
                '<strong>Principio de incertidumbre de Humphrey</strong>',
                '- <em>Para un nuevo sistema de software, los requisitos no se conocerán por completo hasta que los usuarios lo hayan utilizado</em>',
                '',
                '<strong>Principio de Incertidumbre de Ziv</strong>',
                '- La incertidumbre es innata al software, y aunque se intente modelar, no siempre sera posible ya que proviene de multiples fuentes',
                '',
                '<strong>Lema de Wegner</strong>',
                '- No es posible especificar completamente un sistema interactivo',
                '',
                '- Para saber del más tema y revisar las respectivas bibliografias, puedes ir al articulo original'
            ]),
        new Item(Keys.REQUISITOS_REQUIREMENTS_ENGINEERING,
            [
                '- La parte más dificil de construir un sistema de software es decidir que construir, establecer los requisitos tecnicos detallados y/o inherentes ',
                ' - como interacciones con el usuario, comportamientos, detalles, y que ninguna parte perjudica tanto al resultado como esta si se realiza mal ',
                '- Este proceso pone enfasis en determinar los requisitos para que se vean reflejados en el sistema deseado por el cliente',
                '- Esto se realiza mediante varias fases, que no necesariamente deben ser cronologicas, además de que puedan ser ajustadas con el tiempo ',
                '',
                '<strong>Viabilidad:</strong> Se debe comprender la necesidad y como el sistema propuesto la resuelve, además de tener en cuenta aspectos como: ',
                ' - Obstaculos               - Tiempo',
                ' - Descripción del mercado  - Mano de obra ',
                ' - Legalidad                - Presupuesto ',
                ' - Tecnologias              - Restricciones ',
                '',
                '&brvbar;    <strong>Requisitos Funcionales</strong>    &brvbar;  <strong>Requisitos No Funcionales</strong> &brvbar;',
                '--------------------------------------------------------------',
                '&brvbar; Funcionalidades del producto &brvbar;  Propiedades del producto  &brvbar;',
                '&brvbar; Requerimientos del usuario   &brvbar;  Expectativas del usuario  &brvbar;',
                '',
                '<strong>Pasos</strong>',
                '',
                '<strong>- Recopilación y analisis:</strong> Implica la colaboración entre los recursos tecnicos(desarrolladores) y los usuarios del sistema(clientes)',
                '',
                '<strong>- Especificaciones:</strong> En la primera iteración se definen los requisitos del usuario y los requisitos del sistema ',
                ' - Esto se puede realizar mediante <em>Lenguaje Natural</em>, más practico pero que puede conllevar a ambiguedades',
                ' - <em>Lenguaje Estructurado</em>, Que implica una expresión más formal y uniforme, la cual puede ser compleja si tiene demasiados detalles tecnicos ',
                '',
                '<strong>- Verificación y Validación:</strong> Son procesos separados que se implementan al unisono, de manera que lo descrito cumpla ',
                ' - con las especificaciones de las diversas areas involucradas y al mismo tiempo satisfaga a sus consumidores ',
                '',
                '<strong>- Gestión:</strong> Si bien la clave para un producto solido es identificar el requisito <strong>correcto</strong>, ',
                ' - no siempre se puede llegar a un concenso sobre lo que esto significa, por lo que tener un seguimiento sobre las modificaciones ',
                ' - es una forma de prevenir los errores y tener un estado actual del ciclo de vida del proyecto ',
            ]),
        new Item(Keys.REQUISITOS_KPI_OKR,
            [
                '<strong>Indicadores claves de desempeño - KPI:</strong> Son una evolución de las metricas para alinearse con objetivos estrategicos ',
                '- En cualquier proyecto es esencial definir las metricas y alinearlas con los objetivos comerciales y las metas de IT',
                '- No son lo mismo que los <strong>OKR</strong> donde la meta es el objetivo y solo se mide el progreso ',
                '- Su uso puede ayudar a medir aspectos no calificables, utiles para aspectos esenciales, como la nube',
                '- Establecer un KPI puede ser dificil, ya que es necesario comprender que datos se pueden medir, cuando se capturan, donde y como usarlos ',
                '- Una vez se hayan escogido las metricas y los KPIs de utilidad, tambien se pueden combinar en un tablero para su analisis ',
                '',
                '<strong>Objetivos y Resultados claves - OKR:</strong> Combinan los objetivos de negocio con un conjunto de metodos medibles a corto o largo plazo ',
                '- A diferencia de los <strong>KPI</strong> los resultados se pueden medir de diversas formas y no necesariamente de forma cuantitativa ',
                '- Funcionan como un marco para la definición de objetivos, ya sean metas ambiciosas o facilmente alcanzables ',
                '- Aunque pueden funcionar individualmente, tambien se pueden combinar con otros OKR de diferentes areas ',
                '',
                '&brvbar;            &brvbar;             <strong>OKR</strong>              &brvbar;               <strong>KPI</strong>                &brvbar;   <strong>Objetivo:</strong> Introducir la capacidad de respuesta de IT',
                '&brvbar; Definición &brvbar; Objetivos concretos con      &brvbar; Metricas que indican el progreso &brvbar;   <strong>KPI:</strong> Disminución del tiempo de comercialización',
                '&brvbar;            &brvbar;  componentes medibles        &brvbar;  de los objetivos de negocio     &brvbar;   <strong>Metrica:</strong> Tiempo para provisionar una VM o una nueva Instancia',
                '&brvbar;------------------------------------------------------------------------------&brvbar;              ',
                '&brvbar;    Base    &brvbar; Basado en misiones y         &brvbar; Basado en resultados anteriores  &brvbar;   <strong>Objetivo</strong> Mejorar nuestra tasa de retención de clientes',
                '&brvbar;            &brvbar;  aspiraciones                &brvbar;  y proyectos actuales            &brvbar;   <strong>Resultado</strong> Implementar un programa de recompensas por fidelidad',
                '&brvbar;------------------------------------------------------------------------------&brvbar;              ',
                '&brvbar; Criterios  &brvbar; Mide objetivos más audaces   &brvbar; Mide la estabilidad y            &brvbar;',
                '&brvbar;            &brvbar;  y agresivos                 &brvbar;  los puntos de referencia        &brvbar;',
                '&brvbar;------------------------------------------------------------------------------&brvbar;              ',
                '&brvbar; Proposito  &brvbar; Herramienta motivacional     &brvbar; Evaluación de rendimiento        &brvbar;',
                '&brvbar;------------------------------------------------------------------------------&brvbar;              ',
                '&brvbar;  Duración  &brvbar; Trimestual o anual           &brvbar; Variable                         &brvbar;',
                '&brvbar;------------------------------------------------------------------------------&brvbar;              ',
                '&brvbar; Variación  &brvbar; Los objetivos cambian        &brvbar; Metricas sin alteración por      &brvbar;',
                '&brvbar;            &brvbar;  cada ciclo                  &brvbar;  meses o años                    &brvbar;',
            ])
    ];

export const SMELLS_CODES =
    [
        new Item(Keys.SMELL_CODES_SMELLS_CODES,
            [
                '- Son cosas en el codigo que se pueden hacer de una mejor manera, o que a la larga se convertiran en malas practicas ',
                '- Aunque no son un problema prioritario, estos haran crecer la deuda tecnica e inclusive podran crear fallos en el futuro ',
                '- Que el codigo funcione no significa que sea tecnicamente correcto ',
                '- No todos los smells codes son malos, hay casos donde se pueden ignorar debido al efecto cobra ',
                '- Existen muchos tipos, pero los más comunes suelen estar asociado al tamaño de las partes o tener codigo duplicado',
            ]),
        new Item(Keys.SMELL_CODES_TYPES,
            [
                '<strong>Bloaters:</strong> Metodos y clases que han incrementado su tamaño a proporciones gigantezcas ',
                ' - estos se suelen dar por descuidos y más cuando nadie se ocupa de esto hasta que son un problema ',
                '',
                '<strong>Object-Orientation Abusers:</strong> Este se da cuando los principios de POO son mal aplicados ó se cumplen a medias ',
                '',
                '<strong>Changue Preventers:</strong> Sucede cuando se realiza un cambio y este requiere más modificaciones de las pensadas, siendo más complejo y costoso ',
                '',
                '<strong>Dispensables:</strong> Cualquier cosa que no sea necesaria, y que pueda ser cambiada o removida, haciendo un codigo más limpio y facil de entender ',
                '',
                '<strong>Couplers:</strong> Surgen de un acoplamiento excesivo entre los componentes, o en su defecto por una delegación excesiva ',
            ]),
        new Item(Keys.SMELL_CODES_DESGLOSE,
            [
                '<strong>Bloaters</strong>',
                '<strong>- Long Method:</strong> Es aquel metodo que contiene demasiadas lineas, tantas que es dificil seguir el proceso que realiza ',
                '<strong>- Large Class:</strong> Aquella clase que contiene demasiados metodos, atributos ó lineas de codigo ',
                '<strong>- Primitive Obsession:</strong> Se da cuando todos los datos se quieren manejar con tipos primitivos, en vez de clases especializadas ',
                '<strong>- Long Parameter List:</strong> Sucede cuando un metodo recibe demasiados parametros, generalmente empieza con más de 4 ',
                '<strong>- Data Clumps:</strong> Pasa cuando diferentes parte del codigo tienen grupos identicos de variables, que se pueden agrupar en una sola clase ',
                '',
                '<strong>Object-Orientation Abusers</strong>',
                '<strong>- Switch Statements:</strong> Sucede cuando se tiene un switch o una secuencia de if demasiado grandes, en vez de usar polimorfismo ',
                '<strong>- Temporary Field:</strong> Son valores que son usados en circunstancias especificas, y de resto son instancias vacias ',
                '<strong>- Refused Bequest:</strong> Sucede cuando la herencia se aplica mal y las clases hijas heredan metodos o atributos que no van a usar ',
                '<strong>- Alternative classes:</strong> Clases con funciones identicas, pero metodos diferentes ',
                '',
                '<strong>Changue preventers</strong>',
                '<strong>- Divergent Change:</strong> Sucede cuando una clase requiere demasiados cambios, sean grandes o pequeños ',
                '<strong>- Shotgun Surgery:</strong> Surge cuando una modificacón requiere hacer muchos cambios individuales, en diferentes lugares ',
                '<strong>- Parallel Inheritance Hierarchies:</strong> Siempre que se necesite una subclase cuando se cree una clase, y se aplique para otras clases ',
                '',
                '<strong>Dispensables</strong>',
                '<strong>- Comments:</strong> Los comentarios surgen de metodos y clases mal nombrados o con complejidad arbitraria ',
                '<strong>- Duplicate Code:</strong> Fragmentos de codigo que son casi identicos y no estan centralizados ',
                '<strong>- Lazy Class:</strong> Es el costo de mantener clases que no tienen utilidad, solo porque pueden o tuvieron utilidad ',
                '<strong>- Data Class:</strong> Clases que solo contienen metodos para acceder a las propiedades, sin algun otro comportamiento util ',
                '<strong>- Dead Code:</strong> Cualquier cosa que no se usa más, generalmente se vuelven obsoletos ',
                '<strong>- Speculative Generality:</strong> Codigo realizado para soportar futuras funcionalidades, que no tiene uso actual alguno ',
                '',
                '<strong>Couplers</strong>',
                '<strong>- Feature Envy:</strong> Metodos y clases que usan los atributos y propiedades de otros, más que los propios ',
                '<strong>- Intimidad inapropiada:</strong> Clases que usan atributos y metodos que no son propios como si lo fueran ',
                '<strong>- Message Chains:</strong> Sucede cuando el codigo tiene una gran pila de llamados ',
                '<strong>- Middle Man:</strong> La delegación de responsabilidades es importante, más no debe ser la unica responsabilidad de una clase ',
            ]),
        new Item(Keys.SMELL_CODES_EXCEPTIONS,
            [
                '- Algunos Smells codes se pueden ignorar, debido a que su solución conlleva a problemas peores, o simplemente es demasiado esfuerzo ',
                '- Si el rendimiento es esencial para la aplicación, algunas soluciones pueden aumentar el tiempo de ejecución y empeorarlo ',
                '- Si la solución conlleva a un acoplamiento indeseado entre clases o aumenta la complejidad de manera innecesaria ',
                '- Cuando el smells code tiene un alcanze muy pequeño y su cambio puede afectar el comportamiento general del sistema ',
                '- Hace parte de la implementación de un patron ',
                '- Cuando hay motivos validos e importantes para mantenerlos, como ser una condición de uso de algun framework',
                '- Si el desarrollo va a ser corto plazo y se delinio una linea a seguir ',
                '- Cuando la solución de un smell code crea otro ',
            ]),
        new Item(Keys.SMELL_CODES_PAY_OFF,
            [
                '- Generalmente la solución de estos problemas siempre tiene consecuencias positivas sobre la calidad del software ',
                '- Simplifica clases y mejora la asignación de responsabilidades ',
                '- El codigo suele ser más flexible y facil de modificar ',
                '- La duplicación de codigo se reduce, mejorando la mantenibilidad ',
                '- La legibilidad aumenta, haciendo que futuros cambios sean más rapidos ',
                '- Mejora la organización y la abstracción ',
                '- Reduce el tamaño del codigo ',
            ]),
        new Item(Keys.SMELL_CODES_DESIGN,
            [
                '- Estos tambien se aplican a nivel de diseño y no solo de algo especifico del codigo ',
                '- También se conoce como Design Smells, como en <em>Agile Software Development, Principles, Patterns, and Practices</em> de Robert C. Martin de 2002. ',
                ' - En este libro se destacan las siguientes características como consecuencias del “Olor de Diseño”',
                '',
                '<strong>- Rigidez:</strong> Un cambio desemboca en otros cambios necesarios ',
                '<strong>- Fragilidad:</strong> Cualquier cambio puede afectar otras partes del sistema directa/indirectamnte involucradas ',
                '<strong>- Inmovilidad:</strong> Los componentes del sistemas no son facilmente rehusables en otros lugares ',
                '<strong>- Viscosidad:</strong> El sistema esta plagado de malas practicas y facilita que proliferen ',
                '<strong>- Complejida innecesaria:</strong> Infraestructura innecesaria para funcionalidades simples ',
                '<strong>- Repeticion innecesaria:</strong> Diferentes diseños, contienen logica que puede ser abstraida y centralizada ',
                '<strong>- Opacidad:</strong> La funcionalidad del sistema no esta bien definida y su alcance es difuso ',
                '',
                '- Estos se pueden identificar mediante observaciones subjetivas por parte de los programadores ',
                '- Dificilmente encontrados por pruebas o resultados cuantitativos',
            ]),
        new Item(Keys.SMELL_CODES_ARCHITECTURAL_SMELLS,
            [
                '- La deuda tecnica tambien puede provenir desde la arquitectura de nuestro sistema, afectando directamente la calidad y violando multiples principios ',
                '',
                '<strong>Dependencias Ciclicas:</strong> Cuando 2 o más componentes estan involucrados en una cadena de relaciones ',
                '- Esto viola directamente reglas de <strong>SOLID</strong>, <strong>KISS</strong> y el Principio de Dependencias Aciclicas <strong>ADP</strong> de <em>Robert C Martin</em>',
                '<strong>Desventajas:</strong>',
                '- Dificil de mantener/testear   &brvbar;---------&brvbar;  -->  &brvbar;---------&brvbar;',
                '- Dificil de liberar            &brvbar; Class A &brvbar;       &brvbar; Class B &brvbar;',
                '- Dificil de reutilizar         &brvbar;---------&brvbar;  <--  &brvbar;---------&brvbar;',
                '',
                '',
                '<strong>God Component:</strong> Cuando un componente es excesivamente grande en lineas de codigo(LOC)',
                '- Esto atenta contra las practicas de <strong>Clean Code</strong> y el Principio de Modularidad de <em>Robert C Martin</em>',
                '<strong>Deventajas:</strong>                     &brvbar;---------------------------&brvbar;',
                '- Logica acoplada               &brvbar; &#9725; &#9634; &#9634; &#9725; &#9634; &#9634; &#9634; &#9725; &#9634; &brvbar;',
                '- Baja Cohesion interna         &brvbar; &#9634; &#9634; &#9725; &#9634; &#9634; &#9725; &#9634; &#9634; &#9725; &brvbar;',
                '- Complejidad creciente         &brvbar;--------- package ---------&brvbar;',
                '',
                '',
                '<strong>Hub-Like Component:</strong> Sucede cuando un componente tiene multiples dependencias de entrada/salida con otros componentes ',
                '- Esto atenta contra de los Patrones <strong>GoF</strong> y el Principio de Modularidad de <em>Robert C Martin</em>',
                '<strong>Deventajas:</strong>',
                '- Logica centralizada                       &#9634;  -->       --> &#9634;',
                '- Unico Punto de Falla(SPOF)                &#9634;  -->  &#9725;  --> &#9634;',
                '- Favorece los cambios con efectos domino   &#9634;  -->       --> &#9634;',
                '',
                '',
                '<strong>Dependencias Inestables:</strong> Describe un componente que depende de otros menos estables que el ',
                '- Esta propensión a los cambios viola el Principio de Dependencia Estable <strong>SDP</strong> de <em>Robert C Martin</em>',
                '<strong>Deventajas:</strong>                                                    &#9725;   stable package',
                '- Menor mantenibilidad debido a los cambios constantes        &#8601 &#8600',
                '- Los cambios pueden traer errores o efectos inesperados     &#9634;  &#9634;  unstable packages',
                '',
                '',
                '<strong>Asociadas a la Jerarquia:</strong> Estos problemas se dan debido a un mal uso de la herencia o del uso de tipos ',
                '<strong>- Ciclica:</strong> Un Supertipo depende de algun Subtipo',
                '<strong>- Profunda:</strong> La jerarquia se hace demasiado profunda, llegando a tener comportamientos impredecibles ',
                '<strong>- Amplia:</strong> Existen multiples hijos, los cuales a su vez, tambien tienen multiples hijos ',
                '<strong>- Paralelas:</strong> Por cada subclase, tambien se tiene que hacer otra subclase, debido a alguna composición en el inicio de la jerarquia',
            ])
    ];

export const VERSIONAMIENTO =
    [
        new Item(Keys.VERSIONAMIENTO_MANAGEMENT_VERSIONS,
            [
                '- El control de versiones ayuda a mantener una trazabilidad de todos los cambios en una aplicación ',
                '- Como se mantiene un historial preciso de la aplicación, esto es vital para poder retroceder versiones ó cambios en caso de problemas ',
                '- El más conocido es GIT pero tambien existen otros como Mercurial',
                '- GIT puede ser usado en repositorios locales o distribuidos en la nube, permitiendo el entendimiento y la colaboración entre desarrolladores ',
                '- Permite crear ramificaciones para trabajar de manera aislada sin afectar a todo el flujo en general',
                '- Tambien se pueden crear etiquetas para marcar commits y que sean más faciles de encontrar',
            ]),
        new Item(Keys.VERSIONAMIENTO_MANAGEMENT_DEPENDENCIES,
            [
                '- Los gestores de dependencias son ampliamente usados ya que evitan dolores de cabeza al manejar codigo de terceros o externos ',
                '- Son herramientas, plugins, librerias, frameworks, necesarios para desarrollar aplicaciones de gran envergadura ',
                '',
                '<strong>- NPM</strong>      Nacido sobre NodeJs se ha convertido en uno de los principales y más grandes repositorios de dependencias y modulos ',
                '<strong>- Bower</strong>    Hecho con NPM tiene menos funcionalidades, pero su apuesta principal es la ligereza y la optimización ',
                '<strong>- JAM</strong>      Es un gestor de paquetes que funciona directamente en el navegador, por lo que mantener y actualizar es más sencillo ',
                '<strong>- Composer</strong> Similar a NPM pero para las librerias de PHP, incluso algunos frameworks como laravel lo manejan por defecto ',
            ]),
        new Item(Keys.VERSIONAMIENTO_GRADLEW_VS_MAVEN,
            [
                '<strong>Maven:</strong> Es una forma de manejar proyectos en entornos JAVA ',
                '- La configuración se base en un archivo XML ',
                '- Maneja los jars necesarios para la ejecución del programa, ya sea de manera fisica o descargalos de repositorios ',
                '- Gestiona las dependencias y las declaraciones que necesiten los jars para funcionar',
                '',
                '<strong>Gradle</strong> Esta basada en varios conceptos de Apache Maven por lo que tiene varias mejores frente a este ',
                '- Se basa en un lenguaje DSL, siendo más mantenible en el tiempo ',
                '- Tambien puede gestionar los ciclos de vida, igual que Maven ',
                '- Su rendimiento es mayor en comparación directa con Maven ',
            ]),
        new Item(Keys.VERSIONAMIENTO_VERSIONAMIENTO,
            [
                '- El control de versiones ayuda a comunicar los cambios de cada versión, desde APIs, aplicaciones, hasta Sistemas Operativos ',
                '- No existe una regla que indique que siempre se deben manejar asi, pero es util conocer las convenciones ',
                '',
                '<strong>Semantico: X.Y.Z </strong> <em>V1.1.1</em>',
                '<strong>- Mayor:</strong> Indica la version principal del software o Breaking changes ',
                '<strong>- Minor:</strong> Indica nuevas funcionalidades en la version mayor, generalmente retrocompatibles ',
                '<strong>- Patch:</strong> Es la correción de fallas, parches de seguridad, cambios menores, etc... ',
                '',
                '<strong>Estabilidad: &alpha;, &beta;, RC</strong> <em>V1.1.1</em>-RC',
                '<strong>- Alpha:</strong> version inestable que probablemente contenga errores y deba ser corregida ',
                '<strong>- Beta:</strong> Una version más estable que alpha y a la que se le deben hacer pruebas para verificarla ',
                '<strong>- Release Candidate:</strong> Son los ultimos toques previos para poder ser lanzada oficialmente ',
                '',
                '<strong>Secuencial:</strong> Solo aumenta las versiones sin especificar detalles de compatibilidad <em>V1 -> V2 -> V3</em>',
                '',
                '<strong>Calendar:</strong> Utiliza la fecha del lanzamiento(Año y Mes) como indicativo de la versión <em>24.11 ó 24.11</em>.Z(opcional)',
                '',
                '<strong>API Versioning:</strong> ',
                '<strong>&bull; Basado en la URI(path):</strong> El versionamiento es explicito en la ruta de cada petición <em>/api/v1/products</em>',
                '- Util para mantener retrocompatibilidad con versiones anteriores ',
                '',
                '<strong>&bull; Parametros:</strong> Estan incluidos en la ruta pero de manera opcional <em>/api/products?version=1</em>',
                '- Evita cambios importantes para clientes antiguos, ideal para APIs publicas y el cliente tiene control sobre los parametros de consulta ',
                '',
                '<strong>&bull; Header personalizados:</strong> Se agregan Header personalizados en cada petición <em>X-API-VERSION: 2</em>',
                '- Conveniente cuando se desea ocultar el versionamiento y mantener una URL sin cambios ',
                '',
                '<strong>&bull; Content Type:</strong> Utiliza el Accept con un tipo de medio personalizado <em>Accept: application/vnd.myapp.v1+json</em>',
                '- Ideal si se quiere tener una API 100% Restfull y se desea tener un control de versiones a nivel de formato de datos ',
            ]),
        new Item(Keys.VERSIONAMIENTO_LICENSES,
            [
                '<strong>Software libre &ne; Software gratuito</strong>',
                '<strong>- Software libre:</strong>    Puede ser usado como quiera el usuario, sin ninguna restricción ',
                '<strong>- Software gratuito:</strong> Aunque este no requiera de un pago, el usuario esta limitado en su actuar ',
                '',
                '<strong>Licencias copyleft:</strong> El codigo derivado de la fuente, tambien hereda los terminos de la licencia respectivamente ',
                '<strong>- Licencia Publica General(GPL): </strong> El desarrollador conserva los derechos de autor, pero permite su libre distribucion, modificación y uso ',
                '<strong>- Licencia Publica de Eclipse(EPL):</strong> Utilizada generalmente para software empresarial ya que permite codigo propietario y sublicencias ',
                '<strong>- Licencia Publica de Mozilla(MPL):</strong> La menos restrictiva, permite el uso y la modificación de codigo cerrado o propietario conservando los derechos de autor ',
                '',
                '<strong>Licencias permisivas:</strong> Permiten más libertad para la reutilización, modificación y distribución ',
                '<strong>- Licencia BSD</strong> Se puede vender sin dar acceso al codigo fuente, conservando derechos de autor igualmente ',
                '<strong>- Licencia Apache</strong> Esta licencia permite la modificación y distribución del original en cualquier modalidad, ',
                ' - siempre y cuando se especifique el codigo fuente de terceros usado, presente en la distribución ',
                '<strong>- Licencia MIT:</strong> Es de las más populares debido a su simpleza, permitiendo hacer lo que se quiera con el codigo original ',
                ' - siempre y cuando se mantenga el aviso de copyright y licencia original ',
                '',
                '<strong>Licencias Creative Commons',
                '<strong>- Atribucion</strong> Se debe dar credito al autor para poder ser usada, expuesta, distribuida, etc... ',
                '<strong>- No comercial</strong> Su uso esta prohibido para fines comerciales ',
                '<strong>- No derivadas</strong> La obra no puede ser modificada ',
                '<strong>- Compartir igual</strong> Las derivaciones solo se permiten manteniendo la licencia original y con permiso del autor ',
            ]),
        new Item(Keys.VERSIONAMIENTO_DOCUMENTATION,
            [
                '- Manejar o tener documentación siempre ha sido de los pasos más olvidados en todos los proyectos de tecnologia',
                '- Generalmente si esta existe, no sera una prioridad, ya que el conocimiento del proyecto se mantiene de boca en boca',
                '- Si esta existe debe ser de facil acceso y que este centralizada si es posible, ',
                ' - tambien debe estar enfocada segun el tipo de persona objetivo, no solo es util para el personal tecnico ',
                '- El uso de manejadores de versiones como Github o Gitlab tambien son utiles para seguir la pista de en que se esta trabajando ',
                '',
                '<strong>Beneficios:</strong> ',
                '- Aumentar la productividad, siempre y cuando este organizada y actualizada ',
                '- Agilizar la comunicación entre equipos, en especial cuando son grandes y no siempre se puede hablar con la persona indicada ',
                '- La incorporación de nuevos miembros es más efectiva, reduciendo la orientación necesaria por parte del equipo ',
                '- Las palabras escritas pueden traducirse de una manera más rapida, si hay miembros del equipo que hablen otros idiomas ',
                '- Permite una comunicacíon asincronica, en especial si hay personas con trabajos en diferentes zonas horarias ',
                '- Escribir sabiendo el contexto, ayuda a mejorar la retentiva de los integrantes del equipo, y la lectura de los diferentes objetivos ',
                '',
                '<strong>Elementos a considerar:</strong>',
                '- Esta debe formar parte de las estrategias de CD/CI que se tengan del proyecto, ya que tambien puede ser versionada sin problemas ',
                '- Su alojamiento debe ser en un lugar comun para todo el equipo, de facil acceso y que no sea dificil encontrar el contenido ',
                '- Que sea en su mayoria texto, no significa que no sea agradable a la vista, su contenido debe presentarse de manera atractiva ',
                '- No tiene porque ser una tarea individual, tambien se puede hacer con todo el equipo o en pair programing ',
            ]),
        new Item(Keys.VERSIONAMIENTO_LICENSES_AND_DATA,
            [
                '- El mundo de la tecnologia tiene conceptos complejos como: <em>Codigo Abierto</em>, <em>Datos Abiertos</em> y <em>Estandares Abiertos</em>',
                ' - y aunque parecieran intercambiables, no los son, ya que cada uno cuenta con reglas y principios diferentes por los cuales se rigen ',
                '- Tambien tenga en cuenta el termino <em>Propiedad Intelectual</em> que es ampliamente aplicable y no se limita solo al software',
                '',
                '<strong>Licencias de codigo abierto</strong> Generalmente aplica en donde el codigo fuente es accesible para todo publico, ',
                ' - siendo posible que sea inspeccionado, modificable y distribuible, siempre y cuando su licencia no lo restringa o lo haga de manera parcial ',
                '- Existen diferentes tipos de licencias que confieren diferentes derechos y responsabilidades, algunas permiten libertad casi ilimitada, ',
                ' - como la <strong>Licencia MIT</strong>, o como la <strong>Licencia Publica General GNU(GPL)</strong> que va enfocada a la protección de los derechos del usuario ',
                '',
                '<strong>Licencias de Datos abiertos</strong> Los datos abiertos no solo son información, tambien tienen pautas para su uso y distribución, ',
                ' - los desarrolladores pueden acceder a estos datos atravez de diferentes medios, como un API, que puede tener un limite de accesos, ',
                ' - o imposiciones como prohibir el uso comercial o una atribución obligatoria, por lo que a menudo son <strong>Licencias Creative Common</strong> ',
                '',
                '<strong>Estandares Abiertos:</strong> Permiten la interoperabilidad entre los multiples sistemas y plataformas que existen, al ser tan reconocidos ',
                ' - y usados, suelen ser Licencias de patentes esenciales, libres de regalias, para promover una amplica acogida, y evitar problemas por infracciónes ',
                '',
                '- Tambien es importante tener en cuenta que las licencias se pueden diferenciar entre datos y software, haciendo posible que ',
                ' - los datos que consuma o que genere un software, puedan tener una licencia diferente, a la del propio software, ',
                ' - y al no definirlas por separado, puede estar entrando en una zona gris, y algunos casos infringir normas de manera involuntaria ',
            ]),
        new Item(Keys.VERSIONAMIENTO_DEPENDENCIES_ORDER,
            [
                '- Maven es una de las herramientas de gestión de dependencias más populares de Java, aunque pueden surgir problemas inesperados al manejar muchas dependencias ',
                '- Para esto es esencial comprender el <strong>pom.xml</strong> que es el archivo que contiene todos los detalles sobre el proyecto como información y configuraciones ',
                '- Cada dependencia tiene un conjunto de identificadores (groupId, artifactId y version), tambien llamadas coordenadas',
                '- Todos estos datos son usados por mecanismos internos que resuelven y descargan todo lo necesario desde un repositorio central ',
                '- Si una dependencia esta declarada en el pom se considera <strong>directa</strong>, pero estas a su vez dependen de otras, estas se consideran <strong>transitivas</strong>',
                '- Los problemas surgen cuando se necesitan dependencias transitivas en comun, principalmente si se requieren diferentes versiones ',
                '- Para ver el arbol de todas las dependencias, incluyendo las transitivas, se puede usar el siguiente comando <em>mvn dependency:tree</em>',
                '',
                '- Esto puede desembocar en errores en tiempo de compilación como: ',
                ' - Cannot find symbol      - NoSuchMethodException',
                ' - NoSuchFieldError        - ClassNotFoundException',
                ' - NoSuchMethodError       - NoClassDefFoundError',
                '',
                '- Desafortunadamente esto tambien se puede dar en tiempo de ejecución o directamente en los Plugins de Maven ',
                '- En resumen cuando se encuentran multiples versiones de una misma dependencia, Maven resuelve la dependencia utilizando la profundidad en el <em>arbol</em> ',
                '- Esto selecciona la definición más cercana la raiz del arbol, pero si se encuentran a la misma profundidad, se tomara la primera declaración ',
            ]),
        new Item(Keys.VERSIONAMIENTO_BACKWARD_AND_BREAKING_CHANGES,
            [
                '- La retro compatibilidad(<em>backward-compatible</em>) y los cambios importantes(<em>breaking changes</em>) son 2 conceptos que van ligados ',
                '- Un <strong>Breaking Change</strong>, es cualquier cambio que modifique la forma de consumir o usar cualquier servicio, afectando a otros sistemas o personas ',
                ' - que hagan uso de versiones previas, haciendo que presenten problemas o generando fallas fatales en sus servicios ',
                ' - si el cambio no afecta el comportamiento observable, entonces se considera un cambio retrocompatible ',
                '- Un aspecto ideal de la programación en general, es solamente hacer estos tipos de cambios cuando aportan beneficios mayores a los problemas generados ',
                ' -  o tienen una razon importante de ser, como para romper la compatibilidad con versiones anteriores',
                '- Es importante plantearlos, documentarlos y realizarlos de manera adecuada, ya que pueden tener afectaciones desconocidas <em>Ley de Hyrum</em>'
            ]),
        new Item(Keys.VERSIONAMIENTO_DOCUMENT_ARQUITECTURE,
            [
                '- La documentación suele pasarse por alto en favor de la codificación, sin embargo es esencial para alinear equipos y empoderar desarrolladores ',
                '',
                '<strong>Registros de decisiones de arquitectura (ADR)</strong>',
                '- Un metodo simple y poderoso utilizado para documentar sistematicamente decisiones arquitectonicas claves tomadas a lo largo del proceso de desarrollo ',
                '- Sirven como un registro cronologico del porque se toman las decisiones, bajo que contexto, el razonamiento y los problemas que llevo a esas elecciones ',
                '- Esto con el fin de que la información se preserve para las personas actuales y futuras ',
                '- Al conservar un registro historico ofrecen una vista hacia el pasado para tener una linea transparente y coherente ',
                '',
                '<strong>Solicitudes de comentarios (RFC)</strong>',
                '- Recoge comentarios sugerencias y estandarizaciones en torno a la tecnologia, un sistema, o un protocolo en particular ',
                '- Inicialmente se utilizaban para protocolos de internet, pero se ha difundido y ampliado hasta dominios como redes y formato de datos ',
                '- Esto invita a expertos y partes interesadas a contribuir con ideas, promoviendo el debate para crear un concenso ',
                '- Son particularmente utiles en proyectos de codigo abierto donde pueden proponer nuevas caracteristicas y recopilar comentarios de la comunidad ',
                '',
                '<strong>Event Storming</strong>',
                '- Tecnica especificamente diseñada para mejorar la compresión, el diseño y el modelado de dominios empresariales complejos ',
                '- Esto con el fin de centrarse en los eventos del dominio que son sucesos significativos dentro del contexto empresarial ',
                '- Aca se reunen las diversas partes interesadas como, analistas, desarrolladores, expertos en dominio, para crear una experiencia compartida y más completa ',
                '- No solo se facilita la comunicación entre las partes, sino que se consideran multiples perspectivas para modelos más solidos y precisos ',
                '',
                '<strong>Modelo C4</strong>',
                '- Enfoque visual e integral para documentar y comprender la arquitectura del software, donde se puede representar diferentes niveles de abstracción ',
                '- Esta división lograr crear un entendimiento por capas, entendible para personas tecnicas y no tecnicas ',
                '- La transferencia de conocimiento se realiza de manera más efectiva acelerando la incorporación y mejorando la comprension general del sistema ',
                '- Este modelo contempla 4 vistas, cada una con un nivel diferente de abstracción y complejidad ',
                '<strong> - Contexto:</strong> Proporciona una descripción general del sistema y sus interacciones con entes externos ',
                '<strong> - Contenedor:</strong> Muestra los principales bloques de la construcción como aplicaciones y bases de datos ',
                '<strong> - Componente:</strong> Divide estos contenedores en partes más pequeñas y detalladas, explicando sus responsabilidades y relaciones ',
                '<strong> - Codigo:</strong> profundiza en detalles de implementación, hasta llegar a nivel de codigo ',
                '',
                '<strong>arc42</strong>',
                '- Es una plantilla para la documentación de arquitecturas, con un estilo minimalista ',
                '- La jerarquia de la documentación estan configurados dentro de los siguiente directorios, pero es adatable segun las necesidades ',
                ' 1. Introducción y objetivos            7. Vista de implementación    ',
                ' 2. Restricciones                       8. Conceptos transversales    ',
                ' 3. Contexto y alcance                  9. Decisiones arquitectonicas ',
                ' 4. Estrategia de solución             10. Requisitos de calidad      ',
                ' 5. Vista de bloques de construcción   11. Riesgos y deuda tecnica    ',
                ' 6. Vista de tiempo de ejecución       12. Glosario                   ',
            ]),
        new Item(Keys.VERSIONAMIENTO_BOM,
            [
                '- Un pom es un archivo XML que contiene la información necesaria de un proyecto, como configuraciones, dependencias, compilación que Maven necesita ',
                '- <strong>Bill Of Materials:</strong> Es un pom especial que se usa para controlar las versiones de las dependencias de un proyecto ',
                '- Este manejo centralizado tiene una gran cantidad de ventajas ya que permite modificar las versiones sin necesidad de cambiarlas en multiples lugares ',
                '- Al compartir la versión se hace explicito para todos los artefactos y deja de ser implicito(orden), reduciendo problemas de dependencias transitivas ',
                '- La exclusión, el uso de la herencia y definir versiones especificas sigue siendo posible ',
            ])
    ];

export const PRINCIPIOS =
    [
        new Item(Keys.PRINCIPIOS_SOLID,
            [
                '<em>S</em> <strong>Responsabilidad única:</strong>     Una cosa <strong>X</strong> solo deberia hacer y conocer cosas de su competencia, si no se tendria un acoplamiento indeseado ',
                '<em>O</em> <strong>Abierto/Cerrado:</strong>           Casi siempre sera mejor añadir nuevos comportamientos o funciones que modificar los existentes ',
                '<em>L</em> <strong>Sustitución de Liskov:</strong>     Todo objeto hijo es remplazable por sus padres, sin alterar el funcionamiento del sistema ',
                '<em>I</em> <strong>Segregación de interfaces:</strong> Es mejor tener interfaces especializadas, que interfaces genericas con metodos que generan ruido ',
                '<em>D</em> <strong>Inversión de dependencias:</strong> Las implementaciones pueden cambiar, pero las abstracciones no, por lo que el sistema se debe basar en estas ',
            ]),
        new Item(Keys.PRINCIPIOS_KISS,
            [
                '- Código entendible, esto en la mayoria de los casos hara que modificar y mantener el codigo sea más simple ',
                '- Mantener modulos, metodos y clases pequeñas en vez de entidades grandes ',
                '- Código autocomentado, nombres claros para las variables, metodos, clases, aplica para todo lo que pueda ser nombrado ',
                '- No abusar de los comentarios, estos solo se deben emplear cuando sean necesarios, y dado el caso mantenerlos actualizados',
            ]),
        new Item(Keys.PRINCIPIOS_YAGNI,
            [
                '- No lo añadas hasta que no lo necesites, solo cuando se necesite se aplicara realmente ',
                '- Define prioridades, evita trabajo innecesario que no aporta valor ni ayude a cumplir los requisitos ',
                '- Esto tambien evita futuros retrasos y suposiciones erroneas, al tomar decisiones en base a hechos y observaciones ',
            ]),
        new Item(Keys.PRINCIPIOS_OCCAM,
            [
                '- Preferir siempre la solución más simple, asi se evita agregar complejidad arbitraria ',
                '- En igualdad de condiciones la solución más optima prevalecera',
                '- Simplificar las cosas, no implica que se deba ignorar la complejidad, solo que se debe reducir lo más posible '
            ]),
        new Item(Keys.PRINCIPIOS_DRY,
            [
                '- Evita repetir código siempre que sea posible en aras de reducir el acoplamiento y mejorar la cohesión ',
                '- Incrementa la mantenibilidad del código, modularizando y haciendo partes pequeñas y manejables ',
                '- Facilita la refactorización, y la creación de partes atomicas, que se puedan juntar para realizar acciones más complejas ',
                '- Implementa código reutilizable, de manera que sea util y mantenible dentro del sistema ',
                '- Más importante que el NO duplicar codigo es el NO duplicar conceptos que tengan el mismo significado ',
                '- No siempre es aplicable, puede existir la duplicación en vez de mantener una mala abstracción/generalización '
            ]),
        new Item(Keys.PRINCIPIOS_HOLLYWOOD,
            [
                '- Se basa en la inversión de dependencias para crear la inversión de control ',
                '- Esto logra obtener las referencias y datos necesarios para funcionar mediante una entidad externa (frameworks)',
                '- Generalmente las entidades externas son los frameworks que ejecutan el codigo del usuario ',
                '- Las instancias se crean y se eliminan de manera más eficiente, mejorando el rendimiento ',
            ]),
        new Item(Keys.PRINCIPIOS_TELL_DONT_ASK,
            [
                '- La responsabilidad debe ser delegada al objeto correspondiente, en lugar de extraerla en un componente diferente ',
                '- En lugar de pedir los datos a los objetos, debemos decirles que hacer y esperar el resultado de la operación ',
                '- Esto es un refuerzo del concepto de encapsulación, propio de la orientación a objetos ',
                '- De esta manera se limita el acoplamiento de los componentes y se centralizan acciones evitando posible duplicación '
            ]),
        new Item(Keys.PRINCIPIOS_STUPID,
            [
                '<em>S</em> <strong>Patron singleton:</strong>       Es el unico patron que mal usado puede convertirse en un antipatron, no lo uses si no es necesario ',
                '<em>T</em> <strong>Acoplamiento indebido:</strong>  Sucede cuando un cambio afecta más partes de las debidas, esto indica una mala modularización ',
                '<em>U</em> <strong>Inestabilidad:</strong>          El software <strong>NO</strong> deberia ser dificil de testear, y menos de modificar ',
                '<em>P</em> <strong>Optimización prematura:</strong> Un codigo eficiente, por lo general es ilegible, por lo que optimizarlo sin necesidad solo trae complejidad innecesaria ',
                '<em>I</em> <strong>Nombres indescriptivos:</strong> Todo codigo idealmente deberia ser autocomentado, por lo que nombrar mal las cosas hace inalcanzable esta meta ',
                '<em>D</em> <strong>Duplicación:</strong>            El codigo duplicado deberia evitarse siempre que se pueda, aplicando <em>DRY</em> & <em>KISS</em>, además de otras practicas ',
            ]),
        new Item(Keys.PRINCIPIOS_TWICE_ONE,
            [
                '- Un dicho proveniente desde la carpinteria y aplicado a distintas profesiones ',
                '- Este dicho encarna la mentalidad de una planificacion minuciosa puede evitar errores, en especial si son costosos',
                ' - especialmente cuando se pueden realizar acciones faciles de hacer, pero dificiles de deshacer ',
                '- Debido a que el software es intangible y puede ser reversible, se puede convertir en una <em>"puerta de 2 vias"</em> segun Jeff Bezzos',
                '- Aun asi esto evitara malgastar tiempo y recursos, al solo cortar y deshacer, solo porque es posible conllevando menos efectos adversos ',
            ]),
        new Item(Keys.PRINCIPIOS_DIVIDE_AND_CONQUER,
            [
                '- Un adagio popular dedicado a la resolución de problemas, donde al dividir un problema en partes más pequeñas con soluciones acotadas, ',
                ' - el problema pierde complejidad, permitiendo que la suma de todos los esfuerzos solucione el problema del cual se derivaron ',
                '',
                '- Esto se puede ver como una muñeca Rusa, donde cada muñeca esta formada por más partes que se van haciendo más pequeñas ',
                ' - pero juntas son capaces de conformar un todo, mayor a la suma de sus partes ',
                '- Generalmente es una tecnica aplicada a algoritmos, pero puede usarse en ambientes de mayor embergadura ',
                '- Suelen ser problemas capaces de descomponerse en subproblemas y ser resueltos de manera recursiva ',
                '',
                '<strong>Divide: </strong> Dividir el problema en subproblemas más pequeños ',
                '<strong>Vence:  </strong> Resolver los problemas de manera individual y de manera acotada ',
                '<strong>Combina:</strong> Las soluciones de los subproblemas, generando la solución del problema original ',
            ]),
        new Item(Keys.PRINCIPIOS_SOC,
            [
                '- Un concepto simple que dice que no todo se debe solucionar junto, en el mismo archivo, en la misma funcion, etc... ',
                '- Sino que se debe dividir en fragmentos, de modo que cada parte pueda completar una parte distinta, especifica y más acotada ',
                '- En palabras de <strong>Edsger W. Dijkstra</strong> <em>La separación de conceptos, aunque no sea perfectamente posible, </em>',
                '  <em>es la única técnica disponible, que yo sepa, para ordenar eficazmente los propios pensamientos</em>',
                '- Esto aplica desde funciones, clases, pasando por modulos, hasta llegar a proyectos ',
            ]),
        new Item(Keys.PRINCIPIOS_POC,
            [
                '- Es una prueba inicial, donde se toman acciones para determinar si una idea es lo suficientemente valiosa, factible, e incluso posible ',
                '- Tambien prueba la viabilidad de un producto para resolver alguna necesidad empresarial',
                '- Esto se diferencia de un <em>MVP</em> ya que esto es un pequeño documento o demostración de la etapa inicial, del cual se puede empezar a construir ',
                '- Despues de que se hayan aceptado por un cliente y/o usuario final, y asi poder empezar una toma de requisitos y factores claves de la aplicación ',
            ]),
        new Item(Keys.PRINCIPIOS_SLAP,
            [
                '- Es un principio ampliamente explicado por multiples autores, pero principalmente se recuerda a <em>Robert C Martin</em> en el libro de <strong>Clean Code</strong>',
                '- La idea es que todo el codigo dentro de un metodo debe estar en el mismo nivel de abstracción, para facilitar la lectura y su comprensión ',
                '- El fin es evitar la mezcla de operaciones de alto y bajo nivel manejando un mismo nivel conceptual ',
                '- Tambien se ha de tener cuidado con la aplicación de este principio, porque se pueden crear multiples metodos para ocultar los detalles ',
                ' - de la implementación aumentando la indirección y el esfuerzo necesario para su mantenimiento ',
            ])
    ];

export const REFACTORIZACION =
    [
        new Item(Keys.REFACTORING_CLEAN_CODE,
            [
                '- Menos es Más, por algo existe el principio de <em>KISS</em>',
                '- Es más facil de entender para otros, permitiendo que su modificacion y su extensión no se vuelvan un dolor de cabeza ',
                '- Es más facil de mantener a lo largo del tiempo, cumpliendo principios como <em>DRY</em> y <em>Yagni</em>',
                '- Los tests corren de manera satisfactoria de manera regular, además de tener una buena cobertura',
            ]),
        new Item(Keys.REFACTORING_DEUDA_TECNICA,
            [
                '- Todo desarrollador desea crear un buen codigo pero las omisiones o errores crecen sigilosamente ',
                '- La mala modularización o la nula aislación del codigo puede hacer que los cambios tengan un gran impacto',
                '- Apurar el desarrollo puede crear soluciones rapidas pero con diversos errores y/o incompletas',
                '- La falta de pruebas y/o omitir las que ya existen, puede tener efectos colaterales inmesamente destructivos',
                '- La Documentación siempre sera necesaria, y omitirla entorpecera futuros cambios y la introducción de nuevos miembros ',
                '- Sin comunicación o interacciones incompletas pueden generar pequeñas islas dentro de la empresa, más aun si se recibe información erronea ',
                '- Tambien existe el elemento humano cuando el desarrollador es inexperto o incompetente',
            ]),
        new Item(Keys.REFACTORING_DEUDA_TECNICA_TYPES,
            [
                '- No realizar los cambios necesarios debido a temas de premura o negligencia, hara que en el futuro sea más dificil y costoso refactorizar ',
                '- Ya en 1992 <em>Ward Cunningham</em> Programador y coautor del <strong>Manifiesto agil</strong> introdujo el concepto como una correción regular ',
                ' - para evitar degradamientos y deficiencias operativas, de diseño o estructurales ',
                '',
                '&brvbar;                    &brvbar;      <strong>Deuda imprudente</strong>       &brvbar;        <strong>Deuda prudente</strong>        &brvbar;',
                '&brvbar;---------------------------------------------------------------------------------&brvbar;',
                '&brvbar;                    &brvbar; Falta de tiempo/presupuesto &brvbar; Prioridad de funcionalidades &brvbar;',
                '&brvbar; <strong>Deuda deliberada</strong>   &brvbar; Refactor descuidado         &brvbar; Visualización de riesgos     &brvbar;',
                '&brvbar;                    &brvbar; Insuficiencia de pruebas    &brvbar; Minimo de pruebas a hacer    &brvbar;',
                '&brvbar;---------------------------------------------------------------------------------&brvbar; ',
                '&brvbar;                    &brvbar; Falta de conocimiento       &brvbar; Correción de errores         &brvbar;',
                '&brvbar; <strong>Deuda involuntaria</strong> &brvbar; Sobreingenieria             &brvbar; Aprendizaje sobre incidentes &brvbar;',
                '&brvbar;                    &brvbar; Anti patrones de diseño     &brvbar;                              &brvbar;',
            ]),
        new Item(Keys.REFACTORING_COMMENT_DEUDA,
            [
                '- Comentar el codigo es sumamente util para determinar los segmentos que necesitan correciones o cambios ',
                '- La mayoria de IDEs admiten comentarios con etiquetas como:  ',
                '',
                '<strong>TODO:</strong> Lugares que se pueden mejorar, ya sea legilibilidad, complejidad, etc.. ',
                '<strong>FIXME:</strong> Porción de codigo que falla en circuntancias especificas y debe ser revisada ',
                '<strong>NOTE:</strong> Funcionamiento interno ó posibles problemas no documentados ',
                '<strong>KLUDGE:</strong> Codigo ineficiente, complejo ó insondable; que aun asi, funciona ',
            ]),
        new Item(Keys.REFACTORING_WHEN,
            [
                '- Cuando la duplicación de codigo se vuelve relevante y/o notable, eventualmente sera necesario refactorizarlo ',
                '- Cuando se corrigen errores es una excelente oportunidad para hacerlo',
                '- Cuando se hagan revisiones, siempre hay espacio para la mejora ',
                '- Cuando se agregan nuevas funciones, tambien se pueden refactorizar las existentes si estan relacionadas o son relevantes ',
            ]),
        new Item(Keys.REFACTORING_HOW,
            [
                '- El resultado debe ser mejor que lo anterior, de lo contrario sera tiempo perdido ',
                '- No se deben crear nuevas funciones, eso es estrictamente en tiempo de desarrollo y deben separarse en la medida de lo posible ',
                '- Los tests deben seguir pasando tal y como antes de empezar, de lo contrario se ha cometido un error, o se ha encontrado un error ',
                '- En caso de que los tests fallen porque eran de muy bajo nivel, puede cambiar las pruebas o crear un nuevo conjunto usando <strong>BDD</strong>',
                '',
                '<strong>Comprender antes de</strong>',
                '- Antes de cambiar cualquier cosa se debe comprender lo más posible, hasta el nivel de depurarlo si es necesario ',
                '- Es importante saber las partes involucradas y como esto puede llegar a afectarlas ',
                '- Los IDE generalmente tienen formar de mostrar los usos de las clases y metodos ',
                '',
                '<strong>Testing Unitario</strong>',
                '- Si no hay pruebas, no hay forma de verificar los resultados de manera adecuada, debe existir una cobertura minima ',
                '- Si el codigo es heredado y la cobertura de pruebas es deficiente, escriba primero las pruebas y solo despues refactorice ',
                '',
                '<strong>Buenos nombres:</strong> Un buen nombre es claro y entendible para uno mismo y futuros programadores ',
                '',
                '<strong>Extracción de metodos:</strong> Los metodos grandes son complejos y más suceptibles a errores ',
                '',
                '<strong>La regla del Boy Scout:</strong> Siempre que modifiques algo intenta dejarlo mejor de lo que estaba ',
                '',
                '<strong>Romper las dependencias:</strong> Un codigo fuertemente acoplado es dificil de mantener ',
                '',
                '<strong>Mejorar los logs:</strong> Solo mostrar logs sin contexto no ayuda a encontrar los errores y su causa ',
                '',
                '<strong>Deprecar antes de borrar:</strong> Aveces codigo que no parece ser usado, si lo es, deprecar genera una advertencia antes de borrar(Ley de Hyrum)',
                '',
                '<strong>Codigo autocomentado:</strong> El codigo no deberia requerir un traductor ni llevar dias para su entendimiento, empiricamente conocido como <em>WTF por linea</em>',
                '',
                '<strong>Autorevisiones y revisiones de pares:</strong> Volver a revisar el codigo antes de mandar solicitudes de revisión nunca esta demás ',
                '',
                '<strong>Refactorizar ≠ reescritura:</strong> Intente no volver a reescribir codigo incorrecto, en especial si carece de pruebas y/o tiempo ',
            ]),
        new Item(Keys.REFACTORING_TECNICAS,
            [
                '<strong>Composición de metodos:</strong> Se base en descomponer metodos grandes en, metodos más pequeños y manejables evitando complejidad y tamaño ',
                '<strong>&bull; Pros:</strong> Los metodos se hacen más entendibles y se eliminan variables de poca utilidad',
                '<strong>&bull; Contras:</strong> La complejidad cognitiva puede ser mayor de la inicial, además de pequeñas afectaciones al rendimiento',
                '',
                '<strong>Mover funciones entre clases:</strong> Aunque un sistema se encuentre bien diseñado, habra clases con más responsabilidades que otras',
                '- La reasignación de responsabilidades generalmente mejora la cohesión y responsabilidades de los objetos ',
                '<strong>&bull; Pros:</strong> Se hace un mejor reparto de las responsabilidades ',
                '<strong>&bull; Contras:</strong> Si se abusan de estos movimientos se pueden convertir en code smells ',
                '',
                '<strong>Organización de los datos:</strong> Esto ayuda a pensar en clases y funciones, en vez de operaciones con datos primitivos ',
                '<strong>&bull; Pros:</strong> Permite aprovechar mejor los conceptos de POO como el encapsulamiento y la abstracción ',
                '<strong>&bull; Contras:</strong> La complejidad del codigo puede crecer ',
                '',
                '<strong>Simplificación de condiciones:</strong> Las estructuras de control tienden a crecer y complicarse con el paso del tiempo ',
                '- Este crecimiento se da de la mano con el negocio, por lo que es natural y debe ser controlable ',
                '<strong>&bull; Pros:</strong> Se reduce la complejidad y se aumenta la mantenibilidad ',
                '<strong>&bull; Contras:</strong> En ciertos casos se debe implementar más codigo ',
                '',
                '<strong>Simplificación de metodos:</strong> Los metodos deben ser dicientes en cuanto a lo que hacen ',
                '- Mejora el manejo de las excepciones, en vez de que se usen como condiciones del flujo ',
                '<strong>&bull; Pros:</strong> Un metodo diciente es más facil de comprender y esta dentro de la linea del codigo autocomentado ',
                '<strong>&bull; Contras:</strong> Los metodos se pueden volver más largos y complejos o hacer más llamados ',
                '',
                '<strong>Lidiar con la generalización:</strong> Abstraer las generalidades del codigo, mediante interfaces, herencia, composición, jerarquias, etc.. ',
                '- Se mejora la definición de atributos y comportamientos al no solo tener en cuenta la herencia ',
                '<strong>&bull; Pros:</strong> Se mejora el diseño de las clases y se disminuye el acoplamiento ',
                '<strong>&bull; Contras:</strong> Se debe realizar un analisis más profundo del porque y su solución ',
            ]),
        new Item(Keys.REFACTORING_WHEN_NOT,
            [
                '- Un refactor nunca deberia cambiar el comportamiento observable del codigo ',
                '- Si no se tiene la suficiente certeza de que se pueda comprobar el funcionamiento despues de los cambios realizados ',
                '- Si no se tiene conocimiento a nivel general y particular, no solo de las partes afectadas ',
                '- Si se esta en medio de un cambio funcional; y menos aun, si este no funciona ',
                '- Hay que cumplir un plazo de manera urgente, pero tampoco se puede descuidar ya que se crearia una bola de nieve eventualmente ',
                '',
                '<strong>Pasos a tener en cuenta:</strong>',
                '- Asegurese que hay un punto de restauración, al cual se pueda retroceder si no han funcionado o se deshacen los cambios ',
                '- Identificar que se planea refactorizar y que tecnica puede ser usada ',
                '- Si se tienen multiples refactors más pequeños, asegurese que el codigo siga funcionado despues terminar uno y antes de empezar con otro ',
                '- Ejecute periodicamente los test que hayan y de ser posible agregue nuevos casos que esten directamente involucrados ',
                '- Si se tiene una aplicación con una deuda tecnica masiva y con pocas maneras de comprobar los cambios, aplique la tecnica llamada <em>Golder Master</em>, ',
                ' - donde se tiene un gran conjunto de datos para comprobar que los resultados sean equanimes, antes y despues de los cambios ',
                '- Evite que los cambios crezcan de manera descontrolada y se convierta en un rediseño, generando posibles problemas en ambas actividades '
            ]),
        new Item(Keys.REFACTORING_LEGACY_CODE,
            [
                '- Como desarrolladores de software no solo debemos crear codigo, debemos mantener el que ya existe, solucionar problemas o agregar funcionalidades ',
                '- Modificar/crear codigo en los proyectos <em>Legacy</em> pocas veces es facil, en especial si el proyecto esta mal estructurado o con malas practicas ',
                '',
                '<strong>Hotspot analisis:</strong> El codigo antiguo puede estar llenos de deuda tecnica, pero esto no significa que se deba atacar las peores partes, ',
                ' - se debe priorizar el codigo de peor calidad y que cambia con mayor periodicidad, lo que indica que es prioridad ',
                '',
                '<strong>Mikado Method:</strong> Una manera de "Estimar" aquellos refactors grandes sin perdernos en el camino, para esto debemos ',
                ' - anotar el objetivo que deseamos lograr, si se necesita otra tarea, entonces lo anotamos en otro circulo y empezamos de nuevo ',
                '- Cada vez que terminemos una tarea se tacha y continuamos con la siguiente en la cadena o con otra que este relacionada ',
                '- Esto nos ayuda a tener un foco en lo que estamos realizando, sin estrezarnos por contemplar todo lo que hay que hacer ',
                '',
                '<strong>Over Commiting:</strong> Debido a lo facil que es perder el foco, o incluso terminar en un camino sin salida, perdiendo lo que si funciona ',
                '- Un enfoque seguro es realizar un commit cada vez que algo funcione, más o menos por el estilo de guardar un punto de retorno para la partida ',
                '',
                '<strong>Katas:</strong> Hacer cambios en producción, con pocos o nada de tests, es algo más que osado, por lo que tener un ambiente ',
                ' - que controlemos y podamos probar nuevas tecnicas y maneras de testear, es mejor que hacerlo directamente en producción ',
                '',
                '<strong>Approval Testing:</strong> Es una forma de escribir tests para luego poder refactorizar el codigo, donde se pueda generar una salida ',
                ' - de manera que funcione como una "foto" con la cual comparar y realizar tests de mutación, tambien conocida como: Golden Rule o Snapshot testing ',
                '',
                '<strong>Architecture Decision Records:</strong> Una constante con el Legacy Code, es la falta de contexto, y el porque de las decisiones, ',
                ' - se encuentra un dilema acerca sobre si cambiar o no, que ventajas/desventajas puede traer esto, o si esto fue anteriormente documentado ',
                '- Hay una tecnica un poca obvia, pero bastante efectiva, y es documentar: ',
                '- El porque de la decisión, alternativas, pros/contras, fecha, consecuencias, etc...',
                '- Tambien no solo es documentar las decisiones, si no que esta se actualize debidamente y que todo el equipo este al tanto de las decisiones ',
            ]),
        new Item(Keys.REFACTORING_MANAGE_DEUDA_TECNICA,
            [
                '- El codigo es un concepto abstracto, por lo que no siempre se puede visualizar de la manera que es debida para todas las esferas involucradas ',
                '- Por lo general el tiempo de desarrollo se va reduciendo y la complejidad y el mantenimiento aumentan, entre más deuda tecnica exista ',
                '- Existen varios tipos de deuda tecnica, no solamente la que se cataloga como codigo erroneo, hay más tipos conectados con otras areas: ',
                '',
                '<strong>- Calidad:</strong> Codigo complejo, carece de estandares, malos nombres, exceso de comentarios, etc...',
                '<strong>- Pruebas:</strong> No existe cobertura y no hay un enfoque adecuado para las pruebas',
                '<strong>- Acoplamiento:</strong> La Separacion de responsabilidades y de conceptos, no esta debidamente definida',
                '<strong>- Herramientas/Frameworks antiguos:</strong> Se siguen usando debido a la imposibilidad o falta de esfuerzo para actualizarse',
                '<strong>- Procesos manuales:</strong> Tareas que pueden automatizarse siguen siendo manuales, además no existen procesos de <em>CD/CI</em>',
                '<strong>- Sin documentación:</strong> o la que ya existe es obsoleta debido a falta de actualización',
                '<strong>- Conocimientos:</strong> El intercambio de saberes es poco fluido, y la toma de ciertas decisiones pareciera estar injustificada',
                '',
                '<strong>¿ Como medirla ?</strong> Para que se pueda intervenir, se debe poder medir de manera que se sepa en que niveles esta ',
                '<strong>- Razón de deuda Tecnica(TDR)</strong> Se compara el costo de reparla, con el del desarrollo original, ',
                ' - si esto llega a superar un umbral, el cual suele ser del <strong>50%</strong>, se debe considerar reescribir o abandonar el proyecto ',
                '<strong>- Metricas:</strong> Mediante herramientas que analizan cosas como: complejidad, duplicación, estandares, cobertura, profundidad de herencia, etc..',
                '<strong>- Relación defectos/entregas:</strong> Cantidad de errores corregidos e introducidos, o la tasa de fallos, aca se puede apoyar en las metricas <em>DORA</em>',
                '<strong>- Cobertura:</strong> Una buena cantidad de tests, es sinonimo de calidad y de una base solida, casi siempre',
                '',
                '<strong>Estrategias para afrontarla:</strong>',
                '- Ser transparentes para que todas las partes esten al tanto de lo que les corresponde',
                '- Se necesita priorizar los cambios en función del impacto, para esto se pueden usar modelos como <em>RICE</strong>',
                '- Se deben capacitar y enseñar al equipo que tratarla es necesario, y que siempre sera prudente asignar un tiempo para su revisión/corrección ',
                '- El uso de metricas, que puede hacerse durante la etapa de desarrollo, evitando crear una bola de nieve',
                '',
                '<strong>Como Mantenerla Baja:</strong> Lo que se quiere principalmente es producir codigo con una velocidad, calidad y complejidad adecuadas ',
                '<strong>- Cree arquitecturas:</strong> Asi se tiene una base solida sobre la cual trabajar, si no la <em>Ley de Conway</em> terminara afectando la arquitectura ',
                '<strong>- Documentación:</strong> Todas las decisiones de la arquitectura y decisiones tecnicas, deberian ser totalmente accesibles y contrastables con el codigo',
                '<strong>- Testing:</strong> Una buena cobertura, que cumpla con la <em>Piramide de pruebas</em>, tampoco esta demás seguir <strong>TDD</<strong>',
                '<strong>- Revisiones:</strong> Asi se comparte conocimientos y se obtienen diferentes puntos de vistas',
                '<strong>- Pair Programing:</strong> Mientras que un desarrollador escribe, otro esta observando para proporcionar asistencia y sugerencias ',
                '<strong>- Refactorización:</strong> Si la deuda es facilmente solucionable, hagalo, no se deberia pedir permiso para tareas simples como esta',
                '<strong>- Aprendizaje:</strong> Un buen desarrollador que tenga un gran abanico de conceptos, patrones y arquitecturas es menos propenso a equivocarse ',
                '<strong>- Entrega continua:</strong> Asi se tienen ciclos cortos y una retroalimentación más efectiva ',
            ]),
        new Item(Keys.REFACTORING_MANAGE_DEPENDENCIES,
            [
                '- Durante la decada de los 90s y antes de empezar el año 2000 existio un problema informatico gigante, el famoso <strong>Y2K</strong>, debido a la generalización ',
                ' - de que los años en las fechas, se guardaran en 2 digitos, por lo que una fecha de 1997 se representaba como 97, el caos provenia del año 2000 ',
                ' - donde se temia que la fecha se pudiera malinterpretar como 1900, retrocediendo 100 años, causando problemas y confusiones generalizados',
                '',
                '- El problema se resolvio, pero fue un costo enorme para miles de empresas, ya que hubieron de modificar millones de lineas que estaban duplicadas ',
                ' - y dispersas ó que hacian uso de sentencias como el <em>go to</em> que complicaban los cambios, sin contar las repercusiones que esto trajo',
                '',
                '- Para resolver un problema, es importante definirlo y acotarlo, para eso es importante definir que es una dependencia, que se puede definir como: ',
                ' - un fragmento de codigo determinado que no puede ser entendido o modificado, de forma aislada, debe hacerse junto a la parte involucrada',
                '',
                '- Las <strong>Dependencias obvias</strong> son aquellas son aquellas que generan cambios obligatorios dentro del codigo, como agregar/eliminar un parametro, ',
                ' - esto obligara a modificar todos los llamados/invocaciones que se tengan de la función',
                '',
                '- Las <strong>Dependencias secuenciales</strong> son donde la parte a modificar parece independiente, pero no lo es, es parte de una secuencia de ejecución, ',
                ' - donde el orden correcto de la ejecución o serie de tareas, es esencial para el correcto funcionamiento, para eliminar esta dependencia',
                ' - se puede refactorizar para que se comporte como una <em>maquina de estados</em>, con todos los estados y pasos debidamente definidos ',
                '',
                '- Las <strong>Dependencias ocultas</strong> son más dificiles de visualizar, sus cambios no afectan a todos los lugares que deberian, como el logo de una pagina, ',
                ' - este siempre debe ser visible en todas las paginas; pero este cambio con el tiempo y en consecuencia todas las paginas tambien, ',
                ' - obligando a buscar y modificar cada archivo que contega el antiguo logo, la mejor solución para evitar problemas como este es, ',
                ' - hacer la dependencia explicita haciendo que todas las paginas busquen la imagen a usar, para que futuros cambios queden centralizados ',
                '',
                '- Las variables o datos globales, se pueden considerar <strong>Dependencias globales</strong> esto es problematico por diferentes razones,',
                ' - modificar la variable afectaria multiples lugares, y crecer alrededor de este unico punto, hara que la logica y el mantenimiento se compliquen, ',
                ' - por eso se insta a tomar un enfoque de tipo inmutable y uso de variables locales, mediante el uso de abstracciones y refactors',
                '',
                '- Conforme se va aumentando la gerarquia y la importancia de los componentes, se hablan de conceptos como <strong>Inyección de dependencias</strong> y ',
                ' - patrones arquitectonicos como <strong>Capas</strong> que surgen debido a la necesidad de reducir o controlar este acoplamiento',
                ' - y tener un mejor entendimiento de la estructura, los componentes y las relaciones que conforman sistema',
            ]),
        new Item(Keys.REFACTORING_GOOD_AND_BAD_PRACTICES,
            [
                '- Refactorizar el codigo, es una de las actividades más comunes para mantener una base de codigo mantenible y saludable ',
                '- Pero también se puede caer en el problema de empeorar las cosas, en vez de facilitarlas ',
                '',
                '<strong>Cambiar el estilo de codificación:</strong>',
                '- Generalmente sucede cuando alguien tiene conceptos y formas diferentes de trabajar ',
                '- Esto es generalmente problematico si no todos conocen esa forma de trabajar ó si la carga cognitiva es mayor a la que se tenia antes ',
                '',
                '<strong>Abstracciones innecesarias:</strong>',
                '- Crear abstracciones sin comprender el significado inherente para el negocio, hara que el entendimiento se complique de manera innecesaria ',
                '',
                '<strong>Generando inconsistencias:</strong>',
                '- Actualizar partes individuales del codigo para que funcionen diferente sin que el resto cambie, genera confusiones y cambios de contexto ',
                '',
                '<strong>No comprender el antes y el porque:</strong>',
                '- Siempre que se empieza un cambio de cualquier envergadura, se debe tener en claro cual o cuales son los objetivos finales ',
                '- No todas las tecnologias son ideales para el trabajo, pueden traer perdidas de caracteristicas claves para el negocio como el <em>SEO</em>, <em>Rendimiento</em>, Etc.. ',
                '',
                '<strong>Unificar no siempre es una buena idea:</strong>',
                '- Tener configuraciones diferentes para acciones iguales no siempre indica falta de orden ni falta de generalización ',
                '- Pueden darse casos donde realmente es importante diferenciar estas acciones, los cambios deben permitir esta flexibilidad ',
                '',
                '<strong>Pautas</strong>',
                '- Sea gradual, hacer cambios pequeños y manejables ',
                '- Comprenda el objetivo y las funcionalidades del codigo antes de cambiarlo, y en la medida de lo posible que no sea durante ',
                '- Intente coincidir con el estilo existente, asi sera en conjunto más mantenible ',
                '- Solo cree abstracciones en la medida de lo necesario, siempre intente cumplir <strong>KISS</strong>',
                '- Evite agregar nuevas dependencias y/o librerias, a menos que conlleven mejoras sustanciales en caracteristicas importantes ',
                '- Si no existen pruebas unitarias para comportamientos esenciales, intente crearlas antes de empezar y crear puntos de control ',
                '- Una buena refactorización suele ser silenciosa para los usuarios finales, procure que siempre sea asi',
            ]),
        new Item(Keys.REFACTORING_REWRITE_TRAP,
            [
                '- Todo desarrollador ha pasado por la situación de heredar una base de codigo caotica y que su primer instinto sea desmanterlarla y empezar desde cero ',
                '- Esta idea resulta liberadora, tener un lienzo y blanco para resolver un rompecabezas irresoluble, pero esto puede llevar a un camino largo y costoso ',
                '- Se ha de tener cuidado de no confundirse esto con el <em>Patron Estrangulador</em>, ya que ambos genera nuevos sistemas, pero de diferentes maneras ',
                '',
                '<strong>Porque es atrayante el empezar desde cero ?</strong>',
                '<strong>- Codigo Elegante:</strong> Reescribir permite aplicar todas las practicas modernas y brillantes, eliminando el antiguo desorden ',
                '<strong>- Oportunidad de aprendizaje:</strong> Tambien suelen ser una oportunidad para experimentar con nuevas herramientas, patrones, frameworks, etc..',
                '<strong>- Control:</strong> Empezar desde cero permite la solución de errores pasados que no podian ser cambiados ',
                '',
                '<strong>La ineficiencia percibida de la refactorización:</strong>',
                '<strong>- El codigo no tiene salvación:</strong> Es facil descartar un sistema heredado por considerarse defectuoso y/o obsoleto',
                ' - Pero hay momentos donde contiene conocimiento invaluable acerca del negocio y de los procesos asociados ',
                '<strong>- Ahorro de tiempo falso:</strong> La refactorización aveces parece como colocar un parche en un barco que se hunde ',
                ' - El tiempo ahorrado a corto plazo puede generar enormes costos a largo plazo, hasta convertirse en una bola de nieve ',
                '',
                '<strong>Factores Psicologicos:</strong>',
                '<strong>- Ego & propiedad:</strong> Seamos realistas escribir tu propio codigo suele ser más satisfactorio que arreglar el desastre de otro ',
                '<strong>- Gratificación inmediata:</strong> Puedes ver el progreso rapidamente, agregar funciones, corregir errores ',
                ' - Esto puede evitar la visualización del panorama en general, además de otros posibles incovenientes como la falacia del costo hundido ',
                '',
                '',
                '<strong>Costos Ocultos:</strong>',
                '<strong>- Perdida de conocimiento:</strong> El codigo heredado generalmente es un desastre, pero contiene tesoros de conocimiento ',
                ' - como la evolución de la aplicación y la reglas de negocio que casi nunca son estaticas ',
                '<strong>- Errores sutiles y contexto:</strong> Errores que fueron corregidos, pueden volver a surgir si no se revisan correctamente ',
                '<strong>- Contexto Historico:</strong> Suele perderse el porque de las decisiones peculiares, por lo que la reescritura no acertara en estos casos ',
                '<strong>- Aumento de los tiempos:</strong> Las nuevas soluciones no siempre son mejores, agregan complejidad e incluso nuevos errores  ',
                '<strong>- Entregas retrasadas:</strong> Un alcance inicial de <em>dias</em> puede extenderse a meses o encontrar demasidos inconvenientes ',
                '<strong>- Deuda tecnica:</strong> Desarrolladores nuevos o inexpertos, pueden incorporar malas practicas o patrones de manera inconsistente ',
                '',
                '',
                '<strong>Cuando esta justificada ?</strong>',
                '<strong>- Bases de codigo fragiles e inmantenibles:</strong> Debido a cosas como el corregir errores o agregar funciones suele terminar ',
                ' - en errores y problemas de manera regular, o demoran demasiado, la reescritura es una opción más que viable ',
                '<strong>- Cambios importantes:</strong> Actualizaciones importantes como una transición a microservicios o la nube ',
                '<strong>- Problemas criticos de Seguridad o Rendimiento:</strong> En caso de una gran cantidad, o incapacidad para manejar el trafico ',
            ]),
        new Item(Keys.REFACTORING_MODERNIZATION_LEGACY,
            [
                '- Modernizar un sistema es una tarea dificil y larga, tambien suele tener un porcentaje alto de fracaso y soluciones a medias ',
                '- Las organizaciones suelen caer en un ciclo de reemplazos tecnologicos a medias, por lo que es importante reconocer los patrones y romper este ciclo ',
                '',
                '<strong>Romper el ciclo:</strong> Las migraciones no son solo programas de reemplazo de tecnologia, las organizaciones deben seguir satisfaciendo ',
                ' - las necesidades del negocio a la par de reemplazar tecnologia obsoleta, todo eso sin perder competitividad ',
                '',
                '<strong>Reducir los costos:</strong> Un punto de inflexión importante es cuando los cambios empresariales empiezan costar mucho más que los ',
                ' - beneficios previstos, ya sea por costos de oportunidad, implementación, infraestructura, que no consiguen el retorno de la inversión esperado ',
                '',
                '<strong>Mejorar los procesos del negocio:</strong> Estos suelen evolucionar junto a los sistemas heredados, los procesos se acoplan estrechamente ',
                ' - a la forma como funciona el sistema, sus restricciones, errores y a menudo soluciones alternativas ',
                '',
                '<strong>Tecnologias más nuevas:</strong> La adopción de nuevas tecnologias no deberia ser la razón para modernizar la tecnologia existente ',
                '',
                '<strong>Dividir y conquistar:</strong> Esto puede parecer una tarea abrumadora y aunque solo se centre en los procesos y flujos más importantes al inicio ',
                ' - puede verse empantanado por detalles, que terminemos concentradonos en un arbol y no en el bosque, para eso existen herramientas como <em>EventStorming</em> ',
                '',
                '<strong>Entregas exitosas e incrementales:</strong> Esto se suele lograr con metodologias agiles y arquitecturas basadas en microservicios, ',
                ' - el desafio de este aspecto va más alla de lo convencional, es encontrar estrategias para la transición, coexistencia y en ultima instancia, ',
                ' - la sustitución de elementos de una gran solución existente ',
                '&bull; Lanzamientos Canary   &bull; Intercepción de eventos     &bull; Desviar el flujo',
                '&bull; Lanzamientos Oscuros  &bull; Arquitectura de transición  &bull; Detener el mundo',
                '',
                '<strong>Cambiar la organización:</strong> Migrar no solo implica un cambio tecnologico, tambien se necesitan cambios en la organización y su funcionamiento interno ',
                ' - y de acuerdo a la <em>Ley de Conway</em> la arquitectura tecnologica debe facilitarlo, una forma seria reorganizandolo mediante la <em>Maniobra Inversa de Conway</em> ',
                '',
                '<strong>Transición al nuevo servicio:</strong> Una vez se tengan todas la piezas en su lugar, y esten correctamente integradas, ',
                ' - es tiempo de descontinuar el componenente especifico, esto se debe realizar de forma continua con el cliente ',
                '',
                '<strong>Limitaciones heredadas y mitigación:</strong> La complejidad y los requisitos de integración aveces suelen ocultarse o simplificarse, ',
                ' - por lo que los errores o inconsistencias pueden suceder, esta arquitectura de transición debe gestionar los riesgos y posibilitar su solución ',
            ])
    ];

export const SEGURIDAD =
    [
        new Item(Keys.SECURITY_FIREWALL,
            [
                '- Tiene la función de denegar ó permitir el acceso a nuestra red, tanto entradas como salidas ',
                '- El trafico debe cumplir con una serie de reglas previamente definidas para su libre circulación ',
                '- Son fundamentales para proteger las redes de accesos no autorizados, actividades dañinas y posibles amenazas ',
                '- Se puede implementar por medio de Hardware, Software o su combinación ',
                '',
                '<strong>Algunas de sus funciones:</strong>',
                '- Bloquear accesos no permitidos                    - Supervisar el trafico interno                 ',
                '- Evitar accesos no autorizados, dentro de la red   - Advertir de posibles accesos malintencionados ',
                '- Posibilidad de bloquear aplicaciones peligrosas   - Filtrado de URLs                              ',
                '',
                '<strong>Tipos:</strong>',
                '<strong>- Filtrado:</strong> Analizan cada paquete que los atraviesa y filtra segun parametros como origen, destino, IP, puertos ',
                '<strong>- Proxy:</strong> Funciona como gateway de una red a otra para una aplicación especifica',
                '<strong>- Inspección activa:</strong> Permite bloquear el trafico en función del estado, puerto y el protocolo y monitorea la actividad',
                ' - desde la apertura hasta el cierre de una conexión, para decidir si aplicar o no en base a las condiciones de filtrado',
                '<strong>- Administración Unificada de Amenazas(UTM):</strong> Suele combinar de manera flexible las funciones de un firewall de ',
                ' - inspección activa, con prevención de instrucciones y antivirus, estos se centran en la simplicidad y facilidad de uso',
                '<strong>- De proxima generación(NGFW):</strong> Es la evolución de la inspección activa y del filtrado de paquetes, ya que tambien ',
                ' - pueden proteger la capa de aplicación y malwares avanzados, usando más criterios como las URLs y su geolocalización y reputación ',
                '<strong>- NFGW centrado en amenazas:</strong> Incluye las funcionalidades de un <em>NFGW</em> tradicional además de identificar cuales ',
                ' - son los activos que corren mayor riesgo, reconociendo el contexto completo ',
                '<strong>- Impulsados por IA:</strong> Usan el aprendizaje automatico para mejorar la protección ante las amenazas y la seguridad de la red ',
                ' - llendo más alla de las reglas tradicionales reconociendo patrones en base al trafico real '
            ]),
        new Item(Keys.SECURITY_PROTOCOLOS_SEGURITY,
            [
                '<strong>SSL</strong> capa de sockets seguros ',
                '- Es una tecnologia para mantener segura una conexión de internet ',
                '- Esto protege toda la información privada que se envia entre 2 sistemas, (cliente-servidor)',
                '',
                '<strong>TSL</strong> una versión más actual y segura de SSL ',
                '- La principal difirencia es el algoritmo de cifrado ',
                '',
                '<strong>HTTPS</strong> Hyper Text Transfer Protocol Secure o protocolo seguro de transferencia de hipertexto ',
                '- Basicamente indica si una conexion es segura, por medio de un certificado de TSL ó SSL ',
            ]),
        new Item(Keys.SECURITY_PROXY,
            [
                '<strong>Proxy</strong>',
                '- Son un puente entre el origen y el destino de una petición ',
                '- Controlan el acceso de una red local determinado que usuarios o direcciones IP pueden acceder a internet ',
                '- Filtrar el contenido y bloquear el acceso a sitios especificos o categorias enteras, segun las politicas de la empresa ',
                '- Almacenar en cache las paginas que hayan sido accesadas previamente, en especial si son populares o necesarias ',
                '',
                '<strong>Proxy Inverso:</strong>',
                '- Es el caso contrario, donde desde internet cualquiera intenta a acceder a un recurso que esta dentro de una red ',
                '- Pueden ser usados como balanceadores de carga, ya que no solo filtran todo el contenido de entrada, si no que saben como redirigirlo ',
                '- Cache, en este caso contenido estatico que es comumente accesado desde internet y suele cambiar poco ',
                '',
                '<strong>VPN:</strong>',
                '- Aunque funcione de manera similar, creando un puente entre un destino y un origen, cubren un rango de necesidades diferentes',
                '- Encriptan el trafico para que sea más seguro, algo que no hacen los proxis ',
                '- Funcionan a nivel de Sistema Operativo y no de aplicación ',
                '- Aunque existen muchas VPN y son más seguras generalmente, hay que tener cuidado con aquellas <em>gratuitas</em> ya que ',
                ' - se han dado casos donde roban datos ó se usan para cometer delitos como fraudes y suplantaciones '
            ]),
        new Item('ciberSeguridad',
            [
                '- Es la practica de defender toda la infraestructura fisica y logica necesaria para nuestra negocio ',
                '- Aplica desde diferentes ramas de negocios, hasta los dispositivos moviles ',
                '',
                '<strong>Categorias comunes</strong>',
                '<strong>- De red:</strong> Consiste en proteger una red informatica de ataques dirigidos o malware oportunista ',
                '<strong>- De aplicaciones:</strong> Se enfoca en mantener el software libres de amenazas o vulnerabilidades ',
                '<strong>- De la información:</strong> Protege la integridad y la privacidad de los datos ',
                '<strong>- Operativa:</strong> Incluye los procesos y decisiones de que recursos son accesibles y a quienes ',
                '<strong>- Recuperación ante desastres:</strong> Ya sea un evento natural o un incidente de ciberseguridad, ',
                ' - la empresa ha de tener planes de recuperación, para garantizar la continuidad del negocio ',
                '<strong> - Usuarios:</strong> El eslabon más debil de la cadena casi siempre han de ser los usuarios, estos pueden ser atacados de diversas maneras',
                '',
                '<strong>Tipos de ciberamenazas</strong>',
                '<strong>- Delito cibernetico:</strong> Agentes individuales o grupos que atacan sistemas para obtener beneficios financieros o causar interrupciones en sistemas criticos ',
                '<strong>- Ciberataques:</strong> Recopilan información para exponer y dañar organizaciones ',
                '<strong>- Ciberterrorismo:</strong> Debilitar o destruir sistemas electronicos para causar panico o terror ',
                '',
                '<strong>Metodos usados</strong>',
                '<strong>- Malware:</strong> Software malicioso creado para interrumpir o dañar los equipos de los usuarios, ',
                ' - suelen ser propagados mediante archivos infectados, ya sean descargas o correos electronicos ',
                '<strong>- Virus:</strong> Programa capaz de reproducirse y extenderse por todo un sistema ',
                '<strong>- Troyanos:</strong> Es un malware que se disfraza de software legitimo para recopilar datos de los usuarios ',
                '<strong>- Spyware:</strong> Registra todas las operaciones de los usuarios para robar información personal y sensible ',
                '<strong>- Ransomware:</strong> Bloquea los archivos y datos del usuario hasta que no se pague un rescate ',
                '<strong>- Adware:</strong> Software publicitario que puede difundir malware ',
                '<strong>- Botnets:</strong> Redes de equipos infectadas y que son usadas por los cibercriminales sin autorizacion previa ',
                '',
                '<strong>Ataques</strong>',
                '<strong>- Inyección de SQL:</strong> Se puede usar para robar datos o tomar el control de bases de datos, por medio de instrucciones que la base de datos ejecutara',
                '<strong>- Phishing:</strong> Son correos electronicos que aparentan ser legitimos, pero solo buscan robar información personal, entregada por el mismo usuario',
                '<strong>- Man-in-the-middle:</strong> Es la interceptación de comunicaciones entre 2 dispositivos, por ejemplo una red publica y un dispositivo conectado a esta',
                '<strong>- Ataque de denegación de servicio(DoS):</strong>',
                ' - se impide que un sistema pueda satisfacer a sus usuarios al sobrecargar e inutilizar los servidores mediante inmensas cantidades de trafico',
                '',
                '<strong>Protecciones:</strong>',
                '- Mantenga actualizado su sistema operativo ',
                '- Use software antivirus de su preferencia ',
                '- Utilizar contraseñas seguras y cambiarlas con periocidad ',
                '- No abrir archivos adjuntos de fuentes desconocidas ',
                '- No hacer clic en los vinculos de remitentes desconocidos ',
                '- Evitar el uso de redes wifi publicas',
            ]),
        new Item('cia',
            [
                '- Esta triada es tan fundamental para la seguridad, a tal punto que cada filtración de datos se produce, es por la violación de alguno de estos principios ',
                '- Los profesionales y las organizaciones evaluan las amenazas y vulnerabilidades basandose en el impacto, ',
                ' - que pueda causar en alguna de estas caracteristicas, para implementar planes y soluciones que minimicen el riesgo ',
                '',
                '<strong>Confidencialidad:</strong> Esfuerzo que emplean las organizaciones para mantener sus datos privados, o en su defecto restringidos ',
                '- Una de las maneras para lograr esto es controlar el acceso a las personas ',
                '- Realizar capacitaciones para dar a entender la importancia de los datos ',
                '- Encriptación y/o autenticación para acceder a estos ',
                '',
                '<strong>Integridad:</strong> Hace referencia a la garantia de que los datos no hayan sido manipulados ni alterados ',
                '- Encriptación de los datos por medio de funciones hash ',
                '- Firmas digitales y certificados digitales de autoria ',
                '- Control de versiones y control de acceso ',
                '',
                '<strong>Accesibilidad:</strong> Los datos no tienen valor si no se pueden usar o consultar cuando sean necesarios ',
                '- Para garantizar el acceso a estos se puede tener servidores en redundancia ',
                '- Parches y actualizaciones regulares al software ',
                '',
                '- No todas las organizaciones necesitan las mismas caracteristicas, pero si todas deben cumplir las 3 en cierto grado ',
                '- Darle prioridad a alguna sobre las otras no significa su descuido, solo es una elección consciente de cual es más importante para el negocio',
            ]),
        new Item('noRepudio',
            [
                '- Es un principio fundamental en lo que concierne a la seguridad informatica ',
                '- Garantiza que todo mensaje haya sido originado por el emisor y que este no haya sido suplantado ',
                '- Igual que todo mensaje debe ser recibido por el receptor, y por nadie más ',
                '- Es la capacidad para demostrar la paticipación de todas las partes involucradas ',
                '',
                '- Para garantizar esto, se pueden seguir 2 mecanismos basicos para este fin: ',
                '<strong>- Autenticación:</strong> Proceso o mecanimos para identificar a un usuario ',
                '<strong>- Autorización: </strong> Permite verificar la identidad del usuario y su permisos de acceso al sistema ',
                '',
                '<strong>Tipos de repudio:</strong>',
                '<strong>- En origen:</strong>  El remitente no puede negar haberlo enviado ya que hay evidencia por parte del destinatario de haberlo enviado ',
                '<strong>- En destino:</strong> Se avala que se recibio el mensaje y no se podra rebatir ya que el remitente tiene evidencia de haberlo recibido ',
                '',
                '<strong>Firmas electronicas:</strong> Es una manera de afirmar que cada persona es unica y que tiene una manera de identificarse, ',
                ' - esta solo debe ser conocida por la persona y su organización, tanto la clave publica como la privada ',
                '',
                '<strong>Esto se puede dar de diversas maneras:</strong> ',
                '<strong>- Simple:</strong> Solo se rechaza o acepta el contenido del documento ',
                '<strong>- Avanzada OTP:</strong> Se recibe un codigo mediante un canal diferente al usado, con un codigo para ser verificado ',
                '<strong>- Biometria:</strong> Es necesario una firma fisica o una identificación tangible de que es quien se dice ser ',
                '<strong>- Certificado digital:</strong> Documento cifrado mediante un algoritmo hash que cuenta con una llave publica y una privada ',
                ' - este hash puede ser cifrado y descifrado por ambas partes y debe ser igual para ambos, garantizando la integridad del mensaje ',
                ' - previo a esta operación ambas partes deben haber compartido una clave publica y cada quien tener su clave privada ',
            ]),
        new Item('matrizDeRiesgo',
            [
                '- Permite identificar de manera rapida y visual las probabilidades de accidentes, riesgos y peligros ',
                '- Esto ayuda al proceso de tomas de decisiones y saber si estan controlados, si no, saber cuales se deben priorizar ',
                '',
                '<strong>Probabilidad:</strong> ',
                ' - Alta  -> [50% , 100%] Posibilidades de que ocurra a menudo en circunstancias similares ',
                ' - Media -> [10% , 50%)  No pasa con frecuencia ',
                ' - Baja  -> [1% , 10%)   Podria suceder, dandose el caso ',
                '<strong>Impacto:</strong>',
                ' - Grave    -> Consecuencias negativas en una o varias areas, impidiendo su funcionamiento o generando fallos ',
                ' - Moderado -> Podria crear problemas que tengan consecuenias negativas para ciertos procesos o personas ',
                ' - Leve     -> Si se llegara a dar su impacto seria bajo en la organización ',
                '',
                '  P\I    Grave    Moderado  Leve ',
                '  Alta   Critico                 ',
                '  media           Moderado       ',
                '  Bajo                      Leve ',
            ]),
        new Item(Keys.SECURITY_CONDICION_CARRERA,
            [
                '- Sucede cuando varios subprocesos intentan acceder a un recurso compartido, de manera simultanea ',
                '- Esto es indeseable ya que puede alterar los datos, o dañar la secuencia de las operaciones provocando errores ',
                '- A nivel de codigo pueden suceder algunos de los siguientes escenarios',
                '',
                ' - Bloqueo del ordenador            - Errores al leer o escribir datos',
                ' - Operaciones ilegales             - Apagado del programa',
                ' - Errores logicos en la ejecución  - Vulnerabilidades de seguridad ',
                '',
                '- Estos errores se pueden solventar al manejar los hilos y subprocesos de manera correcta, ',
                ' - más no se pueden erradicar, debido a la naturaleza multihilos y procesos de la informatica ',
            ]),
        new Item('honeypot',
            [
                '- Son una forma de defensa para vectores de ataque, phishing, exploits y malware, funcionando como un sebo para los atacantes, ',
                ' - resguardando la información valiosa, al desviar el trafico de los atacantes hacia esfuerzos inutiles ',
                '- No son una medida infalible ya que si el atacante se da cuenta lo evitara, ',
                ' - por lo que se deben tener más medidas de seguridad internas, externas y perimetrales ',
                '- Tambien es necesario tener en cuenta que pueden ser un arma de doble filo al servir como distracción para un ataque, ',
                ' - o como punto de acceso hacia nuestro sistema; aun asi siguen siendo una gran opción para reforzar nuestra seguridad ',
            ]),
        new Item('zeroDayExploit',
            [
                '- Son vulnerabilidades de software recien descubiertas sin medidas para solucionarlas ',
                '- Estos ataques suceden antes o recien sean descubiertas las vulnerabilidades por lo que se han tenido "cero dias" para arreglarlo ',
                '- Debido a que no se tienen registros de estos problemas, es comun que los ataques tengan exito hasta que el sistema sea parchado ',
                '',
                '<strong>Esta tactica es usada generalmente por:</strong>',
                '- Hacktivistas: Quienes visibilizan los ataques para llamar la atención por una causa ',
                '- Cibercriminales: Hackers cuyo objetivo es tener ganancias o destruir sistemas ',
                '- Espionaje corporativo: Hackers de empresas atacando a la competencia ',
                '- Guerra informatica: Paises o entidades politicas que atacan la infraestructura cibernetica de otro pais ',
                '',
                '<strong>Blancos comunes:</strong>',
                '- Sistemas operativos                               - Aplicaciones de oficina',
                '- Navegadores web                                   - Codigo abierto         ',
                '- Hardware, firmware e Internet de las cosas (IoT)                           ',
                '',
                '<strong>Identificar ataques del dia 0:</strong>',
                '- Debido a su mutabilidad y a su desconocimiento no hay medidas infalibles para detectarlos',
                '- Se recomienda usar bases de datos de malware existentes ya que estas se actualizan con relativa rapidez ',
                '- Puede ser util examinar la interacción de los archivos entrantes con el sistema en vez de su codigo y detectar si su comportamiento es malicioso ',
                '- Aprendizaje automatico basandose en datos y situaciones previas del sistema ',
                '',
                '<strong>Formas de protección:</strong>',
                '- Actualizaciones constantes del software y de los sistemas operativos ',
                '- Evitar usar aplicaciones de terceros que no sean necesarias ',
                '- Educación basica para los usuarios y asi evitar errores comunes ',
                '- Usar software antivirus ',
            ]),
        new Item('pentest',
            [
                '- Es una prueba de seguridad que simula un ciber ataque real dentro de un entorno controlado, para identificar brechas y problemas de seguridad ',
                '',
                '<strong>- Algunos ataques comunes pueden ser:</strong>',
                ' - Instalación de malware, virus, troyanos, keylogger, ransomware    - Fallos de configuración ',
                ' - Busqueda y explotación de puertas traseras                        - Ingenieria social y recopilación de datos ',
                '',
                '- Estos tipos de testing son una forma hacking etico por lo que estan amparados bajo la ley y pueden ser contractuales ',
                '<strong>Este consta de 3 fases:</strong>',
                '- Reconocimiento de datos para identificar posibles puertos de acceso ',
                '- Analisis de vulnerabilidades y sus posibles formas de explotarlas ',
                '- Explotación, se comprueba que no se puedan hacer ataques de los siguientes tipos: ',
                '  - Inyección de codigo                    - Inclusion de ficheros',
                '  - Evasión de autenticación               - Carencias en el control de autorización ',
                '  - Ejecución de comandos en el servidor   - Ataques de tipo CSRF',
                '  - Manejo de errores                      - Gestion y/o secuestro de sesiones ',
                '  - Ataques de DDOS                        - Fugas de información ',
                '',
                '- Si se llega a encontrar alguna de estos errores, se redactara un informe con las vulnerabilidades encontradas, ',
                ' - evidencias, daños causados ó información robada por el atacante, y finalmente medidas correctivas o de mitigación ',
                '',
                '- Estos tests tambien pueden tener cierto grado de conocimiento de la aplicación ',
                ' - Caja negra:  No se tiene conocimiento alguno del sistema a testear ',
                ' - Caja Gris:   Se tiene información limitada como tecnologias, dominios, cuentas legitimas y otros datos que pueden ser utiles ',
                ' - Caja Blanca: No se oculta ningun tipo de información, todos los detalles son previamente conocidos ',
            ]),
        new Item('owaspTop',
            [
                '<strong>- Open Web Security Application Security:</strong> Es una colección de recursos que incluye una guia de desarrollo para evitar problemas de seguridad ',
                ' - Regularmente sacan un top 10 con los problemas más comunes y peligrosos a nivel general de las aplicaciones ',
                '',
                '<strong> 1 Broken access control:</strong> Fallo o intrusion de los permisos de acción de los usuarios, exponiendo o perdiendo información sensible ',
                '<strong> 2 Cryptografic failures:</strong> Fallos en la ocultación de la información debido a falencias en la encriptación ',
                '<strong> 3 Injection:</strong> La información no es filtrada ni valida previamente por lo que se pueden inyectar scripts de SQL y NoSQL maliciosos ',
                '<strong> 4 Insecure Design:</strong> Fallas en los diseños iniciales que no contemplan validaciones de seguridad ',
                '<strong> 5 Security Misconfiguration:</strong> Privilegios y configuraciones laxas o innecesarias ',
                '<strong> 6 Vulnerable and Outdated Components:</strong> Desconocimiento de las versiones manejadas en los diferentes componentes de la aplicación ',
                '<strong> 7 Identification and Authentication Failures:</strong> Contraseñas debiles o conocidas por los atacantes son usadas en la aplicación ',
                '<strong> 8 Software and Data Integrity Failures:</strong> Uso de fuentes desconocidas o librerias de terceros de poca confianza ',
                '<strong> 9 Security Logging and Monitoring Failures:</strong> El registro y monitoreo de la seguridad puede ser insuficiente teniendo lugares sin supervisión ',
                '<strong> 10 Server-Side Request Forgery:</strong> Esto ocurre cuando se obtiene un recurso de una url sin validar la confiabilidad de esta ',
                '',
                '- Estos son los incidentes de seguridad para el top del 2021',
            ]),
        new Item('stride',
            [
                '- Modelado de amenazas, es una estrategia para identificar y eliminar posibles vulnerabilidades antes de escribir codigo ',
                '- Desarrollado en la decade del 90 por ingenieros de Microsoft, teniendo en cuenta 6 categorias: ',
                '',
                '<em>S</em><strong> Suplantacion de indentidad:</strong> Ocurre cuando un hacker se hace pasar por otra persona, asumiendo la información de esta nueva identidad ',
                ' - Esto con el fin de cometer fraude y/o robar datos personales ',
                '<em>T</em><strong> Manipulación de datos:</strong> Sucede cuando los datos son modificados sin autorización ',
                ' - Por estas y otras razones es importante tener monitorear y revisar la integridad de los datos ',
                '<em>R</em><strong> Repudio:</strong> Pasa cuando un actor desconocido realiza una operación ilegal o maliciosa en el sistema ',
                ' - Y este no cuenta con la capacidad de rastrear la actividad maliciosa ',
                '<em>I</em><strong> Divulgación de la información:</strong> Estas fugas de información sucede cuando los sitios revelan información confidencial involuntariamente ',
                ' - Esto puede afectar el flujo normal de los datos, el acceso al codigo fuente, o mensajes de error con especificaciones internas ',
                '<em>D</em><strong> Denegación de servicios:</strong> Estos impiden el correcto acceso a las aplicaciones para dejarlas fuera de servicio ',
                ' - Estos ataques son principalmente de fuerza bruta ya que se requiere una gran capacidad para lograr su objetivo ',
                '<em>E</em><strong> Elevación de privilegios:</strong> Usuarios con o sin autorización pueden acceder a posibilidades que previamente no tenian ',
                ' - Estos accesos se dan debido a modificaciones ilegales en los permisos de los usuarios o accesos ilegales a la aplicación ',
            ]),
        new Item('ciam',
            [
                '- La experiencia de los clientes es algo fundamental hoy en dia, ya no es diferenciador, es un requisito basico ',
                '- No solo eso, tiempos de crisis como la pandemia reciente han demostrado que las empresas que mejor conocen a sus clientes, estan mejor posicionadas ',
                '- Parte de esto es la Gestion de Acceso e Identidad de Cliente (CIAM)',
                '- Esto busca el equilibrio optimo entre comodidad, privacidad y seguridad para los clientes ',
                '- Además de esto tambien se tiene en vista el uso, recopilación y almacenamiento de estos datos ',
                '',
                '- Centralizar estos datos permite tomar decisiones estrategicas con mayor precisión y efectividad ',
                '- Hacer esto, se puede volver abrumador por lo que que se puede relegar a un tercero experto en este ambito (IDaaS) Identity as a Service ',
                '',
                '<strong>Beneficios:</strong>',
                '<strong>- Escalabilidad:</strong> Manejar miles o millones de usuarios, ya sea trafico normal o de temporada, es un aspecto fundamental ',
                '<strong>- Experiencia del cliente:</strong> Diferentes formas de iniciar sesión y datos que se autorecopilan son buena formas de mejorarla ',
                '<strong>- Seguridad:</strong> Nada se gana una mejor experiencia de usuario si los datos son vulnerables, por esto es importante, ',
                ' - el resguardo correcto de las credenciales y el correcto manejo de la autenticacion como de las sesiones ',
                '<strong>- Privacidad:</strong> La centralización de los datos es necesaria para cumplir con las leyes e informes de privacidad de datos, ',
                ' - estas leyes han puesto en foco la importancia del manejo de los datos, la recopilacion y su control ',
            ]),
        new Item('lateralChanel',
            [
                '- Es un exploit de seguridad con el fin de recopilar información o influir en la ejecución del programa, apuntando o midiendo el hardware ',
                '- Historicamente dificiles de hacer, si no fuera por la actualidad donde la sensibilidad y la cantidad de estos ha aumentado constantemente ',
                '- Estos son dificiles de defender y aun más de detectar, y son efectivos contra sistemas aislados la nube y hasta maquinas virtuales ',
                '',
                '<strong>Tipos conocidos:</strong>',
                '<strong>- Electromagnetismo:</strong> Se mide la radiación u ondas de radio emitidas por el dispositivo, para reconstruir las señales internas ',
                '<strong>- Acustico:</strong> Los sonidos emitidos por el dispositivo pueden reconstruir información como las pulsaciones de las teclas del usuario ',
                '<strong>- Energia:</strong> Al medir la cantidad de enercia consumida y el tiempo de utilización, se puede inferir la actividad de este ',
                '<strong>- Optico:</strong> Algo como tan simple como ver una grabación o mirar encima del hombro de alguien, pueden caer dentro de esta categoria ',
                '<strong>- Cache:</strong> El almacenamiento cache, usado para mejorar el rendimiento, puede ser usado para obtener información bloqueada ',
                '<strong>- Hardware:</strong> Atacar partes especificas de los dispositivos de maneras peculiares para generar fallos o robar datos como, ',
                ' - un ataque de martilleo de filas para dañar sectores de la RAM o un arranque en frio leyendo datos de chips enfriados bruscamente ',
            ]),
        new Item('csp',
            [
                '- Es una política de seguridad para decirle al navegador exactamente qué recursos se pueden cargar en una aplicación web ',
                '- Esta politica nace incentivada por los navegadores para evitar el Cross-Site Scripting <strong>(XSS)</strong> entre otras brechas ',
                '- Estos se agregan como headers de las peticiones y controla el acceso y la ejecución de recursos como: ',
                '',
                ' - Hojas de estilos      - Audio ',
                ' - Imagenes              - Video ',
                ' - Contenido embedido    - Fuentes',
                '',
                '- Ademas de esto tambien se pueden tener control sobre cosas como los iframe, formularios, entre otros ',
                ' - Para más detalles y especificaciones, revisa el enlace original y sus fuentes ',
            ]),
        new Item('csrf',
            [
                '- Este ataque fuerza al navegador del usuario que se este validando en cualquier sitio, como el correo o una red social, ',
                ' - enviar una petición a una aplicación web vulnerable, realizando la actividad maliciosa en nombre de la victima logueada ',
                '- Al contrario de los Cross Site Scripting (ordenes en sitios cruzados) <strong>XSS</strong> que, ',
                ' - explotan la confianza del usuario con algun sitio; el <strong>CSRF</strong> explota la confianza que el sitio web tiene con el usuario ',
                '- Prestandose para actividades ilicitas como el acceso de cuentas privadas ó acusaciones de acceso a contenido lascivo e ilegal ',
                '',
                '<strong>¿ Como funciona ?</strong>',
                '<strong>1</strong> Se debe vulnerar algun servidor e ingresar algun codigo HTML especifico; este sera llamado <em>A</em> ',
                '<strong>2</strong> La victima establece una conexión legitima con la aplicación web alojada en otro servidor, designado <em>B</em> ',
                '<strong>3</strong> La victima accede a la aplicación de <em>A</em>, donde se aloja el codigo del atacante ',
                '<strong>4</strong> El nagedor de la victima realiza una petición contra la aplicacion presente en <em>B</em> sin que este se entere ',
                '',
                '<strong>Protección</strong> ',
                '- Configurar el navegador para que no recuerde usuarios o contraseñas, usar el modo incognito es viable en estos casos ',
                '- Cerrar las sesiones, cuando no se vayan a usar más y no usar la opción de mantener/recordar la sesion ',
                '- Manejar diferentes navegadores, para diferentes acciones ',
                '- Utilizar complementos para bloquear la ejecución de scripts, para que los formularios que sean enviados por el metodo POST, ',
                ' - deban ser autorizados previamente por el usuario y no se envien automaticamente',
            ]),
        new Item('restApiAuth',
            [
                '<strong>Autenticación Basica:</strong> Implica enviar un usuario y contraseña en cada solicitud, y no necesariamente han de estar cifrados ',
                ' - Es ideal en aplicaciones simples donde la seguridad y el cifrado de los datos no es importante, o se tenga una conexión segura ',
                '',
                '<strong>Autenticación con Token:</strong> Utiliza tokens generados con <em>JWT</em> que se intercambian entre el cliente y el servidor',
                ' - Ofrece una mejora en la seguridad al evitar enviar constatemente las credenciales en cada petición, Ideal para sistemas más seguros y escalables ',
                '',
                '<strong>Autenticación OAuth:</strong> Permite el acceso a terceros a los recursos del usuario, sin revelar credencial alguna, mediante tokens de acceso ',
                ' - Ideal cuando se requiere el acceso controlado a los recursos y los usuarios se pueden obtener/manejar mediante servicios de terceros ',
                '',
                '<strong>Api Key Autenticación:</strong> Asigna claves unicas a usuarios y/o aplicaciones, un metodo simple y que carece de caracteristicas anteriores ',
                ' - Ideal para un control de acceso sencillo, en entornos poco sensibles o manejar permisos por usuarios más laxos ',
                '',
                '- Existen otros metodos, pero estos de los más populares y usados que hay '
            ]),
        new Item(Keys.SECURITY_ATTACK_ON_MODEL_OSI,
            [
                '- Acontinuación se mostraran algunos de los posibles ataques en cada una de las 7 capas del modelo OSI',
                '',
                '1 <strong>Capa Fisica            </strong> - Escucha                        - Manipulación        - Interferencia electromagnetica              ',
                '2 <strong>Capa de Enlace de Datos</strong> - Suplantacion de Macs           - Salto de Vlan       - Suplantacion de ARP                         ',
                '3 <strong>Capa de Red            </strong> - Suplantación de IP             - Ataques DDOS        - Manipulacion de tablas de rutas             ',
                '4 <strong>Capa de Transporte     </strong> - Hombre en el medio             - Inundación SYN/ACK                                                ',
                '5 <strong>Capa de Session        </strong> - Secuestro de Sessión           - Fuerza bruta        - Fijación de la Sessión                      ',
                '6 <strong>Capa de Presentación   </strong> - Inyeccion de codigo malicioso  - Ataques de formato  - Vulnerabilidades codificación/decodificación',
                '7 <strong>Capa de Aplicación     </strong> - Inyección de malware           - Ataques DDOS        - Pushing                                     ',
            ]),
        new Item(Keys.SECURITY_LEAST_PRIVILEGE,
            [
                '- Concepto de seguridad de la información, en el que un usuario recibe los minimos niveles de acceso o permisos necesarios ',
                ' - para realizar sus funciones laborales, evitando el acceso privilegiado a datos y activos de alto valor ',
                '- Esto obliga a evaluar que usuarios y que permisos son estrictamente necesarios, por parte de algun equipo, generalmente el de <em>TI</em>',
                '',
                '<strong>Beneficios:</strong>',
                '- Reduce la superficie de ciberataques, en especial aquellos que se basan en la explotación de credenciales privilegiadas',
                '- Detiene la propagación de malware, al no poder usar accesos privilegiados, quitando las posibilidades de ejecutar malware o corromper la maquina ',
                '',
                '<strong>Contras:</strong>',
                '- Puede atentar contra la productividad del usuario final, al tener una dependencia directa con <em>TI</em>',
                '',
                '<strong>Algunas practicas de implementación</strong>',
                '- Auditar todos los entornos para localizar cuentas privilegiadas, claves SSH, entornos DevOps, Nube y puntos finales para administrar ',
                '- Separar las cuentas administrativas de las cuentas normales',
                '- Cambiar las contraseñas de manera regular, y en especial si han sido vulneradas con anterioridad',
            ]),
        new Item(Keys.SECURITY_AUTHENTICATION_WAYS,
            [
                '<strong>Autentificación Basica</strong>',
                '- El usuario ingresa su usuario y contraseña',
                '- Si son correctos y validos, el cliente puede almacenar estos valores para seguir reenviandolos ',
                '- El cliente incluye un Header de <em>Authorization</em> en todas las peticiones, para que puedan ser procesadas ',
                '- Con cada petición el servidor debe validar las credenciales recibidas ó de lo contrario, se respondera un 401 <em>Unathorized</em>',
                '',
                '<strong>Autenticación Digest:</strong> Supera algunas de la deficiencias de la autenticación Basica',
                '- El usuario ingresa su usuario y contraseña',
                '- Si la validación es exitosa, ahora el cliente crea un hash en base al usuario/contraseña, para una transimision más segura ',
                '- El cliente incluye un Header de <em>Authorization</em> donde se envia el usuario y el hash generado ',
                '- Con cada petición el servidor debe validar las credenciales, junto al hash recibidos, en caso contrario se respondera un 401 <em>Unathorized</em>',
                '',
                '<strong>Cookies:</strong> El enfoque más tradicional',
                '- El usuario ingresa su usuario y contraseña',
                '- Si es valida, el servidor emite una cookie cifrada, que puede contener información adicional del cliente',
                '- El navegador almacena esta cookie, la cual sera necesaria enviar como encabezado en cada petición subsecuente ',
                '- El servidor recibe la petición del cliente y valida la firma criptografica, además de otros datos como la expiración ',
                '',
                '<strong>Session:</strong> Permiten evitar obstaculos de las Cookies, como el funcionamiento en entornos distribuidos ',
                '- El usuario ingresa su usuario y contraseña',
                '- Si es valida, el servidor emite la cookie cifrada, que además contiene un Identificador de sesión, previamente almacenado ',
                '- El navegador almacena esta cookie, la cual sera necesaria enviar como encabezado en cada petición subsecuente ',
                '- El servidor recibe la solicitud, y además de validar la firma de la cookie, tambien recupera la sessión correspondiente ',
                '',
                '<strong>Token:</strong> Es la misma que la de la sesión, solo que sin cookies y en vez del ID de la sesión, se tiene una cadena aleatoria, menos predecible ',
                '- El usuario ingresa su usuario y contraseña',
                '- Si es valida, se crea la sesión y se emite una cadena aleatoria directamente relacionada, al cual se le llama Token',
                '- El navegador almacena este Token, la cual sera necesaria enviar como encabezado en cada petición subsecuente ',
                '- El servidor recibe la solicitud, y recupera la sessión correspondiente al token recibido, para conceder el acceso ',
                '',
                '<strong>JWT:</strong> Json Web Token es un token criptograficamente seguro y autonomo ',
                '- El usuario ingresa su usuario y contraseña',
                '- Si la información es valida, se emite un Token JWT, el cual no es necesario que sea almacenado ',
                '- El navegador almacena este token, la cual sera necesaria enviar como encabezado en cada petición subsecuente, más la palabra inicial <em>Bearer</em>',
                '- El servidor recibe la petición del cliente y valida la firma del token, además de otros datos en la carga util que pueda tener ',
                '',
                '<strong>API Key:</strong> Generalmente no es usada para la autenticación de usuarios, se usa para comunicaciones Machine-To-Machine(M2M) o Integraciones entres APIs',
                '- Se generan las claves de antemano ',
                '- El cliente incluye envia como encabezado <em>Authorization</em> en cada petición subsecuente, más la palabra inicial <em>ApiKey</em>',
                '- Cuando el servidor recibe la solicitud, valida el ApiKey si es legitima y esta asociada a una aplicación valida ',
            ]),
        new Item(Keys.SECURITY_RBAC_ABAC,
            [
                '- El control de acceso es un marco de seguridad que determina quien tiene acceso a que recursos a traves de reglas de autenticación y autorización ',
                '- Los controles de acceso verifican información como credenciales, inicio de sesión, información del usuario, PIN, tokens, biometria, etc... ',
                '',
                '<strong>RBAC - Control de Acceso Basado en Roles:</strong> Autoriza y restringe el acceso en función de sus roles dentro del sistema ',
                '- Esto permite que los usuarios acceder a los datos y aplicaciones necesarias para cumplir con los requisitos de su trabajo ',
                '- Minimiza el riesgo de que los empleados accedan a información confidencial o que realizen tareas sin autorización ',
                '- Esta implementación requiere la colaboración entre departamentos, para determinar los roles y sus acciones ',
                '- La asignación de roles se puede convertir en un desafio, ya que siempre se debe tener en cuenta el principio de menor privilegio ',
                '',
                '<strong>ABAC - Control de Acceso Basado en Atributos:</strong> Estrategia para tomar decisiones en tiempo de ejecución sobre que caracteristicas ',
                ' - o datos puede acceder un usuario en función de politicas y atributos del usuario ',
                '- Datos como nombre, organización, puesto, autorizaciones, propiedades del recurso, tipos de archivos, ubicación, fecha, etc... ',
                '- Al evaluar las propiedades del recurso y del sujeto, permiten una mayor flexibilidad en la aplicación de las politicas ',
                '- Puede sustituir a <strong>RBAC</strong> o complementarlo segun el caso, haciendo que el control sea más granular y flexible ',
                '- Su implementación es más compleja debido a que se deben tener más factores en cuenta a la hora de definir las politicas ',
                '',
                '<strong>PBAC - Control de Acceso Basado en Politicas:</strong> Es bastante similar a <strong>ABAC</strong> pero requiere más recursos de TI ',
                '- Debido a que ya no solo se tienen en cuenta los roles y las politicas, se agregan reglas programables ',
                '- Esto aunque lo hace más adaptable y observable requiere un mayor grado de administración y control ',
                '',
                '<strong>ACL - Lista de Control de Acceso:</strong> Controlan o restringen el flujo de trafico a traves de un entorno digital ',
                '- Se puede aplicar a sistemas de archivos o las redes empresariales ',
                '- Asi se usan en conjunto con las <strong>VPN</strong> para gestionar todo el trafico de red ',
                '',
                '<strong>DAC - Control de Acceso Discrecional:</strong> Cada usuario controla el acceso a sus propios datos ',
                '- Esto descentraliza las decisiones de seguridad y lo dejan a conveniencia de los usuarios ',
                '- Para organizaciones grandes y complejas este enfoque no es recomendable, ya que no hay un control unificado ',
            ]),
        new Item(Keys.SECURITY_CVE,
            [
                '- Son un conjunto de amenazas de seguridad que se incluyen en un sistema de referencia que describe los riesgos conocidos publicamente ',
                '- Es una iniciativa entre privados, fundaciones sin animo de lucro y la Division Nacional de Ciberseguridad de Estados Unidos ',
                '- Esta identificación y disposición se hace con el fin de ayudar a las organizaciones para mejorar antes multiples amenazas de software y firmware ',
                '',
                '<strong>Vulnerabilidad:</strong> Se define como un error dentro del codigo que permite a un atacante obtener un acceso directo no autorizado ',
                '- Con el fin de propagar malware y robar información confidencial con permisos de administrador o como superusuarios ',
                '',
                '<strong>Exposición:</strong> Son errores de codigo o de configuración que permiten al atacante obtener acceso indirecto al sistema o las redes ',
                '- Esto permite acechar las redes informaticas y la recopilación de datos sensibles, credenciales o datos de los usuarios ',
                '',
                '- Cada CVE solo tiene el identificador estandar, riesgo, indicador del estado, una breve descripción además de otros detalles ',
                '- No se incluye la información tecnica, correciones o el impacto de la vulnerabilidad, estos detalles se encuentran en otras Bases de datos aliadas ',
                '- Los CVE no se suelen revelar tan pronto como se identifican, se mantienen en secreto hasta que el proveedor haya desarrollado y probado la correción ',
                '- La gravedad de la vulnerabilidad se suele expresar mediante el <em>Sistema común de puntuación de vulnerabilidades</em>(CVSS) que la asigna desde 0.0 hasta 10.0 ',
            ])
    ];

export const CD_CI_INFRAESTRUCTURE =
    [
        new Item(Keys.CD_CI_CD_CI,
            [
                '- Integración continua, Entrega continua y Despliegue continuo, nacen para entregar un mejor codigo, de manera más rapida y con menos errores ',
                '- Los errores se pueden encontrar de manera previa a estar en producción, reduciendo significativamente sus costos ',
                '',
                '<strong>Integración Continua:</strong> Mejora la afluencia a la rama principal del codigo, evitando problemas con ramas aisladas ',
                '- Los conflictos de codigo se reducen ó en su defecto la complejidad para resolverlos ',
                '',
                '<strong>Entrega Continua:</strong> Permite que los cambios aprobados sean implementados con el menor numero de complicaciones posibles ',
                '- Para que todo esto sea posible todas las pruebas deben estar automatizadas ',
                '- Las pruebas deben tener la mayor cobertura posible, o en su defecto un minimo ',
                '- El uso de buenas practicas es fundamental, ya que esto evitara posibles errores ',
                '',
                '<strong>Despliegue continuo:</strong> Es la automatización de las entregas con la menor interferencia humana posible ',
                '- Todo cambio activa diferentes acciones, pueden ir desde acciones como correr las pruebas, hasta desplegar en un ambiente especifico '
            ]),
        new Item(Keys.CD_CI_DEV_OPS,
            [
                '- Es una metodologia para crear software de una manera más eficiente, con mayor calidad y menos problemas en producción ',
                '- Este modelo no consiste en aumentar las responsabilidades del desarrollador, todo lo contrario ',
                '- Esta integración entre el codigo desarrollado y su respectivo despliegue(releases) debe ser transparente y colaborativa ',
                '- Ya que la meta es que cada despliegue sea automatico, reduciendo el tiempo de corrección de errores y aumentando la productividad ',
                '- La automatización de tareas como calidad, compilación, pruebas, etc.. permite que el codigo en desarrollo fluya rapidamente a producción ',
                '',
                '- Aunque tecnicamente no es un perfil, si no un conjunto de practicas y conocimientos que se dan en el equipo, las más comunes son: ',
                '<strong>- Desarrollo:</strong> No debe ser un experto, pero si tener una visión general o tener conocimientos basicos es de gran ayuda ',
                '<strong>- Quality Assurance:</strong> Entender los diferentes tipos de tests que se pueden hacer y cuales son necesarios de acuerdo a la etapa del software ',
                '<strong>- Seguridad:</strong> Una gran olvidada y por lo cual se pagan las consecuencias, dependencias vulnerables e infraestructura mal configurada ',
                '<strong>- Administración de sistemas:</strong> Poder encargarse de toda la instalación, configuración, mantenimiento, supervisión de la infraestructura no es tarea facil ',
            ]),
        new Item(Keys.CD_CI_IAS_CODE,
            [
                '- Permite gestionar y preparar la infraestructura a traves del codigo, en vez de usar procesos manuales',
                '- Se realiza mediante archivos de configuración, que contienen las especificaciones necesarias ',
                '- Garantizando un entorno que siempre va a ser congruente y evitar cambios abruptos sin documentación ',
                '- Preparar la infraestructura generalmente habia sido un proceso manual y desganstante, pero en la actualidad ',
                ' - su gestión se ha traslado a enfoques como la virtualización, los contenedores o la Nube; logrando una mayor uniformidad y reduciendo errores ',
                '',
                '<strong>Enfoques:</strong>',
                '<Strong>- Declarativo:</strong> Se define el estado de los sistemas, incluyendo los recursos que necesita y las prpiedades del sistema ',
                ' - Delegando la responsabilidad del montaje, cofiguración y desmontaje a la herramienta que se haya escogido ',
                '<Strong>- Imperativo:</strong> Aca se definen los comandos y el orden en que se deben realizar, para lograr la configuración deseada ',
                ' - Muchas herramientas usan el primer enfoque, ya que cada cambio es resuelto por la herramienta y no es necesario intervenir ',
                '',
                '<strong>Ventajas:</strong>                                                 <strong>Herramientas:</strong>',
                '- Reducción de costos                                      - Chef          - AWS CloudFormation',
                '- Mejora la velocidad de implementación                    - Puppet        - Salstack',
                '- Reduce la cantidad de errores                            - Terraform     - Red Hat Ansible Automation Platform ',
                '- Uniformidad en todos los ambientes                       ',
                '- La configuración se vuelve un proceso estandar           ',
                '',
                '<strong>Importancia en DevOps:</strong>',
                '- Libera a los desarrolladores de tener que preparar toda la infraestructura necesaria ',
                '- Los administradores de sistema no tienen que realizar procedimientos manuales repetitivos ',
                '- Permite coordinar los equipos al utilizar una misma descripción para el mismo proceso ',
            ]),
        new Item(Keys.CD_CI_STATELESS_STATEFUL,
            [
                '- Es una forma de construir servicios y aplicaciones, en especial ya que muchas arquitecturas estan orientadas a los microservicios ',
                '- Una de las principales diferencias es que una depende de que alguien almacene el estado ó información especifica para el funcionamiento ',
                '',
                '<strong>Staless</strong>',
                '- Realizan una unica funcion, como en las arquitecturas Serverless que solo responden a eventos de forma aislada ',
                '- Las peticiones o solicitudes que se realizen, son completamente independientes entre si, y no se ven alteradas directamente por otras ',
                '- Los servicios pueden escalarse entre servidores, ya que todos estan en capacidad de realizar la misma operación al no compartir un estado ',
                '- Cualquier instancia debe estar en capacidad de realizar cualquier tarea, aumentando la resiliencia y la elasticidad ',
                '- Generalmente ligadas a aplicaciones que usan microservicios o contenedores ',
                '',
                '<strong>Stateful</strong>',
                '- Suelen ser aplicaciones para almacenar datos y procesar grandes cantidades de datos, como lo son las BD',
                '- El servidor mantiene el estado de peticiones previas, el cual es usado para procesar y validar las proximas peticiones ',
                '- La administración de los estados es fundamental, por eso se suelen guardar datos como sesiones durante las peticiones a un mismo servidor ',
                '- Si hay multiples servidores, estos deben hallar la manera de compartir el estado entre si ',
                '- Generalmente usada para la Orquestación de servicios y el manejo de cargas, como redes y almacenamiento ',
                '',
                '<strong>                       Stateless                                                   Stateful',
                'Pueden existir diferentes servidores de manera idempotente     Un mismo servidor procesa todas las peticiones ',
                '',
                'No se mantienen o almacenan peticiones previas                 Se almacena información de peticiones previas ',
                '',
                'Las peticiónes que se realizen son independientes entre si     Los resultados se pueden ver afectados por peticiones previas/posteriores ',
                '',
                'La seguridad es independiente del estado y del servidor        Se basa en protocolos de internet que requieren ',
            ]),
        new Item(Keys.CD_CI_DEPLOYMENT_PATTERNS,
            [
                '- Son metodos automatizados para presentar nuevas funciones de aplicaciones a los usuarios, reduciendo el tiempo de inactividad al maximo posible ',
                '- Esto depende de la forma en que se realize, y cuantas etapas previas se hayan realizado ',
                '',
                '<strong>Canary Release</strong>',
                '- Se lanza una nueva versión solamente para un grupo selecto de usuarios, voluntarios, antes de afectar a todos los consumidores ',
                '- Asi se supervisa y si hay problemas se resuelven, antes de llegar al ambiente de producción, que debe ser estable ',
                '<strong>Blue/Green</strong>',
                '- Se ejecutan 2 ambientes similares de manera simultanea, reduciendo el tiempo de inactividad, pero solo uno esta activo en dado momento ',
                '- Aca se utiliza un enrutador o un equilibrador de carga, para dirigir el trafico hacia las instancias que se desee ',
                '- Tambien puede funcionar como una forma de regresión rapida, si algo sale mal en el otro entorno ',
                '<strong>Feature Toggles</strong>',
                '- Las funcionalidades se pueden apagar o encender, mediante un simple interruptor, asi no estara expuestos a nuevas caracteristicas sin terminar ',
                '<strong>A/B Testing</strong>',
                '- Se presentan 2 o más versiones para ser comparadas de manera aleatoria, y la mejor se escoge mediante analisis estadisticos ',
                '<strong>Dark Launchs</strong>',
                '- Se presenta la nueva funcionalidad a un grupo selecto de usuarios, y no al publico general, estos deben estar conscientes de que esta ayudando ',
                ' - a desarrollar y probar la nueva funcionalidad, para obtener comentarios y probar la eficacia ',
            ]),
        new Item(Keys.CD_CI_INDUSTRIAL_DEV_OPS,
            [
                '- Es la unión/aplicación de los principios <em>Lean</em>, <em>Agile</em> y <em>DevOps</em> además del desarrollo, planificación e implementación, ',
                ' - de nuevos sistemas y servicios que combinan hardware y software en mayor o menor medida ',
                '',
                '<strong>Principios:</strong>',
                '<strong>Organizar los flujos de valor:</strong> Organizar la empresa en función al flujo de valor y no en actividades funcionales, puede parecer obvio, ',
                ' - pero muchas empresas estan organizadas de esa manera, creando multiples traspasos y documentación entre areas, todas las personas requeridas ',
                ' - deben estar organizadas alrededor de un flujo de valor, y no dispersas en diferentes areas de un solo proposito ',
                '',
                '<strong>Multiples horizontes de Planificación:</strong> Esta planificación predictiva ha sido el enfoque más popular para los sistemas ciberfisicos, ',
                ' - que junto a la planificación empirica a corto plazo, que permite al software se diseñe e itere a gran velocidad, no funcionara para sistemas, ',
                ' - con tiempos más largos para el hardware, depencias entre sistemas, sistemas de control, etc.. Asi se obtienen datos empiricos más rapido, ',
                ' - que pueden ser usados para el siguiente horizonte de planificación, para que siempre se ajusten en base a los datos obtenidos ',
                '',
                '<strong>Implementar decisiones basadas en datos:</strong> Luego de que los datos son procesados, convertidos y analizados, se convierten en el insumo de ',
                ' - para la toma de decisiones para priorizar y planificar los ciclos de trabajo, y consecuentemente medir los resultados',
                '',
                '<strong>Arquitectura para cambiar velozmente:</strong> El desarrollo concurrente es más rapido que el desarrollo sincronico, de esta manera ',
                ' - multiples equipos pueden estar trabajando en el mismo modulo, aumentado la velocidad de entrega y la velocidad en los cambios ',
                '',
                '<strong>Iterar, gestionar colas, crear flujos:</strong> Se implementa los ciclos iterativos-incremental provenientes de <em>Agile</em> con ',
                ' - el compromiso de <em>Lean</em> de reducir el tamaño para aumentar el flujo ',
                '',
                '<strong>Cadenas y sincronización:</strong> En un sistema complejo, con multiples susbsistemas y componentes, la falta de previsibilidad es un gran detractor ',
                ' - para que las empresas sean más agiles, y eliminando la mayor cantidad de incognitas posibles, con minima variabilidad necesaria ',
                '',
                '<strong>Integración temprana y frecuente:</strong> Cubre diferentes niveles y se realiza de multiples formas tambien, entre más rapidas sean las integraciones ',
                ' - se podra satisface mejor a los clientes y el sistema tendra valiosa retroalimentación por parte del usuario, para mejoras y correciones ',
                '',
                '<strong>Desplazamiento a la izquierda:</strong> Pensar en realizar las pruebas siempre debe ser una prioridad, desde etapas de analisis hasta el desarrollo ',
                '',
                '<strong>Mentalidad de crecimiento:</strong> Siempre que se realize algun cambio, este se debe mirar con una mentalidad positiva, de crecimiento, ',
                ' - sin esta mentalidad, todos los principios anteriores no tendrian sentido juntos, si no estuvieran unidos por esta mentalidad, ',
                ' - tanto en el nivel personal como en el empresarial ',
            ]),
        new Item(Keys.CD_CI_DEPLOYMENT_PIPELINES,
            [
                '- En todo proceso de <em>CD/CI</em> siempre tiene una serie de etapas, algunos procesos cuentan con más ó menos que otros segun la necesidad ',
                '',
                '<strong>Source:</strong> La mayoria de los casos es activada por cambios en el codigo, tambien es comun que sean iniciados por el usuario o por tareas automaticas ',
                '<strong>Build:</strong> El codigo fuente y sus dependencias son usadas para construir un producto ejecutable, se compila si es necesario, y ',
                ' - generalmente tambien crea la imagen y los recursos necesarios para ser desplegados en Docker o Kubernetes ',
                '<strong>Tests:</strong> Se ejecutan pruebas automatizadas para validar el comportamiento del sistema, y las correcciones realizadas, ',
                ' - suelen ser pruebas unitarias, de humo y de integración, este paso puede durar desde segundos hasta horas dependiendo del proyecto y su cobertura',
                '<strong>Deploy:</strong> Una vez pasadas estas etapas esta version sera desplegada en el ambiente escogido, que suele ser un ambiente previo ',
                ' - antes de dar el paso final para que los usuarios finales puedan usar el producto ',
                '',
                '<strong>Beneficios:</strong>',
                '- Una vez automatizado el proceso, se puede concentrar mas tiempo en el desarrollo y en vigilar el sistema ',
                '- Se tiene un manejo de versiones claro, y estas son accesibles por cualquiera que las necesite ',
                '- Cada ejecución del pipeline genera registros que son consultables y llegan a funcionar como un historico ',
                '- Devolver una version puede ser tan simple como presionar un boton ',
                '- Las actualizaciones se vuelnve rutinarias y más confiables, reduciendo el estres de los involucrados en cada despliegue ',
                '- Manejar estos flujos ayuda a tener una cultura organizacional responsable ',
                '',
                '<strong>Caracteristicas de un pipeline</strong>',
                '&bull; Velocidad   &bull; Fiabilidad ',
                '&bull; Exactitud   &bull; Flexibilidad ',
                '',
                '<strong>Buenas practicas:</strong>',
                '- No dejar flujos incompletos, si el flujo principal no funciona, se debe arreglar lo mas rapido posible ',
                '- Ejecute las pruebas fundamentales de primera, de manera que se falle rapido, no se gasten recursos de más, y se corrijan rapido ',
                '- Utilize siempre el mismo entorno, cada vez que se haga un despliegue de manera que siempre este limpio y aislado ',
                '- Analisis de calidad, mediante herramientas de analisis de codigo estatico ',
                '- Los pipelines se pueden lanzar mediante eventos como pull requests, no solo por commits o solicitud de los usuarios ',
                '- No ignore pasos ni deje de realizar revisiones de codigo y revisiones de pares, esto solo es omitible para cambios triviales ',
            ]),
        new Item(Keys.CD_CI_CELL_BASED_ARQUITECTURE,
            [
                '- Este tipo de arquitecturas provienen del concepto de mamparo de los barcos, donde los tabiques subdividen el espacio en compartimentos autonomos ',
                '- Agregan rigidez y resiliencia en caso de averias, evitando fallos catostroficos en el casco ',
                '- Reducen la extensión de los daños en caso de inundación, limitandose al compartimento dañado ',
                '- Aislan la falla en una sección especifica del casco, reduciendo las afectaciones en general del barco ',
                '- Estas 3 ventajas son aplicables a los sistemas complejos ya que las cargas de trabajo se dividen entre celdas, para reducir el numero de afectados ',
                '',
                ' <strong>Aplicación típica</strong>                              <strong>Aplicación con Arquitectura Basada en Celdas</strong>    ',
                '--------------------       &brvbar; --------- &brvbar; ------------------------------------------------------------------ &brvbar;',
                '&brvbar; Application Load &brvbar;       &brvbar;           &brvbar;                             Cell Router                            &brvbar;',
                '&brvbar;     Balance      &brvbar;       &brvbar;           &brvbar; ------------------------------------------------------------------ &brvbar;',
                '--------------------       &brvbar;           &brvbar;           &darr;                      &darr;                     &darr;           &brvbar;',
                '&brvbar;       ECS        &brvbar;       &brvbar;           &brvbar;  --------------------  --------------------  --------------------  &brvbar;',
                '--------------------       &brvbar;  Control  &brvbar;  &brvbar; Application Load &brvbar;  &brvbar; Application Load &brvbar;  &brvbar; Application Load &brvbar;  &brvbar;',
                '&brvbar;      Storage     &brvbar;       &brvbar;   Plane   &brvbar;  &brvbar;     Balance      &brvbar;  &brvbar;     Balance      &brvbar;  &brvbar;     Balance      &brvbar;  &brvbar;',
                '--------------------       &brvbar;           &brvbar;  --------------------  --------------------  --------------------  &brvbar;',
                '                           &brvbar;           &brvbar;  &brvbar;       ECS        &brvbar;  &brvbar;       ECS        &brvbar;  &brvbar;       ECS        &brvbar;  &brvbar;',
                '                           &brvbar;           &brvbar;  --------------------  --------------------  --------------------  &brvbar;',
                '                           &brvbar;           &brvbar;  &brvbar;      Storage     &brvbar;  &brvbar;      Storage     &brvbar;  &brvbar;      Storage     &brvbar;  &brvbar;',
                '                           &brvbar; --------- &brvbar;  --------------------  --------------------  --------------------  &brvbar;',
                '',
                '<strong>- Enrutador:</strong> Solo deberia tener la responsabilidad de enrutar las solicitudes a la celda correcta ',
                '<strong>- Celda:</strong> Un ambiente con capacidad de manejar las cargas y que contenga todo lo necesario para que sea de forma independiente ',
                '<strong>- Plano de Control:</strong> Responsable de la administración como el aprovisionamiento y desaprovisionamiento de celdas y la migración entre estas ',
                '',
                '- Esta arquitectura no implica tener que duplicar o triplicar la infraestructura ya existente, las cargas se puede seguir distribuyendo entre las celdas ',
            ]),
        new Item(Keys.CD_CI_RULES,
            [
                '- Es una practica fundamental en el desarrollo de software moderno, promueve la colaboración y mantiene el software alineado con las necesidades comerciales ',
                '',
                '- Utilice un software de control de versiones, es vital para mantener una unica fuente de verdad, lo que garantiza que todos los cambios sean rastreables ',
                '',
                '- Realize commits de manera frecuente, esto permite detectar problemas y devolver cambios de una manera más precisa ',
                '',
                '- Automatizar los builds de sus proyectos, reduciendo la posibilidad de errores humanos, evitando que codigo erroneo llegue a pasos posteriores ',
                '',
                '- Automatizar las pruebas, de todos los niveles, desde las unitarias, de integración, hasta las de Extremo a Extremo(<em>E2E</em>)',
                '',
                '- Triggers especificos para diversos tipos de ramas, hacen que los pipelines sean más eficientes y acotados ',
                '',
                '- Automatizar los controles de seguridad y calidad, usando herramientas como <em>SonarQube</em> y <em>Snyk</em>',
                '',
                '- Habilite notificaciones y ciclos de retroalimentación, asi se reducen los tiempos de espera y la reactividad antes los errores mejora ',
                '',
                '- Entornos similares entre si, para garantizar que las pruebas sean confiables y consistentes, todos los entornos deben ser iguales entre si ',
                '',
                '- El monitoreo y la medición de rendimiento, son importantes para identificar posibles cuellos de botella dentro de los pipelines ',
                '',
                '- Optimizar el rendimiento de tareas como la compilación y las pruebas, mediante estrategias como cache y paralelización ',
                '',
                '------------       ---------       -----------       ---------       -----------------       ------------        ----------',
                '&brvbar; Git Push &brvbar;  -->  &brvbar; Build &brvbar;  -->  &brvbar; Linting &brvbar;  -->  &brvbar; Tests &brvbar;  -->  &brvbar; Quality Check &brvbar;  -->  &brvbar; Security &brvbar;   -->  &brvbar; Deploy &brvbar;',
                '------------       ---------       -----------       ---------       -----------------       ------------        ----------',
            ]),
        new Item(Keys.CD_CI_FAILOVER,
            [
                '- Los sistemas resilientes y a pruebas de errores, hoy en dia no son necesarios, son obligatorios debidos al mundo digital moderno ',
                '- Las fallas del software tienen un impacto cada vez mayor en los resultados y la seguridad de las empresas ',
                '- La operatividad es uno de los atributos más importantes de un sistema resiliente, esta se consigue en conjunto y no es una sola tarea que se deba realizar ',
                '- Incluso los errores más pequeños pueden agravarse por procedimientos mal diseñados, hasta escalar y dejar fuera de servicio a todo el sistema ',
                '',
                '<strong>Resiliencia:</strong> No solo se trata de recuperarse rápidamente de los fallos, sino de prevenir fallos y mitigar los impactos ',
                ' - de aquellos que no pueden ser evitados, en el menor tiempo posible para evitar tiempos de inactividad y adaptarse a nuevas condiciones ',
                '',
                '<strong>Ingenieria del caos:</strong> Para que un software sea tolerante a fallos y garantize la calidad del servicio, se debe probar de multiples maneras ',
                '- Para lograr resiliencia ante las ingeriosas cantidades de posibles fallas como: infraestructura, de red, de aplicaciones, etc.. ',
                '- Se deben provocar errores en estos y probar sus respectivas contingencias, medir su efectividad y analizar posibles mejoras ',
                '- No solo es la provocación de errores, si no la creación de condiciones adversas en pro de aumentar la resiliencia global del sistema ',
                '- Las soluciones a estos errores no solo deben garantizar la menor indisponibilidad posible, tambien deben ser transparentes para no afectar a los usuarios ',
                '- Un sistema es como una cadena y esta es tan fuerte como el eslabon más debil, surgiendo posibles puntos de falla unicos <em>SPOF</em>',
                '- Los errores tambien se pueden sumar, acumularse y convertirse en una bola de nieve, que llegue a afectar al sistema entero e incluso componentes externos ',
                '- Además de nunca se debe descartar el efecto domino que pueda surgir si no se contiene su propagación adecuadamente ',
                '',
                '- Resultados comunes ante las fallas de un sistema:  &bull; Sortear el fallo y continuar con funcionalidades reducidas',
                '                                                     &bull; Detenerse hasta restaurar el fallo principal',
                '                                                     &bull; Colapsar y causar un fallo aun mayor',
                '',
                '<strong>Failover:</strong> Es la capacidad del sistema para continuar funcionando sin interrupciones en caso de una falla en algunos de sus componentes ',
                '- Generalmente se hace mediante mecanismos de software, esto es conocido como conmutación por error y generalmente es automatica en casos de error ',
                '- La transición a los componentes de respaldo requiere que los sistemas sean monitoreados y tengan autonomia para la toma de decisiones automaticas ',
                '- La conmutación por error al ser un mecanismo de emergencia, generalmente no se prueba hasta que es estrictamente necesario ',
                '- No tener pruebas regulares de este sistema o que no se hagan fallos controlados, hara que este contenga falencias o directamente falle ',
                '- En la practica este sistema tambien puede fallar y generar autenticas pesadillas, en especial si el sistema es complejo con multiples puntos de falla ',
                '- Una forma relativamente facil es añadir redundancia a un sistema, aunque sea un costo adicional, generalmente es menor al costo de un fallo ',
                '- Para que este plan sea a prueba de errores, se deben hacer pruebas y casos donde predomine la ingenieria del caos ',
                '- Aunque es para aumentar la confiabilidad del sistema, es recomendable primero alcanzar un nivel de madurez de excelencia a nivel operativo ',
                '- Sin un buen plan para manejar estos improvistos, la improvisación de los controladores, los reintentos masivos, ',
                ' - soluciones mal configuradas y alertas vacias o sin correlación alguna, solo agravaran el error ',
                '',
                '<strong>¿ Porque son inesperados los desastres ?</strong> Los desastres y las muertes son casos atipicos y no forman parte de la distribución de posibles resultados ',
                '- Estos casos se encuentran fuera de los modelos, como la pandemia del COVID-19, desastres nucleares, terremotos, inundaciones, crisis sociales, etc.. ',
                '- Todos estos problemas encajan con un patron, inesperado, incomprensible, incontrolable e inevitable, para esto es imprescidible que un sistema: ',
                '&bull; Cuente con personal experimentado, que sepa como funciona a profundidad, gestionar errores y capacidad de tomar decisiones bajo presión ',
                '&bull; Aplicaciones robustas que ya hayan superado multiples casos de prueba e inclusión controlada de fallos ',
                '&bull; Estructura de conmutación confiable y que conmpense satisfactoriamente las fallas, de forma transparente para los usuarios ',
                '&bull; La redundancia y la automatización con el fin de aislar y contener los fallos de manera independiente ',
            ]),
        new Item(Keys.CD_CI_MONITORING,
            [
                '- Mantener la experiencia de usuario fluida se puede lograr de multiples formas, pero para lograrlo, se debe tener un sistema robusto y siempre funcionando ',
                '',
                '<strong>Uptime Monitoring:</strong> El tiempo de actividad ayuda a monitorear la disponibilidad y la fiabilidad de los servicios y aplicaciones ',
                '- Asi los usuarios tienen sistemas totalmente operativos y su acceso es ininterrumpido ',
                '<strong>Casos de uso</strong>',
                '&bull; Disponibilidad de los sitios web 24/7                         &bull; Confiabilidad de las aplicaciones criticas ',
                '&bull; Rendimiento del servidor para reducir tiempos de inactividad  &bull; Salud de la red y componentes para la identificación de problemas ',
                '<strong>Pros & contras</strong>',
                '&#10003; Mejora la toma de decisiones en base a los datos recopilados  &#10003; Mantenimiento proactivo y planificado para resolver problemas ',
                '&#10007; Falsos positivos que requieren analisis adicional             &#10007; Uso intensivo de recursos',
                '',
                '<strong>Heartbeat Monitoring:</strong> Son señales enviadas regularmente desde un componente a un sistema central, con capacidad de generar alertas ',
                '- Esta señal debe ser continua y si despues de un tiempo determinado se deja de recibir, se deben activar alertas de fallos ',
                '<strong>Casos de uso</strong>',
                '&bull; Salud de los servidores para indicar un correcto funcionamiento &bull; Equilibrio de cargas en caso de mala distribución ',
                '&bull; Sistemas de conmutación por error en caso de fallas             &bull; Estado del cluster para garantizar una alta disponibilidad ',
                '<strong>Pros & contras</strong>',
                '&#10003; Monitoreo en tiempo real                                        &#10003; Alertas inmediatas e identificación rapida de fallos ',
                '&#10003; Preparar la conmutación por error antes de ser usada            &#10003; Escalabilidad de los sistemas en caso de ser requerida ',
                '&#10007; Sobrecarga de recursos                                          &#10007; Complejidad de implementación en sistemas distribuidos ',
                '',
                '<strong>Synthetic Monitoring:</strong> Es un metodo proactivo para evaluar el rendimiento y la funcionalidad mediante simulaciones ',
                '- Este caso requiere de tener escenarios reales que imiten el comportamiento de los usuarios, para garantizar funcionalidades completas ',
                '<strong>Casos de uso</strong>',
                '&bull; Aplicaciones moviles desde diferentes dispositivos y redes    &bull; Verificación de transacciones y/o operaciones complejas',
                '<strong>Pros & contras</strong>',
                '&#10003; Detección proactiva de problemas y diagnosticos de problemas de rendimiento antes de que sucedan ',
                '&#10003; Datos historicos para pruebas de rendimiento                &#10003; Pruebas continuas para detectar inconsistencias ',
                '&#10007; Los scripts consumen recursos en su creación/actualización  &#10007; La complejidad y los costos en mantenimiento/infraestructura son mayores ',
            ]),
        new Item(Keys.CD_CI_DEPLOYMENT_ARQUITECTURE,
            [
                '- La forma de desplegar aplicaciones debe evolucionar junto con estas, partiendo de estructuras rigidas a elementos con comportamiento adaptables ',
                '- La implementación de las aplicaciones suele ser uno de los ultimos pasos a hacer, y se relega a una preocupación operativa, con poco o nada de diseño ',
                '- Este suele ser un espejo de nuestra forma de como creamos aplicaciones, por lo que tambien evoluciono y ha ido abstrayendose con el tiempo ',
                '',
                '<strong>Monolitos</strong>',
                '- Al inicio del software no existia la modularidad, se escribia un unico programa, se compilaba y se ejecutaba ',
                '- Todo esto era comun que sucediera en una sola maquina, la logica, los datos, el procesamiento solian convivir de manera unica e indivisible ',
                '- Eran faciles de implementar pero rigido antes cambios, actualizar cualquier componente implicaba afectar a todo el conjunto ',
                '- La falta de contigencias antes fallos importantes y la indivisibilidad se fueron convirtiendo en problemas poco a poco ',
                '',
                '<strong>Composicion modular</strong>',
                '- La vinculación estatica introdujo la idea de que el software podia construirse a partir de piezas reutilizables ',
                '- Los desarrolladores empezaron a compilar modulos en archivos más pequeños y reutilizables para generar programas más grandes ',
                '- Los programas podian referenciar dependencias(librerias) compartidas en tiempo de ejecución ',
                '- Esto reducia la redundancia y las actualizaciones se podian sin realizar una recompilación completa ',
                '- Esta "<em>flexibilidad</em>" conllevo a aplicaciones fragiles, las dependencias compartidas podian destruir todo un ecosistema debido a problemas de ',
                ' - versiones y compatibilidad, las cuales no se aplicaban estrictamente generando una avalancha de problemas en la ejecución ',
                '',
                '<strong>Uso de servicios, complementos & Plugins</strong>',
                '- Fue el siguiente paso más alla de modularidad en tiempo de compilación ',
                '- Modelos como CORBA y JavaBeans permitieron cargar nuevas funcionalidades en tiempo de ejecución, las aplicaciones se convirtieron en plataformas ',
                '- Las ampliaciones se podian integrarse mucho más rapido y facil, mediante interfaces y contratos ',
                '- Con esta flexbilidad tambien sobrevino el aumento de la complejidad, el descubrimiento, la interoperabilidad y riesgos al evolucionar ',
                '- La coordinación entre sistemas y la definición de las fronteras se volvio más dificil debido a esta descentralización ',
                '',
                '<strong>Servicios y aplicaciones de red</strong>',
                '- A medida que el software trascendio la frontera de la maquina los servicios reemplazaron a las librerias por <strong>SOA</strong>',
                '- En la epoca de la Arquitectura Orientada a Servicios las librerias no se limitaban a sus metodos internos, sino servicios externos y uso de la red ',
                '- La implementación se volvio distribuida, los sistemas se descompusieron en partes más pequeñas y autonomas, que cumplian contratos estrictos ',
                '- SOA enseño a pensar en terminos de responsabilidades, limites y contratos; y tambien que dividir un sistema en partes no necesariamente lo simplifica ',
                '',
                '<strong>Microservicios & Orquestación</strong>',
                '- Fueron el siguiente nivel de los servicios, haciendo enfasis en la granularidad, la independencia y la escalabilidad ',
                '- La infraestructura tambien evoluciono y nacieron nuevas practicas y tecnologias como DevOps y los Contenedores ',
                '- Aunque en la teoria esto incrementaba la flexibilidad tambien se introdujo una sobrecarga operativa al tener que gestionar más complejidad ',
                '- Ahora era requerido gestionar ciclos de vida, dependencias, secretos, metricas, observabilidad, alertas, etc.. para cada unidad ',
                '',
                '<strong>Serverless functions</strong>',
                '- Para evitar la sobrecarga de la orquestación, plataformas como AWS ofrecierón un enfoque aun más granular donde la infraestructura es casi invisible ',
                '- Implementar solo la función, el codigo solo se invocaba mediante eventos, se escalaba automaticamente y solo se cobraba el uso ',
                '- Esto permitio centrarse exclusivamente en la logica de negocio, sin embargo las funciones eran aisladas y efimeras, sin ningun tipo de memoria ',
                '- En caso de requerir otros sistemas o tener alguna necesidad de coordinación, seguian necesitando conectarse a algun sistema externo ',
            ]),
        new Item(Keys.CD_CI_INFRAESTRUCTURE_DESIGN,
            [
                '- Un buen diseño de la infraestructura es la base de cualquier organización exitosa, ya sea para la nube, ciberseguridad, automatización o gestión de datos ',
                '- Una infraestructura robusta garantiza operaciones fluidas, escalables y seguras, sin sacrificar rentabilidad, garantizando: ',
                '&bull; Rendimiento confiable con tiempos de inactividad minimos ',
                '&bull; Seguridad y cumplimiento de la normatividad a la que este sujeta la aplicación ',
                '&bull; Escalabilidad en la medida de que el negocio crece ',
                '',
                '<strong>Componentes claves</strong>',
                '',
                '&brvbar; <strong>Network           </strong>  &brvbar; <strong>Nube & almacenamiemto</strong> &brvbar; <strong>Ciberseguridad</strong>            &brvbar; <strong>Escalabilidad & automatización</strong> &brvbar;',
                '&brvbar; LAN & WAN           &brvbar; Nube publica          &brvbar; Zero trust                &brvbar; Microservicios y API-First     &brvbar;',
                '&brvbar; Cloud networking    &brvbar; Nube privada          &brvbar; Autenticación multifactor &brvbar; Load Balancing y autoescalado  &brvbar;',
                '&brvbar; 5G & Edge computing &brvbar; Nube hibrida          &brvbar; Cifrado y backups         &brvbar; Automatización                 &brvbar;',
                '&brvbar;                     &brvbar; Centros de datos      &brvbar;                           &brvbar;                                &brvbar;',
                '',
                '- Tomar decisiones sobre infraestructura es critico ya que eso afecta directamente tu aplicación, pero hay decisiones que se deben evitar a toda costa ',
                '- Muchos desastres de la infraestructura son evitables o provienen de errores de diseño que solo se cometen una vez ',
                '',
                '<strong>Errores comunes a evitar</strong>',
                '',
                '<strong>No usar un ambiente de staging:</strong> Testear directamente en producción o confiar en que todo funciona, es una ruleta rusa ',
                '&bull; Deberian existir ambientes identicos a producción (instancias, red, seguridad, etc..), no basta con que se parezcan ',
                '&bull; Testear todo lo que más se pueda deberia ser la norma, no solo es suficiente con probar el <em>Happy Path</em> (camino feliz) tambien multiples escenarios de error ',
                '&bull; No desplegar en momentos de inestabilidad o que puedan presentar inconvenientes sin una rapida solución (No desplegar los Viernes)',
                '',
                '<strong>Puntos unicos de Fallo:</strong> Las fallas son normales, lo que no es normal es que tu aplicación deje de funcionar totalmente si un componente critico falla ',
                '&bull; Balanceadores de carga en multiples zonas de disponibilidad ',
                '&bull; Replicación de las BD, ya sea lectura-escritura o maestro-esclavo si tiene la madurez suficiente',
                '&bull; Implementaciones regionales para servicios criticos ',
                '&bull; La infraestructura siempre puede fallar y se debe estar preparado para ese escenario ',
                '',
                '<strong>Limites de recursos:</strong> Un microservicio mal optimizado puede consumir todos los recursos disponibles y dejar sin recursos a los demás ',
                '&bull; Establecer limites para cada contenedor, y politicas de autoescalado ',
                '&bull; Pruebas tempranas con el uso de recursos, junto a un monitoreo activo del uso de recursos ',
                '',
                '<strong>Configuraciones predeterminadas:</strong> Especialmente en areas de seguridad abriendo vulnerabilidades que explotar ',
                '&bull; No use ninguna credencial por defecto y restringa todos los accesos mediante el menor privilegio posible  ',
                '&bull; Auditorias regulares de seguridad y evaluación del trafico, incluso si es interno de la red ',
                '',
                '<strong>Archivos criticos expuestos por commits(Git):</strong> Ya sean archivos de terraform o credenciales quemadas, esto expone información demasiado sensible ',
                '&bull; Si esto ya sucedio, es adecuado considerar que todos los secretos estan comprometidos y cambiar claves, llaves, credenciales, etc.. ',
                '',
                '<strong>No usar Circuit Breakers:</strong> Si un servicio deja <strong>A</strong> de funcionar adecuadamente y <strong>B</strong> lo necesita y existe el servicio <strong>C</strong> ',
                ' - que necesita <strong>B</strong> poco a poco se va formando una cadena de fallos hasta que colapse como un castillo de cartas ',
                '&bull; Introducir puntos de recuperación ó directamente el circuit breaker en el propio codigo ',
                '&bull; Establecer tiempo de espera agresivos, 30 segundos es demasiado tiempo ',
                '&bull; Implementar una degradación elegante, porque mostrar errores si es posible usar data cacheada ? ',
                '',
                '<strong>Sin herramientas de monitoreo:</strong> Hay errores que van creciendo con el tiempo y los logs no son suficientes para encontrarlos hasta que es demasiado tarde ',
                '&bull; Configurar alertas que de verdad muestren fallas y no solo ruido, que alimenten dashboards utiles ',
                '&bull: Ausencia de tracing distribuido, en caso de operaciones con multiples microservicios ',
                '&bull; De ser posible crear alertas sobre tendencias y no cuando sucedan umbrales criticos ',
                '',
                '<strong>Copias de seguridad deficientes:</strong> Tener una copia de seguridad que no funciona es una pesadilla, que suele suceder junto a una crisis ',
                '&bull; Probar las copias de seguridad mensualmente si es posible, entre más se demore más posibilidades de perdida de datos ',
                '&bull; Documentar casos pasados y practicar los procedimientos de restauración de manera periodica ',
                '',
                '<strong>Sin gestión de cambios:</strong> Realizar cambios sin una debida supervisión puede significar horas de problemas ',
                '&bull; Implementar revisiónes y aprovaciones de codigo previas ',
                '&bull; Uso de feature flags para lanzamientos riesgosos ',
                '&bull; Procedimientos de rollback, entre más automaticos mejor ',
                '',
                '<strong>Crecer sin miras a escalar:</strong> Escalar no solo significa manejar picos de carga, tambien significa prepararse para un crecimiento en el tiempo ',
                '&bull; Diseño para escalar horizontalmente antes que verticalmente ',
                '&bull; Politicas de escalado automatico ',
                '&bull; Pruebas de carga periodicas y no solo antes de lanzamientos disruptivos ',
                '&bull; Conozca los limites, que sea la nube no significa que no tenga limites ',
            ]),
        new Item(Keys.CD_CI_RPO_RTO,
            [
                '<strong>Objetivo de Punto de Recuperación(RPO):</strong> Generalmente se refiere a la cantidad o el tiempo que una perdida de datos seria tolerable ',
                ' - antes de que se convierta en un daño significativo e impacte el negocio o la imagen de la empresa ',
                '',
                '<strong>Objetivo de Tiempo de Recuperación(RTO):</strong> Generalmente se refiere a la cantidad de tiempo de una aplicación, sistema o proceso que pueden estar inactivos ',
                ' - sin causar un daño significativo a la empresa, junto al tiempo necesario para restaurar la aplicación ',
                '',
                '<strong>Diferencias</strong>',
                '',
                '<strong>Proposito:</strong> Ambos son esenciales para la estrategia de respaldo ante desastres ',
                '&bull; <em>RPO</em> Se ocupa para estrategias de respaldo',
                '&bull; <em>RTO</em> Trata con el tiempo para recuperarse ante el desastre',
                '',
                '<strong>Prioridad:</strong> Reanudar operaciones habituales lo más rapido posible ',
                '&bull; <em>RTO</em> Se centra en la restauración de aplicaciones y sistemas para asumir operaciones habituales ',
                '&bull; <em>RPO</em> Toman en cuenta el riesgo y el impacto para el negocio y no solo de los tiempos de inactividad ',
                '',
                '<strong>Costo:</strong> Entre mayor sea el objetivo, mayor sera el costo ',
                '&bull; <em>RTO</em> Suele ser mayor ya que se calcula el marco del tiempo para recuperar toda la infraestructura',
                '&bull; <em>RPO</em> Granular y ceñido a un contexto especifico ',
                '',
                '<strong>Automatización:</strong> Entre mayor sea su alcance, más complejo sera de lograr ',
                '&bull; <em>RPO</em> Requiere copias de seguridad programadas a intervalos regulares',
                '&bull; <em>RTO</em> Contemplan todas las operaciones de TI en el proceso de recuperación',
            ])
    ];