import {
    REFACTORING_LEGACY_CODE, REFACTORING_MANAGE_DEPENDENCIES, SECURITY_LEAST_PRIVILEGE, SECURITY_PROTOCOLOS_SEGURITY
} from "../linkReferencia";
import { Item } from "../models";

export class Content3 {

    public temas: Item[] = [
        ...REQUISITOS,
        ...SMELLS_CODES,
        ...VERSIONAMIENTO,
        ...PRINCIPIOS,
        ...REFACTORIZACION,
        ...SEGURIDAD,
        ...UML,
        ...NEURO_MARKETING,
        ...CD_CI_INFRAESTRUCTURE
    ];

}

export const REQUISITOS =
    [
        new Item('funcionales',
            [
                '- Son la declaración de los servicios y funciones que tendra la aplicación ',
                '- Estos se basan en una serie de requerimientos del software previamente realizada ',
                '- Gran parte del exito del producto depende de que este proceso sea realizado efectivamente ',
                '- La ambiguedad es normal, pero debe ser reducida al minimo ',
                '- Las Historias de Usuario son una gran ayuda en este ambito, aun asi estas tambien pueden equivocarse ',
                '- Los requisitos deben ser coherentes, sin contradicciones entre si, más no significa que no puedan cambiar ',
            ]),
        new Item('NOfuncionales',
            [
                '- No son caracteristicas que son expresadas directamente por el cliente ',
                '- Son una declaración de como se debe comportar el sistema, de que propiedades son importantes ',
                '- Tambien pueden contar con restricciones como, sistema operativo, dispositivos compatibles, paleta de colores, etc... ',
                '',
                '<strong>- Requisitos del producto:</strong> Especifican que debe cumplir el producto (rapido, bonito, confiable, etc...) ',
                '<strong>- Requisitos del producto:</strong> Estos criterios, y otras más son terriblemente ambiguos, por lo que deben ser previamente acordados ',
                '',
                '<strong>- Requisitos organizacionales:</strong> Se derivan de politicas y procedimientos de la empresa ya existentes ',
                '<strong>- Requisitos organizacionales:</strong> Como lenguajes a usar, documentación a entregar, etc... ',
                '<strong>- Requisitos organizacionales:</strong> Tales como la interoperabilidad, leyes a seguir, etc... ',
                '',
                '<strong>- Requisitos externos:</strong> Son afectados directamente por factores externos al software ',
            ]),
        new Item('negocio',
            [
                '- Es el impacto real de una funcionalidad en el software, por lo que es subjetivo y depende de quien lo este visualizando ',
                '- Generalmenete son responsabilidad del Product Owner y de los analistas, si se trabaja con metodologias agiles ',
                '- Es necesario definir objetivos a cumplir, para tener una meta clara y visualizar un camino ',
                '- Adoptar formas de medir el progreso y hacerlo de manera periodica ',
                '- Cuestionarse a si mismos, conforme va avanzando el proyecto las cosas pueden cambiar y con estas nuestros objetivos ',
                '- Es necesario definir objetivos a cumplir, para tener una meta clara y visualizar un camino ',
            ]),
        new Item('ambiguedad',
            [
                '- Menos es Más, una frase bastante diciente pero que es más facil decirla que aplicarla ',
                '- La redacción debe ser clara y concisa, ya que muchas personas en diferentes ambitos leeran los requisitos y todos deben entenderlos ',
                '- Los detalles son importantes, pero estos no deben ser abrumadores ni irrelevantes ',
                '- Si una requisito es demasiado extenso este puede ser desglosado en otros más pequeños y concisos ',
                '- Igual que las Historias de Usuario pueden tener criterios de aceptación ',
                '- Se puede incluir lenguaje tecnico y escenarios especificos, si estos ayudan a definir un contexto ',
            ]),
        new Item('calidad',
            [
                '- Es una propiedad medible del sistema que indica si el sistema satisface una caracteristica en especifico ',
                '- Dependiendo de la complejidad, un sistema puede cumplir una o varias de las siguentes caracteristicas ',
                '',
                '<strong>Compatibilidad:</strong> Capacidad de los sistemas para intercambiar información ó compartir software/hardware ',
                '<strong>- Subcaracteristicas:</strong> Interoperabilidad, coexistencia ',
                '',
                '<strong>Usabilidad:</strong> Capacidad del producto para ser entendido, que sea usado y que sea atractivo ',
                '<strong>- Subcaracteristicas:</strong> Idoneidad, aprendizaje, manejo de errores, accesiblidad, estetica ',
                '',
                '<strong>Confiabilidad:</strong> Capacidad para cumplir con las funciones especificadas en un ambiente predispuesto ',
                '<strong>- Subcaracteristicas:</strong> Madurez, disponibilidad, tolerancia a fallos, recuperación ',
                '',
                '<strong>Eficiencia:</strong> Desempeño del sistema y cuanto recursos consume ',
                '<strong>- Subcaracteristicas:</strong> Comportamiento temporal, recursos usados, capacidad ',
                '',
                '<strong>Seguridad:</strong> Protección de los datos, ya sea de intromisiones externas o internas ',
                '<strong>- Subcaracteristicas:</strong> Confidencialidad, integridad, responsabilidad, autenticidad ',
                '',
                '<strong>Portabilidad:</strong> Capacidad para ser trasladado de un ambiente a otro, ya sea hardware o software ',
                '<strong>- Subcaracteristicas:</strong> Adaptabilidad, instalación, sustitución ',
                '',
                '<strong>Mantenibilidad:</strong> Capacidad de que pueda cambiar a traves del tiempo ',
                '<strong>- Subcaracteristicas:</strong> Modularidad, reusabilidad, analisable, modificable, testeable ',
            ]),
        new Item('tradeoff',
            [
                '- Que un software cumpla con lo que se necesitaba no significa que sea agradable o facil de usar',
                '- Un producto excelente no se limita a hacer lo que tiene que hacer, es aquel que da un poco más al usuario ',
                '- Existe una gran cantidad de atributos que todo software de "calidad" puede cumplir, no todos son necesarios, ',
                ' - pero si es importante saber cuales son los más necesitados ',
                '-Esto tambien depende de cuales atributos son necesariamente criticos, y cuales son ideales, por lo que se requiere, ',
                ' - un analisis previo para realizar un buen diseño y asi sopesar los pro y los contra ',
                '- Tambien se ha de tener en cuenta que hay requsitos que siempre estaran se afectaran de manera negativa entre si, ',
                ' - por lo que no se podran escoger ambos, si se quiren cumplir ambos de manera idonea ',
                '',
                '-El siguiente recuadro nos enseña un pequeño resumen de los principales atributos de calidad de cualquier sistema, hay 2 posibilidades: ',
                ' (<strong>+</strong>) Afecta positivamente el atributo de esa columna ',
                ' (<strong>-</strong>) Afecta negativamente el atributo de esa columna ',
                '',
                '<strong>Disponibilidad</strong>  <strong>+</strong>robustez    <strong>+</strong>confiabilidad',
                '<strong>Eficiencia</strong>      <strong>+</strong>disponible  <strong>-</strong>interoperable  <strong>-</strong>modificable    <strong>+</strong>rendimiento   <strong>-</strong>portable      <strong>-</strong>robustez     <strong>+</strong>escalable   <strong>-</strong>usabilidad   ',
                '<strong>Instalabilidad</strong>  <strong>+</strong>disponible  <strong>+</strong>fiabilidad                                                                                            ',
                '',
                '<strong>Integridad</strong>      <strong>-</strong>instalable  <strong>-</strong>interoperable  <strong>-</strong>rendimiento    <strong>-</strong>reusabilidad  <strong>+</strong>seguridad     <strong>-</strong>usabilidad   <strong>-</strong>verificable               ',
                '<strong>Interoperable</strong>   <strong>+</strong>disponible  <strong>-</strong>instalable     <strong>-</strong>integridad     <strong>-</strong>rendimiento   <strong>+</strong>portable      <strong>+</strong>fiabilidad   <strong>+</strong>robustez    <strong>-</strong>seguridad    ',
                '<strong>Modificable</strong>     <strong>+</strong>disponible  <strong>-</strong>instalable     <strong>-</strong>rendimiento    <strong>+</strong>fiabilidad    <strong>+</strong>reutilizable  <strong>+</strong>escalable    <strong>+</strong>verificable               ',
                '',
                '<strong>Rendimiento</strong>     <strong>+</strong>eficiencia  <strong>-</strong>interoperable  <strong>-</strong>modificable    <strong>-</strong>portable      <strong>-</strong>robusto       <strong>-</strong>escalable    <strong>-</strong>usabilidad                ',
                '<strong>Portabilidad</strong>    <strong>-</strong>eficiencia  <strong>+</strong>interoperable  <strong>-</strong>modificable    <strong>-</strong>rendimiento   <strong>+</strong>reusabilidad  <strong>-</strong>seguridad    <strong>-</strong>usabilidad  <strong>-</strong>verificable  ',
                '<strong>Fiabilidad</strong>      <strong>+</strong>disponible  <strong>-</strong>eficiencia     <strong>+</strong>integridad     <strong>+</strong>modificable   <strong>-</strong>rendimiento   <strong>+</strong>robustez     <strong>+</strong>seguridad   <strong>+</strong>usable      <strong>+</strong>verificable       ',
                '',
                '<strong>Reusabilidad</strong>    <strong>-</strong>eficiencia  <strong>-</strong>integridad     <strong>+</strong>interoperable  <strong>+</strong>modificable   <strong>-</strong>rendimiento   <strong>+</strong>portable     <strong>+</strong>verificable               ',
                '<strong>Robustez</strong>        <strong>+</strong>disponible  <strong>-</strong>eficiencia     <strong>+</strong>instalable     <strong>+</strong>integridad    <strong>+</strong>interoperable <strong>-</strong>rendimiento  <strong>+</strong>fiabilidad  <strong>+</strong>seguridad   <strong>+</strong>escalable <strong>+</strong>usable ',
                '<strong>Seguridad</strong>       <strong>+</strong>integridad  <strong>-</strong>rendimiento    <strong>+</strong>robustez       <strong>-</strong>usabilidad    <strong>-</strong>verificable                                            ',
                '',
                '<strong>Escalabilidad</strong>   <strong>+</strong>disponible  <strong>+</strong>eficiencia     <strong>+</strong>integridad     <strong>+</strong>rendimiento   <strong>+</strong>portable      <strong>+</strong>fiabilidad   <strong>+</strong>robustez                  ',
                '<strong>Usabilidad</strong>      <strong>-</strong>eficiencia  <strong>+</strong>instalable     <strong>-</strong>rendimiento    <strong>-</strong>portable      <strong>+</strong>fiabilidad    <strong>+</strong>robustez     <strong>-</strong>verificable               ',
                '<strong>verificable</strong>     <strong>+</strong>disponible  <strong>+</strong>instalable     <strong>+</strong>integridad     <strong>+</strong>modificable   <strong>+</strong>fiabilidad    <strong>+</strong>reusable     <strong>+</strong>robustez    <strong>+</strong>seguridad   <strong>+</strong>usabilidad        ',
                '',
                '(nota) el atributo de seguridad se puede entender de 2 maneras, por lo que en este caso solo se considera que cumplen aquellos que,   ',
                '  afecten negativamente o positivamente a ambos; la seguridad de los datos y el acceso a estos ',
            ]),
        new Item('objetivos',
            [
                '- Un proyecto consta de ambos, y esta más relacionados de lo que parecen, ya que: ',
                '',
                '<strong>- Los requisitos son objetivos concretos </strong>',
                ' - Al ser pocos en comparacion con la lista de requisitos, ya que son objetivos desglosados y detallados para el proyecto ',
                '',
                '<strong>- Los objetivos son requisitos abstraidos </strong>',
                ' - Estos son el resumen de los requisitos, y provienen de un nivel superior de abstracción y de un panorama más amplio ',
                '',
                '<strong>- Los objetivos son el QUE y los requisitos el COMO </strong>',
                ' - Mediante la ingenieria de requisitos se asienta alguna de las diferentes acciones concretas, ',
                '  - que puede tener algun objetivo, aunque muchas de estas decisiones, se tomen de manera insidiosa y poco consciente ',
            ]),
        new Item('cambioDeRequisitos',
            [
                '- Hablar e intentar especificar los requisitos antes de construir el software, es ciertamente un tema complejo',
                '',
                '<strong>Principio de incertidumbre de Humphrey</strong>',
                '- <em>Para un nuevo sistema de software, los requisitos no se conocerán por completo hasta que los usuarios lo hayan utilizado</em>',
                '',
                '<strong>Principio de Incertidumbre de Ziv</strong>',
                '- La incertidumbre es innata al software, y aunque se intente modelar, no siempre sera posible ya que proviene de multiples fuentes',
                '',
                '<strong>Lema de Wegner</strong>',
                '- No es posible especificar completamente un sistema interactivo',
                '',
                '- Para saber del más tema y revisar las respectivas bibliografias, puedes ir al articulo original'
            ])
    ];

export const SMELLS_CODES =
    [
        new Item('codesmells',
            [
                '- Son cosas en el codigo que se pueden hacer de una mejor manera, o que a la larga se convertiran en malas practicas ',
                '- Aunque no son un problema prioritario, estos haran crecer la deuda tecnica e inclusive podran crear fallos en el futuro ',
                '- Que el codigo funcione no significa que sea tecnicamente correcto ',
                '- No todos los smells codes son malos, hay casos donde se pueden ignorar debido al efecto cobra ',
            ]),
        new Item('tiposSmellCodes',
            [
                '<strong>Bloaters:</strong> Metodos y clases que han incrementado su tamaño a proporciones gigantezcas ',
                ' - estos se suelen dar por descuidos y más cuando nadie se ocupa de esto hasta que son un problema ',
                '',
                '<strong>Object-Orientation Abusers:</strong> Este se da cuando los principios de POO son mal aplicados ó se cumplen a medias ',
                '',
                '<strong>Changue Preventers:</strong> Sucede cuando se realiza un cambio y este requiere más modificaciones de las pensadas, siendo más complejo y costoso ',
                '',
                '<strong>Dispensables:</strong> Cualquier cosa que no sea necesaria, y que pueda ser cambiada o removida, haciendo un codigo más limpio y facil de entender ',
                '',
                '<strong>Couplers:</strong> Surgen de un acoplamiento excesivo entre los componentes, o en su defecto por una delegación excesiva ',
            ]),
        new Item('desglose',
            [
                '<strong>Bloaters</strong>',
                '<strong>- Long Method:</strong> Es aquel metodo que contiene demasiadas lineas, tantas que es dificil seguir el proceso que realiza ',
                '<strong>- Large Class:</strong> Aquella clase que contiene demasiados metodos, atributos ó lineas de codigo ',
                '<strong>- Primitive Obsession:</strong> Se da cuando todos los datos se quieren manejar con tipos primitivos, en vez de clases especializadas ',
                '<strong>- Long Parameter List:</strong> Sucede cuando un metodo recibe demasiados parametros, generalmente empieza con más de 4 ',
                '<strong>- Data Clumps:</strong> Pasa cuando diferentes parte del codigo tienen grupos identicos de variables, que se pueden agrupar en una sola clase ',
                '',
                '<strong>Object-Orientation Abusers</strong>',
                '<strong>- Switch Statements:</strong> Sucede cuando se tiene un switch o una secuencia de if demasiado grandes, en vez de usar polimorfismo ',
                '<strong>- Temporary Field:</strong> Son valores que son usados en circunstancias especificas, y de resto son instancias vacias ',
                '<strong>- Refused Bequest:</strong> Sucede cuando la herencia se aplica mal y las clases hijas heredan metodos o atributos que no van a usar ',
                '<strong>- Alternative classes:</strong> Clases con funciones identicas, pero metodos diferentes ',
                '',
                '<strong>Changue preventers</strong>',
                '<strong>- Divergent Change:</strong> Sucede cuando una clase requiere demasiados cambios, sean grandes o pequeños ',
                '<strong>- Shotgun Surgery:</strong> Surge cuando una modificacón requiere hacer muchos cambios individuales, en diferentes lugares ',
                '<strong>- Parallel Inheritance Hierarchies:</strong> Siempre que se necesite una subclase cuando se cree una clase, y se aplique para otras clases ',
                '',
                '<strong>Dispensables</strong>',
                '<strong>- Comments:</strong> Los comentarios surgen de metodos y clases mal nombrados o con complejidad arbitraria ',
                '<strong>- Duplicate Code:</strong> Fragmentos de codigo que son casi identicos y no estan centralizados ',
                '<strong>- Lazy Class:</strong> Es el costo de mantener clases que no tienen utilidad, solo porque pueden o tuvieron utilidad ',
                '<strong>- Data Class:</strong> Clases que solo contienen metodos para acceder a las propiedades, sin algun otro comportamiento util ',
                '<strong>- Dead Code:</strong> Cualquier cosa que no se usa más, generalmente se vuelven obsoletos ',
                '<strong>- Speculative Generality:</strong> Codigo realizado para soportar futuras funcionalidades, que no tiene uso actual alguno ',
                '',
                '<strong>Couplers</strong>',
                '<strong>- Feature Envy:</strong> Metodos y clases que usan los atributos y propiedades de otros, más que los propios ',
                '<strong>- Intimidad inapropiada:</strong> Clases que usan atributos y metodos que no son propios como si lo fueran ',
                '<strong>- Message Chains:</strong> Sucede cuando el codigo tiene una gran pila de llamados ',
                '<strong>- Middle Man:</strong> La delegación de responsabilidades es importante, más no debe ser la unica responsabilidad de una clase ',
            ]),
        new Item('casos',
            [
                '- Algunos Smells codes se pueden ignorar, debido a que su solución conlleva a problemas peores, o simplemente es demasiado esfuerzo ',
                '- Si el rendimiento es esencial para la aplicación, algunas soluciones pueden aumentar el tiempo de ejecución y empeorarlo ',
                '- Si la solución conlleva a un acoplamiento indeseado entre clases o aumenta la complejidad de manera innecesaria ',
                '- Cuando el smells code tiene un alcanze muy pequeño y su cambio puede afectar el comportamiento general del sistema ',
                '- Hace parte de la implementación de un patron ',
                '- Cuando hay motivos validos e importantes para mantenerlos, como ser una condición de uso de algun framework',
                '- Si el desarrollo va a ser corto plazo y se delinio una linea a seguir ',
                '- Cuando la solución de un smell code crea otro ',
            ]),
        new Item('payoff',
            [
                '- Generalmente la solución de estos problemas siempre tiene consecuencias positivas sobre la calidad del software ',
                '- Simplifica clases y mejora la asignación de responsabilidades ',
                '- El codigo suele ser más flexible y facil de modificar ',
                '- La duplicación de codigo se reduce, mejorando la mantenibilidad ',
                '- La legibilidad aumenta, haciendo que futuros cambios sean más rapidos ',
                '- Mejora la organización y la abstracción ',
                '- Reduce el tamaño del codigo ',
            ]),
        new Item('designsmells',
            [
                '- Estos tambien se aplican a nivel de diseño y no solo de algo especifico del codigo ',
                '- También se conoce como Design Smells, como en <em>Agile Software Development, Principles, Patterns, and Practices</em> de Robert C. Martin de 2002. ',
                ' - En este libro se destacan las siguientes características como consecuencias del “Olor de Diseño”',
                '',
                '<strong>- Rigidez:</strong> Un cambio desemboca en otros cambios necesarios ',
                '<strong>- Fragilidad:</strong> Cualquier cambio puede afectar otras partes del sistema directa/indirectamnte involucradas ',
                '<strong>- Inmovilidad:</strong> Los componentes del sistemas no son facilmente rehusables en otros lugares ',
                '<strong>- Viscosidad:</strong> El sistema esta plagado de malas practicas y facilita que proliferen ',
                '<strong>- Complejida innecesaria:</strong> Infraestructura innecesaria para funcionalidades simples ',
                '<strong>- Repeticion innecesaria:</strong> Diferentes diseños, contienen logica que puede ser abstraida y centralizada ',
                '<strong>- Opacidad:</strong> La funcionalidad del sistema no esta bien definida y su alcance es difuso ',
                '',
                '- Estos se pueden identificar mediante observaciones subjetivas por parte de los programadores ',
                '- Dificilmente encontrados por pruebas o resultados cuantitativos',
            ])
    ];

export const VERSIONAMIENTO =
    [
        new Item('git',
            [
                '- El control de versiones ayuda a mantener una trazabilidad de todos los cambios en una aplicación ',
                '- El más conocido es GIT pero tambien existen otros como Mercurial',
                '- GIT puede ser usado en repositorios locales o distribuidos en la nube, permitiendo la colaboración entre desarrolladores ',
                '- Permite crear ramificaciones para trabajar de manera aislada sin afectar a todo el flujo en general',
                '- Tambien se pueden crear etiquetas para marcar commits y que sean más faciles de encontrar',
            ]),
        new Item('dependencias',
            [
                '- Los gestores de dependencias son ampliamente usados ya que evitan dolores de cabeza al manejar codigo de terceros o externos ',
                '- Son herramientas, plugins, librerias, frameworks, necesarios para desarrollar aplicaciones de gran envergadura ',
                '',
                '<strong>- NPM</strong>      Nacido sobre NodeJs se ha convertido en uno de los principales y más grandes repositorios de dependencias y modulos ',
                '<strong>- Bower</strong>    Hecho con NPM tiene menos funcionalidades, pero su apuesta principal es la ligereza y la optimización ',
                '<strong>- JAM</strong>      Es un gestor de paquetes que funciona directamente en el navegador, por lo que mantener y actualizar es más sencillo ',
                '<strong>- Composer</strong> Similar a NPM pero para las librerias de PHP, incluso algunos frameworks como laravel lo manejan por defecto ',
            ]),
        new Item('gradlevsmaven',
            [
                '<strong>- Maven:</strong> Es una forma de manejar proyectos en entornos JAVA ',
                ' - La configuración se base en un archivo XML ',
                ' - Maneja los jars necesarios para la ejecución del programa, ya sea de manera fisica o descargalos de repositorios ',
                ' - Gestiona las dependencias y las declaraciones que necesiten los jars para funcionar',
                '',
                '<strong>- Gradle</strong> Esta basada en varios conceptos de Apache Maven por lo que tiene varias mejores frente a este ',
                ' - Se basa en un lenguaje DSL, siendo más mantenible en el tiempo ',
                ' - Tambien puede gestionar los ciclos de vida, igual que Maven ',
                ' - Su rendimiento es mayor en comparación directa con Maven ',
            ]),
        new Item('versionamiento',
            [
                '- Las versiones se pueden dar por numero o por estabilidad ',
                '- No existe una regla que indique que siempre se deben manejar asi, pero es util conocer las convenciones ',
                '',
                '<strong>- Numeros: X.Y.Z </strong>',
                '<strong> - El primero numero:</strong> Indica la version principal del software ',
                '<strong> - El segundo numero:</strong> Indica nuevas funcionalidades en la version mayor ',
                '<strong> - El tercero numero:</strong> Es la correción de fallas, parches de seguridad, cambios menores, etc... ',
                '',
                '<strong>- Estabilidad: &alpha;, &beta;, RC</strong>',
                '<strong> - Alpha:</strong> version inestable que probablemente contenga errores y deba ser corregida ',
                '<strong> - Beta:</strong> Una version más estable que alpha y a la que se le deben hacer pruebas para verificarla ',
                '<strong> - Release Candidate:</strong> Son los ultimos toques previos para poder ser lanzada oficialmente ',
            ]),
        new Item('licencias',
            [
                '<strong>- Software libre &ne; Software gratuito</strong>',
                '<strong> - Software libre:</strong>    Puede ser usado como quiera el usuario, sin ninguna restricción ',
                '<strong> - Software gratuito:</strong> Aunque este no requiera de un pago, el usuario esta limitado en su actuar ',
                '',
                '<strong>- Licencias GPL</strong> El desarrollador conserva los derechos de autor, pero permite su libre distribucion, modificacion y uso, ',
                ' - siempre y cuando la nueva version se cobije bajo el mismo tipo de licencia ',
                '<strong>- Licencia BSD</strong> Es una licencia permisiva donde se puede vender sin dar acceso al codigo fuente ',
                '<strong>- Licencia Apache</strong> Esta licencia permite la modificación y distribución del original en cualquier modalidad, ',
                ' - siempre y cuando se especifique el codigo fuente de terceros usado, presente en la distribución ',
                '',
                '<strong>- Licencias Creative Commons: ',
                '<strong> - Atribucion</strong> Se debe dar credito al autor para poder ser usada, expuesta, distribuida, etc... ',
                '<strong> - No comercial</strong> Su uso esta prohibido para fines comerciales ',
                '<strong> - No derivadas</strong> La obra no puede ser modificada ',
                '<strong> - Compartir igual</strong> Las derivaciones solo se permiten manteniendo la licencia original y con permiso del autor ',
            ]),
        new Item('documentation',
            [
                '- Manejar o tener documentación siempre ha sido de los pasos más olvidados en todos los proyectos de tecnologia',
                '- Generalmente si esta existe, no sera una prioridad, ya que el conocimiento del proyecto se mantiene de boca en boca',
                '- Si esta existe debe ser de facil acceso y que este centralizada si es posible, ',
                ' - tambien debe estar enfocada segun el tipo de persona objetivo, no solo es util para el personal tecnico ',
                '- El uso de manejadores de versiones como Github o Gitlab tambien son utiles para seguir la pista de en que se esta trabajando ',
                '',
                '<strong>- Beneficios:</strong> ',
                ' - Aumentar la productividad, siempre y cuando este organizada y actualizada ',
                ' - Agilizar la comunicación entre equipos, en especial cuando son grandes y no siempre se puede hablar con la persona indicada ',
                ' - La incorporación de nuevos miembros es más efectiva, reduciendo la orientación necesaria por parte del equipo ',
                ' - Las palabras escritas pueden traducirse de una manera más rapida, si hay miembros del equipo que hablen otros idiomas ',
                ' - Permite una comunicacíon asincronica, en especial si hay personas con trabajos en diferentes zonas horarias ',
                ' - Escribir sabiendo el contexto, ayuda a mejorar la retentiva de los integrantes del equipo, y la lectura de los diferentes objetivos ',
                '',
                '<strong>- Elementos a considerar:</strong>',
                ' - Esta debe formar parte de las estrategias de CD/CI que se tengan del proyecto, ya que tambien puede ser versionada sin problemas ',
                ' - Su alojamiento debe ser en un lugar comun para todo el equipo, de facil acceso y que no sea dificil encontrar el contenido ',
                ' - Que sea en su mayoria texto, no significa que no sea agradable a la vista, su contenido debe presentarse de manera atractiva ',
                ' - No tiene porque ser una tarea individual, tambien se puede hacer con todo el equipo o en pair programing ',
            ]),
        new Item('licencesAndData',
            [
                '- El mundo de la tecnologia tiene conceptos complejos como: <em>Codigo Abierto</em>, <em>Datos Abiertos</em> y <em>Estandares Abiertos</em>',
                ' - y aunque parecieran intercambiables, no los son, ya que cada uno cuenta con reglas y principios diferentes por los cuales se rigen ',
                '- Tambien tenga en cuenta el termino <em>Propiedad Intelectual</em> que es ampliamente aplicable y no se limita solo al software',
                '',
                '<strong>Licencias de codigo abierto</strong> Generalmente aplica en donde el codigo fuente es accesible para todo publico, ',
                ' - siendo posible que sea inspeccionado, modificable y distribuible, siempre y cuando su licencia no lo restringa o lo haga de manera parcial ',
                '- Existen diferentes tipos de licencias que confieren diferentes derechos y responsabilidades, algunas permiten libertad casi ilimitada, ',
                ' - como la <strong>Licencia MIT</strong>, o como la <strong>Licencia Publica General GNU(GPL)</strong> que va enfocada a la protección de los derechos del usuario ',
                '',
                '<strong>Licencias de Datos abiertos</strong> Los datos abiertos no solo son información, tambien tienen pautas para su uso y distribución, ',
                ' - los desarrolladores pueden acceder a estos datos atravez de diferentes medios, como un API, que puede tener un limite de accesos, ',
                ' - o imposiciones como prohibir el uso comercial o una atribución obligatoria, por lo que a menudo son <strong>Licencias Creative Common</strong> ',
                '',
                '<strong>Estandares Abiertos:</strong> Permiten la interoperabilidad entre los multiples sistemas y plataformas que existen, al ser tan reconocidos ',
                ' - y usados, suelen ser Licencias de patentes esenciales, libres de regalias, para promover una amplica acogida, y evitar problemas por infracciónes ',
                '',
                '- Tambien es importante tener en cuenta que las licencias se pueden diferenciar entre datos y software, haciendo posible que ',
                ' - los datos que consuma o que genere un software, puedan tener una licencia diferente, a la del propio software, ',
                ' - y al no definirlas por separado, puede estar entrando en una zona gris, y algunos casos infringir normas de manera involuntaria ',
            ])
    ];

export const PRINCIPIOS =
    [
        new Item('solid',
            [
                '<em>S</em> <strong>Responsabilidad única:</strong>     Una cosa <strong>X</strong> solo deberia hacer y conocer cosas de su competencia, si no se tendria un acoplamiento indeseado ',
                '<em>O</em> <strong>Abierto/Cerrado:</strong>           Casi siempre sera mejor añadir nuevos comportamientos o funciones que modificar los existentes ',
                '<em>L</em> <strong>Sustitución de Liskov:</strong>     Todo objeto hijo es remplazable por sus padres, sin alterar el funcionamiento del sistema ',
                '<em>I</em> <strong>Segregación de interfaces:</strong> Es mejor tener interfaces especializadas, que interfaces genericas con metodos que generan ruido ',
                '<em>D</em> <strong>Inversión de dependencias:</strong> Las implementaciones pueden cambiar, pero las abstracciones no, por lo que el sistema se debe basar en estas ',
            ]),
        new Item('kiss',
            [
                '- Código entendible, esto en la mayoria de los casos hara que modificar y mantener el codigo sea más simple ',
                '- Mantener modulos, metodos y clases pequeñas en vez de entidades grandes ',
                '- Código autocomentado, nombres claros para las variables, metodos, clases, aplica para todo lo que pueda ser nombrado ',
                '- No abusar de los comentarios, estos solo se deben emplear cuando sean necesarios, y dado el caso mantenerlos actualizados',
            ]),
        new Item('yagni',
            [
                '- No lo añadas hasta que no lo necesites',
                '- Define prioridades, evita trabajo innecesario y que no aporta valor ',
                '- Esto tambien evita futuros retrasos y suposiciones erroneas, al tomar desiciones en base a los hechos '
            ]),
        new Item('occam',
            [
                '- Preferir siempre la solución más simple, asi se evita agregar complejidad arbitraria ',
                '- En igualdad de condiciones la solución más optima prevalecera',
                '- Simplificar las cosas, no implica que se deba ignorar la complejidad, solo que se debe reducir lo más posible '
            ]),
        new Item('dry',
            [
                '- Evita repetir código siempre que sea posible y que no se genere acoplamiento',
                '- Incrementa la mantenibilidad del código, modularizando y haciendo partes pequeñas y manejables ',
                '- Facilita la refactorización, y la creación de partes atomicas e independientes, que se puedan juntar ',
                '- Implementa código reutilizable, de manera que sea util y mantenible dentro del sistema ',
            ]),
        new Item('hollywood',
            [
                '- Se basa en la inversion de dependencias para crear la inversion de control ',
                '- Esto logra obtener las referencias y datos necesarios para funcionar mediante una entidad externa (frameworks)',
                '- Generalmente las entidades externas son los frameworks que ejecutan el codigo del usuario ',
                '- Las instancias se crean y se eliminan de manera más eficiente, mejorando el rendimiento ',
            ]),
        new Item('tellDontAsk',
            [
                '- La responsabilidad debe ser delegada al objeto correspondiente, en lugar de extraerla en un componente afuera ',
                '- En lugar de pedir los datos a los objetos, debemos decirles que hacer y esperar el resultado de la operación ',
                '- Esto es un refuerzo del concepto de encapsulación, propio de la orientación a objetos ',
            ]),
        new Item('stupid',
            [
                '<em>S</em> <strong>Patron singleton:</strong>       Es el unico patron que mal usado puede convertirse en un antipatron, no lo uses si no es necesario ',
                '<em>T</em> <strong>Acoplamiento indebido:</strong>  Sucede cuando un cambio afecta más partes de las debidas, esto indica una mala modularización ',
                '<em>U</em> <strong>Inestabilidad:</strong>          El software <strong>NO</strong> deberia ser dificil de testear, y menos de modificar ',
                '<em>P</em> <strong>Optimización prematura:</strong> Un codigo eficiente, por lo general es ilegible, por lo que optimizarlo sin necesidad solo trae complejidad innecesaria ',
                '<em>I</em> <strong>Nombres indescriptivos:</strong> Todo codigo idealmente deberia ser autocomentado, por lo que nombrar mal las cosas hace inalcanzable esta meta ',
                '<em>D</em> <strong>Duplicación:</strong>            El codigo duplicado deberia evitarse siempre que se pueda, aplicando <em>DRY</em> & <em>KISS</em>, además de otras practicas ',
            ]),
        new Item('twice-one',
            [
                '- Un dicho proveniente desde la carpinteria y aplicado a distintas y variadas profesiones ',
                '- Este dicho encarna la mentalidad de una planificacion minuciosa puede evitar errores, en especial si son costosos',
                ' - especialmente cuando se pueden realizar acciones faciles de hacer, pero dificiles de deshacer ',
                '- Debido a que el software es intangible y puede ser reversible, se puede convertir en una <em>"puerta de 2 vias"</em> segun Jeff Bezzos',
                '- Aun asi esto evitara malgastar tiempo y recursos, al solo cortar y deshacer, solo porque es posible conllevando menos efectos adversos ',
            ]),
        new Item('divide-conquer',
            [
                '- Un adagio popular dedicado a la resolución de problemas, donde al dividir un problema en partes más pequeñas, ',
                ' - encontrando soluciones a problemas más acotados y menos complejos, permitiendo que la suma de todos los esfuerzos ',
                ' - a la larga solucione el problema del cual se derivaron ',
                '',
                '- Esto se puede ver como una muñeca Rusa, donde cada muñeca esta formada por más partes que se van haciendo más pequeñas ',
                ' - pero juntas son capaces de conformar un todo, mayor a la suma de sus partes ',
            ]),
        new Item('soc',
            [
                '- Un concepto simple que dice que no todo se debe solucionar junto, en el mismo archivo, en la misma funcion, etc... ',
                '- Sino que se debe dividir en fragmentos, de modo que cada parte pueda completar una parte distinta, especifica y más acotada ',
                '- En palabras de <strong>Edsger W. Dijkstra</strong> <em>La separación de conceptos, aunque no sea perfectamente posible, </em>',
                '  <em>es la única técnica disponible, que yo sepa, para ordenar eficazmente los propios pensamientos</em>',
                '- Esto aplica desde funciones, clases, pasando por modulos, hasta llegar a proyectos ',
            ]),
        new Item('poc',
            [
                '- Es una prueba inicial, donde se toman acciones para determinar si una idea es lo suficientemente valiosa, factible, e incluso posible ',
                '- Tambien prueba la viabilidad de un producto para resolver alguna necesidad empresarial',
                '- Esto se diferencia de un <em>MVP</em> ya que esto es un pequeño documento o demostración de la etapa inicial, del cual se puede empezar a construir ',
                '- Despues de que se hayan aceptado por un cliente y/o usuario final, y asi poder empezar una toma de requisitos y factores claves de la aplicación ',
            ])
    ];

export const REFACTORIZACION =
    [
        new Item('codigolimpio',
            [
                '- Menos es Más, por algo existe el principio de <em>KISS</em>',
                '- Es más facil de entender para otros, permitiendo que su modificacion y su extensión no se vuelvan un dolor de cabeza ',
                '- Es más facil de mantener a lo largo del tiempo, cumpliendo principios como <em>DRY</em> y <em>Yagni</em>',
                '- Los tests corren de manera satisfactoria de manera regular, además de tener una buena cobertura',
            ]),
        new Item('deudatecnica',
            [
                '- Todo desarrollador desea crear un buen codigo pero las omisiones o errores crecen sigilosamente ',
                '- La mala modularización o la nula aislación del codigo puede hacer que los cambios tengan un gran impacto',
                '- Apurar el desarrollo puede crear soluciones rapidas pero con diversos errores y/o incompletas',
                '- La falta de pruebas y/o omitir las que ya existen, puede tener efectos colaterales inmesamente destructivos',
                '- La Documentación siempre sera necesaria, y omitirla entorpecera futuros cambios y la introducción de nuevos miembros ',
                '- Sin comunicación o interacciones incompletas pueden generar pequeñas islas dentro de la empresa, más aun si se recibe información erronea ',
                '- Tambien existe el elemento humano cuando el desarrollador es inexperto o incompetente',
            ]),
        new Item('tiposDeudaTecnica',
            [
                '- No realizar los cambios necesarios con premura hara que en el futuro sea más dificil y costoso refactorizar ',
                '',
                '                            Deuda imprudente                         Deuda prudente         ',
                '',
                '                       - Falta de tiempo/presupuesto          - Prioridad de funcionalidades ',
                'Deuda deliberada       - Refactor descuidado                    con la promesa de mejora     ',
                '                       - Insuficiencia de pruebas             - Minimo de pruebas a hacer    ',
                '',
                '                       - Falta de conocimiento                - El refactor constante evita  ',
                'Deuda involuntaria     - Sobreingenieria                        estos problemas, mientras se ',
                '                       - Anti patrones de diseño                aprende de los errores       ',
            ]),
        new Item('comentarios',
            [
                '- Comentar el codigo es sumamente util para determinar los segmentos que necesitan correciones o cambios ',
                '- La mayoria de IDEs admiten comentarios con etiquetas como:  ',
                '<strong>- TODO:</strong> Lugares que se pueden mejorar, ya sea legilibilidad, complejidad, etc.. ',
                '<strong>- FIXME:</strong> Porción de codigo que falla en circuntancias especificas y debe ser revisada ',
                '<strong>- NOTE:</strong> Funcionamiento interno ó posibles problemas no documentados ',
                '<strong>- KLUDGE:</strong> Codigo ineficiente, complejo ó insondable; que aun asi, funciona ',
            ]),
        new Item('cuandorefactorizar',
            [
                '- Cuando se inicia a duplicar codigo, eventualmente sera necesario refactorizarlo',
                '- Cuando se empieza se arregla un error es una excelente oportunidad para hacerlo',
                '- Cuando se hagan revisiones, siempre hay espacio para la mejora',
                '- Cuando se agregan nuevas funciones, tambien se pueden refactorizar las existentes ',
            ]),
        new Item('comorefactorizar',
            [
                '- El resultado debe ser mejor que lo anterior, de lo contrario sera tiempo perdido ',
                '- No se deben crear nuevas funciones, eso es estrictamente en tiempo de desarrollo ',
                '- Los tests deben seguir pasando tal y como antes de empezar',
            ]),
        new Item('tecnicasRefactoring',
            [
                '<strong>Composicion de metodos:</strong> Se base en descomponer metodos grandes en, metodos más pequeños y manejables evitando complejidad y tamaño ',
                '<strong>- Pros:</strong> Los metodos se hacen más entendibles y se eliminan variables de poca utilidad',
                '<strong>- Contras:</strong> La complejidad cognitiva puede ser mayor de la inicial, además de pequeñas afectaciones al rendimiento',
                '',
                '<strong>Mover funciones entre clases:</strong> Aunque un sistema se encuentre bien diseñado, habra clases con más responsabilidades que otras',
                ' - con la posibilidad de que estas esten bien asignadas en relación con las responsabilidades del objeto ',
                '<strong>- Pros:</strong> Se hace un mejor reparto de las responsabilidades ',
                '<strong>- Contras:</strong> Si se abusan de estos movimientos se pueden convertir en code smells ',
                '',
                '<strong>Organización de los datos:</strong> Esto ayuda a pensar en clases y funciones, en vez de operaciones con datos primitivos ',
                '<strong>- Pros:</strong> Permite aprovechar mejor los conceptos de POO como el encapsulamiento y la abstracción ',
                '<strong>- Contras:</strong> La complejidad del codigo puede crecer ',
                '',
                '<strong>Simplificación de condiciones:</strong> Las estructuras de control tienden a crecer, se deben revisar y reducir la complejidad cognitiva en lo posible ',
                '<strong>- Pros:</strong> Se reduce la complejidad y se aumenta la mantenibilidad ',
                '<strong>- Contras:</strong> En ciertos casos se debe implementar más codigo ',
                '',
                '<strong>Simplificación de metodos:</strong> Los metodos deben ser dicientes en cuanto a lo que hacen ',
                ' - Mejora el manejo de las excepciones, en vez de que se usen como condiciones del flujo ',
                '<strong>- Pros:</strong> Un metodo diciente es más facil de comprender y esta dentro de la linea del codigo autocomentado ',
                '<strong>- Contras:</strong> Los metodos se pueden volver más largos y complejos o hacer más llamados ',
                '',
                '<strong>- Lidiar con la generalización:</strong> Abstraer las generalidades del codigo, como el uso de interfaces, herencia, composición, jerarquias',
                ' - Se mejora la definición de atributos y comportamientos al tratar con la herencia ',
                '<strong>- Pros:</strong> Se mejora el diseño de las clases y se disminuye el acoplamiento ',
                '<strong>- Contras:</strong> Se debe realizar un analisis más profundo del porque y su solución ',
            ]),
        new Item('cuandoNoRefactorizar',
            [
                '- Un refactor nunca deberia cambiar el comportamiento observable del codigo ',
                '- Si no se tiene las suficiente certeza de que se pueda comprobar el funcionamiento despues de los cambios realizados ',
                ' - a nivel general y particular, no solo de las partes afectadas ',
                '- Si se esta en medio de un cambio funcional; y menos aun, si este no funciona ',
                '- Hay que cumplir un plazo de manera urgente, pero tampoco se puede descuidar ya que se crearia una bola de nieve eventualmente ',
                '',
                '<strong>Pasos a tener en cuenta:</strong>',
                '- Asegurese que hay un punto de restauración, al cual se pueda retroceder si no han funcionado o se deshacen los cambios ',
                '- Identificar que se planea refactorizar y que tecnica puede ser usada ',
                '- Si se tienen multiples refactors más pequeños, asegurese que el codigo siga funcionado despues terminar uno y antes de empezar con otro ',
                '- Ejecute periodicamente los test que hayan y de ser posible agregue nuevos casos que esten directamente involucrados ',
                '- Si se tiene una aplicación con una deuda tecnica masiva y con pocas maneras de comprobar los cambios, aplique la tecnica llamada <em>Golder Master</em>, ',
                ' - donde se tiene un gran conjunto de datos para comprobar que los resultados sean equanimes, antes y despues de los cambios ',
            ]),
        new Item(REFACTORING_LEGACY_CODE,
            [
                '- Como desarrolladores de software no solo debemos crear codigo, debemos mantener el que ya existe, solucionar problemas o agregar funcionalidades ',
                '<strong>- Hotspot analisis:</strong> El codigo antiguo puede estar llenos de deuda tecnica, pero esto no significa que se deba atacar las peores partes, ',
                ' - se debe priorizar el codigo de peor calidad y que cambia con mayor periodicidad, lo que indica que es prioridad ',
                '',
                '<strong>- Mikado Method:</strong> Una manera de "Estimar" aquellos refactors grandes sin perdernos en el camino, para esto debemos ',
                ' - anotar el objetivo que deseamos lograr, si se necesita otra tarea, entonces lo anotamos en otro circulo y empezamos de nuevo ',
                '- Cada vez que terminemos una tarea se tacha y continuamos con la siguiente en la cadena o con otra que este relacionada ',
                '- Esto nos ayuda a tener un foco en lo que estamos realizando, sin estrezarnos por contemplar todo lo que hay que hacer ',
                '',
                '<strong>- Over Commiting:</strong> Debido a lo facil que es perder el foco, o incluso terminar en un camino sin salida, perdiendo lo que si funciona ',
                '- Un enfoque seguro es realizar un commit cada vez que algo funcione, más o menos por el estilo de guardar un punto de retorno para la partida ',
                '',
                '<strong>- Katas:</strong> Hacer cambios en producción, con pocos o nada de tests, es algo más que osado, por lo que tener un ambiente ',
                ' - que controlemos y podamos probar nuevas tecnicas y maneras de testear, es mejor que hacerlo directamente en producción ',
                '',
                '<strong>- Approval Testing:</strong> Es una forma de escribir tests para luego poder refactorizar el codigo, donde se pueda generar una salida ',
                ' - de manera que funcione como una "foto" con la cual comparar y realizar tests de mutación, tambien conocida como: Golden Rule o Snapshot testing ',
                '',
                '<strong>- Architecture Decision Records:</strong> Una constante con el Legacy Code, es la falta de contexto, y el porque de las decisiones, ',
                ' - se encuentra un dilema acerca sobre si cambiar o no, que ventajas/desventajas puede traer esto, o si esto fue anteriormente documentado ',
                '- Hay una tecnica un poca obvia, pero bastante efectiva, y es documentar: ',
                '- El porque de la decisión, alternativas, pros/contras, fecha, consecuencias, etc...',
                '- Tambien no solo es documentar las decisiones, si no que esta se actualize debidamente y que todo el equipo este al tanto de las decisiones ',
            ]),
        new Item('manejarDeudaTecnica',
            [
                '- El codigo es un concepto abstracto, por lo que no siempre se puede visualizar de la manera que es debida para todas las esferas involucradas ',
                '- Por lo general el tiempo de desarrollo se va reduciendo y la complejidad y el mantenimiento aumentan, entre más deuda tecnica exista ',
                '- Existen varios tipos de deuda tecnica, no solamente la que se cataloga como codigo erroneo, hay más tipos conectados con otras areas: ',
                '',
                '<strong>- Calidad:</strong> Codigo complejo, carece de estandares, malos nombres, exceso de comentarios, etc...',
                '<strong>- Pruebas:</strong> No existe cobertura y no hay un enfoque adecuado para las pruebas',
                '<strong>- Acoplamiento:</strong> La Separacion de responsabilidades y de conceptos, no esta debidamente definida',
                '<strong>- Herramientas/Frameworks antiguos:</strong> Se siguen usando debido a la imposibilidad o falta de esfuerzo para actualizarse',
                '<strong>- Procesos manuales:</strong> Tareas que pueden automatizarse siguen siendo manuales, además no existen procesos de <em>CD/CI</em>',
                '<strong>- Sin documentación:</strong> o la que ya existe es obsoleta debido a falta de actualización',
                '<strong>- Conocimientos:</strong> El intercambio de saberes es poco fluido, y la toma de ciertas decisiones pareciera estar injustificada',
                '',
                '<strong>¿ Como medirla ?</strong> Para que se pueda intervenir, se debe poder medir de manera que se sepa en que niveles esta ',
                '<strong>- Razón de deuda Tecnica(TDR)</strong> Se compara el costo de reparla, con el del desarrollo original, ',
                ' - si esto llega a superar un umbral, el cual suele ser del <strong>50%</strong>, se debe considerar reescribir o abandonar el proyecto ',
                '<strong>- Metricas:</strong> Mediante herramientas que analizan cosas como: complejidad, duplicación, estandares, cobertura, profundidad de herencia, etc..',
                '<strong>- Relación defectos/entregas:</strong> Cantidad de errores corregidos e introducidos, o la tasa de fallos, aca se puede apoyar en las metricas <em>DORA</em>',
                '<strong>- Cobertura:</strong> Una buena cantidad de tests, es sinonimo de calidad y de una base solida, casi siempre',
                '',
                '<strong>Estrategias para afrontarla:</strong>',
                '- Ser transparentes para que todas las partes esten al tanto de lo que les corresponde',
                '- Se necesita priorizar los cambios en función del impacto, para esto se pueden usar modelos como <em>RICE</strong>',
                '- Se deben capacitar y enseñar al equipo que su tratamiento es necesario, y que siempre sera prudente asignar un tiempo para su revisión/corrección ',
                '- El uso de metricas, que puede hacerse durante la etapa de desarrollo, evitando crear una bola de nieve',
                '',
                '<strong>Como Mantenerla Baja:</strong> Lo que se quiere principalmente es producir codigo con una velocidad, calidad y complejidad adecuadas ',
                '<strong>- Cree arquitecturas:</strong> Asi se tiene una base solida sobre la cual trabajar, si no la <em>Ley de Conway</em> terminara afectando la arquitectura ',
                '<strong>- Documentación:</strong> Todas las decisiones de la arquitectura y decisiones tecnicas, deberian ser totalmente accesibles y contrastables con el codigo',
                '<strong>- Testing:</strong> Una buena cobertura, que cumpla con la <em>Piramide de pruebas</em>, tampoco esta demás seguir <strong>TDD</<strong>',
                '<strong>- Revisiones:</strong> Asi se comparte conocimientos y se obtienen diferentes puntos de vistas',
                '<strong>- Pair Programing:</strong> Mientras que un desarrollador escribe, otro esta observando para proporcionar asistencia y sugerencias ',
                '<strong>- Refactorización:</strong> Si la deuda es facilmente solucionable, hagalo, no se deberia pedir permiso para tareas simples como esta',
                '<strong>- Aprendizaje:</strong> Un buen desarrollador que tenga un gran abanico de conceptos, patrones y arquitecturas es menos propenso a equivocarse ',
                '<strong>- Entrega continua:</strong> Asi se tienen ciclos cortos y una retroalimentación más efectiva ',
            ]),
        new Item(REFACTORING_MANAGE_DEPENDENCIES,
            [
                '- Durante la decada de los 90s y antes de empezar el año 2000 existio un problema informatico gigante, el famoso <strong>Y2K</strong>, debido a la generalización ',
                ' - de que los años en las fechas, se guardaran en 2 digitos, por lo que una fecha de 1997 se representaba como 97, el caos provenia del año 2000 ',
                ' - donde se temia que la fecha se pudiera malinterpretar como 1900, retrocediendo 100 años, causando problemas y confusiones generalizados',
                '',
                '- El problema se resolvio, pero fue un costo enorme para miles de empresas, ya que hubieron de modificar millones de lineas que estaban duplicadas ',
                ' - y dispersas ó que hacian uso de sentencias como el <em>go to</em> que complicaban los cambios, sin contar las repercusiones que esto trajo',
                '',
                '- Para resolver un problema, es importante definirlo y acotarlo, para eso es importante definir que es una dependencia, que se puede definir como: ',
                ' - un fragmento de codigo determinado que no puede ser entendido o modificado, de forma aislada, debe hacerse junto a la parte involucrada',
                '',
                '- Las <strong>Dependencias obvias</strong> son aquellas son aquellas que generan cambios obligatorios dentro del codigo, como agregar/eliminar un parametro, ',
                ' - esto obligara a modificar todos los llamados/invocaciones que se tengan de la función',
                '',
                '- Tambien existen <strong>Dependencias secuenciales</strong>, donde la parte a modificar parece independiente, pero no lo es, es parte de una secuencia de ejecución, ',
                ' - donde el orden correcto de la ejecución o serie de tareas, es esencial para el correcto funcionamiento, para eliminar esta dependencia',
                ' - se puede refactorizar para que se comporte como una <em>maquina de estados</em>, con todos los estados y pasos debidamente definidos ',
                '',
                '- Las <strong>Dependencias ocultas</strong> son más dificiles de visualizar, sus cambios no afectan a todos los lugares que deberian, como el logo de una pagina, ',
                ' - este siempre debe ser visible en todas las paginas; pero este cambio con el tiempo y en consecuencia todas las paginas tambien, ',
                ' - obligando a buscar y modificar cada archivo que contega el antiguo logo, la mejor solución para evitar problemas como este es, ',
                ' - hacer la dependencia explicita haciendo que todas las paginas busquen la imagen a usar, para que futuros cambios queden centralizados ',
                '',
                '- Las variables o datos globales, se pueden considerar <strong>Dependencias globales</strong> esto es problematico por diferentes razones,',
                ' - modificar la variable afectaria multiples lugares, y crecer alrededor de este unico punto, hara que la logica y el mantenimiento se compliquen, ',
                ' - por eso se insta a tomar un enfoque de tipo inmutable y uso de variables locales, mediante el uso de abstracciones y refactors',
                '',
                '- Conforme se va aumentando la gerarquia y la importancia de los componentes, se hablan de conceptos como <strong>Inyección de dependencias</strong> y ',
                ' - patrones arquitectonicos como <strong>Capas</strong> que surgen debido a la necesidad de reducir o controlar este acoplamiento',
                ' - y tener un mejor entendimiento de la estructura, los componentes y las relaciones que conforman sistema',
            ])
    ];

export const SEGURIDAD =
    [
        new Item('firewall',
            [
                '- Tiene la función de denegar ó permitir el acceso a nuestra red, tanto entradas como salidas ',
                '- El trafico debe cumplir con una serie de reglas previamente definidas para su libre circulación ',
                '- Se puede implementar por medio de Hardware, Software, ó ambos ',
                '',
                '<strong>Estas son algunas de sus funciones:</strong>',
                '- Bloquear accesos no permitidos                    - Supervisar el trafico interno                 ',
                '- Evitar accesos no autorizados, dentro de la red   - Advertir de posibles accesos malintencionados ',
                '- Posibilidad de bloquear aplicaciones peligrosas                                                   ',
                '',
                '<strong>Tipos:</strong>',
                '<strong>- Proxy:</strong> funciona como gateway de una red a otra para una aplicación especifica',
                '<strong>- Inspección activa:</strong> Permite bloquear el trafico en función del estado, puerto y el protocolo y monitorea la actividad',
                ' - desde la apertura hasta el cierre de una conexión, para decidir si aplicar o no en base a la condiciones de filtrado',
                '<strong>- Administración Unificada de Amenazas(UTM):</strong> Suele combinar de manera flexible las funciones de un firewall de ',
                ' - inspección activa, con prevención de instrucciones y antivirus, estos se centran en la simplicidad y facilidad de uso',
                '<strong>- De proxima generación(NGFW):</strong> Es la evolución de la inspección activa y del filtrado de paquetes, ya que tambien ',
                ' - pueden proteger la capa de aplicación y malwares avanzados',
                '<strong>- NFGW centrado en amenazas:</strong> Incluye las funcionalidades de un <em>NFGW</em> tradicional además de identificar cuales ',
                ' - son los activos que corren mayor riesgo, reconociendo el contexto completo '
            ]),
        new Item(SECURITY_PROTOCOLOS_SEGURITY,
            [
                '<strong>SSL</strong> capa de sockets seguros ',
                '- Es una tecnologia para mantener segura una conexión de internet ',
                '- Esto protege toda la información privada que se envia entre 2 sistemas, (cliente-servidor)',
                '',
                '<strong>TSL</strong> una versión más actual y segura de SSL ',
                '- La principal difirencia es el algoritmo de cifrado ',
                '',
                '<strong>HTTPS</strong> Hyper Text Transfer Protocol Secure o protocolo seguro de transferencia de hipertexto ',
                '- Basicamente indica si una conexion es segura, por medio de un certificado de TSL ó SSL ',
            ]),
        new Item('proxy',
            [
                '- Son un puente entre el origen y el destino de una petición ',
                ' - Pueden servir para controlar el acceso, segun los usuarios que intenten acceder ',
                ' - Filtrar el contenido segun las politicas de la empresa ',
                ' - Almacenar en cache el contenido de las paginas que hayan sido accesadas previamente ',
                '',
                '- Pueden ser inversos, conviertiendose en un puente entre el destino y el origen ',
                '- Los proxies inversos pueden ser usados como balanceadores de carga ',
            ]),
        new Item('ciberSeguridad',
            [
                '- Es la practica de defender toda la infraestructura fisica y logica necesaria para nuestra negocio ',
                '- Aplica desde diferentes ramas de negocios, hasta los dispositivos moviles ',
                '',
                '<strong>Categorias comunes</strong>',
                '<strong>- De red:</strong> Consiste en proteger una red informatica de ataques dirigidos o malware oportunista ',
                '<strong>- De aplicaciones:</strong> Se enfoca en mantener el software libres de amenazas o vulnerabilidades ',
                '<strong>- De la información:</strong> Protege la integridad y la privacidad de los datos ',
                '<strong>- Operativa:</strong> Incluye los procesos y decisiones de que recursos son accesibles y a quienes ',
                '<strong>- Recuperación ante desastres:</strong> Ya sea un evento natural o un incidente de ciberseguridad, ',
                ' - la empresa ha de tener planes de recuperación, para garantizar la continuidad del negocio ',
                '<strong> - Usuarios:</strong> El eslabon más debil de la cadena casi siempre han de ser los usuarios, estos pueden ser atacados de diversas maneras',
                '',
                '<strong>Tipos de ciberamenazas</strong>',
                '<strong>- Delito cibernetico:</strong> Agentes individuales o grupos que atacan sistemas para obtener beneficios financieros o causar interrupciones en sistemas criticos ',
                '<strong>- Ciberataques:</strong> Recopilan información para exponer y dañar organizaciones ',
                '<strong>- Ciberterrorismo:</strong> Debilitar o destruir sistemas electronicos para causar panico o terror ',
                '',
                '<strong>Metodos usados</strong>',
                '<strong>- Malware:</strong> Software malicioso creado para interrumpir o dañar los equipos de los usuarios, ',
                ' - suelen ser propagados mediante archivos infectados, ya sean descargas o correos electronicos ',
                '<strong>- Virus:</strong> Programa capaz de reproducirse y extenderse por todo un sistema ',
                '<strong>- Troyanos:</strong> Es un malware que se disfraza de software legitimo para recopilar datos de los usuarios ',
                '<strong>- Spyware:</strong> Registra todas las operaciones de los usuarios para robar información personal y sensible ',
                '<strong>- Ransomware:</strong> Bloquea los archivos y datos del usuario hasta que no se pague un rescate ',
                '<strong>- Adware:</strong> Software publicitario que puede difundir malware ',
                '<strong>- Botnets:</strong> Redes de equipos infectadas y que son usadas por los cibercriminales sin autorizacion previa ',
                '',
                '<strong>Ataques</strong>',
                '<strong>- Inyección de SQL:</strong> Se puede usar para robar datos o tomar el control de bases de datos, por medio de instrucciones que la base de datos ejecutara',
                '<strong>- Phishing:</strong> Son correos electronicos que aparentan ser legitimos, pero solo buscan robar información personal, entregada por el mismo usuario',
                '<strong>- Man-in-the-middle:</strong> Es la interceptación de comunicaciones entre 2 dispositivos, por ejemplo una red publica y un dispositivo conectado a esta',
                '<strong>- Ataque de denegación de servicio(DoS):</strong>',
                ' - se impide que un sistema pueda satisfacer a sus usuarios al sobrecargar e inutilizar los servidores mediante inmensas cantidades de trafico',
                '',
                '<strong>Protecciones:</strong>',
                '- Mantenga actualizado su sistema operativo ',
                '- Use software antivirus de su preferencia ',
                '- Utilizar contraseñas seguras y cambiarlas con periocidad ',
                '- No abrir archivos adjuntos de fuentes desconocidas ',
                '- No hacer clic en los vinculos de remitentes desconocidos ',
                '- Evitar el uso de redes wifi publicas',
            ]),
        new Item('cia',
            [
                '- Esta triada es tan fundamental para la seguridad, a tal punto que cada filtración de datos se produce, es por la violación de alguno de estos principios ',
                '- Los profesionales y las organizaciones evaluan las amenazas y vulnerabilidades basandose en el impacto, ',
                ' - que pueda causar en alguna de estas caracteristicas, para implementar planes y soluciones que minimicen el riesgo ',
                '',
                '<strong>Confidencialidad:</strong> Esfuerzo que emplean las organizaciones para mantener sus datos privados, o en su defecto restringidos ',
                '- Una de las maneras para lograr esto es controlar el acceso a las personas ',
                '- Realizar capacitaciones para dar a entender la importancia de los datos ',
                '- Encriptación y/o autenticación para acceder a estos ',
                '',
                '<strong>Integridad:</strong> Hace referencia a la garantia de que los datos no hayan sido manipulados ni alterados ',
                '- Encriptación de los datos por medio de funciones hash ',
                '- Firmas digitales y certificados digitales de autoria ',
                '- Control de versiones y control de acceso ',
                '',
                '<strong>Accesibilidad:</strong> Los datos no tienen valor si no se pueden usar o consultar cuando sean necesarios ',
                '- Para garantizar el acceso a estos se puede tener servidores en redundancia ',
                '- Parches y actualizaciones regulares al software ',
                '',
                '- No todas las organizaciones necesitan las mismas caracteristicas, pero si todas deben cumplir las 3 en cierto grado ',
                '- Darle prioridad a alguna sobre las otras no significa su descuido, solo es una elección consciente de cual es más importante para el negocio',
            ]),
        new Item('noRepudio',
            [
                '- Es un principio fundamental en lo que concierne a la seguridad informatica ',
                '- Garantiza que todo mensaje haya sido originado por el emisor y que este no haya sido suplantado ',
                '- Igual que todo mensaje debe ser recibido por el receptor, y por nadie más ',
                '- Es la capacidad para demostrar la paticipación de todas las partes involucradas ',
                '',
                '- Para garantizar esto, se pueden seguir 2 mecanismos basicos para este fin: ',
                '<strong>- Autenticación:</strong> Proceso o mecanimos para identificar a un usuario ',
                '<strong>- Autorización: </strong> Permite verificar la identidad del usuario y su permisos de acceso al sistema ',
                '',
                '<strong>Tipos de repudio:</strong>',
                '<strong>- En origen:</strong>  El remitente no puede negar haberlo enviado ya que hay evidencia por parte del destinatario de haberlo enviado ',
                '<strong>- En destino:</strong> Se avala que se recibio el mensaje y no se podra rebatir ya que el remitente tiene evidencia de haberlo recibido ',
                '',
                '<strong>Firmas electronicas:</strong> Es una manera de afirmar que cada persona es unica y que tiene una manera de identificarse, ',
                ' - esta solo debe ser conocida por la persona y su organización, tanto la clave publica como la privada ',
                '',
                '<strong>Esto se puede dar de diversas maneras:</strong> ',
                '<strong>- Simple:</strong> Solo se rechaza o acepta el contenido del documento ',
                '<strong>- Avanzada OTP:</strong> Se recibe un codigo mediante un canal diferente al usado, con un codigo para ser verificado ',
                '<strong>- Biometria:</strong> Es necesario una firma fisica o una identificación tangible de que es quien se dice ser ',
                '<strong>- Certificado digital:</strong> Documento cifrado mediante un algoritmo hash que cuenta con una llave publica y una privada ',
                ' - este hash puede ser cifrado y descifrado por ambas partes y debe ser igual para ambos, garantizando la integridad del mensaje ',
                ' - previo a esta operación ambas partes deben haber compartido una clave publica y cada quien tener su clave privada ',
            ]),
        new Item('matrizDeRiesgo',
            [
                '- Permite identificar de manera rapida y visual las probabilidades de accidentes, riesgos y peligros ',
                '- Esto ayuda al proceso de tomas de decisiones y saber si estan controlados, si no, saber cuales se deben priorizar ',
                '',
                '<strong>Probabilidad:</strong> ',
                ' - Alta  -> [50% , 100%] Posibilidades de que ocurra a menudo en circunstancias similares ',
                ' - Media -> [10% , 50%)  No pasa con frecuencia ',
                ' - Baja  -> [1% , 10%)   Podria suceder, dandose el caso ',
                '<strong>Impacto:</strong>',
                ' - Grave    -> Consecuencias negativas en una o varias areas, impidiendo su funcionamiento o generando fallos ',
                ' - Moderado -> Podria crear problemas que tengan consecuenias negativas para ciertos procesos o personas ',
                ' - Leve     -> Si se llegara a dar su impacto seria bajo en la organización ',
                '',
                '  P\I    Grave    Moderado  Leve ',
                '  Alta   Critico                 ',
                '  media           Moderado       ',
                '  Bajo                      Leve ',
            ]),
        new Item('condicionDeCarrera',
            [
                '- Sucede cuando varios subprocesos intentan acceder a un recurso compartido, de manera simultanea ',
                '- Esto es indeseable ya que puede alterar los datos, o dañar la secuencia de las operaciones provocando errores ',
                '- A nivel de codigo pueden suceder algunos de los siguientes escenearios',
                '',
                ' - Bloqueo del ordenador            - Errores al leer o escribir datos',
                ' - Operaciones ilegales             - Apagado del programa',
                ' - Errores logicos en la ejecución ',
                '',
                '- Estos errores se pueden solventar al manejar los hilos y subprocesos de manera correcta, ',
                ' - más no se pueden erradicar, debido a la naturaleza multihilos y procesos de la informatica ',
            ]),
        new Item('honeypot',
            [
                '- Son una forma de defensa para vectores de ataque, phishing, exploits y malware, funcionando como un sebo para los atacantes, ',
                ' - resguardando la información valiosa, al desviar el trafico de los atacantes hacia esfuerzos inutiles ',
                '- No son una medida infalible ya que si el atacante se da cuenta lo evitara, ',
                ' - por lo que se deben tener más medidas de seguridad internas, externas y perimetrales ',
                '- Tambien es necesario tener en cuenta que pueden ser un arma de doble filo al servir como distracción para un ataque, ',
                ' - o como punto de acceso hacia nuestro sistema; aun asi siguen siendo una gran opción para reforzar nuestra seguridad ',
            ]),
        new Item('zeroDayExploit',
            [
                '- Son vulnerabilidades de software recien descubiertas sin medidas para solucionarlas ',
                '- Estos ataques suceden antes o recien sean descubiertas las vulnerabilidades por lo que se han tenido "cero dias" para arreglarlo ',
                '- Debido a que no se tienen registros de estos problemas, es comun que los ataques tengan exito hasta que el sistema sea parchado ',
                '',
                '<strong>Esta tactica es usada generalmente por:</strong>',
                '- Hacktivistas: Quienes visibilizan los ataques para llamar la atención por una causa ',
                '- Cibercriminales: Hackers cuyo objetivo es tener ganancias o destruir sistemas ',
                '- Espionaje corporativo: Hackers de empresas atacando a la competencia ',
                '- Guerra informatica: Paises o entidades politicas que atacan la infraestructura cibernetica de otro pais ',
                '',
                '<strong>Blancos comunes:</strong>',
                '- Sistemas operativos                               - Aplicaciones de oficina',
                '- Navegadores web                                   - Codigo abierto         ',
                '- Hardware, firmware e Internet de las cosas (IoT)                           ',
                '',
                '<strong>Identificar ataques del dia 0:</strong>',
                '- Debido a su mutabilidad y a su desconocimiento no hay medidas infalibles para detectarlos',
                '- Se recomienda usar bases de datos de malware existentes ya que estas se actualizan con relativa rapidez ',
                '- Puede ser util examinar la interacción de los archivos entrantes con el sistema en vez de su codigo y detectar si su comportamiento es malicioso ',
                '- Aprendizaje automatico basandose en datos y situaciones previas del sistema ',
                '',
                '<strong>Formas de protección:</strong>',
                '- Actualizaciones constantes del software y de los sistemas operativos ',
                '- Evitar usar aplicaciones de terceros que no sean necesarias ',
                '- Educación basica para los usuarios y asi evitar errores comunes ',
                '- Usar software antivirus ',
            ]),
        new Item('pentest',
            [
                '- Es una prueba de seguridad que simula un ciber ataque real dentro de un entorno controlado, para identificar brechas y problemas de seguridad ',
                '',
                '<strong>- Algunos ataques comunes pueden ser:</strong>',
                ' - Instalación de malware, virus, troyanos, keylogger, ransomware    - Fallos de configuración ',
                ' - Busqueda y explotación de puertas traseras                        - Ingenieria social y recopilación de datos ',
                '',
                '- Estos tipos de testing son una forma hacking etico por lo que estan amparados bajo la ley y pueden ser contractuales ',
                '<strong>Este consta de 3 fases:</strong>',
                '- Reconocimiento de datos para identificar posibles puertos de acceso ',
                '- Analisis de vulnerabilidades y sus posibles formas de explotarlas ',
                '- Explotación, se comprueba que no se puedan hacer ataques de los siguientes tipos: ',
                '  - Inyección de codigo                    - Inclusion de ficheros',
                '  - Evasión de autenticación               - Carencias en el control de autorización ',
                '  - Ejecución de comandos en el servidor   - Ataques de tipo CSRF',
                '  - Manejo de errores                      - Gestion y/o secuestro de sesiones ',
                '  - Ataques de DDOS                        - Fugas de información ',
                '',
                '- Si se llega a encontrar alguna de estos errores, se redactara un informe con las vulnerabilidades encontradas, ',
                ' - evidencias, daños causados ó información robada por el atacante, y finalmente medidas correctivas o de mitigación ',
                '',
                '- Estos tests tambien pueden tener cierto grado de conocimiento de la aplicación ',
                ' - Caja negra:  No se tiene conocimiento alguno del sistema a testear ',
                ' - Caja Gris:   Se tiene información limitada como tecnologias, dominios, cuentas legitimas y otros datos que pueden ser utiles ',
                ' - Caja Blanca: No se oculta ningun tipo de información, todos los detalles son previamente conocidos ',
            ]),
        new Item('owaspTop',
            [
                '<strong>- Open Web Security Application Security:</strong> Es una colección de recursos que incluye una guia de desarrollo para evitar problemas de seguridad ',
                ' - Regularmente sacan un top 10 con los problemas más comunes y peligrosos a nivel general de las aplicaciones ',
                '',
                '<strong> 1 Broken access control:</strong> Fallo o intrusion de los permisos de acción de los usuarios, exponiendo o perdiendo información sensible ',
                '<strong> 2 Cryptografic failures:</strong> Fallos en la ocultación de la información debido a falencias en la encriptación ',
                '<strong> 3 Injection:</strong> La información no es filtrada ni valida previamente por lo que se pueden inyectar scripts de SQL y NoSQL maliciosos ',
                '<strong> 4 Insecure Design:</strong> Fallas en los diseños iniciales que no contemplan validaciones de seguridad ',
                '<strong> 5 Security Misconfiguration:</strong> Privilegios y configuraciones laxas o innecesarias ',
                '<strong> 6 Vulnerable and Outdated Components:</strong> Desconocimiento de las versiones manejadas en los diferentes componentes de la aplicación ',
                '<strong> 7 Identification and Authentication Failures:</strong> Contraseñas debiles o conocidas por los atacantes son usadas en la aplicación ',
                '<strong> 8 Software and Data Integrity Failures:</strong> Uso de fuentes desconocidas o librerias de terceros de poca confianza ',
                '<strong> 9 Security Logging and Monitoring Failures:</strong> El registro y monitoreo de la seguridad puede ser insuficiente teniendo lugares sin supervisión ',
                '<strong> 10 Server-Side Request Forgery:</strong> Esto ocurre cuando se obtiene un recurso de una url sin validar la confiabilidad de esta ',
                '',
                '- Estos son los incidentes de seguridad para el top del 2021',
            ]),
        new Item('stride',
            [
                '- Modelado de amenazas, es una estrategia para identificar y eliminar posibles vulnerabilidades antes de escribir codigo ',
                '- Desarrollado en la decade del 90 por ingenieros de Microsoft, teniendo en cuenta 6 categorias: ',
                '',
                '<em>S</em><strong> Suplantacion de indentidad:</strong> Ocurre cuando un hacker se hace pasar por otra persona, asumiendo la información de esta nueva identidad ',
                ' - Esto con el fin de cometer fraude y/o robar datos personales ',
                '<em>T</em><strong> Manipulación de datos:</strong> Sucede cuando los datos son modificados sin autorización ',
                ' - Por estas y otras razones es importante tener monitorear y revisar la integridad de los datos ',
                '<em>R</em><strong> Repudio:</strong> Pasa cuando un actor desconocido realiza una operación ilegal o maliciosa en el sistema ',
                ' - Y este no cuenta con la capacidad de rastrear la actividad maliciosa ',
                '<em>I</em><strong> Divulgación de la información:</strong> Estas fugas de información sucede cuando los sitios revelan información confidencial involuntariamente ',
                ' - Esto puede afectar el flujo normal de los datos, el acceso al codigo fuente, o mensajes de error con especificaciones internas ',
                '<em>D</em><strong> Denegación de servicios:</strong> Estos impiden el correcto acceso a las aplicaciones para dejarlas fuera de servicio ',
                ' - Estos ataques son principalmente de fuerza bruta ya que se requiere una gran capacidad para lograr su objetivo ',
                '<em>E</em><strong> Elevación de privilegios:</strong> Usuarios con o sin autorización pueden acceder a posibilidades que previamente no tenian ',
                ' - Estos accesos se dan debido a modificaciones ilegales en los permisos de los usuarios o accesos ilegales a la aplicación ',
            ]),
        new Item('ciam',
            [
                '- La experiencia de los clientes es algo fundamental hoy en dia, ya no es diferenciador, es un requisito basico ',
                '- No solo eso, tiempos de crisis como la pandemia reciente han demostrado que las empresas que mejor conocen a sus clientes, estan mejor posicionadas ',
                '- Parte de esto es la Gestion de Acceso e Identidad de Cliente (CIAM)',
                '- Esto busca el equilibrio optimo entre comodidad, privacidad y seguridad para los clientes ',
                '- Además de esto tambien se tiene en vista el uso, recopilación y almacenamiento de estos datos ',
                '',
                '- Centralizar estos datos permite tomar decisiones estrategicas con mayor precisión y efectividad ',
                '- Hacer esto, se puede volver abrumador por lo que que se puede relegar a un tercero experto en este ambito (IDaaS) Identity as a Service ',
                '',
                '<strong>Beneficios:</strong>',
                '<strong>- Escalabilidad:</strong> Manejar miles o millones de usuarios, ya sea trafico normal o de temporada, es un aspecto fundamental ',
                '<strong>- Experiencia del cliente:</strong> Diferentes formas de iniciar sesión y datos que se autorecopilan son buena formas de mejorarla ',
                '<strong>- Seguridad:</strong> Nada se gana una mejor experiencia de usuario si los datos son vulnerables, por esto es importante, ',
                ' - el resguardo correcto de las credenciales y el correcto manejo de la autenticacion como de las sesiones ',
                '<strong>- Privacidad:</strong> La centralización de los datos es necesaria para cumplir con las leyes e informes de privacidad de datos, ',
                ' - estas leyes han puesto en foco la importancia del manejo de los datos, la recopilacion y su control ',
            ]),
        new Item('lateralChanel',
            [
                '- Es un exploit de seguridad con el fin de recopilar información o influir en la ejecución del programa, apuntando o midiendo el hardware ',
                '- Historicamente dificiles de hacer, si no fuera por la actualidad donde la sensibilidad y la cantidad de estos ha aumentado constantemente ',
                '- Estos son dificiles de defender y aun más de detectar, y son efectivos contra sistemas aislados la nube y hasta maquinas virtuales ',
                '',
                '<strong>Tipos conocidos:</strong>',
                '<strong>- Electromagnetismo:</strong> Se mide la radiación u ondas de radio emitidas por el dispositivo, para reconstruir las señales internas ',
                '<strong>- Acustico:</strong> Los sonidos emitidos por el dispositivo pueden reconstruir información como las pulsaciones de las teclas del usuario ',
                '<strong>- Energia:</strong> Al medir la cantidad de enercia consumida y el tiempo de utilización, se puede inferir la actividad de este ',
                '<strong>- Optico:</strong> Algo como tan simple como ver una grabación o mirar encima del hombro de alguien, pueden caer dentro de esta categoria ',
                '<strong>- Cache:</strong> El almacenamiento cache, usado para mejorar el rendimiento, puede ser usado para obtener información bloqueada ',
                '<strong>- Hardware:</strong> Atacar partes especificas de los dispositivos de maneras peculiares para generar fallos o robar datos como, ',
                ' - un ataque de martilleo de filas para dañar sectores de la RAM o un arranque en frio leyendo datos de chips enfriados bruscamente ',
            ]),
        new Item('csp',
            [
                '- Es una política de seguridad para decirle al navegador exactamente qué recursos se pueden cargar en una aplicación web ',
                '- Esta politica nace incentivada por los navegadores para evitar el Cross-Site Scripting <strong>(XSS)</strong> entre otras brechas ',
                '- Estos se agregan como headers de las peticiones y controla el acceso y la ejecución de recursos como: ',
                '',
                ' - Hojas de estilos      - Audio ',
                ' - Imagenes              - Video ',
                ' - Contenido embedido    - Fuentes',
                '',
                '- Ademas de esto tambien se pueden tener control sobre cosas como los iframe, formularios, entre otros ',
                ' - Para más detalles y especificaciones, revisa el enlace original y sus fuentes ',
            ]),
        new Item('csrf',
            [
                '- Este ataque fuerza al navegador del usuario que se este validando en cualquier sitio, como el correo o una red social, ',
                ' - enviar una petición a una aplicación web vulnerable, realizando la actividad maliciosa en nombre de la victima logueada ',
                '- Al contrario de los Cross Site Scripting (ordenes en sitios cruzados) <strong>XSS</strong> que, ',
                ' - explotan la confianza del usuario con algun sitio; el <strong>CSRF</strong> explota la confianza que el sitio web tiene con el usuario ',
                '- Prestandose para actividades ilicitas como el acceso de cuentas privadas ó acusaciones de acceso a contenido lascivo e ilegal ',
                '',
                '<strong>¿ Como funciona ?</strong>',
                '<strong>1</strong> Se debe vulnerar algun servidor e ingresar algun codigo HTML especifico; este sera llamado <em>A</em> ',
                '<strong>2</strong> La victima establece una conexión legitima con la aplicación web alojada en otro servidor, designado <em>B</em> ',
                '<strong>3</strong> La victima accede a la aplicación de <em>A</em>, donde se aloja el codigo del atacante ',
                '<strong>4</strong> El nagedor de la victima realiza una petición contra la aplicacion presente en <em>B</em> sin que este se entere ',
                '',
                '<strong>Protección</strong> ',
                '- Configurar el navegador para que no recuerde usuarios o contraseñas, usar el modo incognito es viable en estos casos ',
                '- Cerrar las sesiones, cuando no se vayan a usar más y no usar la opción de mantener/recordar la sesion ',
                '- Manejar diferentes navegadores, para diferentes acciones ',
                '- Utilizar complementos para bloquear la ejecución de scripts, para que los formularios que sean enviados por el metodo POST, ',
                ' - deban ser autorizados previamente por el usuario y no se envien automaticamente',
            ]),
        new Item('restApiAuth',
            [
                '<strong>Autenticación Basica:</strong> Implica enviar un usuario y contraseña en cada solicitud, y no necesariamente han de estar cifrados ',
                ' - Es ideal en aplicaciones simples donde la seguridad y el cifrado de los datos no es importante, o se tenga una conexión segura ',
                '',
                '<strong> Autenticación con Token:</strong> Utiliza tokens generados con <em>JWT</em> que se intercambian entre el cliente y el servidor',
                ' - Ofrece una mejora en la seguridad al evitar enviar constatemente las credenciales en cada petición, Ideal para sistemas más seguros y escalables ',
                '',
                '<strong> Autenticación OAuth:</strong> Permite el acceso a terceros a los recursos del usuario, sin revelar credencial alguna, mediante tokens de acceso ',
                ' - Ideal cuando se requiere el acceso controlado a los recursos y los usuarios se pueden obtener/manejar mediante servicios de terceros ',
                '',
                '<strong> Api Key Autenticación:</strong> Asigna claves unicas a usuarios y/o aplicaciones, un metodo simple y que carece de caracteristicas anteriores ',
                ' - Ideal para un control de acceso sencillo, en entornos poco sensibles o manejar permisos por usuarios más laxos ',
                '',
                '- Existen otros metodos, pero estos de los más populares y usados que hay '
            ]),
        new Item('attacksOnModelOSI',
            [
                '- Acontinuación se mostraran algunos de los posibles ataques en cada una de las 7 capas del modelo OSI',
                '',
                '1 <strong>Capa Fisica            </strong> - Escucha                        - Manipulación        - Interferencia electromagnetica              ',
                '2 <strong>Capa de Enlace de Datos</strong> - Suplantacion de Macs           - Salto de Vlan       - Suplantacion de ARP                         ',
                '3 <strong>Capa de Red            </strong> - Suplantación de IP             - Ataques DDOS        - Manipulacion de tablas de rutas             ',
                '4 <strong>Capa de Transporte     </strong> - Hombre en el medio             - Inundación SYN/ACK                                                ',
                '5 <strong>Capa de Session        </strong> - Secuestro de Sessión           - Fuerza bruta        - Fijación de la Sessión                      ',
                '6 <strong>Capa de Presentación   </strong> - Inyeccion de codigo malicioso  - Ataques de formato  - Vulnerabilidades codificación/decodificación',
                '7 <strong>Capa de Aplicación     </strong> - Inyección de malware           - Ataques DDOS        - Pushing                                     ',
            ]),
        new Item(SECURITY_LEAST_PRIVILEGE,
            [
                '- Concepto de seguridad de la información, en el que un usuario recibe los minimos niveles de acceso o permisos necesarios ',
                ' - para realizar sus funciones laborales, evitando el acceso privilegiado a datos y activos de alto valor ',
                '- Esto obliga a evaluar que usuarios y que permisos son estrictamente necesarios, por parte de algun equipo, generalmente el de <em>TI</em>',
                '',
                '<strong>Beneficios:</strong>',
                '- Reduce la superficie de ciberataques, en especial aquellos que se basan en la explotación de credenciales privilegiadas',
                '- Detiene la propagación de malware, al no poder usar accesos privilegiados, quitando las posibilidades de ejecutar malware o corromper la maquina ',
                '',
                '<strong>Contras:</strong>',
                '- Puede atentar contra la productividad del usuario final, al tener una dependencia directa con <em>TI</em>',
                '',
                '<strong>Algunas practicas de implementación</strong>',
                '- Auditar todos los entornos para localizar cuentas privilegiadas, claves SSH, entornos DevOps, Nube y puntos finales para administrar ',
                '- Separar las cuentas administrativas de las cuentas normales',
                '- Cambiar las contraseñas de manera regular, y en especial si han sido vulneradas con anterioridad',
            ])
    ];

export const UML =
    [
        new Item('uml',
            [
                '- Desarrollado para ayudar a todos los involucrados en el desarrollo y modelado de un sistema ',
                '- Pueden servir como planos para la codificación ó como documentación despues de la etapa de desarrollo ',
                '- El nivel de detalle que puede llegar a ser superficial ó increiblemente complejo ',
                '- Es un lenguaje independiente de la plataforma de desarrollo, por lo cual depende de la capacidad de abstracción ',
            ]),
        new Item('clase',
            [
                ' - Esta orientado al modelo y se basa especialmente en la programación orientada a objetos ',
                ' - Representan las interacciones y las clases que conforman el sistema ',
                ' - Se pueden diagramar los modificadores de acceso, la multiplicidad, los atributos, relaciones, etc.. ',
            ]),
        new Item('componentes',
            [
                ' - Pueden representar la agrupación de modulos que componen cualquier función de la aplicación ',
                ' - Se centra en la relación entre las partes a alto nivel, más que en los detalles de la implementación ',
                ' - Tambien se puede mezclar con el diagrama de paquetes ',
                ' - Las interfaces muestran como componentes separados se comunican entre si, por medio de un protocolo en comun ',
                ' - Cuando un componente necesita de otro, se considera que hay una relación de dependencia ',
            ]),
        new Item('despliegue',
            [
                ' - Permite identificar los nodos que usara el sistema una vez sea funcional, externos e internos ',
                ' - Expone de manera clara la arquitectura fisica de la red, dando una idea global del sistema ',
                ' - Las interfaces cobran especial relevancia en este, ya que indican como se comunican los componentes ',
                ' - Normalmente representa una vista general de la aplicación ',
            ]),
        new Item('secuencia',
            [
                ' - Representa el intercambio de mensajes entre los diferentes componentes del sistema para lograr una funcionalidad ',
                ' - El tiempo es importante ya que un mensaje debe terminar para que otro empieze (generalmente) ',
                ' - Los objetos que interactuan puede ser simple clases, hasta modulos y sistemas completos ',
            ]),
        new Item('actividades',
            [
                ' - Representa el flujo de control que se puede llegar a dar, con enfasis en la secuencia y las condiciones del flujo ',
                ' - Por lo general tienen un punto inicial y final ',
                ' - Modelan un flujo de trabajo sin dar mucho enfasis a la peculiaridad de cada subsistema ',
                ' - Estos diagrama se pueden encandenar entre si para crear secuencias más complejas ',
            ]),
        new Item('paquetes',
            [
                ' - Representa la estructura basica de los componentes del sistema ',
                ' - Un <strong>paquete</strong> es conjunto de elementos concretos que contienen una función especifica ',
                ' - Estos pueden representar dependencias de paquetes entre si, ayudando a enteder la gerarquia interna ',
            ]),
        new Item('estados',
            [
                ' - Representa el fluir de una situación a otra del sistema ',
                ' - Pueden tener condiciones externas, o simplemente ser inherente al sistema ',
                ' - Se conforma por el estado inicial, los estados del sistema, los estados finales (uno ó varios) y las transiciones de un estado a otro ',
                ' - Un estado puede tener multiples transiciones a otros estados o asi mismo, siempre desde el origen hasta un destino ',
            ]),
        new Item('usos',
            [
                ' - Representan los requisitos funcionales de manera grafica ',
                ' - Especifica que actores y como pueden involucrarse con el sistema ',
                ' - Pueden ser un punto de partida para desarrollar los sistemas, aunque demasiada complejidad es contraproducente ',
                ' - La comunicación entre el cliente y el desarrollador puede ser más eficiente, más no es garantia de esto ',
            ]),
        new Item('vista',
            [
                '- Modelo diseñado para describir la arquitecturas de los sistemas basados en distintas vistas concurrentes ',
                '',
                '<strong> - Vista Logica:</strong> Describe la estructura y la funcionalidad del sistema  ',
                '<strong> - Vista Logica:</strong> Se pueden usar diagramas de clase, comunicacion, secuencia  ',
                '',
                '<strong> - Vista Desarrollo:</strong> Enfocada a la administración del software y sus componentes, generalmente desde la perspectiva del desarrollador ',
                '<strong> - Vista Desarrollo:</strong> Se pueden usar diagramas de componentes, paquetes ',
                '',
                '<strong> - Vista Proceso:</strong> Trata los aspectos dinamicos del sistema, como se comunican los componentes entre si y su comportamiento ya en ejecución ',
                '<strong> - Vista Proceso:</strong> Se puede usar el diagrama de actividad ',
                '',
                '<strong> - Vista Fisica:</strong> Maneja los aspectos tangibles del sistema, como la infraestructura, las redes, y como estan desplegadas en la realidad ',
                '<strong> - Vista Fisica:</strong> Se puede usar el diagrama de despliegue ',
                '',
                '<strong> - Escenarios:</strong> Estos describen la secuencia de interacciones entre objetos y procesos ',
                '<strong> - Escenarios:</strong> Generalmente son los casos de uso, aun se usan pero han perdido relevancia frente al agilismo y las HU ',
                '',
                '<strong>|    Vistas |   Escenarios    Diseño    Procesos    Implementación    Despliegue</strong>                 ',
                '<strong>| Diagramas |</strong>                                                                                    ',
                '',
                '<strong> Clases     </strong>                    X          X                                                     ',
                '<strong> Objetos    </strong>                    X          X                                     Estructurales   ',
                '<strong> Componentes</strong>                                              X                                      ',
                '<strong> Despliegue </strong>                                                              X                      ',
                '',
                '<strong> Casos de Uso</strong>        X                                                                           ',
                '<strong> Secuencia   </strong>                    X                                         X                     ',
                '<strong> Colaboración</strong>                    X                                         X     Comportamentales',
                '<strong> Estados     </strong>        X           X          X                              X                     ',
                '<strong> Actividad   </strong>        X           X          X                              X                     ',
            ]),
        new Item('tiposUml',
            [
                '- Existen 2 tipos principales, los cuales a su vez agrupan diversos modelos para diferentes necesidades ',
                '',
                '<strong>Estructurales:</strong> Representan la estructura estatica de un sistema, mostrando diferentes niveles de detalle en cuanto abstracción e implementación ',
                ' - Ayudando a mostrar las diversas partes que conforman el sistema, como se conectan y su jerarquia ',
                '  - De clase          - De componentes          ',
                '  - De objetos        - De estructura compuesta ',
                '  - De despliegue     - De paquetes             ',
                '  - De perfiles                                 ',
                '',
                '<strong>Comportamiento:</strong> Se enfoca en los aspectos dinamicos del sistema o del proceso, y se enfatiza lo que debe ocurrir en tiempo de ejecución ',
                '  - De actividades    - De interacción      ',
                '  - Casos de uso      - De tiempos          ',
                '  - De secuencia      - Maquinas de estados ',
                '  - De comunicación                         ',
                '',
                '- Si bien UML no tiene un diagrama especifico para Bases de datos o redes, tambien puede ser usado para estos propositos con algunos cambios ',
            ]),
        new Item('c4Model',
            [
                '- EL arquitecto tiene a menudo la tarea de visualizar la arquitectura de su aplicación, ya sea existente o para un potencial cambio',
                '- Estos conceptos deben ser plasmados de manera que se entienda por diferentes partes, negocio, clientes, desarrolladores, directivos, tecnicos, etc',
                '- Para cada grupo, debe adquirir un aspecto diferente, esta herramienta debe describir y comunicar la arquitectura del sistema',
                '- Existen 4 niveles, donde cada abstraccion debe brindar más información y aumentar los detalles que el anterior ',
                '',
                '<strong>- Contexto del sistema:</strong> El nivel principal, donde se muestra el panorama general, visualizando las interacciones entre el sistema y ',
                ' - los actores, para las personas sin conocimientos tecnicos, pero que desean tener un panorama, resulta bastante util',
                '<strong>- Contenedores:</strong> Nivel para aprender sobre la estructura interna del sistema, estos deben tratarse como unidades ejecutables, ',
                ' - o implementables por separado, como dependencias externas y el almacenamiento de datos',
                '<strong>- Componentes:</strong> En este nivel, se pueden entrar en detalles de un contenedor especifico, este nivel tiene una gran conexión, ',
                ' - con el codigo base y suele estar derivado directamente de este',
                '<strong>- Codigo:</strong> En el ultimo nivel se deben proporcionar algo de codigo, como diagramas UML, diagramas ERD, entre otros, ',
                ' - estos diagramas solo deben incluir si aportan valor, de lo contrario se deben omitir',
                '',
                '- Estos diagramas se pueden generar mediante fragmentos de codigo DSL, por lo que tambien se les puede hacer seguimiento en nuestro codigo base'
            ])
    ];

export const NEURO_MARKETING =
    [
        new Item('pestel',
            [
                '- Es una herramienta de gran utilidad para conocer el entorno de tu empresa, y elaborar planes estrategicos acertados ',
                '- Nos ayuda a definir analisis macroeconomicos de la empresa y como diferentes factores externos afectan al negocio',
                '- Si quieres hacer un analisis aun mas profundo, puedes incluir más factores: ',
                '<strong> PESTELI:</strong> incluye la Industria  <strong> PESTALE:</strong> incluye la Etica  <strong> PESTALD:</strong> incluye la Demografia',
                '',
                '<strong>Factores Politicos</strong>',
                ' - Como las acciones y medidas del gobierno pueden influir en la operatividad y el rendimiento de la empresa, como: ',
                '  - Politicas fiscales                      - Tratados comerciales',
                '  - Subsidios de bienes o servicios         - Reglamentos y leyes coporativos',
                '',
                '<strong>Factores Economicos</strong>',
                ' - Variables macroeconomicas que afectan de manera positiva o negativa el desempeño, ya sea nacional o internacionalmente ',
                ' - Tambien se tienen en cuenta los periodos de cambio, como ascensos y crisis economicas, ademas de: ',
                '  - Fluctuaciones del PIB                   - Ciclos economicos ',
                '  - Tasa de desempleo                       - Balanza comercial ',
                '  - Inflación                               - Geopolitica, entre otros.. ',
                '',
                '<strong> Factores sociales</strong>',
                '  - Demografia                              - Educación ',
                '  - Cambios socioculturales                 - Consumo ',
                '  - Distribucion de ingresos                - Etnias y/o Religion',
                '',
                '<strong> Factores Tecnologicos</strong>',
                ' - Constantemente en evolución, determinando el alcance del negocio y sus posibles integraciones con el entorno ',
                '  - Tasa de obsolencia                      - Facilidad de acceso a nuevas herramientas ',
                '  - Inversiones en I + D                    - Internet & automatización de la producción ',
                '',
                '<strong> Factores Ecologicos</strong>',
                ' - Especialmente importantes, si el negocio contempla alguna afectación inmediata al medio ambiente ',
                '  - Leyes de protección                     - Contaminación producida',
                '  - Cambios climatico y desastres naturales - Consumo energetico & reciclaje',
                '',
                '<strong> Factores Legales</strong>',
                ' - Normativas y leyes que la empresa esta obligada a cumplir y respetar ',
                '  - Normativas sobre empleos                - Seguridad laboral',
                '  - Propiedad intelectual                   - Licencias',
            ]),
        new Item('matrizBcg',
            [
                '- Matriz de crecimiento para marketing estrategico, para saber la rentabilidad de los productos y decidir que estrategias usar ',
                '- Es un concepto proveniendte de los años 70, y fue creada por <em>Boston Consulting Group</em> ',
                '',
                '- El eje vertical corresponde a la tasa de crecimiento del mercado ',
                '- El eje horizontal representa la cuota de mercado de la empresa ',
                '',
                '                        Cuota de mercado relativa                                         ',
                '                          Alto           Bajo                                             ',
                '                           &larr;              &larr;                                     ',
                ' Tasa de       &uarr; Alto   <strong>Estrella</strong>      <strong>Interrogante</strong> ',
                ' crecimiento                                             &uarr;                           ',
                ' del mercado                                           Costo                              ',
                '               &uarr; Bajo      <strong>Vaca</strong>          <strong>Perro</strong>     ',
                '                              &larr; Liquidez                                             ',
                '',
                '<strong> Productos Estrella:</strong> Generan liquidez a cambio de una gran inversión consolidando su posición en el mercado ',
                '<strong> Productos Vaca:</strong> Generan mucha liquidez sin necesidad de una inversión cuantiosa, ya estan consolidados ',
                '<strong> Productos Perro:</strong> Tienen una poca cuota de mercado y generan poca liquidez, convirtiendolos en un desastre ',
                '<strong> Productos Interrogante:</strong> Son un misterio en cuanto a como evolucionara, como muchas de las novedades que se lanzan ',
                '',
                '- A menudo un producto puede rrecorrer las 4 etapas y de diversas formas, <strong>Ejemplo:</strong>',
                '- Cuando se lanza al mercado se convierte en una <em>Interrogante</em> que se convierte en una <em>Estrella</em> al crecer,',
                ' - pero cuando se consolida se convertira en <em>Vaca</em> hasta que se estanque y en el declive se convierta en <em>Perro</em> ',
            ]),
        new Item('b2b-b2c',
            [
                '<strong> B2B:</strong> Business to Business & <strong>B2C:</strong> Business to Customer</strong>',
                '- 2 Tecnicas de marketing bastante diferentes, con un publico diferente y estrategias diferentes ',
                '- B2B: Comercialización de productos y servicios con una empresa o profesional como cliente,',
                ' - con un enfoque donde bien se sabe el publico al que se dirige, y las relaciones son importantes ',
                '- B2C: Comercialización de productos y servicios con una persona particular como cliente, ',
                ' - donde todo se dirige directamente al consumidor y de forma masiva, la primera impresión es muy importante ',
                '',
                '<strong> Diferencias:</strong> ',
                ' - B2C esta enfocado hacia las masas en cambio B2B se enfoca de manera selecta ',
                ' - Los mensajes en B2C suelen ser directos, claros y sencillos, en B2B describen el valor agregado que pueden aportar ',
                ' - La logica sigue siendo la misma, vender, lo que cambia es a quien le queremos vender y como se debe hacer ',
            ]),
        new Item('eric',
            [
                '- Como crear un nuevo modelo o reformular nuestro modelo ya existente, para brindar más valor hacia nuestros consumidores ',
                '<strong>E</strong>liminar completamente aquellas variables que no aportan valor hacia nuestro clientes existentes o futuros ',
                '<strong>R</strong>educir la entrega de valor de algunas variables, ya sea porque no es apreciado por el cliente o reduce costos sin perder el atractivo ',
                '<strong>I</strong>ncrementar la intesidad de aquellas variables que estan por debajo de las expectativas de los clientes ',
                '<strong>C</strong>rear nuevas variables asociadas al producto o servicio no contenidas en las curvas de valor previamente analizadas ',
                '',
                '- Parte de la clave en estos modelos de negocio es tomar decisiones divergentes frente a las propuestas ya existentes ',
            ]),
        new Item('gamificacionMarketing',
            [
                '- La gamificación en marketing va más alla de usar juegos moviles, esta toma mecanicas y recursos de estos, aplicandolas a otros contextos ',
                '',
                '<strong>- Ventajas:</strong>',
                ' - Mas engagement, si esta bien planteada y se adecua al Buyer persona mediante el canal correcto, ',
                '  - las recompenas crearan estimulacion rapidamente y un sentimiento positivo frente a la marca',
                ' - Es estimulante, la competencia entre los usuarios genera motivación al sentirse que son apreciados ',
                ' - Mejor conocimiento de tus usuarios, debido a las multiples interacciones que se presentaran, indicando quienes son mas activos ',
                ' - Mejorar la perpeción de la marca, lo que a su vez ayuda a la fidelización y la obtención de nuevos usuarios ',
                '',
                '<strong>- Consejos:</strong>',
                ' - No es necesario empezar a lo grande, a veces un simple juego es una buena manera de probar a tu publico ',
                ' - Conoce a tu publico, de nada sirve un gran despliegue con una gran inversión, si no se ajusta al publico objetivo de la empresa ',
                ' - Las recompensas, no siempre deben ser fisicas, a veces pueden ser simples codigos redimibles, lo importante es que le agrade al publico ',
                ' - Sin riesgo no hay exito, la innovación es parte del proceso y nunca debe ser dejada de lado ',
            ]),
        new Item('maslow-barret',
            [
                '- Existen necesidades basicas que todo ser humano debe satisfacer, estas fueron planteadas por <em>Abraham Maslow</em> de forma piramidal ',
                '',
                '<strong> Necesidades Fisiologicas:</strong> Como respirar, alimentación, hidratación, descanso ',
                '<strong> Necesidades de Seguridad & Protección:</strong> Como una vivienda, sustento diario, salud ',
                '<strong> Necesidades Sociales:</strong> Desarrollo afectivo, asociación con los pares, afinidad y sexualidad ',
                '<strong> Necesidades de Autoestima:</strong> Respeto de si mismo, confianza, independencia, y libertad ',
                '<strong> Necesidades de Auto Realización:</strong> El desarrollo del potencial individual, creatividad e innovación ',
                '',
                '- Cada escalon puede ser alcanzado siempre y cuando el anterior este cubierto o bastante avanzados ',
                '- Tomando como base los escalones anteriores, <em>Richard Barret</em> desarrollo la teoria de las etapas universales y transformación cultural ',
                '',
                '<strong> Nivel 1: Supervicencia</strong> Cubre tanto las necesidades fisiologicas como las de Seguridad & Protección de Maslow ',
                '<strong> Nivel 2: Relaciones</strong> Se centra en el afecto y la pertenencia a un grupo o varios grupos afines, Necesidades sociales ',
                '<strong> Nivel 3: Autoestima</strong> 4 Nivel de Maslow, además de afecto, prestigio y respeto ',
                '<strong> Nivel 4: Transformación</strong> 5 Nivel de Maslow, tambien trata del desarrollo personal a partir de buscar y explorar la consciencia ',
                '<strong> Nivel 5: Cohesion Interna</strong> Despues de haber desarrollado una identidad individual, se buscan valores que envuelvan al grupo de manera colectiva ',
                '<strong> Nivel 6: Contribución</strong> Aca se focalizan los aportes individuales, de manera que sean utiles para el colectivo y dejen una "huella", un legado ',
                '<strong> Nivel 7: Servicio</strong> Complementa el Nivel 5 de Maslow como los anteriores, aca se conecta con un proposito mayor, el porque de nuestra existencia ',
            ]),
        new Item('cerebroTriurno',
            [
                '- El cerebro Triurno responde a una clasificación basada en la evolución del ser humano como especie ',
                '- Para un enfoque practico y con una mirada educativa, se pueden detallar 3 grandes funcionalidades del cerebro ',
                '',
                '<strong>- Cerebro Reptiliano:</strong> Localizado en la parte inferior y trasera del craneo, la más antigua y primitiva ',
                ' - encargada de las funciones basicas de supervivencia, es pura impulsividad e instinto de conservación, un area con muy pocos cambios ',
                '<strong>- Sistema Limbico:</strong> Parte exclusiva de los mamiferos, ubicado en la parte central y contiene el hipocampo ',
                ' - centrado en la memoria y la orientación, además de la amigdala, encargada de controlar las emociones y de repetir/no repetir patrones de conducta ',
                '<strong>- Neocortex:</strong> Es la base fundamental para el raciocinio, con funciones cognitivas superiores como, ',
                ' - el pensamiento abstracto, el lenguaje, la planificación, reconocimiento de patrones, etc... ',
                '',
                '- Sabiendo esto, es posible mejorar los metodos de educación y aprendizaje enfocandose en diferentes grupos de edad, ',
                ' - ya que entre más avanzado el Neocortex, algo que se da cerca de los 20 años, hay cosas que no se podran realizar ',
                '- Para otras areas como el Marketing y los negocios, no solo se debe apelar al intelecto, tambien al lado emocional ',
                ' - de manera que la atención se centre en los aspectos que queremos estimular para vender nuestros productos, ',
            ]),
        new Item('elementValues',
            [
                '- Es un desglose de la matriz de Maslow, donde cada escalafon se puede dividir en más necesidades, con diferentes perpectivas ',
                '',
                '<strong>Impacto Social</strong>              Autotranscendencia ',
                '',
                '<strong>Cambio de vida</strong>           Afiliación y pertenencia ',
                '                       Proporciona Esperanza, Motivación',
                '                     Autorrealización, Reliquias familiares',
                '',
                '<strong>Emocional</strong>                 Diversion & entretenimiento',
                '                         Bienestar, Valor terapeutico',
                '                       Proporciona recompensas, Atractivo',
                '                    Reductores de ansiedad, Proporciona acceso',
                '                   Nostalgia, Diseño y estetica, Valor insignia',
                '',
                '<strong>Funcional</strong>             Ahorra tiempo, Reduce el esfuerzo ',
                '                 Simplifica, Informativo, Variedad, Reduce costos',
                '                 Hace dinero, Reduce el riesgo, Organiza, Integra',
                '               Atractivo sensorial, Calidad, Evita molestias, Conecta',
                '',
                'Para una descripción más detallada y ejemplos de la vida real, puedes ir a la fuente original de <em>Bain & Company</em>'
            ]),
        new Item('multi&omniCanal',
            [
                '- En una solución hacia los clientes multicanal, el cliente se enfrenta a una experiencia de compra fragmentada, ',
                ' - con diversas fuentes de interrupciones o cortes, cuando se pasa de un canal a otro ',
                '',
                '- Por otra parte la onmicanalidad representa una experiencia diferente, donde hay naturalidad para pasar de un canal a otro, ',
                ' - sin importar el momento o el lugar ',
                '',
                '- La omnicanalidad representa un desafio extra a nivel de tecnologias además del compromiso de todos los empleados ',
                ' - independientemente del nivel en que se encuentren ',
            ]),
        new Item('buyerPersona',
            [
                '- Un Buyer Persona, es la definición para todo negocio de su cliente ideal, un concepto que siempre esta presente en el marketing ',
                '- Es una descripción abstracta de un consumidor ideal, basado en investigaciones de mercado, competidores, y perfiles de clientes ',
                '',
                '<strong>- Este es importante debido a que es una forma de saber:</strong>',
                ' - Saber hacia que ambito orientar el desarrollo del producto ',
                ' - Que tipo de contenido crear y como comunicarlo hacia los clientes ',
                ' - Como comunicarse con clientes potenciales ',
                ' - Captar nuevos clientes y retener los actuales ',
                ' - Mejorar las estrategias de marketink sabiendo a que publico se deben enfocar ',
                ' - El servicio al cliente puede mejorar su trabajo ',
                '',
                '<strong>- Un Buyer Persona puede ayudar a tomar decisiones de marketing al:</strong>',
                ' - Tener una mejor segmentación de los clientes y crear mensajes más relevantes ',
                ' - Crear una experiencia de marca personalizada, con mensajes especificos ',
                ' - Identificar nuevos clientes potenciales ',
                ' - Asegurarse que se esten satisifaciendo las necesidades de los consumidores ',
                '',
                '<strong>- ¿ Como crear una plantilla ? </strong>',
                ' - Demografia: Edad, Genero, Ingresos, Ubicación, Estado familiar, Nivel de educación ',
                ' - Estado profesional: Cargo, Nivel',
                ' - Psicografia: Metas profesionales, Creencias y valores',
                ' - Puntos debiles y retos ',
                ' - Influencias y fuentes de información ',
                ' - Proceso de compra ',
                '',
                '<strong>- Recopilación de datos:</strong>',
                ' - Realizar entrevistas a los clientes ',
                ' - Consultar al equipo de ventas ',
                ' - Información de analitica y datos de la empresa',
                ' - Realiza estudios de mercado',
            ]),
        new Item('neuroMarketing',
            [
                '- En porcas palabras es la neuro ciencia, aplicada al Marketing, y busca comprender los procesos de compra y el comportamiento con las marcas, ',
                ' - a partir de la actividad neuronal; esto como complemento de otras estategias más tradicionales como los Focus Group y las encuestas ',
                '- Para el cerebro no hay secretos, y aun menos para el inconsciente, se calcula que cerca del 95% ',
                ' - de las decisiones de compra son tomadas por este en alrededor de 2.5 segundos, por lo que es una mala idea pensar que comprar es 100% racional ',
                '',
                '<strong>- Elementos a tener en cuenta</strong>',
                '<strong> - La mirada:</strong> La eficacia del contacto visual no siempre es acertada, aveces es mejor centrar las personas hacia un punto de interes ',
                '<strong> - Colores:</strong> Los colores estan directamente asociados a diferentes emociones, usar colores opuestos al objetivo de tu campaña puede arruinarla ',
                '<strong> - Velocidad:</strong> El sentimiento de velocidad/agilidad, atrae más personas, que la estabilidad y la seguridad ',
                '<strong> - Contar Historias:</strong> Tener un contexto en el que se apoye una buena historia, puede generar un mayor compromiso ',
                '<strong> - Los precios:</strong> Los precios <strong>$9.99</strong> No siempre es mejor que <strong>$10</strong>, hay una gran diferencia entre usar un numero redondo y uno compuesto ',
                ' - el primero es util cuando se deben tomar decisiones logicas, el segundo es ideal para decisiones emocionales, su uso dependera del enfoque a usar ',
                '<strong> - Titulos:</strong> Una de las primeras cosas que todo expectador observa, por lo que tener ligeras alteraciones ayuda a despertar la atención ',
                '<strong> - El Pago:</strong> Usar la palabra <em>Compra</em> puede crear ansiedad debido a la transacción economica, por lo que se usan frases y sinonimos ',
                '',
                '<strong>- Tecnicas a tener en cuenta</strong>',
                '<strong> - Utiliza la psicologia de los colores</strong> Tu paleta de colores puede jugar en contra o a favor en la aceptación de la marca ',
                '<strong> - Explora gatillos mentales</strong> Que son factores que nos llevan a tomar decisiones de forma automatica, como: <em>Escasez, Urgencia, Exclusividad</em>',
                '<strong> - Pruebas A/B:</strong> Para saber si los conceptos escogidos son los idoneos, se pueden hacer diferentes versiones y escoger la que más aceptada ',
                '<strong> - Anclaje de Precios:</strong> Expresiones como <em>"2 por 1"</em> y <em>"5 por 3"</em> pueden ser atrayantes y hacen creer que hay un beneficio economico ',
                '<strong> - Repite ideas y conceptos estrategicamente</strong> "La repetición es la madre de la retención", Esto hace los mensajes más poderosos y persuasivos ',
                '<strong> - El diseño:</strong> Todo diseño que involucre a tu empresa, debe ser impecable y tener una razon de ser, acorde a tu negocio ',
                '<strong> - Ofrece pocas opciones de elección:</strong> No solo es saber que hacer, tambien es que evitar, por eso se dice que <em>"menos es más"</em>',
            ]),
        new Item('semanticaPragmatica',
            [
                '<strong>- Semiosis:</strong> Se puede entender como el proceso o influencia, que suponga una colaboración entre 3 partes, como puede ser, ',
                ' - un signo, su objeto y el interprete, ampliando el concepto a algo mas que simples sujetos humanos, de ahi que se puedan distinguir 3 dimensiones: ',
                '',
                '<strong>- Dimensión Sintactica:</strong> <em>Es el estudio de las relaciones de los signos entre si</em>, Asi el orden de los signos incide, en el proceso de interpretación ',
                ' - por lo que al elaborar cualquier mensaje, permite inferir que solo su orden lograria o afectaria la interpretación ',
                '',
                '<strong>- Dimensión Semantica:</strong> <em>Es el estudio de los signos y sus posibles denotaciones</em>, Asi se diferencia de la sintaxis ya que aca se determina, ',
                ' - en que condiciones un signo es aplicable a algun objeto o situación, referenciando al significado de los signos ordenados de manera especifica ',
                '',
                '<strong>- Dimesión Pragmatica:</strong> <em>Es la relación de los signos con sus interpretes</em>, Esto supone una complejidad extra y que es relativa, ',
                ' - para cada emisor y su respectivo interprete, ya que no necesariamente todo mensaje tenga el mismo significado, para ambas partes ',
            ]),
        new Item('pnl',
            [
                '- Son una series de estrategias que se centra en identificar y usar modelos de pensamiento que influyan sobre una persona, para resolver problemas ',
                '<strong>- Principios:</strong>',
                '',
                '<strong> - El mapa interior es unico:</strong> El mundo que rodea a cada persona, es unico, y se contruye a traves de la propia experiencia ',
                '<strong> - Entre mas caminos, mejor:</strong> Entre mas completo sea el mapa, mas grande seran las posibilidades, de resolver los problemas ',
                '<strong> - Cada comportamiento tiene una intención positiva:</strong> Todo comportamiento intrinsecamente se hace por una buena razon, por lo que, ',
                '  - malas practicas se deben redirigir hacia un patron de conducta mas adaptativo y adecuado para la persona ',
                '<strong> - La estructura de la experiencia:</strong> Toda experiencia tiene ciertos elementos que pueden cambiar su significado y su efecto ',
                '<strong> - Todo problema tiene solución:</strong> Aunque suene utopico, esto dependera de la situación y del mapa de la persona ',
                '<strong> - Todo el mundo tiene la fuerza necesaria:</strong> Cada persona posee la fuerza necesaria para conseguir lo que se propone ',
                '<strong> - Mente y cuerpo son 2 caras de la misma moneda:</strong> Las emociones afectan el cuerpo y las enfermedades fisicas afectan a la mente ',
                '<strong> - La comunicación pueder sesgarse:</strong> Por eso es necesario establecer pautas claras entre ambas partes ',
                '<strong> - Todo fracaso es una oportunidad:</strong> Estos deben verse como medidas que permiten la auto superación ',
                '<strong> - Si algo no funciona, probar de otra manera:</strong> Si algo no funciona pero siempre intentas lo mismo, no esperes resultados diferentes ',
            ]),
        new Item('jobsToBeDone',
            [
                '- Es una metodologia desarrollada para conocer mejor a tu grupo de consumidores',
                '- Las personas no suelen comprar ropar para vestirse, al menos no exclusivamente por esta razon, pueden buscar autoestima, estatus, comodidad, etc.. ',
                '- Entender estas motivaciones es una tarea importante del marketing, para contextualizar las acciones y definir comportamientos del mercado ',
                '- El punto de partida es identificar que es lo que el consumidor quiere resolver en su vida, y a partir de ahi como puedes ayudarlo a resolverlo ',
                '- Con este cambio de perspectiva se busca que el marketing sea más eficiente y que la innovación sea más previsible y rentable ',
                '- Aca es importante enfocar lo que el cliente quiere resolver y no lo que el cliente quiere comprar',
                '- Muchas de las razones suelen tener una dimensión funcional, social o emocional, y tener un mercado el cual puede ser mejor explotado ',
                '- Para esto la <em>segmetación</em>, <em>Buyer persona</em> y <em>Big data</em> suelen ser herramientas utiles',
            ])
    ];

export const CD_CI_INFRAESTRUCTURE =
    [
        new Item('cdci',
            [
                '- Integración continua Y Entrega continua nacen para entregar un mejor codigo, de una manera más rapida y con menos errores ',
                '- Los errores se pueden encontrar de manera previa a estar en producción ',
                '- Integración continua permite una mejora de la afluencia a la rama principal del codigo, evitando problemas con ramas aisladas ',
                '- Entrega continua permite que los cambios aprobados sean implementados con el menor numero de complicaciones posibles ',
                '- Para que todo esto sea posible todas las pruebas deben estar automatizadas ',
                '- Las pruebas deben tener la mayor cobertura posible, o en su defecto un minimo ',
                '- El uso de buenas pracaticas es fundamental, ya que esto evitara posibles errores ',
            ]),
        new Item('devops',
            [
                '- Es una metodologia para crear software de una manera más eficiente, con mayor calidad y menos problemas en producción ',
                '- Este modelo no consiste en aumentar las responsabilidades del desarrollador, todo lo contrario ',
                '- Ya que la meta es que cada despliegue sea automatico, reduciendo el tiempo de corrección de errores, aumentando la productividad ',
                '- La automatización de las tareas y las pruebas permite que el codigo en desarrollo fluya rapidamente a producción ',
            ]),
        new Item('iascode',
            [
                '- Permite gestionar y preparar la infraestructura a traves del codigo, en vez de usar procesos manuales',
                '- Se realiza mediante archivos de configuración, que contienen las especificaciones necesarias ',
                '- Garantizando un entorno que siempre va a ser congruente y evitar cambios abruptos sin documentación ',
                '- Preparar la infraestructura generalmente habia sido un proceso manual y desganstante, pero en la actualidad ',
                ' - su gestión se ha traslado a enfoques como la virtualización, los contenedores o la Nube; logrando una mayor uniformidad y reduciendo errores ',
                '',
                '<strong>- Enfoques:</strong>',
                '<Strong> - Declarativo:</strong> Se define el estado de los sistemas, incluyendo los recursos que necesita y las prpiedades del sistema ',
                ' - Delegando la responsabilidad del montaje, cofiguración y desmontaje a la herramienta que se haya escogido ',
                '<Strong> - Imperativo:</strong> Aca se definen los comandos y el orden en que se deben realizar, para lograr la configuración deseada ',
                ' - Muchas herramientas usan el primer enfoque, ya que cada cambio es resuelto por la herramienta y no es necesario intervenir ',
                '',
                '<strong>- Ventajas:</strong>                                                 <strong>- Herramientas:</strong>',
                ' - Reducción de costos                                       - Chef ',
                ' - Mejora la velocidad de implementación                     - Puppet ',
                ' - Reduce la cantidad de errores                             - Terraform ',
                ' - Uniformidad en todos los ambientes                        - Red Hat Ansible Automation Platform',
                ' - La configuración se vuelve un proceso estandar            - Salstack',
                '                                                             - Terraform',
                '                                                             - AWS CloudFormation ',
                '',
                '<strong>- Importancia en DevOps:</strong>',
                ' - Libera a los desarrolladores de tener que preparar toda la infraestructura necesaria ',
                ' - Los administradores de sistema no tienen que realizar procedimientos manuales repetitivos ',
                ' - Permite coordinar los equipos al utilizar una misma descripción para el mismo proceso ',
            ]),
        new Item('stateless-stateful',
            [
                '- Es una forma de contruir servicios y aplicaciones, en especial ya que muchas arquitecturas estan orientadas a los microservicios ',
                '- Una de las principales diferencias es que una depende de que alguien almacene el estado, o la debida información para el funcionamiento ',
                '',
                '<strong> Staless: </strong>',
                '- Realizan una unica funcion',
                '- Las peticiones o solicitudes que se realizen, son completamente independientes entre si, y no se ven alteradas directamente por otras ',
                '- Los servicios pueden escalarse entre servidores, ya que todos estan en capacidad de realizar la misma operación al no compartir un estado ',
                '- Cualquier instancia debe estar en capacidad de realizar cualquier tarea, aumentando la resiliencia y la elasticidad ',
                '- Generalmente ligadas a aplicaciones que usan microservicios o contenedores ',
                '',
                '<strong> Stateful: </strong>',
                '- Suelen ser aplicaciones para almacenar datos y procesar grandes cantidades de datos, como lo son las BD',
                '- El servidor mantiene el estado de peticiones previas, el cual es usado para procesar las proximas, administrando el estado ',
                '- Si hay multiples servidores, estos deben hallar la manera de compartir el estado entre si ',
                '- Generalmente usada para la Orquestación de servicios y el manejo de cargas, como redes y almacenamiento ',
                '',
                '                                         <strong> Diferencias </strong> ',
                '',
                '<strong>           Stateless                                                Stateful',
                '    Diferentes servidores pueden                               Un mismo servidor ',
                '    entregar respuestas a diferentes                           procesa todas las peticiones',
                '    solicitudes concurrentemente',
                '',
                '    No se mantienen o almacenan                                Se almacena información ',
                '    peticiones previas                                         de peticiones previas ',
                '',
                '    Las peticiónes que se realizen                             Los resultados se pueden ver ',
                '    son independientes entre si                                afectados por peticiones previas/posteriores',
                '',
                '    La seguridad es independiente                              Se basa en protocolos de internet ',
                '    del estado y del servidor                                  que requieren de compartir y mantener estados',
            ]),
        new Item('deploymentPatterns',
            [
                '- Son metodos automatizados para presentar nuevas funciones de aplicaciones a los usuarios, reduciendo el tiempo de inactividad al maximo posible ',
                '- Esto depende de la forma en que se realize, y cuantas etapas previas se hayan realizado ',
                '',
                '<strong>Canary Release</strong>',
                '- Se lanza una nueva versión solamente para un grupo selecto de usuarios, voluntarios, antes de afectar a todos los consumidores ',
                '- Asi se supervisa y si hay problemas se resuelven, antes de llegar al ambiente de producción, que debe ser estable ',
                '<strong>Blue/Green</strong>',
                '- Se ejecutan 2 ambientes similares de manera simultanea, reduciendo el tiempo de inactividad, pero solo uno esta activo en dado momento ',
                '- Aca se utiliza un enrutador o un equilibrador de carga, para dirigir el trafico hacia las instancias que se desee ',
                '- Tambien puede funcionar como una forma de regresión rapida, si algo sale mal en el otro entorno ',
                '<strong>Feature Toggles</strong>',
                '- Las funcionalidades se pueden apagar o encender, mediante un simple interruptor, asi no estara expuestos a nuevas caracteristicas sin terminar ',
                '<strong>A/B Testing</strong>',
                '- Se presentan 2 o más versiones para ser comparadas de manera aleatoria, y la mejor se escoge mediante analisis estadisticos ',
                '<strong>Dark Launchs</strong>',
                '- Se presenta la nueva funcionalidad a un grupo selecto de usuarios, y no al publico general, estos deben estar conscientes de que esta ayudando ',
                ' - a desarrollar y probar la nueva funcionalidad, para obtener comentarios y probar la eficacia ',
            ]),
        new Item('industrialDevops',
            [
                '- Es la unión/aplicación de los principios <em>Lean</em>, <em>Agile</em> y <em>DevOps</em> además del desarrollo, planificación e implementación, ',
                ' - de nuevos sistemas y servicios que combinan hardware y software en mayor o menor medida ',
                '',
                '<strong>Principios:</strong>',
                '<strong>- Organizar los flujos de valor:</strong> Organizar la empresa en función al flujo de valor y no en actividades funcionales, puede parecer obvio, ',
                ' - pero muchas empresas estan organizadas de esa manera, creando multiples traspasos y documentación entre areas, todas las personas requeridas ',
                ' - deben estar organizadas alrededor de un flujo de valor, y no dispersas en diferentes areas de un solo proposito ',
                '',
                '<strong>- Multiples horizontes de Planificación:</strong> Esta planificación predictiva ha sido el enfoque más popular para los sistemas ciberfisicos, ',
                ' - que junto a la planificación empirica a corto plazo, que permite al software se diseñe e itere a gran velocidad, no funcionara para sistemas, ',
                ' - con tiempos más largos para el hardware, depencias entre sistemas, sistemas de control, etc.. Asi se obtienen datos empiricos más rapido, ',
                ' - que pueden ser usados para el siguiente horizonte de planificación, para que siempre se ajusten en base a los datos obtenidos ',
                '',
                '<strong>- Implementar decisiones basadas en datos:</strong> Luego de que los datos son procesados, convertidos y analizados, se convierten en el insumo de ',
                ' - para la toma de decisiones para priorizar y planificar los ciclos de trabajo, y consecuentemente medir los resultados',
                '',
                '<strong>- Arquitectura para cambiar velozmente:</strong> El desarrollo concurrente es más rapido que el desarrollo sincronico, de esta manera ',
                ' - multiples equipos pueden estar trabajando en el mismo modulo, aumentado la velocidad de entrega y la velocidad en los cambios ',
                '',
                '<strong>- Iterar, gestionar colas, crear flujos:</strong> Se implementa los ciclos iterativos-incremental provenientes de <em>Agile</em> con ',
                ' - el compromiso de <em>Lean</em> de reducir el tamaño para aumentar el flujo ',
                '',
                '<strong>- Cadenas y sincronización:</strong> En un sistema complejo, con multiples susbsistemas y componentes, la falta de previsibilidad es un gran detractor ',
                ' - para que las empresas sean más agiles, y eliminando la mayor cantidad de incognitas posibles, con minima variabilidad necesaria ',
                '',
                '<strong>- Integración temprana y frecuente:</strong> Cubre diferentes niveles y se realiza de multiples formas tambien, entre más rapidas sean las integraciones ',
                ' - se podra satisface mejor a los clientes y el sistema tendra valiosa retroalimentación por parte del usuario, para mejoras y correciones ',
                '',
                '<strong>- Desplazamiento a la izquierda:</strong> Pensar en realizar las pruebas siempre debe ser una prioridad, desde etapas de analisis hasta el desarrollo ',
                '',
                '<strong>- Mentalidad de crecimiento:</strong> Siempre que se realize algun cambio, este se debe mirar con una mentalidad positiva, de crecimiento, ',
                ' - sin esta mentalidad, todos los principios anteriores no tendrian sentido juntos, si no estuvieran unidos por esta mentalidad, ',
                ' - tanto en el nivel personal como en el empresarial ',
            ]),
        new Item('pipelines',
            [
                '- En todo proceso de <em>CD/CI</em> siempre tiene una serie de etapas, algunos procesos cuentan con más ó menos que otros en medida de la necesidad',
                '',
                '<strong>Source:</strong> La mayoria de los casos es activada por cambios en el codigo, tambien es comun que sean iniciados por el usuario o por tareas automaticas ',
                '<strong>Build:</strong> El codigo fuente y sus dependencias son usadas para construir un producto ejecutable, se compila si es necesario, y ',
                ' generalmente tambien crea la imagen y los recursos necesarios para ser desplegados en Docker ',
                '<strong>Tests:</strong> Se ejecutan pruebas automatizadas para validar el comportamiento del sistema, y las correcciones realizadas, ',
                ' suelen ser pruebas unitarias, de humo y de integración, este paso puede durar desde segundos hasta horas dependiendo del proyecto ',
                '<strong>Deploy:</strong> Una vez pasadas estas etapas esta version sera desplegada en el ambiente escogido, que suele ser un ambiente previo ',
                ' antes de dar el paso final para que los usuarios finales puedan usar el producto ',
                '',
                '<strong>Beneficios:</strong>',
                '- Una vez automatizado el proceso, se puede concentrar mas tiempo en el desarrollo y en vigilar el sistema ',
                '- Se tiene un manejo de versiones claro, y estas son accesibles por cualquiera que las necesite ',
                '- Cada ejecución del pipeline genera registros que son consultables y llegan a funcionar como un historico ',
                '- Devolver una version puede ser tan simple como presionar un boton ',
                '- Manejar estos flujos ayuda a tener una cultura organizacional responsable ',
                '',
                '<strong>Caracteristicas de un pipeline</strong>',
                ' - Velocidad   - Fiabilidad ',
                ' - Exactitud   - Flexibilidad ',
                '',
                '<strong>Buenas practicas:</strong>',
                '- No dejar flujos incompletos, si el flujo principal no funciona, se debe arreglar lo mas rapido posible ',
                '- Ejecute las pruebas fundamentales de primera, de manera que se falle rapido, no se gasten recursos de más, y se corrijan rapido ',
                '- Utilize siempre el mismo entorno, cada vez que se haga un despliegue de manera que siempre este limpio y aislado ',
                '- Analisis de calidad, mediante herramientas de analisis de codigo estatico ',
                '- Los pipelines se pueden lanzar mediante eventos como pull requests, no solo por commits o solicitud de los usuarios ',
                '- No ignore pasos ni deje de realizar revisiones de codigo y revisiones de pares, esto solo es omitible para cambios triviales ',
            ])
    ];