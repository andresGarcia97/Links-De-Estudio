import { Item } from "../models";

export class Content2 {

    public temas: Item[] = [
        ...PRUEBAS,
        ...PRUEBAS_AVANZADAS,
        ...ANALISIS,
        ...BUENAS_PRACTICAS,
        ...COMPILACION,
        ...CONOCIMIENTOS_EMPIRICOS,
        ...ESTATEGIAS_DESARROLLO,
        ...GIT,
        ...HISTORIAS_USUARIO,
        ...MALAS_PRACTICAS,
        ...METODOLOGIAS,
        ...NUBE,
        ...PATRONES,
        ...LEYES
    ];

}

export const PRUEBAS =
    [
        new Item('principios',
            ['- Las pruebas demuestran la presencia de defectos, por ende entre más pruebas halla mejor ',
                '- Es improductivo hacer pruebas exhaustivas, ademas de que es casi imposible de hacer ',
                '- Las pruebas tempranas ayudan a encontrar defectos con prontitud, y a su vez reducir tiempo y costos ',
                '- Agrupar defectos permite que las soluciones sean más especializadas, y las pruebas sean más efectivas ',
                '- La paradoja del pesticida, si nuestro software cambia, las pruebas tambien deben hacerlo, que sigan funcionando no siempre es buena señal ',
                '- Las pruebas dependen del contexto, entre más se parezca el entorno de pruebas al entorno de producción mejor ',
                '- Que no se presenten errores no significa que no se presentaran errores, solo que no se han dado las condiciones ',
            ]
        ),
        new Item('manifiesto',
            [
                '- El testing no es una fase más, siempre debe estar presente en todo el desarrollo ',
                '- La calidad no depende solo de las pruebas, es un proceso constante durante todo el ciclo de vida ',
                '',
                ' - Testing inicial <strong> SOBRE </strong> testing final ',
                ' - Prevenir bugs <strong> SOBRE </strong> encontrar bugs ',
                ' - Entender que se prueba <strong> SOBRE </strong> probar una funcionalidad ',
                ' - Construir un mejor sistema <strong> SOBRE </strong> destruir el sistema ',
                ' - Responsabilidad del equipo <strong> SOBRE </strong> la responsabilidad del tester ',
            ]),
        new Item('QAperson',
            [
                '- Quality Assurance (seguro de calidad) es un concepto donde todos los involucrados deben aportar, ',
                ' - aunque haya personas especificas para verificar su cumplimiento ',
                '- Todo proyecto deberia contar con un plan de pruebas que asegure la calidad del proyecto entregado ',
                '- La integración continua y los tests son herramientas con las que el proyecto deberia contar desde su inicio ',
                '- El encargado de estos aspectos debe ser el intermediario entre los clientes y sus espectativas y lo que ha sido elaborado ',
                '- Tambien es el encargado de crear ambientes de prueba que sean similares al ambiente de producción ',
            ]),
        new Item('tiposPruebas',
            [
                '<strong>- Funcionales:</strong>    Prueban las funcionalidades del sistema y suelen ser de caja negra, al validar el QUE más que el COMO ',
                '<strong>- No Funcionales:</strong> Estas validan cosas como carga, estres, rendimiento, confiabilidad, etc... ',
                '',
                '<strong>- Estructurales:</strong> Indagan la estructura interna del programa y sus relaciones, aca se pueden incluir las pruebas unitarias y de integración ',
                '<strong>- Estructurales:</strong> Estan son de tipo caja blanca, ya que es necesario conocer todo el sistema y como funciona para que sean bien planificadas ',
                '',
                '<strong>- Regresión:</strong> Basicamente es volver a correr todas la pruebas despues de que se cambien componentes ó se corrija un problema ',
                '<strong>- Regresión:</strong> Dependiendo de la cantidad de pruebas que hayan y de su complejidad puede ser una operación bastante demorada ',
            ]
        ),
        new Item('beneficios',
            [
                '- La calidad mejora al encontrar errores en etapas previas y durante el desarrollo, en vez de hacerlo en etapas finales ',
                '- Los cambios son hechos de manera más agil al inducir una mayor comunicación con todo el equipo ',
                '- Reducen el tiempo y los costos asociados a la mantenibilidad del software ',
                '- Los tests pueden tener documentación la cual no debe ser muy extensa, y tambien pueden servir como documentación ',
            ]),
        new Item('nombramiento',
            [
                '- Representa el intercambio de mensajes entre los diferentes componentes del sistema para lograr una funcionalidad ',
                '- El tiempo es importante ya que un mensaje debe terminar para que otro empieze (generalmente) ',
                '- Los objetos que interactuan puede ser simple clases, hasta modulos y sistemas completos ',
                '- El diablo esta en los detalles, saber nombrar los elementos que intervienen ayudara al analisis ',
                '',
                '<strong>- Clases:</strong> Deben tener un indicador que las agrupe, como: <em>nombreClase</em><strong>Test</strong> ',
                '<strong>- Metodos:</strong> Hay varias convenciones, pero generalmente deben incluir:  ',
                '  - nombre del metodo, estado a probar, comportamiento esperado; tambien se pueden incluir las palabras de given, when, should, test  ',
                '<strong>- Variables:</strong> Deben describir el proposito de cada variable, no deben ser resumidas ni genericas, algunos ejemplos pueden ser: ',
                '  - target, expected, actual, valid, invalid, Object(Mock)',
            ]),
        new Item('first',
            [
                '<strong>Fast:</strong>            Deben ser rapidos, ya que se suelen tener cientos de pruebas y ejecutarlas conlleva tiempo y recursos ',
                '<strong>Independent:</strong>     Cada test debe ser independiente de los demás, de lo contrario habra un acoplamiento no deseado ',
                '<strong>Repeatable:</strong>      Las pruebas deben funcionar en cualquier ambiente que se ejecuten, ya sea local o en un ambiente de integración ',
                '<strong>Self-Validating:</strong> Las pruebas deben mostrar resultados concluyentes, estos no deben tener intervención humana para que sean validos ',
                '<strong>Timely:</strong>          Toda prueba debe ser oportuna y debe tener una razon de ser, si no se pueden justificar, estas habran sido una perdida de tiempo ',
            ]),
        new Item('sutydoc',
            [
                '<strong>- System Under Test:</strong>   Es aquello que se esta probando ya sea una clase, un componente, una funcionalidad ',
                '<strong>- Depend On Component:</strong> Es lo que necesita cada SUT para poder funcionar, y que la prueba pueda ser llevada a cabo ',
                '<strong>- Organización:</strong> Generalmente se organizan mediante una tabla que contiene el tipo de prueba, los SUTs y los DOCs ',
            ]),
        new Item('dobles',
            [
                '- Son objetos que se comportan de manera igual que el elemento que copian, pero son más simples de manejar ',
                '<strong> - Dummy:</strong> Es un objeto con valore concretos que solo sirve para que se cumplan ciertas precondiciones ',
                '<strong> - Fake:</strong>  Son funcionales y se comportan igual que en producción, solo que de una manera más simple y limitada ',
                '<strong> - Stub:</strong>  Es un objeto que ya viene con una información predefinida, en vez de información real e impredecible ',
                '<strong> - Mock:</strong>  Son objetos que actuan de acuerdo a una llamada en especifico, de lo contrario no funcionaran debidamente ',
                '<strong> - Spies:</strong> Este objeto se encarga de visualizar todos los procesos y llamados internos, verificando que sean los desados ',
            ]),
        new Item('aaa',
            [
                '<strong>- Arrange:</strong> En esta parte se organiza todo lo necesario y se deben establecer las condiciones del test ',
                '<strong>- Act:    </strong> Es la ejecución del fragmento a testear',
                '<strong>- Assert: </strong> Ultimo paso de la prueba y es la comprobación de lo resultados ',
            ]),
        new Item('gwt',
            [
                '- Funciona de la misma manera que AAA, con algunas ventajas <strong>Given, When, Then</strong>',
                '- Puede ser usado con frameworks de BDD, es más que solo una estructura',
                '- Es obicuo por lo que más personas pueden entenderlo sin necesidad de un conocimiento completo del sistema ',
                '- Añade valor extra al negocio, al interconectar el codigo y las pruebas a un nivel mayor ',

            ]),
        new Item('piramide',
            [
                '        Exploracion                                                 ',
                '         GUI  Tests          <strong>Piramide de tests:</strong>    ',
                '       API      Tests        La mayor parte de las pruebas deberian ',
                '     Integration  Tests      ser unitarias, y la menor parte        ',
                '   Component       Tests     deberian ser la interfaz grafica       ',
                ' Unit               Tests                                           ',
                '',
                '        Exploracion                                                 ',
                ' GUI                Tests    <strong>Cono de helado:</strong>       ',
                '   API             Tests     Es un anti patron de pruebas           ',
                '     Integration  Tests      Donde la mayoria de pruebas son        ',
                '       Component Tests       de la interfaz graficas                ',
                '         Unit   Tests        y NO pruebas unitarias                 ',
            ]),
        new Item('triangulo',
            [
                '         Alcance              <strong>Alcance:</strong> Requisitos ó tareas a realizar             - personas, - alcance y + tiempo ',
                '                                                                   ',
                '         Calidad              <strong>Tiempo:</strong> Planificación de la duración del proyecto   - tiempo, - alcance y + costos    ',
                '                                                                      ',
                '   Costo         Tiempo       <strong>Costos:</strong> Recursos a gastar el proyecto               + alcance, + tiempo y + costos   ',
            ]),
        new Item('cobertura',
            [
                '- La cobertura del codigo es fundamental para garantizar un alcance optimo de las pruebas ',
                '- No hay un numero magico para todos los proyectos, cada uno tendra una cobertura ideal',
                '- El 100% de esta cobertura no es garantia de ausencia de errores, como el 50% no es garantia de la calidad de las pruebas ',
                '- Esto es importante ya que se puede usar para hacer despliegues e integración continua, y encontrar codigo muerto ',
                '- Existen varios tipos de cobertura, pero el más usado es la cobertura de las lineas de codigo ',
            ]),
        new Item('falsos',
            [
                '- Falsos Positivos & Falsos Negativos ',
                '- Son comunes en ambientes inestables, ó poco hermeticos ',
                '',
                '<strong>- Falso Positivo:</strong> Ocurre cuando se detectan defectos, que no son culpa del componente inmediato ',
                '  - Esto puede ser debido a fuentes externas de error, inestabilidad del ambiente, errores de los datos ',
                '',
                '<strong>- Falso Negativo:</strong> Ocurre cuando no se detectan errores, que estan presentes en lo que se esta probando ',
                '  - Suelen suceder por pruebas mal desarrolladas, más que por el propio entorno ',
            ])
    ];

export const ANALISIS =
    [
        new Item('comportamiento',
            [
                '- Estos modelos se usan para describir a profundidad el comportamiento de un sistema ',
                '',
                '<strong>- Flujos de datos:</strong> Modelan el procesamiento de los datos del sistema, no solo sirven para saber las entradas y salidad del sistema ',
                ' - Tambien para validaciones con los usuarios y que estos validen los datos y los procesos a nivel interno',
                '',
                '<strong>- Maquinas de estado:</strong> Modelan la reacción del evento en cuanto a los estimulos externos/internos ',
                ' - Estos indican los posibles estados de un sistema, y que puede suceder cuando paso un estimulo en especifico ',
                ' - Se usan para sistemas en tiempo real mas que todo, ya que estos son sumamente dependientes de su ambiente ',
                ' - Para sistemas grandes se recomienda usar diferentes niveles de estados de mayor a menor complejidad ',
            ]),
        new Item('dominio',
            [
                '- Estudio de los dominios de conocimientos de las sociedades ',
                '- De esta manera el enfoque socio-cognitivo no es el unico usado para la toma de información ',
                '- Tambien se ha de tener en cuenta el contexto presente y lo que motiva sus acciones ',
                '- Esto tambien da un conocimiento más profundo del entorno, y una mayor calidad de la información recolectada ',
            ]),
        new Item('case',
            [
                '- Ingeniería asistida por computador, que es el desarrollo y mantenimiento de proyectos de software por medio de herramientas de software ',
                '',
                '<strong>- Documentación: </strong> Crea documentos de cualquiera de las etapas del proyecto y para diferentes tipos de personas; como DrExplain',
                '<strong>- Configuración: </strong> Son utiles para el control de versiones y la evolución del software; como Git',
                '<strong>- Diseño:        </strong> Ayudan a la creación de la estructura del programa y de su desglose para detallarlos y refinarlos; como Star UML ',
                '<strong>- Analisis:      </strong> Ayuda a cumplir con los requisitos al analizar los diagramas por posibles falencias, omisiones ó redundancias; como casecomplete ',
                '<strong>- Implementación:</strong> En esta categoria se encuentran los IDEs como Eclipe y herramientas para hacer prototipos; como Mockup Builder',
                '<strong>- Pruebas:       </strong> Son herramientas para realizar pruebas de software como y aumentar la calidad; como Jmeter',
                '<strong>- Mantenimiento: </strong> Sirven para documentar errores y seguimiento de defectos; como HP Quality Center ',
            ]),
        new Item('divide',
            [
                '- Generalmente es una tecnica aplicada a algoritmos, pero puede usarse en ambientes de mayor embergadura ',
                '- Suelen se problemas capaces de descomponerse en subproblemas y ser resueltos de manera recursiva ',
                '',
                '<strong>- Divide: </strong> Dividir el problema en subproblemas más pequeños ',
                '<strong>- Vence:  </strong> Resolver los problemas de manera individual y de manera acotada ',
                '<strong>- Combina:</strong> Las soluciones de los subproblemas en la solución del problema original ',
            ]),
        new Item('diseño',
            [
                '- Un buen analisis desemboca en un buen Diseño (generalmente) ',
                '- Esta etapa es fundamental para llegar a una solución optima que cumpla los requisitos funcionales y no funcionales, ',
                ' - basandose en la creatividad y experiencia de los profesionales a cargo ',
                '',
                '<strong> - Entendimiento de los requisitos:</strong> Sean funcionales o NO funcionales estos deben ser claros y sin ambiguedades ',
                '<strong> - Usar patrones de diseño:</strong> No reinventes la rueda, sabiendo que hay soluciones a tus mismos problemas, documentadas y confiables ',
                '<strong> - Calidad:</strong> Esta debe ser un objetivo a alcanzar en tu proyecto, no una fase más ',
                '<strong> - Modularidad:</strong> Al ser modular esto facilitara la reutilización y que las futuras modificaciones afectan el menos codigo posible ',
                '<strong> - A la medida:</strong> El diseño puede crecer y cambiar de acuerdo a las especificaciones de cliente, no necesariamente debe nacer completo ',
                '<strong> - Documentación:</strong> La documentación debe existir en cualquier proyecto, para ayudar a la compresión del sistema, sea a nivel general ó especifico ',
            ]),
        new Item('crc',
            [
                '- Ayuda a los equipos a entender los procesos de una manera más facil y concisa ',
                '- Al tener todos las posibles parte del sistema a la disposición se reduce la redundancia y se asignan mejor las responsabilidades ',
                '- Es ideal hacer esto mediante una lluvia de ideas, donde todos participen ',
                '- Cuando hay demasiadas tarjetas, estas empiezan a añadir complejidad al entendimiento del modelado, ',
                '  - para esto se desarrollaron los casos de uso, y explorar diferentes flujos y especializaciones ',
                '',
                ' - Constan de 3 partes: ',
                '<strong> - Clase:</strong> Nombre de la clase en si, el cual debe ser diciente y que ayude a entender el porque de su creación ',
                '<strong> - Responsabilidad:</strong> Cual es la función ó funciones de la clase, entre más especifica mejor ',
                '<strong> - Colaborador:</strong> Son otras clases ó entidades que son necesarias para el correcto funcionamiento de la clase ',
            ]),
        new Item('avestruz',
            [
                '- Es una estrategia donde se ignora un problema, en vez de buscar una solución para este ',
                '- Esto es debido a la premisa de suponer de que son problemas increiblemente raros ',
                '- Al ser problemas raros, es más costoso y complejo evitar que sucedan a controlarlos cuando suceden ',
                '- Además de que se agregaria complejidad extra por un esceneario poco probable ',
            ]),
        new Item('modeloDominio',
            [
                '<strong>- Dominio:</strong> Es el problema que quieres resolver, reglas de negocio, procesos, subtareas, etc...',
                '<strong>- Modelo:</strong> Es la abstracción de la realidad, en el contexto determinado, para darle solución al problema en cuestión ',
                '<strong>- Modelo de Dominio:</strong> Organización y estructura de todo el conocimiento aceca del problema, sus partes, actores, relaciones, alcance, etc...',
            ]),
        new Item('sistemasInformacion',
            [
                '- Se refiere al conjunto ordenado de mecanismos con el fin de administrar datos e información ',
                '',
                '- Recursos que interactuan:',
                ' - Recursos humanos      -> personas de diversas indoles con diferentes destrezas ',
                ' - Datos                 -> cualquier tipo de información masiva que deba procesarse ',
                ' - Actividades           -> pasos a seguir, procedimientos especificos, etc...',
                ' - Recursos informaticos -> tecnologias usadas con diversos propositos ',
                '',
                '<strong>- Tipos: </strong>                            <strong>- Elementos:</strong>          <strong>- Ejemplos:</strong> ',
                ' - Procesamiento de transacciones     - Financieros         - Control de calidad',
                ' - Información ejecutiva              - Humanos             - Bases de datos    ',
                ' - Información gerencial              - Tecnologicos        - Hojas de calculo  ',
                ' - Soporte de decisiones              - Materiales                              ',
                '                                      - Administrativos                         ',
            ]),
        new Item('dataAnalisis',
            [
                '- Para obtener resultados especificos, es vital conseguir todas las partes necesarias ',
                '- Entre más complejo sea el analisis, mayor sera el valor que este aporta ',
                '',
                '-<strong> Analitica descriptiva</strong> -> responde a la pregunta puntual de que sucedio, indicando si algo esta bien o mal, sin tener el porque ',
                '-<strong> Analitica diagnostica</strong> -> se combinan los datos historicos con otros, para responder el porque profundizando en las causas, ',
                ' - para identificar patrones, y obtener información detallada del problema en particular ',
                '-<strong> Analitica predictiva</strong> -> dice lo que es probable que suceda, utilizando los anteriores analisis para detectar tendencias, ',
                ' - y agrupar datos, esta analitica debe ser revisada y refinada constantemente para tener información confiable ',
                '-<strong> Analitica prescriptiva</strong> -> aca no solo se predicen posibles problemas, se toman acciones para aprovechar las tendencias, ',
                ' - y sortear inconvenientes, además de los datos e información anteriores, es importante tener en cuenta los factores externos ',
            ]),
        new Item('timeComplexityBigO',
            [
                '- Un algoritmo es una secuencia logica de pasos, para resolver un problema especifico ',
                '- Debido a esto, suelen haber diferentes formas de hacerlo para un mismo problema, diferiendo en la forma pero no el resultado ',
                '- Tambien debe exisitir una manera de medir, su consumo de recursos, eficiencia y tiempo ',
                '- Aca es donde se introduce la notación <strong>Big O</strong>, que funciona para realizar estimaciones segun los datos introducidos ',
                '- Esta mide la eficiencia del algoritmo en función de la complejidad en el tiempo-espacio, representandose de manera algebraica ',
                '- Al estar directamente ligada al tamaño de la entrada, se suele hablar de tiempo, y sus implicaciones en los recursos del sistema ',
                '',
                '  - Constante: O(1)         -> Mejor     - Cuadrático: O(n^2)  -> Horrible',
                '  - Logarítmico: O(log n)   -> Bueno     - Exponencial: O(2^n) -> Horrible',
                '  - Lineal: O(n)            -> Justo     - Factorial: O(n!)    -> Peor    ',
                '  - Logarítmico: O(n log n) -> Malo                                       ',
                '',
                '- Estas mediciones estan relacionados con el numero de instrucciones y sentencias de control del algoritmo ',
                ' - <strong>Constante:  </strong> Solo se tiene una instrucción, por lo que no importa el tamaño de los datos ',
                ' - <strong>Lineal:     </strong> Suelen darse cuando existen ciclos, a mayor tammaño, mayor tiempo ',
                ' - <strong>Logarítmico:</strong> Tambien depende del tamaño de la entrada, pero en este con cada iteración el tamaño crece o decrece ',
                ' - <strong>Cuadratico: </strong> Un buen ejemplo son 2 ciclos anidados, donde cada ciclo se ejecutara n veces ',
                ' - <strong>Exponencial:</strong> Cada iteración hace crecer el conjunto de datos, como puede ser la secuencia Fibonacci recursiva ',
            ]),
        new Item('kpis',
            [
                '- <strong>Indicadores claves de desempeño</strong>, son una evolución de las metricas para alinearse con objetivos estrategicos ',
                '- En cualquier proyecto es esencial definir las metricas y alinearlas con los objetivos comerciales y las metas de IT',
                '- El uso de KPIs, calculados puede ayudar a medir aspectos no calificables, utiles para aspectos esenciales, como la nube',
                '',
                ' <strong>Objetivo</strong>                         <strong>KPI</strong>                             <strong>Metrica</strong>',
                '  Introducir la capacidad          Disminución del tiempo          Tiempo para provisionar una VM               ',
                '  de respuesta de IT               de comercialización             o una nueva instancia                        ',
                '',
                '  Acelerar la transformación       Mayor valor comercial           Tiempo para lanzar nuevos proyectos          ',
                '  y la innovación emergente                                        Socios del ecosistema                        ',
                '',
                '  Ofrecer experiencias             Intención de reutilizar         Costo de la corrección de errores            ',
                '  de calidad                       servicios de la nube            Porcentaje de errores reducidos              ',
                '',
                '- Establecer un KPI puede ser dificil, ya que es probable necesitar practicas de gobierno, enfocadas en la nube ',
                '- Para comprender que datos se pueden medir, cuando se capturan, donde y como usarlos ',
                '- Trabajar con los equipos y comprender sus necesidades, es un buen punto de inicio',
                '- Una vez se hayan escogido las metricas y los KPIs de utilidad, tambien se pueden combinar en un tablero para su analisis ',
            ]),
        new Item('manifiestoReactivo',
            [
                '- En la ultima decada, los requerimientos de las aplicaciones, los tiempos de espera cada vez son menores, los datos ya se miden en Peta y no en Gigas ',
                '- Todas estas necesidades se deben satifacer, de manera que el software sea <em>Reactivo</em>',
                '- Siendo más flexible, con bajo acoplamiento, escalables y faciles de desarollar/mantener además de que sus fallos no sean catastroficos ',
                '',
                '<strong> Los sistemas Reactivos son:</strong>',
                '<strong>- Responsivos:</strong> El sistema responde en la menor cantidad de tiempo posible, y de manera consistente ',
                '<strong>- Resilientes:</strong> El sistema sigue respondiendo, aun frente a diversos fallos, ya que estos se deben manejar sin comprometer al todo ',
                '<strong>- Elasticos:  </strong> El sistema debe continuar respondiendo con diferentes niveles de carga, evitando cuellos de botella Y sabiendo como crecer ',
                '<strong>- Orientado a mensajes:</strong> Los sistemas reactivos confian en el intercambio de mensajes asyncronos, ya sea para funcionar y/o delegar fallos, ',
                ' - esta comunicación debe tener estrategias para ser No-bloqueante e implementar back-pressure para no desperdiciar recursos ',
            ]),
        new Item('declineDesign',
            [
                '- El diseño es una actividad intrinseca para crear cualquier producto, por eso es que esta presente en todo y en todas partes ',
                '- Tambien el espacio que nos rodea, moldea nuestros habitos para consumir, nuestros paisajes urbanos, y nuestra forma de movernos ',
                '- <i>Don Norman</i> autor de <strong>The design of Everyday Things</strong> define el diseño como: ',
                '- <em>La practica que se preocupa por como funcionan las cosas, como se controlan y la naturaleza de la interacción entre las personas y la tecnologia</em>',
                '- El diseño no es exclusivo de las cosas cotidianas, existe el diseño industrial, el diseño de las interfaces de usuario (UI) o el diseño grafico ',
                '- Un mal diseño es como una <strong>"Puerta Normanda"</strong> que tiene el cartel de empujar, pero una manija que por instinto se tomara para jalarla ',
                '- Esto no es culpa del usuario, es culpa de un diseño ambiguo y poco pulido ',
                '- Este libro es una gran ayuda para trabajadores y diseñadores involucrados con la tecnologia ',
                '- El diseño se debe centrar en el ser humano y se deben tener en cuenta 5 pasos: <strong>Empatizar</strong>, <strong>Definir</strong>, <strong>Idear</strong>, <strong>Prototipos</strong>, <strong>Iterar</strong>',
                '',
                '<strong>- Cuando el diseño funciona naturalmente</strong>',
                '- El senderismo es una actividad ideal para los habitantes de las ciudades, para que estos se vuelvan a conectar con la naturaleza ',
                '- Una buena ruta de senderismo se siente natural, aunque haya sido construida artificialmente, y tiene varios puntos en comun: ',
                ' - Se puede sostener por un largo periodo de tiempo, con una afectación minima al ecosistema ',
                ' - Es directa y en caso de no serlo cuenta con pocos desvios ',
                ' - Genera sensaciones de riesgo, de manera controlada ',
                '',
                '<strong>- Para quien se diseña ?</strong>',
                '- Las innovaciones tambien pueden traer problemas raciales, ya sea por fallas de diseño, o falta de grupos más grandes de prueba ',
                ' - Dispensadores de jabon racistas, debido a que tenian problemas al detectar la luz infrarroja reflejada, por personas con la piel oscura',
                ' - Face ID, que no era capaz de diferenciar a los usuarios chinos entre si',
                ' - Google photos, y su reconocimiento de imagenes, llego a etiquetar fotos de adolescentes negros como primates, un nivel aun peor que los anteriores ',
                '- Es increible pensar que empresas tan grandes y con tantos recursos hallan cometido errores tan graves, por mas innovadores que sean los productos, ',
                ' - no se deben dejar de lado los pasos 4 y 5, además de probar con muestras grandes y variadas, para compensar los posibles sesgos ',
                '- El punto ciego del diseño, siempre sera los diseñadores, ya tambien son personas, con sesgos e ideas que afectan sus decisiones ',
                '',
                '<strong>- La sordida religion de arreglar el mundo</strong>',
                ' - El diseño se ha convertido en algo que se puede "enseñar" y han surgido decenas de negocios alrededor de esto ',
                ' - <strong>Rebbeca Ackermann</strong> Describe como democratizar el diseño pudo haber sido un error, estos nuevos innovadores y disruptores ',
                '  - a menudo no estan con contacto con la realidad, y carecen de experiencia conceptual para inspirar un cambio verdadero ',
                '',
                '<strong>- Cuando el diseño falla</strong>',
                '- La arquitectura hostil, como bancos contra personas sin hogar, o la segregación de comunidades ',
                '- El diseño falla cuando los diseñadores estan cegados por sus propios prejuicios, politicas o interese corporativos ',
                '- El mundo del diseño, deberia ser mas diverso y tener más en cuenta posibles efectos no intencionados e intencionados con las comunidades marginadas ',
            ])
    ];

export const BUENAS_PRACTICAS =
    [
        new Item('practicas1',
            [
                '- Definir el alcance, establecer limites con el cliente acerca del trabajo a realizar ',
                '- Dividir el desarrollo en fases o entregables que sean factibles',
                '- Elegir el mejor IDE de acuerdo a los conocimientos o las necesidades',
                '- Reutiliza código y comentalo cuando sea necesario',
                '- Documenta lo que haz hecho, asi es más facil integrar personal y sera util para futuros desarrollos ',
            ]),
        new Item('practicas2',
            [
                '- Presencia activa de los clientes en el desarollo',
                '- Definir los requerimientos y sus prioridades con el cliente',
                '- Adaptar el lenguaje de acuerdo a los tipos de clientes',
                '- Nunca dejar funciones al azar, que las pruebas demuestren su funcionamiento ',
            ]),
        new Item('practicas3',
            [
                '- Escoger un ciclo de vida adecuado segun cada desarrollo',
                '- Estimar y presupuestar correctamente (más facil decirlo que hacerlo) ',
                '- Control de calidad y revisiones de código periodicas',
                '- Planificar el matenimiento el soporte y posibles mejoras',
            ]),
        new Item('practicas4',
            [
                '- Usar tecnologias y frameworks consolidados',
                '- Promover que el uso de la aplicación sea intuitivo y accesible ',
                '- Distribución de tareas, no hay equipos de un solo hombre',
            ]),
        new Item('demeter',
            [
                '- No aceptar caramelos de extraños',
                '- El encadenamiento de muchos metodos puede significar un alto acoplamiento',
                '- Entre más grande sea una pila de llamadas, sera más propensa a futuras refactorizaciones ',
            ]),
        new Item('complejidad',
            [
                '- Es una metrica del software que proporciona una medida cuantitativa de la complejidad logica del programa ',
                '- Son los diferentes caminos que puede seguir una aplicación desde la entrada hasta la salida, ',
                ' - teniendo en cuenta condiciones, parametros, funciones y atributos ',
                '',
                '- Lo ideal es tener la menor complejidad ciclomatica posible ya que: ',
                ' - Facilita el mantenimiento del codigo ',
                ' - Simplifica la refactorización ',
                ' - El codigo es más facil de entender ',
                ' - La escabilidad del proyecto se puede facilitar ',
                '',
                '- Para reducirla se pueden aplicar los siguientes concejos: ',
                ' - No abusar de la identación ',
                ' - Evitar las sentencias switch ',
                ' - Metodos pequeños para funcionalidades más desacopladas ',
            ]),
        new Item('logging',
            [
                ' “Depurar es como ser el detective de una película policial en la que también eres el asesino. ”- Filipe Fortes ',
                '',
                '- Depurar es recomendable cuando la pila de llamadas es demasiado extensa y compleja',
                '- Registrar es util cuando la aplicación ó funcionalidad es pequeña y de baja complejidad ',
                '- Esta elección tambien depende de la comodidad de cada programador y de su eficiencia con cada herramienta ',
            ]),
        new Item('debugging',
            [
                '- En 1940, el almirante Grace Hopper, que tambien escribio el primer compilador que existio, ',
                ' - descubrio una polilla un (bug) dentro de una computadora que se estaba desarrollando, como la causante de la falla del sistema ',
                '- Desde entonces se suele decir que se esta "depurando" (debugging) para indicar una busqueda de errores y/o fallos ',
                '- Los errores en la programación son comunes al ser una actividad tan conceptual y abstracta ',
                '',
                '- Como entrar en una mentalidad adecuada para depurar: ',
                '<strong> - Preste atención a los mensajes de error:</strong> Si el codigo falla, casi todos los lenguajes son capaces de demostrar la causa y el fallo generado, ',
                '  - algunos con más exactitud que otros, enteder el error es la base para encontrar una solución ',
                '<strong> - Buscar en internet:</strong> Si no conoce el error, o no sabe el porque de este, es probable que en internet ya exista una explicación, ',
                '  - el porque sucede, y posiblemente dando soluciones para este, en contextos similares ',
                '',
                '<strong> - Usar fuentes confiables y actualizadas:</strong> Siempre es buena idea leer la documentación oficial para entender la raiz del problema, ',
                '  - tambien saber que todas las soluciones no son optimas, ya que pueden estar desactualizadas ó no funcionarian en todos los ambientes ',
                '<strong> - Explica tu logica:</strong> Existe la posibilidad de que se haya malinterpretado la información ó se esten haciendo suposiciones erroneas, ',
                '  - por lo que revisar tu codigo con un pato de goma, explicandolo linea por linea, podemos comprender cosas que antes no ',
                '',
                '<strong> - Reduzca las posiblidades:</strong> Si un codigo funciona de cierta manera, deberiamos procurar que siga funcionando asi, por ejemplo ',
                '  - si una función recibe 3 parametros, deberiamos pasarle 3 parametros, y no 2, estas "pequeñeces" pueden ahorrar un gran tiempo despues ',
                '<strong> - Tomar un descanso:</strong> Cuando los bugs son más grandes y complejos es posible que su resolución conlleve mucho tiempo, por lo que ',
                '  - en algun momento de frustación optemos por soluciones de fuerza bruta, en este caso lo mejor es tomarnos un descanso y hacer otra cosa ',
                '',
                '<strong> - Buscar ayuda:</strong> Cuando los problemas son demasiado grandes o complicados, preguntarle a alguien con más experiencia es de los más normal, ',
                '  - generalmente las personas de la comunidad estan dispuestas a ayudar a sus congeneres, ',
                '- Una vez resuelto el bug, verifique que la solución si haya funcionado y que esta no ha introducido nuevos problemas, ',
                ' - si tiene oportunidad de realizar pruebas automatizadas y/o unitarias aun mejor ',
                '',
                '- Como evitarlos: ',
                '<strong> - Codigo limpio:</strong> Tenga en cuenta que los principios como SOLID, KISS, DRY y muchos más estan ahi para mejorar nuestro codigo, ',
                '  - tenerlos en cuenta a la hora de codificar nos ayuda a crear implementaciones más limpias y mantenibles ',
            ]),
        new Item('complejidadCognitiva',
            [
                '- Es una metrica de software complementaria a la complejidad ciclomatica ',
                '- Esta metrica trata sobre que tan dificil es de entender un fragmento de codigo ',
                '- Esta metrica aumenta de acuerdo a ciertas condiciones ',
                ' - Anidamiento',
                ' - Condicionales',
                ' - try/catch y retrasmision de excepciones',
                ' - Estructuras switch-case ',
                ' - sequencias largas de operadores logicos ',
                ' - recursividad ',
                ' - ciclos',
                '',
                '- Un codigo con una alta complejidad cognitiva es dificil de mantener, por lo que siempre se busca simplificarla, ',
                ' - sin cambiar su comportamiento, para ser más facil de comprender y de modificar ',
            ]),
        new Item('complejidadAlgoritmica',
            [
                '- Un algoritmo es una manera de hallar un dato desconocido, o una secuencia de pasos para obtener un resultado ',
                '- Los problemas pueden ser resueltos de diversas maneras, sin embargo no todas son optimas o viables ',
                '- Esto nos permite medir un algoritmo mediante los recursos y el tiempo necesario para su ejecución ',
                '- Tambien se suelen describir mediante el tamaño del conjunto de datos ',
                ' - y el crecimiento de las instrucciones para poder cumplir el objetivo ',
                '- Para medir la complejidad cada instrucción suele tener un peso determinado, ',
                ' - despues de sumarlas y tener el mayor termino, este es el indicativo de la complejidad ',
                '',
                '- Grados de complejidad comunes: ',
                '- O(1)       -> constante         - O(n<sup>2</sup>) -> cuadratico  ',
                '- O(log n)   -> logaritmico       - O(n<sup>3</sup>) -> cubico      ',
                '- O(n)       -> lineal            - O(n<sup>a</sup>) -> polinomico  ',
                '- O(n log n) -> cuasi-lineal      - O(2<sup>n</sup>) -> exponencial ',
                '- O(n!)      -> factorial                                           ',
                '',
                '- Sabiendo analizar estas caracteristicas, se puede suponer el costo de los algoritmos, e intentar optimizarlos ',
                '- Si la optimización no es prioridad algunos de estos conceptos pierden relevancia, sin embargo',
                ' - conocerlos permite generar mejores soluciones, al tener más perspectivas a la hora de resolver un problema ',
            ]),
        new Item('estandaresNombramiento',
            [
                '- Cada lenguaje de programación tiene sus convenciones para nombrar metodos, clases, variables, constantes, etc... ',
                '- Se recomienda seguir estas convenciones para aumentar la legibilidad de nuestro codigo y facilitar el mantenimiento ',
                '',
                '<strong>- camelCase:</strong> Se usan mayusculas para diferenciar una palabra de otra ',
                ' - UpperCamelCase:  La primera letra de las palabras es mayuscula: MiPaginaDeConceptos ',
                ' - lowerCammelCase: Igual al anterior pero la primera letra es minuscula: miPaginaDeConceptos ',
                '- Generalmente usada para nombres de variables en diversos lenguajes ',
                '',
                '<strong>- snake_case:</strong> Las palabras estan separadas por guion bajo: mi_pagina_de_conceptos ',
                ' - SCREAMING_SNAKE_CASE: Igual que snake case pero en mayusculas: MI_PAGINA_DE_CONCEPTOS ',
                '- Utilizado para nombre de constantes y de variables en lenguajes más antiguos ',
                '',
                '<strong>- kebab-case:</strong> Como snake case pero con guion medio: mi-pagina-de-conceptos ',
                ' - Train-Case: Variedad de kebab case pero mayuscula inicial: Mi-Pagina-De-Conceptos ',
                '- Se encuentra generalmente en nombres de paquetes o de urls ',
                '',
                '<Strong>- leetspeak ó 1337:</strong> Consiste en remplazar caracteres por otros similares o su reflexion: M1P4G1N4D3C0NC3P70$ ',
                '- Usada ampliamente en internet, además de diversas comunidades en este ',
                '',
                '<strong>- Notacion hungara:</strong> Se usa para crear nombres de variables que indiquen su tipo: nContador ó bActivo ',
                '- Tambien usada en la programación, más que todo en lenguajes no tipados '
            ]),
        new Item('estatico',
            [
                '- El analisis de codigo estatico permite corregir vulnerabilidades, errores y bugs, que no se ven y pueden conllevar a problemas en el futuro',
                '',
                '<strong>- PROS</strong>',
                '- Tambien ayuda a la reducción de la deuda tecnica y detectar code smells ',
                '- Fomenta el uso de buenas practicas y la mejora continua ',
                '',
                '<strong>- CONTRAS</strong>',
                '- Se debe hacer con herramientas especializadas, y consume tiempo de desarrollo ',
                '- No hay estandares concretos, cada lenguaje tiene especificaciones diferentes entre si ',
                '',
                '- Algunas tecnicas de analisis ',
                '<strong>- Analisis grep:</strong> Analiza el codigo con expresiones regulares para encontrar: ',
                '  - Contraseñas expuestas, metodos mal nombrados, variables incompresibles, etc... ',
                '  - Errores de identación cerrar y abrir llaves correctamente, para evitar problemas al ejecutar ',
                '<strong>- DataFlow:</strong> Se analiza desde un punto de partida hasta un punto final ',
                '<strong>- AliasAnalisis:</strong> Analiza los punteros, para los lenguajes que funcionan con estos ',
                '',
                '- Posibles defectos ',
                '<strong>- Bugs:<strong> Es cuando un programa difiere de lo que debe hacer, esto es más subjetivo que objetivo, ',
                '    - por lo que son errores que son más faciles de encontrar por humanos ',
                '<strong>- Violación:</strong> Son errores de codificación entre lo que se pueda considerar "ideal", ',
                '    - en el marco del lenguaje y lo realizado por el programador ',
                '<strong>- Vulnerabilidad:</strong> Son comportamientos errores que a la larga pueden llevar a posibles problemas, ',
                '    - de rendimiento ó de seguridad, más no son son considerados problemas graves ',
            ]),
        new Item('guardClauses',
            [
                '- La identación puede ser una aliada a la hora de leer el codigo, pero demasiada puede convertirse en un obstaculo ',
                '- Esto no solo complica el entendimiento, si no que puede indicar un alto grado de anidación y complejidad ',
                '- Esta practica lo que nos recomienda es comprobar sistematicamente cada una de las condiciones que se deben cumplir, ',
                ' - para continuar con el proceso, y si alguna es invalida, se retorna un valor o una excepción dado el caso ',
                '- Esto facilita seguir la pila de llamados y mejora el entendimiento al reducir el anidamiento y la identación ',
            ]),
        new Item('semanticConstructors',
            [
                '- Tambien conocidos como <em>named constructors</em> es un refactor para eliminar la complejidad de los constructores ',
                '- Evita que tengan responsabilidades extra, al requerir que conozcan los detalles de la implementación ',
                '- Encapsula la creación de objetos de modo que haya menos posibilidades de construir objetos invalidos y pueda ser bajo demanda',
                '- Evita tener constructores telescopicos, que basicamente son n combinaciones de constructores de acuerdo a las propiedades ',
                '- Son una manera de implementar sobrecarga de metodos(constructores) en lenguajes que no lo permiten ',
            ]),
        new Item('exceptionGoodPractices',
            [
                '- No use solo excepciones genericas, especializar trae ventajas como un mejor manejo de los errores ',
                '- No abuse de las excepciones, lo ideal es solo crearlas para requisitos de negocios realmente importantes ',
                '- Registrar los errores es importante, pero no toda excepcion, debe estar acompañada de un log ',
                '- Diferenciar entre excepciones comprobadas y no comprobadas, ya que esto lo obligara a manejarlas en tiempo de compilacion o de ejecución ',
                '- Capturar las expresiones de manera que se silencien, asi no habra errores a la vista, e incrementara la dificultad al buscarlos ',
                '- Definir una jerarquia clara de las excepciones, quien debe capturarlas y quien puede lanzarlas ',
                '- Usar mensajes claros, que proporcionen información relevante del error, ayudando a encontrar potenciales problemas ',
                '- Cierre recursos y evite posible fugas de memoria, al tener acciones que hagan esto despues de manejar los errores ',
                '- Es importante saber retransmitir la información, de manera que no se pierda información de pila de errores ',
            ])
    ];

export const COMPILACION =
    [
        new Item('compilacion',
            [
                ' - Es el proceso de pasar un lenguaje de programación a otro formato de manera equivalente ',
                ' - Generalmente es un proceso de lenguajes de alto nivel a bajo nivel ',
                ' - Durante el proceso el codigo se puede optimizar o añadir más procesos ',
            ]),
        new Item('nivel',
            [
                '<strong>- Bajo nivel:</strong> Son lenguajes de alto rendimiento dependientes de la maquina donde se ejecute ',
                '<strong>- Bajo nivel:</strong> Es un lenguaje que esta más cercano al lenguaje maquina, por lo que son dificiles de manejar ',
                ' ',
                '<strong>- Medio nivel:</strong> Pocos lenguajes caen en esta categoria, ya que pueden ',
                '<strong>- Medio nivel:</strong> Acceder al sistema pero tambien puede funcionar como lenguaje de alto nivel ',
                ' ',
                '<strong>- Alto nivel:</strong> Son lenguajes más cercanos al entendimiento humano, además de ser más dinamicos ',
                '<strong>- Alto nivel:</strong> Son independientes de las maquinas donde se ejecuten, a traves de un traductor como intermediario ',
            ]),
        new Item('interprete',
            [
                '<strong>- Compilados:</strong> Son traducidos y ejecutados en la maquina que esten ',
                '<strong>- Compilados:</strong> Esto hace que la optimización sea mayor, pero la compatibilidad no ',
                '<strong>- Compilados:</strong> Los archivos ejecutables se realizan previamente, por lo que la ejecución es inmediata ',
                '<strong>- Compilados:</strong> Al estar enlazados con el SO y el Host, estos se pueden afectar mutuamente ',
                ' ',
                '<strong>- Interpretados:</strong> Estos deben tambien deben ser traducidos, a traves de un intermediario ',
                '<strong>- Interpretados:</strong> Este intermediario se encarga de ejecutar el programa para que el sistema lo entienda ',
                '<strong>- Interpretados:</strong> Debido a esto son multiplataforma, y se hace a pedido, (just in Time) ',
                '<strong>- Interpretados:</strong> La ejecución de estos programas estan aisladas del SO, por lo que requieren más recursos ',
            ]),
        new Item('transpilacion',
            [
                ' - Estos tambien traducen codigo de un lenguaje a otro, pero de igual nivel ',
                ' - Uno de los ejemplos más relevantes es paso de Typescript a Javascript ',
                ' - Todo transpilador puede ser considerado un compilador, pero no al contrario ',
                ' - Generalmente toda la sintaxis del lenguaje destino es compatible con la de origen, pero no al contrario ',
            ]),
        new Item('azucarSintactico',
            [
                '- Termino acuñado para hacer referencia a las adiciones sintacticas de un lenguaje de programación ',
                '- Estas adiciones se dan con el proposito de hacer que las construcciones sean más faciles de leer y expresar ',
                '- Esto no cambia el sentido semantico de las expresiones, pero si lo hace más entendible para el ser humano ',
                '- Son aquellas expresiones que pueden ser borradas sin afectar el funcionamiento del programa, o su rendimiento ',
                '- Parte del trabajo de los compiladores es desglosar estas expresiones a sus reducciones más basicas ',
            ]),
        new Item('coercion',
            [
                '- Es la conversion automatica o implicita de un tipo de dato a otro; Ejemplo: de string a number ',
                '- La coerción es implicita, mientras que la conversion puede ser implicita o explicita ',
                '- Esto puede dar a errores o conversiones erroneas si no se especifica que es lo que se necesita ',
                ' - Ejemplo -> "5" + 9 = 59         ',
                ' - Ejemplo -> Number("5") + 9 = 14 ',
            ]),
        new Item('ofuscacion',
            [
                '- Es comun el dicho que suele recordar que progames como si tu codigo fuera a ser mantenido por un psicopata que sabe donde vives ',
                '- Esto es para evitar que te termine odiando quien quiera que sea que tenga que mantener el codigo, ',
                ' - pero generalmente esto nos pasa con nuestro codigo, al cual nosotros mismos mantenemos ',
                '- Pero en ocasiones es interesante ocultar el funcionamiento de nuestro codigo cuando es inevitablemente visible, ',
                ' - como lo es en el caso de Javascript, para para evitar modificaciones, desentrañar su funcionamiento, o su plagio ',
                '- Esto en si, es opuesto a un codigo mantenible y entendible',
                '',
                '- Existen diferentes maneras "manuales" de hacer esto (malas practicas): ',
                ' - Nombre de variables sin sentido ',
                ' - Duplicar codigo ',
                ' - Añadir/eliminar comentarios innecesarios/necesarios ',
                ' - Agregar pasos innecesarios y codigo muerto ',
                '',
                '- La ofuscación es particularmente problematica cuando existen sistemas legacy sin buena documentación y con malas practicas ',
                '- Tambien puede ser usada con propositos malintencionados al introducir codigo malicioso dificil de revisar y por ende de encontrar ',
                '',
                '- Esto se puede dar de manera involuntaria pero necesaria en procesos como: ',
                ' - La transpilación de un lenguaje a otro, Typescript a Javascript',
                ' - La minificación de archivos para reducir su peso ',
                ' - La compilación de lenguajes de alto nivel (compilados) a codigo binario ',
                ' - Optimizaciones realizadas por los propios compiladores ',
            ]),
        new Item('treeShaking',
            [
                '- Es un termino comunmente usado en Javascript para la remoción de codigo muerto ',
                '- Esto se basa en la declaración de importaciones y exportaciones de ES2015',
                '- Los empaquetadores modernos como webpack y rollup realizan esto para tener archivos más livianos ',
            ]),
        new Item('grafos',
            [
                '- Son una composición interesante de un conjunto de objetos denominados nodos (vertices) ',
                '- Estos estan conectados con otros por medio de aristas (arcos) ',
                '- Algunos de sus usos son las bases de datos, donde la información esta interelacionada entre multiples nodos ',
                '- Para estudiarlos nacio la teoria de grafos, con la finalidad de representar estas abstracciónes graficamente ',
                '- El analisis de los nodos y sus aristas nos permite entender a profundidad las relaciones de los datos ',
                '- Existen diferentes tipos de grafos, dependiendo de los caminos que estos tengan ',
                '- Un camino, es el recorrido que se da al pasar por cierta cantidad de nodos, para llegar de A a B ',
                '- Tambien son utiles para la optimización y/o simplificación de redes de cualquier tipo ',
            ]),
        new Item('compilacionAnticipada',
            [
                '- La compilacion anticipada, es el acto de compilar un lenguaje de alto nivel a bajo nivel (generalmente), más no necesariamente a nivel de maquina ',
                '- Comunmente asociado al paso intermedio como al bytecode de Java ó CIL de .NET, ',
                ' - cuando se usa en este contexto especifico suele ser el contrario de la compilación Just in Time (JIT)',
                '',
                '- Una de las principales diferencias entre AOT y JIT es que esta reduce la necesidad de un intermediario para ',
                ' - convertir el codigo a lenguaje maquina, haciendo el paso intermedio antes de la ejecución y no durante ',
                '',
                '- Este tipo de compilación no es posible para todos los lenguajes, especialmente los tipados dinamicamente ',
                '- Un aspecto en contra de AOT es la carencia de realizar optimizaciones especificas para el entorno donde se va a ejecutar, ',
                ' - ya que al contrario de JIT, esta no conoce toda la información necesaria, y tampoco puede especular para lograr esto ',
                '',
                '- Un aspecto positivo de AOT es que al ya estar listos, se reducen los tiempos en el ambiente de ejecución ',
            ]),
        new Item('duckTyping',
            [
                '- Es un termino comunmente asociado con los lenguajes de programación tipados dinamicamente y el concepto de polimorfismo ',
                '- Al codigo no le importa el tipo del objeto, si no lo que puede hacer <em>"Si camina como pato y grazna como pato, entonces debe ser un pato "</em> ',
                '- Parte de esto es posible ya que estos lenguajes usan la sobrecarga automatica de operadores de modo que se adaptan al tipo de dato procesado ',
                '- El polimorfismo permite que el comportarmiento sea el esperado, sin tener que aferrarse a algun tipo en concreto ',
                '- Aunque es flexible, puede traer problemas en tiempo de ejecución si se quiere usar comportamientos especificos de un tipo en otro que no los soporte ',
                '- Tambien se pueden comprobar los tipos de los objetos antes de, pero esto generalmente denota un problema de diseño más que de la codificación en si ',
            ]),
        new Item('sdkVsApi',
            [
                '- Actualmente las comunidades de desarrollo usan ambos, de manera intensa y es importante entender sus diferencias ',
                '- <strong>SDK:</strong> ',
                '- "Software Development Kit", Definido mediante un conjunto de herramientas de creación de software especificos de cada plataforma, que incluye: ',
                ' - <strong>Depurador:</strong> Permite al desarrollador identificar y corregir errores en el codigo del programa ',
                ' - <strong>Compilador:</strong> Procesa el lenguaje de programación traduciendo todas las declaraciones a un lenguaje entendible para la maquina ',
                ' - <strong>Ejemplos:</strong> Para dar una idea más clara a la hora de programar ',
                ' - <strong>Rutinas y subrutinas:</strong> Metodo, funcion o subprograma que se puede llamar desde cualquier parte del codigo, con una función especifica ',
                ' - <strong>Biblotecas:</strong> Permite reusar codigo ya existente para evitar reiventar la rueda ',
                ' - <strong>Herramientas de analisis:</strong> Para evaluar el rendimiento y realizar pruebas en entornos productivos ',
                ' - <strong>Documentación:</strong> Durante el desarrollo con cierta frecuencia es necesario conocer las intrucciones o especificaciones ',
                '',
                ' Download and install   &rarr; &rarr;      Coding Space           &rarr; &rarr;        Test and build ',
                '      the "Kit"              Compiler, Docs, Ejemplos             software aplications                ',
                '',
                '- Tipos',
                ' - <strong>Plataforma:</strong> Son claves para el desarrollo de cada plataforma, por ejemplo el SDK de windows, para aplicaciones en su tienda ',
                ' - <strong>Especificos del lenguaje:</strong> Son usados para desarrollar en un lenguaje en especifico, como el JDK, para desarollar en Java o lenguajes asociados ',
                ' - <strong>Especificos de analisis:</strong> Recopilan datos para obtener información sobre usuarios o acciones, como el SDK de Google Analytics ',
                '',
                '- Beneficios',
                ' - Acceso a piezas prefabicadas debidamente testeadas y que acortan tiempo de desarrollo ',
                ' - Integraciones mas fluidas debido al soporte y la documentación presentes de manera nativa ',
                ' - Menor tiempo de desarrollo construyendo componentes bases, que se puede aprovechar para otros más importantes ',
                '',
                '- <strong>API:</strong>',
                ' - Acronimo para "Interfaz de programación de aplicaciones", la cual elabora un conjunto de reglas mediante las cuales ',
                '  - las plataformas, dispositivos o aplicaciones se conectan y se comunican entre si ',
                ' - Una buena API tiene bien identificadas y documentadas sus especificaciones tecnicas, e interfaces por las cuales es posible acceder ',
                '',
                ' Web app in   &rarr;    Internet    &rarr;    API     &harr;   Web        &ndash; &ndash;    Data ',
                '  browser     &larr;                &larr;               Server      &ndash; &ndash;    base      ',
                '',
                '- Tipos',
                ' - <strong>REST:</strong> Se componen de una arquitectura cliente-servidor y generalmente son usadas para operaciones CRUD a traves de JSON ',
                '  - Tambien suelen ser stateless por lo que no almacenan datos del cliente en el servidor entre solicitudes ',
                ' - <strong>RPC:</strong> Se utiliza para ejecutar codigo de otro sistema y diferente a REST esta no solicita datos, si no que espera una respuesta de la ejecución ',
                ' - <strong>SOAP:</strong> Se comunica a traves de protocolos web como HTTP, SMTP, TCP/IP y requieren mayor privacidad y seguridad ',
                '- SOAP es un conjunto de protocolos, mientras que REST es un modelo arquitectonico, por lo que es posible tener API RESTful con protocolos SOAP  ',
                '',
                '- Beneficios ',
                ' - Integraciones con diferentes sistemas como complementos sin tener que desarrollar funcionalidades extras ',
                ' - Permiten acortar los ciclos de desarrollo y ser más eficientes ',
                ' - Son personalizables hasta cierto punto, segun la necesidad ',
            ]),
        new Item('casting',
            [
                '- Es una cambio de un valor de un tipo a otro, ya sea primitivo o de clase ',
                '<strong> - Widening Casting:</strong> Cuando se convierte de un dato pequeño a uno más grande; float -> double ',
                '<strong> - Narrowing Casting:</strong> Caso contrario donde se convierte de un dato más grande a un pequeño; long -> int ',
                '',
                '- Estos casteos tambien se pueden hacer con clases que guarden similitudes o que se relacionen jerarquicamente mediante la herencia ',
                '- Algunos casteos de tipo Narrowing pueden ocasionar errores, como la perdida de precisión o excepciones en tiempo de ejecución ',
            ]),
        new Item('verbosity',
            [
                '- Un lenguaje puede ser considerado como Verboso, cuando se usan demasiadas palabras para realizar acciones simples, ',
                ' - o cada accion debe ser demasiado especificada, todo este codigo extra(ruido), desperdicia tiempo y energia del desarrollador ',
                '',
                '- Pero tambien se puede dar el caso contrario, de tener comandos muy especificos para acciones muy especificas, esto peca de ser demasiado conciso, ',
                ' - obligando que el desarrollador sepa cada significado de cada expresion, esto tambien cuesta tiempo ya que no es entendible a primera vista ',
                '',
                '- Ambos extremos son malos, ya que en una industria agil y de rapida evolución, como la programación, el codigo debe ser mantenible y entendible; ',
                ' - y para que esto se cumpla, los desarrolladores han de ser capaces de entender que se debe hacer y como hacerlo de manera eficiente ',
            ])
    ];

export const CONOCIMIENTOS_EMPIRICOS =
    [
        new Item('cristales',
            [
                '- Esta teoria predice que los desperfectos del ambiente van a generar la sensación de que la ley no existe ',
                '- Corregir los errores, aun por más por pequeños que sean evitara que el software se degenere ',
                '- Las pequeñas faltas pueden conllevar a transgresiones mayores ',
                '- Establcer normas claras ayuda a evitar este fenomeno ',
            ]),
        new Item('quo',
            [
                '- Es la preferencia innata del ser humano a la estabilidad ',
                '- Nuestras emociones son un punto de inflexión a la hora de tomas decisiones que arriesguan esta estabilidad ',
                '- Este fenomeno esta ligado a otros más comunes y que se viven casi a diario ',
                '',
                '<strong>- Aversión a las perdidad:</strong> Es un efecto donde es más facil aferrarse a una cantidad u objeto en el que haya invertido tiempo y dinero, ',
                ' - que adquirir o construir uno nuevo que representara una ganancia, mayor a la actual ',
                '<strong>- Efecto de dotación:</strong> Los bienes se perciben de manera más valiosa cuando son de nuestra propiedad, ',
                ' - Aunque este mismo bien sea el mismo que el de otra persona ',
                '',
                '- Estos fenomenos se pueden dar en el mundo del software al no realizar refactors, o limpiezas en el codigo solamente porque, ',
                ' - "funciona", aunque lo haga de manera complicada u poco optima ',
            ]),
        new Item('costo',
            [
                '- La falacia del costo hundido es la tendencia a mantener proyectos fracasados ó obsoletos ',
                '- Esto se debe al tiempo y gastos invertidos en los proyectos, que no queremos soltar por la aversion a las perdidas ',
                '',
                '- En la industria del software es comun tener casos donde hay sistemas que constantemente deben ser parcheados, ',
                '  - costando tiempo y dinero, y donde la solucion más optima seria rehacer el sistema que continuar con este tipo de situaciones ',
                '- Tambien estan los casos donde las personas se niegan a abandonar proyectos estables, pero que eventualmente seran obsoletos ',
                '  - ya que migrar esto implica un costo, que puede ser menor que mantener a un proyecto legacy; pero esto no se ve a corto plazo ',
            ]),
        new Item('tiposProgramadores',
            [
                '<strong>- The duct tape:</strong>',
                ' - Este programador arreglara el error sin importale como, la prioridad para el siempre sera arreglar el error, ',
                '  - sin importar la complejidad de la solución ni lo que se deba hacer y/o dañar ',
                '',
                '<strong>- The perfectionist programmer:</strong>',
                ' - Para este programador cada segmento de codigo es una obra de arte, ',
                '  - no le importan las fechas limites ó los presupuestos, solo que el codigo generado sea hermoso eficiente, ',
                '  - e inmutable, a menos que sea el mismo quien lo cambie ',
                '',
                '<strong>- The anti-programming programmer:</strong>',
                ' - Es aquel que siempre evitara reinventar la rueda, ya sea usando librerias de terceros',
                '  - ó usando codigo ya hecho por alguien más, pero siempre se decantara por la solución más simple, ',
                '  - aunque esta no sea eficiente o retrocompatible, pero si sera facil de entender',
                '',
                '<strong>- The half-assed programmer:</strong>',
                ' - Este programador es el más odiado por los demás Programadores, ya que solo le importa cumplir con su tarea, ',
                '  - la calidad ó la eficiencia son solo utopias con el; y lo más seguro es que generara problemas a largo plazo, ',
                '  - siempre sera eficaz a cuanto a los tiempos de entrega, aunque esto dañe otras partes del sistema ',
                '',
                '<strong>- The theoretical programmer:</strong>',
                ' - Para este programador siempre habra diferentes maneras de resolver algo, y la mayoria de su tiempo lo ocupara pensando ',
                '  - como resolverlo de la mejor manera, por lo que la manera que escoja para hacerlo nunca lo satisfacera al 100%, ',
                '  - pero entregara codigo a tiempo y con buena calidad ',
            ]),
        new Item('sesgos',
            [
                '- Son impulsos inherentes a cada ser humano que se basan en sus emociones, conocimientos, experiencias, creencias, etc.. ',
                '- Es la interpretación erronea de la información disponible, y como esto afecta nuestra emisión de juicios ',
                '',
                ' - Sesgo de confirmación -> es la busqueda de sucesos ó interpretaciones para confirmar algo que creemos de manera arraigada ',
                ' - Disponibilidad heuristica -> es un atajo mental que otorga más valor o credibilidad a la primera información que recordemos ',
                ' - Sesgo de anclaje -> es basarse en la primera información y solo esta fuente para tomar una decisión, sin evaluar otras posibilidades ',
                ' - Sesgo de observación selectiva -> es cuando diriges toda tu atención solamente a lo que te interesa, sin presta atención a los demás datos ',
                ' - Sesgo negativo -> te enfocas en los sucesos negativos en vez de tomar una posición más neutra ',
                ' - Resistencia reactiva -> se enfoca en hacer lo contrario de lo que alguien te dice ó aconseja, de manera selectiva y racional ',
                ' - Sesgo de impacto -> es la tendencia a sobrestimar un evento o lugar extraordinario, que pasara de lo excepcional a lo comun ',
            ]),
        new Item('prejuicios',
            [
                '- El primer paso es aceptar que todos tenemos segos cognitivos, estemos concientes o no de ellos ',
                '- Para combatirlos se pueden usar diferentes estrategias como: ',
                '',
                ' - Evitar el "punto ciego" -> todos estamos sesgados, el primer paso para evitarlo es aceptarlo ',
                ' - Para evitar la "subjetividad" -> es ideal tener un equipo diverso y participativo ',
                ' - No usar el "muro tecnico" -> para eludir o evitar cuestionamientos incomodos ',
                ' - Planificar e investigar para salir de nuestra zona de comfort, nos ayuda a encontrar más soluciones ',
                ' - Realiza pruebas, no siempre todo funciona o funciona como deberia ',
                ' - Mantener afinidad con una persona no significa que debemos de dejar de prestar atención a los demás ',
                ' - No aceptar la innovación puede ser tan malo como siempre estar al filo de la vanguardia ',
            ]),
        new Item('multitarea',
            [
                'Es la capacidad de manejar y realizar multiples tareas al mismo tiempo, este concepto es muy buscado actualmente, aunque tiene pros y contras ',
                '',
                '- Ventajas',
                ' - Si se logra hacerlo de manera eficiente, se pueden ahorrar recursos y aumentar la productividad ',
                ' - Mejor reacción a las tareas complejas y un mejor manejo de las responsabilidades ',
                '',
                '- Contras ',
                ' - Menor eficacia, al tener un mayor ruido de las acciones por hacer ',
                ' - Decaimiento de la memoria y posibles problemas de estres, además de una peor salud fisica y mental ',
                ' - Mayor riesgo de errores al tener que estar atento a más cosas ',
                ' - Menor calidad del trabajo, además de posibilidades de sufrir de deficit de atención ',
            ]),
        new Item('maxwellCurve',
            [
                '- Más horas de trabajo, implican menos productividad',
                '- Este estudio fue realizado principalmente para Scrum, hasta la demostración de que en ciertos casos es más optimo el modelo de cascada ',
                '- Jornadas más cortas no necesariamente significan menos productividad, estas pueden ayudar a: ',
                ' - atraer nuevos talentos',
                ' - mejorar el equilibrio entre vida personal y laboral, teniendo trabajadores más felices ',
                ' - reduce los sentimientos de insatisfacción ',
            ]),
        new Item('dunningKruger',
            [
                '- Es la tendencia natural de personas menos habilidosas a sobreestimar sus conocimientos y habilidades ',
                '- Tambien se da de la manera contraria, en la cual personas calificadas tienden a subestimar sus capacidades ',
                '- Una clara representación de este sesgo cognitivo se da con la siguente frase de: <strong>Charles Darwin</strong> ',
                ' - <em>"La ignorancia genera confianza más frecuentemente que el conocimiento"</em>',
                '',
                '- Ejemplos: ',
                ' - Cantantes que se creen muy talentosos sin tener tecnica vocal ',
                ' - Pacientes que se automedican ya que creen saber más que sus doctores ',
                ' - Personas que se entrenan y aumentan sus niveles de competencias, dandose cuenta de sus falencias ',
            ]),
        new Item('reforzamientoSkinner',
            [
                '- Mediante la manipulación experimental y la observación conductual se esbozo una de las primeras terorias en este ambito ',
                '- Para modificar la conducta humanan o animal se puede utilizar los llamados reforzamientos, ya sean positivos o negativos',
                '- Esto con el fin de eliminar, potenciar o inhibir conductas especificas ',
                '- Los estimulos desencadenan respuestas especificas en las personas, por lo que mediante alguno refuerzo, ',
                ' - se puede ejercer una influencia en dicha reacción o conducta para potenciarse o inhibirse ',
                '',
                '- Algunos de estos tipos de refuersos pueden ser: ',
                ' - Primarios o intrinsecos -> conductas que generan satisfacción inmediata, comer por ejemplo ',
                ' - Secundarios -> son aprendizajes externos y pueden ser materiales como el dinero o sociales como el recnocimiento ',
                ' - Eliminacion de consecuencias -> son considerados negativos y van de la mano con eliminar actividades desagradables para las personas ',
                '',
                '- Los refuerzos pueden ser continuos o intermitentes dependiendo de la forma mas efectiva para el caso dado ',
            ]),
        new Item('pastaTheory',
            [
                '- Escribir codigo reutilizable y mantenible es lo ideal, pero siempre es más facil decirlo que hacerlo ',
                '- Un desarrollo exitoso no solo requiere que el codigo funcione, si no que sea mantenible ',
                '- Para que esto sea posible, se deben evitar antipatrones y tener ciertas estrategias y hasta metodologias propias ',
                '',
                '-<strong> Codigo espagueti:</strong> Data de los 70 para hacer referencia a un codigo descuidado y altamente acoplado ',
                '-<strong> Codigo lasaña:</strong>    No solo se tiene problemas al ser desprolijos, tambien cuando hay un sobrediseño, que aporta complejidad innecesaria ',
                '-<strong> Codigo raviolis:</strong>  Demasiadas piezas pequeñas e individuales, haciendo crecer la pila de llamados sin control ',
                '-<strong> Codigo pizza:</strong>     Es una arquitectura plana, donde hay divisiones a nivel codigo, pero no se tienen una estructura logica definida ',
                '-<strong> Codigo stromboli:</strong> Es un codigo demasiado acoplado, donde cualquier cambio, por inocuo que sea, puede desembocar un caos en otro sitio ',
                '',
                '- Cualquiera sea la metafora, hay que tener en cuenta que incluso las mejores practicas no son eternas, estas pueden cambiar ',
                ' - por lo que nuestro codigo tambien debe cambiar con ellas, y nunca dejar de lado la mantenibilidad como una meta constante '
            ]),
        new Item('thingsThatAreNotTaught',
            [
                '- Aunque son puntos subjetivos provenientes del Autor, estos ejemplifican gran parte de las vivencias que se pueden tener en la ingenieria de software ',
                '',
                '- Rara vez se escriben codigos pequeños o desde cero, ya que hay pocos problemas que puedan ser solucionados de manera facil y rapida ',
                '- No siempre se tiene un lienzo en blanco, en el cual se pueda crear todo una solución, casi siempre habra que mantener o modificar algo que ya existe ',
                '- Es más importante saber el porque de la codificación, que el como, ya que se sabe que caracteristicas debe tener la solución a grandes rasgos ',
                '- La documentación es una gran pieza que no tiene el enfasis suficiente, no solo es escribir codigo funcional, tambies es hacerlos de manera clara ',
                '- Más importante que la solución, es el valor que esta agrega al negocio, no se gana nada con un buen codigo que no resuelve ningun problema ',
                '- Buenas practicas, Diseño, Principios, y demas cosas se realizan para tener productos escalables y que fallen lo menos posible ',
                '- El codigo no es estatico, significa que debera ser mantenido por otros y mantendremos al de otros antes, entre más se facilite esto mejor para todos ',
                '- Trabajar con personas tambien puede significar que puede haber incompetencia, sortearla o afrontarla se vuelve necesario con el tiempo ',
                '- <em>La unica constante es el cambio</em> "Heraclito" todo puede cambiar, ya sea porque no haya requerimientos correctos o se deba ahondar para obtenerlos ',
                '- Todo tiene errores, Asi es más facil de entender que por más usado o testeado que algo sea, jamas estara libre de errores ',
                '- No es un trabajo perfecto, Tendras que hacer cosas que no te agraden, los plazos pueden ser sofocantes, las tecnologias se vuelven obsoletas, etc...',
                '- Se pediran presupuestos, aun cuando no se puedan dar, y aun con las diversas tecnicas que hay, solo la experiencia lo acerca más a la realidad ',
                '- No todo es codificar, tambien hay tiempo malgastado en reuniones, pero no todas las reuniones son inutiles, ',
                ' - la información debe compartirse con los demas involucrados para que las cosas sigan funcionando de manera eficiente ',
            ])
    ];

export const LEYES =
    [
        new Item('balas',
            [
                '- El software puede tener dificultades inherentes al software y accidentales ',
                '- Los errores son gajes del oficio, pero tienen diferentes grados de repercusión en el software ',
                '- Jamas sera lo mismo un error semantico a uno de diseño, el primero podria pasar por trivial, pero el segundo NO ',
                '',
                '<strong>- Complejidad:</strong> La complejidad es directamente proporcional al tamaño ',
                '<strong>- Complejidad:</strong> Esta es una propiedad intrinseca del software, que no se puede desligar de su diseño o construcción ',
                '<strong>- Complejidad:</strong> De esta complejidad nacen las dificultades para crecer sin afectar al resto del sistema ',
                '<strong>- Complejidad:</strong> Sin contar con los problemas tecnicos ó las dificultades de aprendizaje ',
                '',
                '<strong>- Conformidad:</strong> Tener que ajustarse a otros diseños, necesariamente implica algo más que una refactorización ',
                '<strong>- Conformidad:</strong> No hay una sola manera para trabajar, por lo que hay acostumbrarse a las diferentes formas de cada persona ',
                '',
                '<strong>- Variabilidad:</strong> El software esta sometido a la necesiadad de cambio constante, pero esto no necesariamente significa un "cambio" ',
                '<strong>- Variabilidad:</strong> Se podria sacar un nuevo modelo ó una nueva versión, más no obligatoriamente cambiar lo que ya funciona ',
                '',
                '<strong>- Invisibilidad:</strong> El software es un recurso intangible, solo entendible por la capacidad de abstracción y de visualización de los humanos ',
                '',
                '- Para revisar los demás temas puedes ir a la fuente original ',
            ]),
        new Item('lehman',
            [
                '<strong>- El contenido es eterno, pero no la materia que lo contiene</strong>',
                '<strong>- Ley del cambio continuo:</strong> En la realidad las cosas deben seguir cambiando constantemente, de lo contrario eventualmente seran obsoletas ',
                '<strong>- Ley de complejida creciente:</strong> Mientras algo siga creciendo, su complejidad tambien lo hara, a no ser que se tomen medidas para reducirla ',
                '<strong>- Ley de evolución:</strong> Mientras algo crezca, tambien lo haran sus errores, casi siempre de manera promedio ',
                '<strong>- Ley de estabilidad organizacional:</strong> La velocidad de desarrollo sera casi siempre la misma, por más recursos que se inyecten ',
                '<strong>- Ley de la conservación:</strong> Un crecimiento desmesurado hara que el conociemiento basico sea insuficiente para seguir creciendo ',
                '<strong>- Ley de crecimiento continuo:</strong> Las funcionalidades deben seguir mejorando para mantener a los clientes satisfechos ',
                '<strong>- Ley de retroalimentación:</strong> La comunicación con el cliente y con las personas conocedoras es fundamental ',
            ]),
        new Item('conway',
            [
                '- El impacto de la comunicación en tu empresa ',
                '- “Cualquier organización que diseñe un sistema producirá un diseño que copia la estructura de comunicación de dicha organización.”',
                '- El software es una habilidad intelectual humana, por lo que la comunicación es fundamental para la integración ',
                '- La manera de trabajar de tu empresa se vera reflejada en tu software, es el significado principal de esta frase ',
                ' - Equipos pequeños, crearan soluciones pequeñas, altamente modulares ',
                ' - Personas egoistas, generan problemas de integración de componentes y falencias al compartir su conocmiento ',
                ' - Empresas sin organización, generaran codigo complejo, pero funcional de manera rapida, que se convertira en una bola de nieve ',
                ' - Empresas orgullosas, que comparten su codigo y sus buenas practicas ',
                ' - Estos y más ejemplos hay, como empresas y personas halla ',
            ]),
        new Item('murphy',
            [
                '<strong>- Si algo malo puede pasar, pasara</strong>',
                '- Se inspira en el concepto fisico de la entropia, el cual dicta que todo sistema fluye del orden al desorden ',
                '- Puede ser util para ayudar a prevenir el desastre, si se usa para tomar precauciones ',
                '- No hay ninguna demostración matematica que la niegue ó la acepta, solo es un conocimiento nacido de lo cotidiano ',
            ]),
        new Item('pendulo',
            [
                '- Permite explicar comportamiento humanos cuando son llevados al extremo; Se puede producir por diferentes razones: ',
                ' <strong>- Idealización del opuesto:</strong> Cuando estamos constreñidos en algo, tendemos a idealizar el contrario ',
                ' <strong>- Necesidad de reafirmación:</strong> Buscando un gran impacto, generalmente elegimos los polos opuestos al ser vistosos ',
                ' <strong>- Comodidad del extremo:</strong> Son comodos ya que no tienen contenciones ni filtros, lo opuesto de una posicion intermedia ',
                '',
                '- Los extremos no necesariamente son malos, ya que permiten tener nuevas experiencias, y conocer nuevos puntos de vista ',
                '- Esto se debe hacer de manera racional, y bajo nuestra propia elección, para que podamos reflexionar en vez de seguir ciegamente ',
            ]),
        new Item('hyrum',
            [
                '- Cualquier cosa que ofrezcas será usada por alguien',
                '- El mantenimiento de las aplicaciones siempre va a ser una constante, por lo que reducir características inútiles es una opción de reducirlo ',
                '- El problema surge cuando algún cliente la estaba usando con otro fin, o simplemente le era útil para su nicho específico de mercado ',
                '- Hacer esto puede conllevar problemas con los clientes ya que estos cambios abruptos hacen sentir al cliente que no están siendo considerados ',
                '- También hay que tener en cuenta que estos cambios a veces son fundamentales y se deben hacer incomoden o no a tus usuarios ',
            ]),
        new Item('leblanc',
            [
                '- Esta ley nace debido a la tendencia natural de las personas de procastinar ',
                '- Haciendo referencia a esas cosas que se dice que se van a arreglar despues, pero... , nunca se terminan arreglando ',
                '- Despues == Nunca ',
                '- Estos pendientes se pueden acumular poco a poco y convertirse en una bola de nieve, ',
                ' - por lo que ideal es hacerlos en el acto, o como tareas a resolver en el corto plazo ',
            ]),
        new Item('leyesInternet',
            [
                '- Las autoridades aun no encuentran una forma universal de controlar internet, porque este ha creado sus propias "leyes" para "autoregularse" ',
                '- Aunque se les llama leyes, son observaciones que se repiten a lo largo del tiempo y son poco contrariadas ',
                '- Un ejemplo de esto es la Ley de murphy que que tiene su propio ajuste para internet (ley de Skitt)',
                '',
                '<strong>- Ley de Skitt:</strong> "Cualquier publicación que corrija un error en otra publicación contendrá al menos un error" ',
                '<strong>- Ley de Godwin:</strong> "A medida que una discusión online se alarga, la probabilidad de que aparezca una comparación a Hitler o los nazis tiende a 1" ',
                '<strong>- Ley de Poe:</strong> "Sin un emoticón u otra muestra de humor, es absolutamente imposible parodiar una idea sin que alguien la confunda con una opinión genuina" ',
                '<strong>- Ley de Cunningham:</strong> "La mejor manera de conseguir una respuesta correcta en la red, no es haciendo la pregunta sino publicando una respuesta equivocada" ',
                '<strong>- Ley de Exclamación:</strong> "Cuantos más signos de exclamación se usen, más probable es que sea una mentira. También aplica para el uso excesivo de mayúsculas" ',
                '<strong>- Ley de Danth:</strong> "Si una persona tiene que insistir en la red que ha ganado una discusión, es probable que esa persona haya perdido el debate" ',
                '<strong>- Regla 34:</strong> "Si existe, hay pornografía" ',
                '<strong>- Regla 35:</strong> "Si no existe tal pornografía, se hará"',
                '<strong>- Ley de Pommer:</strong> "La opinión de una persona puede cambiar en base a lo que lee en internet. La naturaleza del cambio será: de no tener, a tenerla equivocada" ',
                '<strong>- Ley de Haig:</strong> "La fealdad de un diseño de una página en internet es directamente proporcional a la demencia de su contenido y de su creador" ',
                '<strong>- Efecto Streisand:</strong> "Todo aquel que intente censurar u ocultar información en la red, acaba consiguiendo que se divulgue aún más" ',
            ]),
        new Item('pareto',
            [
                '- Tambien conocida como la regla de <strong>80/20</strong> que asegura que el 80% de las causas proviene del 20% del esfuerzo ',
                '- Termino acuñado en Italia en 1896 por el filosofo e ingeniero <em>Vilfredo Federico Pareto</em> ',
                '- Se utilizo conocimiento empirico para su comprobación, por medio de la propiedad de la tierra de esa epoca, ',
                ' - con la conclusión de que 20% de los propietarios poseia el 80%, mientras que el 80% restante solo poseia el 20% ',
                '- Con el paso del tiempo, esta relación se trasladado a diferentes ambitos de la sociedad, de manera equivalente ',
                '- Esta relación esconde un mensaje bastante importante, el cual es que debemos centrarnos en lo que realmente importa ',
                '- Asi no malgastaremos esfuerzos ni recursos en acciones que aportarian pocos o nulos beneficios ',
                '',
                '<strong> Ventajas de su aplicación:</strong> ',
                ' - Aumentar el ratio del trabajo eficiente, al identificar lo que es realmente importante ',
                ' - Mejor desarrollo de las actividades al gestionar mejor el tiempo ',
                ' - Reducción del efecto Burnout y del estres al simplificar y reducir las tareas a realizar ',
                ' - Mejora la toma de decisiones, al tener datos de lo que es realmente importante ',
                ' - Optimización de recursos, ya que se gastan donde realmente pueden generar un impacto '
            ]),
        new Item('brooksLaw',
            [
                '- <strong>Fred Brooks</strong>, Experto en computación e ingeniero de software desarrollador del sistema operativo OS/360 de IBM, además del ',
                ' - mitico libro del <em>hombre-mes</em>, uno de los libros más citados y utiles en el ejercicio de la ingenieria de software ',
                '- Una de las grandes enseñanzas que abordaba el libro es que la respuesta tipica ante un retraso es agregar mano de obra, ',
                ' - en la ingenieria de Software es practicamente como "apagar el fuego con gasolina" ',
                '- <em>Añadir recursos humanos a un proyecto retrasado hace que se retrase aún más</em> <strong>Tambien</strong> <em>Nueve mujeres no hacen un bebe en un mes</em>',
                '- Existe un lapso de tiempo en el que los programadores tienen que ponerse al dia, aprender nuevas tecnologias y/o metodologias, entre otras cosas ',
                '- Mientras el trabajo realizado <strong>aumentaba linealmente</strong>, la complejidad y los costos de comunicación <strong>crecian exponencialmente</strong>, si todo salia bien ',
                '- Además de que siempre existe la posibilidad de que el desconocimiento del proyecto provocase que el nuevo fichaje cometiera errores graves, ',
                ' - generando <strong>productividad negativa</strong>, al tener que corregir los errores ó realizar de nuevo lo que se trataba de hacer ',
                '- Sin embargo esta ley tiene algunas excepciones, como lo es Linux y el software libre, ',
                ' - en el cual miles de programadores estan dispuestos a revisar y corregir, aca se tienen una alta convicción para superar el desconocimiento ',
            ]),
        new Item('mooreAndWirth',
            [
                '- El software y el hardware van de la mano, no solo existen PC lentos, tambien existen software lentos ',
                '',
                '- El Software tiene la tendencia de ocupar todo el espacio disponible',
                '- El Software se ralentiza a mayor velocidad de lo que se acelera el hardware ',
                '',
                '- Esta afirmaciones, además de otras, encapsulan la complejidad y el costo de desarrollar software, se conocen como la <strong>La ley de Wirth </strong>',
                '- Acotada a Niklaus Wirth, padre de lenjuajes como Pascal o Modula, y que publico en 1995 un articulo con estas y otras observaciones ',
                '',
                '- <strong>Ley de Moore:</strong> Observo en 1965 que el numero de transistores en un circuito integrado, se dobla aproximadamente cada 24 meses ',
                '- No solo es lograr un Hardware más potente, tampoco se debe descuidar el Software, solamente porque sera compensado por mejores componentes '
            ])
    ];

export const ESTATEGIAS_DESARROLLO =
    [
        new Item('ddd',
            [
                ' -El lenguaje debe ser obicuo (entedible por cualquiera)',
                ' -El desarrollo debe ser lo más abstracto posible para ser independiente de las implementaciones ',
                ' -Las capas se vuelven parte diciente del codigo, indicando su utilidad con sus nombres ',
            ]),
        new Item('bdd',
            [
                ' - Es una evolución de TDD, que es más que solo testing ',
                ' - Aca las pruebas se concentran en tener un lenguaje obicuo, por lo que todas las partes se pueden involucrar rapidamente ',
                ' - Para implementarse las Historias de Usuario son fundamentales ',
                ' - Comprender el esquema Given-When-Then ',
                ' - <strong>Dado</strong> escenario y precondiciones <strong>Cuando</strong> acciones a ejecutar <strong>Entonces</strong> Resultado a validar',
                ' - Mejora la comunicación entre todas las partes, ya que todas se comunican más entre si ',
            ]),
        new Item('tdd',
            [
                ' - Primero se escriben las pruebas, y despues se crea el codigo para que estas funcionen ',
                ' - Puede incrementar la carga de trabajo, pero se obtiene un codigo más robusto y mantenible ',
                ' - Basicamente es un ciclo constante de creación de pruebas, refactorización y crecimiento ',
                ' - El <strong>Que</strong>, es más importante que el <strong>Como</strong> ',
                ' - La productividad se puede ver mermada si no se conoce esta estrategia ',
                ' - El incluir Bases de Datos o Interfaces graficas suele complicar el desarrollo ',
            ]),
        new Item('atdd',
            [
                '  - Primero se escriben las pruebas, despues se crean los casos de aceptación Y de ultimas se crea el codigo para que estos funcionen ',
                '  - Las pruebas se automatizan, por lo que a la larga el desarrollo se volvera más agil ',
                '  - Definir las Historias de Usuario y sus casos de aceptación es fundamental para evitar perder tiempo ',
            ]),
        new Item('analisis',
            [
                '- Son enfoques para el analisis y toma de decisiones, originarios en la informatica de los años 70',
                '',
                '<strong>Bottom-Up:</strong> Nace de lo particular para concluir en lo general ',
                '',
                '<strong>Top-Down:</strong> Nace de lo general hasta concluir en lo particular ',
            ]),
        new Item('tld',
            [
                '- Estas se dan una vez se ha terminado el codigo y las posibles refactorizaciones que este sufra ',
                ' -Este tipo de estrategia se puede usar de 2 maneras distintas: ',
                '',
                ' - Funciones completas: las pruebas cubriran todas las funciones y sus posibles escenarios ',
                ' - Proto funciones: Las pruebas cubriran los escenarios minimos para que la función cumpla con sus requerimientos ',
                '',
                '- TLD vs TDD',
                ' - Este enfoque es ideal si el tiempo de desarrollo es escaso ',
                ' - Su curva de aprendizaje es menor en comparación con TDD ',
                ' - El mantenimiento se reducen al usar TDD, pero la productividad aumenta con TLD (gastos y mano de obra) ',
                ' - Hay un mayor numero de pruebas en TDD, sin embargo el codigo con TLD es más entendible ',
                ' - Los cambios suelen tener menos impactos negativos con TDD, a cambio de más complejidad inherente al codigo ',
            ]),
        new Item('bduf',
            [
                '- Es una implementación de la metodologia en cascada, donde las etapas son consecuentes y largas ',
                '- Este enfoque puede ser usado para paginas web, aolicaciones o softwares complejos, donde es necesario ',
                ' - que todo el diseño este completo y haya sido perfeccionado por adelantado de cualquier implementación (programación)',
                '- Esto era costoso y demorado, hasta que llegaron los enfoques agiles para mejorar estas y otras falencias ',
                '',
                '- Esta estrategia funciona muy bien bajo ciertos suspuestos: ',
                ' - Se conocen los objetivos y requisitos por adelantadao, además de que es poco probable de que cambien ',
                ' - Las revisiones de diseños son dificiles y costosas, por lo que se refinan al inicio para que sufran minimos cambios ',
                ' - Una solución de diseño debe ser juzgada si es buenan o efectiva, antes de ser funcional ',
                ' - Se pueden identificar desafios de desarrollo antes de llegar al codigo ',
                ' - No se puede iniciar nada, sin diseñar ni planificar antes',
                '',
                '- Puntos fuertes: ',
                ' - Si se tiene un objetivo bien definido es una manera muy eficiente de alcanzarlo ',
                ' - Es más facil de hacer estimaciones certeras de tiempo y costos ',
                '',
                '- Debilidades: ',
                ' - No se adapta con facilidad a los cambios, por lo que es posible que se deban repetir etapas ',
                ' - No se tiene un producto terminado para probar hasta etapas tardias y finales del proceso ',
                '',
                '<strong>Diseños agiles y emergentes </strong>',
                '- Estas metodologias dividen los proyectos en etapas más pequeñas, las cuales iteran constantemente ',
                ' - esto con el fin de obtener un producto funcional, mucho más rapido ',
                '',
                '- Supuestos de los diseños emergentes: ',
                ' - No se puede saber la solución ideal desde el priciopio, por lo que se empieza a construir con lo que se conozca ',
                ' - El aprendizaje continuo es esencial para mejorar cada vez que sea posible ',
                ' - La documentación y el sobrediseño se evitan, ya que suelen ser desperdicio frente al cambio constante ',
                '',
                '- Puntos fuertes: ',
                ' - El diseño evoluciona y se aprovechan los nuevos aprendizajes ',
                ' - Es una metodologia colaborativa y no un proceso solitario ',
                ' - Diseño y desarrollo suelen ser paralelos, permitiendo resolver problemas antes de que sean incendios ',
                ' - Se hacen implementaciones en base a datos con poca incertidumbre ',
                '',
                '- Debilidades: ',
                ' - Se centra en la fabricación de funciones, tanto que aveces no dan valor alguno ',
                ' - Los diseños suelen ser cambiantes por lo que es dificil terminar con un diseño fijo ',
                ' - Los ciclos son volatiles por lo que pueden quedar tareas pendientes, que no son prioridad para siguientes ciclos ',
                '',
                '<strong>Just Enough Design Up Front (JEDUF) </strong>',
                '- Es un punto medio, que reconoce que se requiere el mejor diseño posible para empezar, al mismo tiempo ',
                ' - que es vital responder frente al cambio y darle valor al usuario ',
                '',
                '- Aun asi BDUF y Agile son 2 extremos de un solo espectro, donde es importante saber adaptar las estrategias a nuestra necesidades ',
                ' - para evitarnos vernos truncados al seguirlas a raja tabla, con caracteristicas que nos son completamente inutiles ',
                '- Tanto BDUF como Agile pueden implementar aspectos positivos del otro si dejar de ser lo que son ',
            ])
    ];

export const GIT =
    [
        new Item('introduccion',
            [
                '- Todo archivo puede tener un seguimiento, y todo archivo seguido tiene un identificador unico que cambia con cualquier cambio del archivo ',
                '- Existen 3 estados principales, cambios confirmados, archivos modificados y cambios en espera ',
                '- Se puede trabajar con repositorios localmente ó distribuidos en internet ',
                '- Los archivos tambien se pueden ignorar, configurando el .gitIgnore, especificando archivos y carpetas a ignorar ',
                '- Cualquier cambio puede ser deshecho, incluso despues de que haya sido confirmado ',
            ]),
        new Item('repositorios',
            [
                '- Git trabaja principalmente de manera local, pero es necesario sincronizar los cambios hechos con el repositorio central ',
                '- Los cambios pueden subirse mediante un push o bajarse del repositorio mediante un pull o un fetch ',
                '- Para trabajar con remotos es necesario contar con un usuario y contraseña configurados para la trazabilidad de los cambios ',
            ]),
        new Item('ramas',
            [
                '- Son versiones especificas de los cambios que se hayan realizado ',
                '- La rama principal es Main (anteriormente master) es el origen de donde se desprenden todas las demás ',
                '- Su manejo es bastante simplificado por lo que cambiar entre si, fusionar, ramificar, eliminar y rebasar se pueden hacer mediante simples comandos ',
                '- Usar diferentes ramas, para diferentes cambios garantiza que por lo menos siempre habra un punto al que retroceder si algo llegara a dañarse ',
                '- Estas tambien traen el problema de que puedan surgir conflictos, que son segmentos o archivos con varias modificaciones por diferentes personas ',
                '- Solucionar conflictos y organizar las ramas suele ser delicado, por lo que debe realizarse con plena conciencia de lo que se esta haciendo ',
            ]),
        new Item('protocolos',
            [
                '- La comunicación entre el repositorio remoto y local se puede hacer mediante diferentes maneras ',
                '<strong> - Local:</strong> Se usa el mismo metodo de carpetas y archivos que tenga el host por defecto ',
                '<strong> - HTTP:</strong>  Es una manera simple de mantener conectados el repo local y remoto con unas pocas configuraciones previas ',
                '<strong> - SSH:</strong>   Requiere de generar una clave encriptada que debe esta almacenada en ambos repositorios, más complejo pero seguro ',
                '<strong> - Git:</strong>   No requiere ningun tipo de autenticación y es el más rapido de todos, haciendolo vulnerable a modificaciones de cualquier ente externo ',
            ]),
        new Item('versiones',
            [
                '- Las etiquetas se añaden a un commit en especifico, dando a entender que esa ha de ser una nueva versión ó hay un cambio bastante importante ',
                '- Tambien se puede crear un archivo comprimido con todo el codigo de la nueva versión listo para descargar y ejecutar ',
            ]),
        new Item('forks',
            [
                '<strong>- Fork:</strong> Es una clonación de un proyecto desde un repositorio a otro en un momento y rama en especifico, con el usuario como nuevo dueño ',
                '<strong>- Pull request:</strong> Es la solicitud de una persona que haya modificaciones de manera externa al repositorio pero que quiera integrarlas al original ',
                '<strong>- Markdown:</strong> Son archivos utiles a la hora de añadir información extra del proyecto, de manera más interactiva que un simple archivo de texto ',
            ]),
        new Item('stash',
            [
                '<strong>- Stash:</strong> El stash nos permite intercambiar entre ramas, sin necesidad de hacer commits pero guardando los cambios hechos ',
                '<strong>- Pop:</strong> Permite retomar los cambios guardados y continuar en el punto que se dejo ',
                '<strong>- Reset:</strong> Borra todos lo cambios hechos y devuelve la rama al ultimo commit hecho ',
            ]),
        new Item('merge',
            [
                '- Une los cambios de una rama a otra especifica, ocasionalmente surgen conflictos, que dependeran de la divergencia de los cambios realizados ',
                '- Las ramas se pueden desfusionar si hay errores, ó abortarse si se vuelve muy problematica, mediante un revert o un abort segun el caso ',
                '<strong>- Rerere:</strong> Esta opción oculta permite dotar a memoria a Git para que esta resuelva conflictos de manera automatica ',
            ]),
        new Item('atributos',
            [
                ' - Evitar la comparación de archivos binarios que git no pueda detectar por si mismo ',
                ' - Configurar maneras diferentes de ver los cambios de los archivos dependiendo de las extensiones (imagenes, textos, etc... )',
                ' - Ignorar archivos a la hora de comprimir el proyecto ',
                ' - Cambiar la forma de fusión de acuerdo a ciertos tipos de archivos ',
            ]),
        new Item('migracion',
            [
                '- Manejar los espacios en blanco que suelen ser un problema comun ',
                '- Git permite la migración desde diferentes sistemas de versionamiento anteriores ó que han caido en el deshuso como: ',
                '- Mercurial, Subversion, Perforce, TFS, ',
                '- Tambien es posible eliminar archivos totalmente del arbol de cambios, aun asi no es recomendable ya que el historial se podria ver afectado ',
                '- Configurar variables de ambiente como cualquier otro programa ',
                '- Algunos entornos de desarrollo como Eclipse, Visual estudio y Visual Estudio code, ya traen integrado git por defecto ',
            ]),
        new Item('flow',
            [
                '- Es una forma de trabajar basada en el uso de las ramas y el sentido comun ',
                '- Consta de 2 ramas principales y varias auxiliares ',
                '',
                '<strong> - Master:</strong>  Cualquier codigo que este en esta rama debe estar listo para producción ',
                '<strong> - Develop:</strong> Es donde se trabaja y de donde se pueden sacar ramificaciones para proximas versiones ',
                '<strong> - Feature:</strong> Se originan de develop y son nuevas funcionalidades a integrar ',
                '<strong> - Release:</strong> Aca se corrigen bugs y se hacen los ultimos ajustes, antes de Master ',
                '<strong> - Hotfix:</strong>  Son usadas para corregir problemas presentes en producción y que aparecen de improviso ',
                '',
                '- Todas las ramas Hotfix se unen con master y develop ',
                '- Cualquier rama feature se une a develop ',
            ]),
        new Item('practicas',
            [
                '- Los commits son sumamente importantes en git, por lo que realizarlos de manera correcta puede aportar metadata al proyecto ',
                '',
                '- Especificar el tipo del commit, que puede ser de los siguientes tipos: ',
                '<strong> - feat:</strong> Nueva caracteristica ',
                '<strong> - fix:</strong> Solución de problemas ',
                '<strong> - docs:</strong> Cambios en la documentación ',
                '<strong> - style:</strong> Se aplica formato ó estructura al codigo, sin cambios en este ',
                '<strong> - refactor:</strong> Refactorización de codigo ',
                '<strong> - test:</strong> Se añaden cambios en las pruebas, como refactor, nuevas pruebas ',
                '<strong> - chore:</strong> Actualización del build, cambios en los paquetes, sin cambios en el codigo ',
                '',
                '- Tener en cuenta las 3 partes del commit: ',
                '<strong> - subject:</strong> No más de 50 caracteres y ser concisos, tambien se recomienda hacerlo en ingles ',
                '<strong> - body:</strong> No más de 72 caracteres, es una explicación más detallada del porque del commit ',
                '<strong> - footer:</strong> Se usa para el seguimiento de los IDs cuando hay incidencias ',
            ]),
        new Item('branching-strategies',
            [
                '- En el desarrollo moderno, la velocidad y la agilidad son cruciales, sin embargo manejar equipos que trabajan de manera simultanea ',
                ' - creando y uniendo ramas de manera constantes, esto se puede complicar demasiado rapido ',
                '- Una estrategia de ramificación es una manera en que los equipos puedan desarrollar nuevas funciones, sin afectar a otros ',
                '- Evitando o al menos reduciendo los conflictos que se presentan al trabajar en una base de codigo compartida ',
                '',
                '<strong>- Pros:</strong>',
                ' - Mejora la productividad y la coordinación entre los desarrolladores ',
                ' - Permite el desarrollo en paralelo y la correción de errores, sin afectar el flujo general de trabajo ',
                ' - Mejora la planificación de los lanzamientos ',
                ' - Permite visualizar un camino en el cual mantenerse ',
                '',
                '- Las ramas no son exclusivas de GIT, pero este es uno de los software de control de versiones que saca más provecho de ellas ',
                '- Una de las principales ventajas, es que git es liviano y solo toma instantaneas de lo que cambio, en vez de sacar copias y listas de cambios ',
                '',
                '<strong>- Gitflow:</strong>',
                ' - Este modelo permite el desarrollo en paralelo mientras protege la rama de principal producción ',
                '  - pero debido a que existen tipos de ramas unirlas y mantener un consolidado de las versiones se puede complicar ',
                ' - Este no es un enfoque eficiente para aquellos que deseen implementar CD/CI pero si, para multiples versiones del codigo de producción ',
                '',
                '<strong>- Github Flow:</strong>',
                ' - Una version más ligera de gitflow, para equipos pequeños que no necesiten de multiples versiones ',
                ' - Aca se trabaja sobre la rama principal de manera continua, de manera que este pueda ser implementado de manera constante ',
                ' - Debido a la continuidad de los cambios, este enfoque es suceptible a errores y a un ambiente productivo más inestable ',
                '',
                '<strong>- Gitlab Flow:</strong>',
                ' - Una versión más simple de gitflow, donde se mantienen distintos ambientes, generalmente un ambiente de prueba previo, separado de producción ',
                ' - Esto permite tener diferentes versiones y solamente desplegar las más estables en producción, y asi mantener mas segura la rama principal ',
                ' - Esta estrategia es ideal para controlar los lanzamientos, y las etapas que se deben pasar para que sean exitosos ',
                '',
                '<strong>- Trunk-based:</strong>',
                ' - Es una estrategia que no requiere de bifurcaciones, si no que se sacan ramas muy pequeñas y de poca duración ',
                ' - Todas estas pequeñas ramas deben ser integradas al menos una vez al dia a la rama principal ',
                ' - Con la condición de que todo codigo integrado es estable, fue probado y debe estar listo para ser lanzado en cualquier momento ',
                ' - Esto permite un ambiente de CD/CI bastante frecuente, combinado con una estrategia de <strong>feature flags</strong> ',
                ' - Esta estrategia es ideal para evitar problemas en las fusiones, pero para equipos pequeños e inexpertos puede ser compleja de usar ',
                '',
                '- A continuación un pequeño resumen, para definir que estrategia y en que contexto puede ser usada ',
                '',
                '<strong> Tipo de producto          Tamaño del             Madurez de los                  Modelo de ramas </strong>',
                '<strong>  y/o lanzamiento            equipo                colaboradores                    Aplicable     </strong>',
                '',
                '     Todos                   Pequeño                   Alto                         Trunk-based',
                '',
                ' Admite CD/CI como            Medio                  Moderado                  Github Flow y Trunk-based',
                '  productos SaaS',
                '',
                ' Lanzamientos periodicos      Medio                  Moderado                    Gitflow y Gitlab flow',
                '  y tiempos entre estos                                                           con release branch',
                '',
                ' Productos con calidad        Medio                  Moderado                        Gitlab flow',
                '  y admiten CD/CI',
                '',
                ' Productos con calidad       Grande                  Moderado                          Gitflow',
                '  y ciclos largos de ',
                '  mantenimiento ',
            ])
    ];

export const HISTORIAS_USUARIO =
    [
        new Item('historias',
            [
                '- Es uno de los elementos usados en las metodolgias agiles ',
                '- Su nivel de exhaustividad es menor a cambio de proporcionar más valor al negocio ',
                '- Se concentran en especificar las funciones requeridas y el porque de estas ',
            ]),
        new Item('objetivos',
            [
                '- Deben esclarecer el porque, el actor de la acción, un motivo y como validarla ',
                '- Se basan en una negociación entre las partes, lo que las hace mutables a traves del tiempo ',
                '- El foco de toda función se basa en el usuario final, más que en los clientes o los desarrolladores ',
                '- Se conforman de varios aspectos, ademas de seguir el modelo INVEST ',
            ]),
        new Item('partes',
            [
                '<strong>- Titulo</strong>',
                ' - Debe ser una forma concisa y clara de lo que se busca ',
                ' - Tambien puede servir como identificador para cada HU ',
                ' - <strong>COMO</strong> Rol <strong>QUIERO</strong> Objetivo <strong>PARA</strong> motivación ',
                '',
                '<strong>- Descripción</strong>',
                ' - Puede contener una descripción más detallada de lo que se espera, sin caer en un exceso de estos ',
                ' - Da el contexto donde se desarrollara la HU, mejorando la compresión del titulo ',
                ' - Pueden incluir imagenes, diseños, prototipos, etc; además de las limitaciones tecnicas o de negocio',
                '',
                '<strong>- Criterios de aceptación</strong>',
                ' - Son los elementos que se deben cumplir para dar a la HU como terminada ',
                ' - No hay punto medio, esta o no esta completa ',
                ' - Se debe evitar la ambiguedad lo más que se pueda, asi se evitan errores de interpretación ',
                ' - Deben ser verificables con relativa facilidad, y cumplir con los requisitos funcionales ',
                '',
                '<strong>- Discusion/Negociación</strong>',
                ' - Toda HU deberia nacer de una conversación, entre el equipo de desarrolladores y el cliente ',
                ' - En el peor de los casos, se deberia al menos hacer modificaciones y evitar que se convierta en un contrato ',
            ]),
        new Item('invest',
            [
                '<strong> I independiente</strong> Las HU deben ser independientes entre si, aunque puden compartir criterios de aceptación ',
                '<strong> N negociable</strong>    La negociación debe ser la base de toda HU, no son contratos ',
                '<strong> V valiosa</strong>       Toda HU debe aportar valor al negocio, de lo contrario son irrelevantes o postergables',
                '<strong> E est imable</strong>    Toda HU debe ser medible en tiempo o esfuerzo, de manera objetiva (ideal) ',
                '<strong> S pequeña</strong>       Las HU deben poder realizarse en un solo sprint, por lo que puede ser subdividida de lo contrario ',
                '<strong> T testeable</strong>     Toda HU debe ser probada y validada de manera clara, permitiendo que se considere finalizada ',
            ]),
        new Item('smart',
            [
                '<strong> S Especifica</strong> Debe ser lo suficientemente especifica como para ser entendida ',
                '<strong> M Medible</strong>    Ya que debe hacer lo que se pretende, segun el criterio del equipo ',
                '<strong> A Alcanzable</strong> Toda meta debe ser ambiciosa, más no demasido como para no alcanzarla ',
                '<strong> R Relevant</strong>   Toda tarea debe ser relevante para que contribuya a la historia y al proyecto ',
                '<strong> T Acotada</strong>    Cuenta con un tiempo limite para ser alcanzada, y asi saber los dias en que estara lista aproximadamente ',
            ]),
        new Item('3c',
            [
                '- Las historias de Usuario nacen de la necesidad de un entedimiento comun de lo que se debe hacer, ',
                ' - independientemente de quien lo lea, o quien lo haga, de ahi nace el concepto de las 3C ',
                '',
                '<strong>- Tarjeta(card)</strong> Es un breve parrafo que resume la necesidad, el porque, y para quien es util, ',
                ' - Estas tarjetas tienen su propia estructura, la cual generalmente tiene 3 partes + los criterios de aceptación ',
                '<strong>- Conversación(conversation)</strong> Es la comunicación cara a cara de todos lo involucrados necesarios, ',
                ' - para crear las tarjetas, Developers, Product Owner, Scrum Master, etc... y por medio de un conceso redactar la HU ',
                '<strong>- Confirmación (confirmation)</strong> Suelen ser los escenarios, precondiciones y postcondiciones para que la HU se de como terminada, ',
                ' - tambien se les conoce como los criterios de aceptación y no tienen punto medio,  ',
                ' - o se aceptan y se concluye la HU, o no se cumplen y es necesario seguir trabajando en la HU ',
            ]),
        new Item('gherkin',
            [
                '- El proposito del Gherkin es describir las HU y las pruebas de aceptación, en un lenguaje que todos los involucrados puedan entender ',
                '- Estan de la mano con el uso de BDD y TDD, donde todos son importantes, testers, developers, scrum master, product owner, y/o otros involucrados ',
                '',
                '- Ya con las HU realizadas y con todos correctamente empapados se suelen crear los escenearios de uso ',
                '- La estructura general de cada prueba de aceptacion suele ser: ',
                ' - Dado que <em>"contexto inicial"</em> Cuando <em>"un acontecimiento o suceso"</em> Entonces <em>"resultado determinado"</em> ',
            ]),
        new Item('descomposicionHU',
            [
                '- Toda HU debe ser subdividida en tareas especificas que aporten valor y que ayuden al cumplimento de la meta planteada ',
                '- Una forma util puede ser tener una serie de tareas genericas que puedan ser modificadas segun cada proyecto como: ',
                '',
                ' - Especificar cuantas pruebas unitarias estan asignadas a la HU ',
                ' - Pruebas de aceptación bien definidas de la HU ',
                ' - Tener claro los requisitos no funcionales que se deben cumplir ',
                ' - La necesidad de revisiones y cuantas se han de hacer ',
                ' - Refactorizaciones de codigo y cuanto tiempo se gastara para esto ',
                ' - Correcion y/o verificación de errores, que puedan suceder despues de las pruebas ',
                ' - Documentación, ya sea crearla o modificarla ',
            ]),
        new Item('storyPoints',
            [
                '- Es un concepto original de XP, que poco a poco fue adaptado por aquellos que usan SCRUM y metodologias agiles',
                '- Originalmente se hacian en base al "tiempo" que se llevaria implementar la historia, siendo relativo ',
                '- Esto se referia a tiempo realmente productivo y no solo al transcurrir del tiempo, entre otros factores',
                '- Tambien es erroneo creer que los puntos son equivalentes entre equipos y por lo tanto son comparables ',
                '',
                '- Centrarse en las estimaciones y que estas sean correctas, tambien es otro error, ',
                ' - ya que nos enfoca en mejorar las estimaciones y no en realizar acciones que den valor al producto ',
                '- Intentar cumplir con las estimaciones genera una presión que puede apresurar los resultados y afectar la calidad ',
                '- La división de tareas realmente pequeñas, tambien ayuda a completarlas eficazmente, definiendo lo realmente importante ',
            ]),
        new Item('casosVsRequisitosVsHu',
            [
                '<strong>- Requisitos del sistema:</strong> Estan escritos de manera tecnica y no dependen del usuario, representan caracteristicas puras ',
                '',
                '<strong>- Casos de Uso:</strong> Estan de manera que representa la interacción del usuario con el sistema, ',
                ' - estos son especificos para cada tipo de usuario identificado, son la toma de requisitos vista desde un usuario ',
                '',
                '<strong>- Historias de Usuario:</strong> Describen lo que un rol, y no un usuario, desea ser capaz de hacer; además se diferencia ya que es importante ',
                ' - el valor que pueden aportar para el negocio, son hechas para que sean colaborativas, por lo que en ambientes rigidos no son ideales ',
                '',
                '- Las HU no siempre son lo más ideal a la hora de realizar, en los casos donde el cliente y los afectados no estan abiertos a la colaboración, ',
                ' - ya que son ambiguas y se necesitan comunicación constante entre las partes, para ser refinadas, algo que no siempre se va a dar ',
            ])
    ];

export const MALAS_PRACTICAS =
    [
        new Item('callbackhell',
            [
                '- Generalmente es un problema al hacer codigo con caracteristicas asincronas (generalmente javascript) ',
                '- El orden en que se copia el codigo no necesariamente es en el que va a ser ejecutado',
                '- Cambiar el orden de las llamadas puede evitar el anidamiento innecesario',
                '- Usar promesas ó el Async/Await que hara que el codigo se comporte de manera más sincronica ',
            ]),
        new Item('contraCalidad',
            [
                '- Desconocimiento del negocio, clases mal diseñadas o condiciones sin sentido',
                '- Mala o nula formulación de requerimientos y requisitos ',
                '- Desconocimiento de las tecnologias que se usen, la experiencia de un desarrollador toma tiempo para conseguirse ',
                '- Malas estimaciones de los tiempos, obligando a mucho trabajo extra',
                '- No aplicar patrones y/o arquitecturas',
            ]),
        new Item('contraGestion',
            [
                '- Asignación erronea del personal en roles inadecuados o sin la experiencia necesaria ',
                '- Asumir información sin tener una confirmación previa',
                '- Empezar a planear sin tener todas las variables a tener en cuenta',
                '- No se debe abusar de la capacidad de multitarea del equipo',
                '- La falta de comunicación en el equipo puede conllevar al desastre',
                '- No poner limites es tan malo como ser inflexible, siempre hay un punto medio',
                '- Entregar productos incompletos, lo ideal seria pedir más tiempo o recursos',
                '- Asignación erronea del personal en roles inadecuados o sin la experiencia necesaria ',
            ]),
        new Item('contraAgilidad',
            [
                '- Usar practicas tecnicas o metodos sin los comportamientos de una cultura agil ',
                ' - no es realmente agilidad es solo algo cosmetico que enmascara otro modelo de desarrollo ',
                '',
                '<strong>Temor de compromiso:</strong> Los procesos de cambio son complejos, ',
                ' ya que estos retan las viejas costumbres, y funcionaron en los viejos tiempos, ',
                ' por eso se toman mejores practicas que no requieran poca adaptación ',
                '',
                '<strong>Falta de disciplina:</strong> La busqueda de la perfección es un camino sin fin, ',
                ' por eso es necesario experimentar y mantener constancia con las practicas que se realizen, ',
                '',
                '<strong>Persona con multiples roles:</strong> Cada rol tiene sus deberes y responsabilidades, ',
                ' romper estas barreras puede conllevar problemas en el personal y su productividad ',
                '',
                '<strong>Grupos de individuos:</strong> En un equipo cada integrante tiene sus actividades y responsabilidades ',
                ' definidas, que al final se suman para armar un todo, que puede resultar en un Frankenstein ',
                ' ,en un grupo todos los integrantes deben poder participar y llenar vacios de ser necesarios, ',
                ' de manera que no hayan silos de especialidades ',
                '',
                '<strong>Falta de auto organización:</strong> Los equipos agiles buscan ser autogestionados, ',
                ' por medio de una inteligencia colectiva, la colaboracion de los miembros y la experiencia compartida, ',
                ' sin necesidad de tener un gestor que este controlando las dinamicas del grupo',
                '',
                '<strong>Falta de formación:</strong> Tambien existe la posibilidad de que los antipatrones se den ',
                ' por simple desconocimiento, por lo que manejar espacios de capacitación siempre va a ser necesario ',
            ]),
        new Item('malasPracticasSCRUM',
            [
                '- SCRUM es una metodologia agil, que te da guias, pero no reglas, por lo que esta subjetividad puede llegar a crear problemas, ',
                ' - a la hora de que cada equipo interprete e implemente los ajustes al marco de trabajo base ',
                '',
                '<strong>Usarlo, no signifique que seas agil</strong>',
                ' - Usar SCRUM sin conocer el manifiesto agil o sus 12 principios, solo se estaria usando el <strong>como</strong> sin saber el <strong>porque</strong>',
                '',
                '<strong>En la planeación, el PO dice como hacer el trabajo al desarrollador</strong>',
                ' - Esto atento en contra de la autonomia el compromiso y la autoorganización que los desarrolladores tienen',
                '',
                '<strong>Usar el <em>Daily</em> como reunión de seguimiento</strong>',
                ' - Esta debe ser para la comunicación entre desarrolladores, el seguimiento debe ser una consecuencia del avance ',
                '',
                '<strong>Eventos incompletos</strong>',
                ' - Si un evento se realiza sin todos los roles que deben estar involucrados, es posible que otros eventos se entremezclen, ',
                '  - debido a la falta de información de los roles que se han ausentado ',
                '',
                '<strong>Eventos que perdieron el sentido </strong> ',
                ' - Cuando se pierde el sentido de eventos como las <em>Reviews</em> se conviertes en simples reuniones que solo consumen tiempo ',
                '',
                '<strong>Combinaciones de roles </strong> ',
                ' - Una persona no deberia fungir 2 posiciones, ya que además de tener más responsabilidades, desdibuja los roles y sus funciones ',
                '',
                '<strong>Sprints convertidos en Cronogramas</strong>',
                ' - La agilidad implica usar y medir el tiempo diferente, por lo que no se deben usar cronogramas apretados disfrazados de sprints',
                '',
                '<strong>SCRUM permite terminar antes</strong>',
                ' - Una falsa creencia, SCRUM permite fallar y evaluar de manera mas rapida, no terminar antes pero si corregir más rapido ',
                '',
                '<strong>Ampliar los Sprints</strong>',
                ' - Esto evita que se tenga constancia y puede arruinar las estadisticas del equipo ademas de futuras estimaciones ',
                '',
                '<strong>Dividir o priorizar mal las Historias de Usuario</strong>',
                ' - Esto puede desencadenar en una cascada agil, donde no se ven incrementos pequeños ni funcionales, ',
                '  - solo partes terminadas pero inconexas ',
            ])
    ];

export const METODOLOGIAS =
    [
        new Item('agiles',
            [
                '- Las metodologias agiles buscan hacer que cualquier desarrollo sea de alta calidad, con tiempos y costos reducidos ',
                '- Estas permiten la rapida adaptación a cualquier caracteristica del proyecto',
                '- La participación de los clientes es fundamental en todo el transcurso del desarrollo',
                '- El progreso se mide de una manera más relevante y metodica generando metricas más precisas',
                '- Estas formas de trabajar no son marcos irrompibles pueden ser modificadas y combinadas de acuerdo a las necesidades ',
                '- Algunas de estas son: Extreme Programing, SCRUM, Kanban, Agile Inception, Desing Sprint',
            ]),
        new Item('scrum',
            [
                '- Se basa en entregas pequeñas e incrementales que van sumando al producto final',
                '',
                '- Roles(responsabilidades):',
                '<strong> - Product Owner:</strong> Es el encargado de defender los intereses del cliente y maximizar el valor del producto ',
                '<strong> - Scrum Master:</strong> Es el encargado de que el equipo de trabajo no tenga incovenientes atascantes, y vigilar la correcta implementacion de SCRUM',
                '<strong> - The Team:</strong> son los encargados del desarrollo directamente, debido a su conocimiento tecnico y de hacer las entregas a tiempo ',
                '',
                '- Artefactos: ',
                '<strong> - Product Backlog:</strong> Recoge el conjunto de tareas, requerimientos y funcionalidades del proyecto',
                '<strong> - Sprint Backlog:</strong> Definición de las tareas a realizar y del tiempo aproximado que deberian conllevar durante el sprint ',
                '<strong> - Incremento:</strong> Resultados del sprint, que fueron terminados satisfactoriamente, listos para añadir al proyecto ',
                '',
                '- Eventos: ',
                '<strong> - Planning Meeting:</strong> Planeación general donde el Product Owner prioriza las tareas a realizar para el sprint ',
                '<strong> - Daily Scrum:</strong> Seguimiento diario del proyecto, analizando posibles problemas, avances y que tareas se estan realizando ',
                '<strong> - Review:</strong> Se inspecciona el incremento realizado',
                '<strong> - Retrospective:</strong> Se da a conocer las dificultades del sprint y que cosas se pueden mejorar',
            ]),
        new Item('scrumPrinciples',
            [
                '- Scrum es uno de los marcos mas usados a la hora de desarrollar software, que funciona como un marco para la gestion de proyectos, ',
                ' - que se enfoca en el trabajo en equipo y el progreso iterativo, dirigido hacia metas/objetivos bien definidos ',
                '- Su adopción puede ser inconveniente al principio, trayendo inconsistencias o un choque cultural en la forma de realizar los trabajos ',
                '',
                '<strong>- Esencia</strong>',
                ' - Comentarios rapidos     - Innovación a una mayor tasa',
                ' - Mejora continua         - Mejor adaptación ante los cambios',
                ' - Clientes más felices    - Ritmo constante y rapido para la entrega de valor ',
                '',
                '<strong>- Pilares fundamentales:</strong>',
                '<strong> - Transparencia:</strong> Mostrar los hechos tal como son, todos confian entre si, por lo que pueden decir tanto malas como buenas noticias ',
                '  - esto permite que no se oculte información relevante y todo el equipo tiene una vista clara de como va el trabajo ',
                '<strong> - Inspección:</strong> Todo integrante puede hacer una inspeccion al producto, los procesos, las practicas; en busqueda de mejoras, ',
                '  - y en caso de que se haya desviado el rumbo, se corrige o se negocia los cambios a realizar, de manera que siempre haya una conversación ',
                '<strong> - Adaptación:</strong> Un lazo inherente a la mejora continua es la capacidad de adaptarse, a nuevas circunstancias o necesidades, ',
                '  - esto se traduce en una mejora de la comercialización y de un retorno a la inversión más temprano',
                '',
                '- Scrum no solo funciona por estos valores, tambien porque se adhiere a los principios agiles subyacentes de entregar valor y escuchar al cliente ',
                '',
                '<strong>- Valores</strong>',
                '<strong> - Compromiso:</strong> Todo el equipo trabaja sincronizado, como una unidad ',
                '<strong> - Coraje:</strong> Cada integrante debe poder decir Si, No, Pedir ayuda y trabajar en nuevos enfoques ',
                '<strong> - Enfocados:</strong> El enfoque siempre seran los resultados, todo lo que se empieza, se debe terminar ',
                '<strong> - Apertura:</strong> El aprendizaje continua y la mejora subyacente estan al orden del dia ',
                '<strong> - Respeto:</strong> Toda relación entre el equipo, se basan en el respeto, reconociendo debilidades y fortalezas de cada uno ',
            ]),
        new Item('kanban',
            [
                '- Nacido de metodologias usadas por Toyota donde se identificaban las necesidades de manera precisa',
                '- Esta metodologia tiene ciertos aspectos superiores que SCRUM, pero su implementación depende de las necesidades ',
                '- Se basa en una metodologia de tarjetas visuales para mostrar el completado de las tareas',
                '- Facil de usar y de asumir por parte del equipo, al ser sumamente visual',
                '',
                '- Tiene otras principios que son diferentes de las metodologias agiles',
                '<strong> - Calidad:</strong> Todo debe hacerse bien a la primera, los errores son más costosos cuando se arregla algo ',
                '<strong> - Sin desperdicio:</strong> No hacer más de lo necesario (YAGNI)',
                '<strong> - Mejora continua:</strong> Siempre hay espacio para mejorar',
                '<strong> - Flexible:</strong> Las prioridades pueden cambiar',
                '',
                '- Tiene varios pasos o aspectos a implementar',
                ' - Definir un flujo de trabajo accesible por todos, el tablero puede contener varios proyectos simultaneamente ',
                ' - Se deben tener tantas columnas como estados hallan, y las tarjetas se iran desplazando entre estas',
                ' - Visualizar las fases del desarrollo, al igual que SCRUM se basa en un desarrollo incremental',
                ' - La prioridad son las actividades que se estan haciendo en vez de empezar nuevas',
                ' - Las fases deben estar terminadas para poder iniciar la siguiente, además de tener un maximo de tareas',
                ' - Los trabajadores nunca esta inactivos, ya que pueden solapar tareas de diferentes proyectos sin problemas',
            ]),
        new Item('elevator',
            [
                '- Es una sintexis sobre ti y tu proyecto en menos de lo que sube un ascensor (1-5 minutos) ',
                '- Debe ser claro, conciso y atrayente para atraer a potenciales inversores',
                '- Debes tener una preparación previa, conocer todo lo necesario y siempre ser directo',
                '- Mide los tiempos, repasa una y otra vez lo que vayas a decir, sin dejar de lado la naturalidad ',
                '- Tu presentación debe ser sorprendente, mostrar el problema y su solución innovadora',
            ]),
        new Item('canvas',
            [
                '- Sirve para crear y definir modelos de negocios, con la prioridad de crear valor para los clientes ',
                '- Debes de llenar 9 bloques que tu empresa ha de cumplir',
                '<strong> - Segmento de mercado:</strong> ¿ Quienes son tus clientes ?, ¿ Para quien creamos valor ?, Son la base de todo tu negocio',
                '<strong> - Propuesta de valor:</strong> ¿ Que problema y como ayudamos a solucionarlo ?, Tu diferencia frente a la competencia como ventaja competitiva ',
                '<strong> - Canales:</strong> ¿ Que canales usan y cuales prefieren nuestros clientes ?, Como vas a distribuir tu producto',
                '<strong> - Comunicación:</strong> ¿ Que relaciones haz creado con tus clientes, es la indicada ?, Como te comunicaras con tus clientes ',
                '<strong> - Ingresos:</strong> ¿ Porque se paga actualmente y hasta que punto estarian dispuestos ?, Como ganaras dinero y de que fuentes ',
                '<strong> - Recursos:</strong> ¿ Necesidades claves para nuestra propuesta de valor ?, Cosas como derechos de autor, personal, fondos, patentes, etc..',
                '<strong> - Actividades:</strong> ¿ Actividades claves requeridas para nuestra propuesta ? , Producción, soluciónes, plataformas, etc... para que tu modelo funcione ',
                '<strong> - Socios:</strong> ¿ Socios y Proveedores claves ?, Quienes te ayudaran a conseguir los recursos necesarios ',
                '<strong> - Costos:</strong> ¿ Principales costos de mayor a menor ?, Definiendo cuanto gastar y como gastarlo ',
            ]),
        new Item('tradicionales',
            [
                '<strong>- Recolección de solicitudes:</strong> Estudiar el sistema actual',
                '<strong>- Estudio de viabilidad:</strong> Se investiga desdes diferentes perspectivas, economicas, tecnologias, practicidad ',
                '<strong>- Analisis del sistema:</strong> Se intentan crear un plan a seguir',
                '<strong>- Diseño:</strong> En base a todos los datos recogidos, analisis, entrevistas, etc..',
                '<strong>- Codificación:</strong> Se plasman todos los diseños en codigo funcional',
                '<strong>- Pruebas:</strong> Toda función importante debe ser evaluada para garantizar su fiabilidad',
                '<strong>- Mantenimiento:</strong> Despues de ser probado e implementado el software puede ser actualizado o corregido en el tiempo ',
            ]),
        new Item('cascada',
            [
                '- Es un metodo secuencial donde cada etapa se desarrolla una sola vez',
                '- Las fases del desarrollo no estan bien definidas y se pueden solapar entre si',
                '- Errores en etapas previas pueden ser fatales si no se corrigen con premura',
                '- Bastante inflexible en cuestion de cambios sin previo aviso',
                '- Los usuarios solo son consultados en etapas finales e iniciales, poca comunicación en etapas intermedias ',
            ]),
        new Item('espiral',
            [
                '- Es la evolución del modelo en cascada',
                '- Se basa en la repetición de las mismas tareas, haciendo controles con más periocidad ',
                '- Se reduce el riesgo del fracaso al dividir el proceso en partes más pequeñas ',
                '- Cada ciclo se planifica justo depues de terminar el objetivo del presente ',
                '- Los errores pueden evolucionar con cada ciclo, no necesarimente resolverse ',
            ]),
        new Item('iterativo',
            [
                '- Cada entrega es un proyecto más completo',
                '- En cada oportunidad se pueden añadir nuevas funciones o actualizar las existentes ',
                '- Resiliencia frente a cambios inesperados, mayor comunicación con el cliente',
                '- Permite desconocer detalles iniciales que se iran solucionando con las iteracciones ',
                '- Es funcional desde el primer ciclo, permite mejorar las estimaciones del proyecto ',
            ]),
        new Item('extrema',
            [
                '- Muy utilizada en la gestión de proyectos ',
                '- Se centra en potenciar las relaciones intepersonales de los equipos ',
                '- Mejorando el ambiente laboral y manteniendo un aprendizaje continuo ',
                '- La retroalimentación es un aspecto fundamental para la mejora continua ',
                '- Debe ser planificada, pero flexible al cambio ',
                '- Los Sprints son cambiados por iteracciones ',
                '- Maneja los siguentes roles: ',
                ' - Equipo, Tester, Tracker, Coach, Big Boss ',
            ]),
        new Item('v',
            [
                '- Desciende del modelo en cascada e igual que este consta de las siguentes fases: ',
                '- Es un modelo facil de seguir y el emparejamiento entre las etapas logra una mejor localizazion de fallos ',
                '- El producto final solo es obtenido al final de todas las fases por lo que es demorado y puede ser diferente de lo que se pidio ',
                '   &darr; Definición de requerimientos       &lt;--       validan      &lt;--        Pruebas de aceptación   &uarr; ',
                '   &darr;  Diseño funcional del sistema      &lt;--       validan      &lt;--      Pruebas de sistema        &uarr; ',
                '   &darr;   Diseño tecnico del sistema       &lt;--       validan      &lt;--    pruebas de componentes      &uarr; ',
                '   &darr;    Especificación de componentes   &lt;--       validan      &lt;--  Pruebas unitarias             &uarr; ',
                '   &darr;                                           Codificación                                       &uarr; ',
            ]),
        new Item('rup',
            [
                '- Diseñado y documentado para usar UML ',
                '- Es considerado bastante pesado, pero muy versatil y adaptable ',
                '',
                '            Requerimiento                ',
                '                  &rarr;                   ',
                '  Evaluación &uarr;        &darr; Implementación ',
                '                  &larr;                   ',
                '               Prueba                    ',
                '',
                '- Directrices ',
                '<strong> - Requisitos de gestión:</strong> Documentar las funcionalidades del sistema, sus limitaciones, requisitos del negocio, etc.. ',
                '<strong> - Arquitectura basada en componentes::</strong> Crea un sistema facilmente extensible, haciendo referencia al uso de POO a la hora programar ',
                '<strong> - Uso de elementos visuales::</strong> Es una forma de comprender mejor el sistema de manera general, normalmente mediante diagramas UML ',
                '<strong> - Comprobar la calidad::</strong> La calidad debe estar siempre presente en todas las fases del proceso ',
                '',
                '- Fases ',
                '<strong> - Diseño:</strong> Fase inicial de la cual se generan los elementos necesarios para fases proximas',
                '<strong> - Elaboración:</strong> Descripción del producto y de los costos/beneficios de las fases proximas ',
                '<strong> - Construcción:</strong> Desarrollo del software como tal, e incluyen las pruebas del mismo ',
                '<strong> - Transición:</strong> Se lleva a cabo el plan de despliegue y seguimiento del software ',
            ]),
        new Item('kaizen',
            [
                '- <em>Kai</em> y <em>Zen</em> Terminos japoneses que significan respectivamente acción de cambio y mejora continua ',
                '- Consiste en eliminar las ineficiencias de tu sistema productivo, todos los dias se debe mejorar algo ',
                '1 <strong>Planificar:</strong> Debes ser consciente de tu situación, analizar los problemas y definir un plan de acción con lo que quieres mejorar ',
                '2 <strong>Hacer:</strong>      Desarrollar el plan para cada uno de los aspectos que has identificado ',
                '3 <strong>Comprobar:</strong>  Debes analizar que tu plan si este dando resultados, de lo contrario deberas volver a empezar ',
                '4 <strong>Actuar:</strong>     Si has logrado cumplir los objetivos marcados, entonces es hora de estandarizar y continuar con las mejoras ',
                '',
                '<strong> La importancia de los empleados</strong>',
                '- Una gran ventaja de esta metodologia es que no siempre son necesarias cuatiosas inversiones para obtener resultados',
                '- Debido a que todos los empleados son tomados en cuenta a la hora de tomar decisiones, aportando ideas y soluciones desde diferentes niveles ',
                '- Esto tambien aumentara la productividad y su motivación, lo que a la larga se convierte en un beneficio añadido ',
            ]),
        new Item('scrumban',
            [
                '- Esta metodologia combina las mejores caracteristicas de ambos permitiendo: ',
                ' - Tener la naturaleza preceptiva de scrum ',
                ' - El enfoque de calidad y de evitar el desperdicio de Kanban ',
                ' - Migrar o mantener metodologias agiles de desarrollo ',
                ' - Mejora continua de procesos ',
                ' - El mantenimiento y el desarrollo van juntos, y son complementarios ',
                '',
                '- Para ser implementado es importante tener en cuenta: ',
                ' - Seguir usando los tableros y labores vigentes ',
                ' - No dejar de perseguir la mejora continua ',
                ' - Respetar las labores y responsabilidades actuales, mientras se intentan mejorar ',
                '',
                '- Cuando usarlo: ',
                ' - Mantenimiento de proyectos dirigidos por eventos ',
                ' - Gestion de proyectos problematicos ',
                ' - Desarrollo de nuevos productos, posteriores al sprint ',
                ' - Mejora continua de la gestión '
            ])
    ];

export const NUBE =
    [
        new Item('nube',
            [
                '<strong>- Nube Publica:</strong> Los recursos son del proveedor y estos son compartidos con otros usuarios, sin necesidad alguna de mantenimiento ',
                '<strong>- Nube Privada:</strong> Los recursos son propios y no estan compartidos con terceros, un entorno más escalable y con un gran control ',
                '<strong>- Nube Hibrida:</strong> Los recursos son propios pero el espacio puede ser compartido con otros usuarios, marcando fronteras claras para su acceso ',
            ]),
        new Item('iaas-paas-saas',
            [
                '- Estos 3 modelos de servicios actualmente ayudan a las empresas a ahorrar costos, en software y hardware, además de multiples ventajas ',
                '',
                '<strong>- IaaS:</strong> Infraestructura como servicio, aca todo la infraestructura necesaria se contrata con un tercero, a cambio de una cuota o un alquiler, ',
                ' - esto es muy conveniente ya que se compra lo que se necesita; algunos de los más conocidos son Amazon Web Services Y Microsoft Azure ',
                '<strong>- PasS:</strong> Plataforma como servicio, en este caso solo se provee la infraestructura, y el cliente solo se preocupa de su aplicación, ',
                ' - delegando la administración a un tercero, algunos de los más conocidos son Google App Engine Y Bungee Connect ',
                '<strong>- SaaS:</strong> Software como infraestructura, se aloja el software y la infraestructura, el usuario solo se preocupa por usarlo y sus necesidades ',
                ' - algunos de los más conocidos son Microsoft Office 365 y WordPress ',
            ]),
        new Item('api',
            [
                '- Interfaz de Programación de Aplicaciones',
                '- Conjunto de reglas y especificaciones por el cual se puede comunicar diferentes aplicaciones ',
                '- Permiten compartir reutilizar funciones ya existentes, evitando reiventar la rueda',
                '- Suelen ser la entrada principal a los sistemas distribuidos ',
            ]),
        new Item('tiposApi',
            [
                '<strong>- Locales:</strong> Ofrecen servicios del SO o como middleware entre apliaciones, como el acceso a una BD ',
                '<strong>- Web:</strong> Ampliamente utilizadas para acceder a recursos expuestos mediantes el protocolo HTTP mediante una URL',
                ' - estas generalmente son de tipo REST pero tambien existen con el protocolo SOAP ',
                '<strong>- Programación:</strong> Se basan en llamar procedimientos remotos y que aparenten ser locales, ',
                ' - como las apis de la serie WS de Microsoft',
            ]),
        new Item('rest',
            [
                '                   SOAP                                          REST                    ',
                '        Solo permite datos en XML                         Variedad de formatos           ',
                '    Puede incluir metadatos, más pesado           Generalmente se usa JSON, más liviano  ',
                '  NO se puede guardar contenido en la cache      SI pueden guardar contenido en la cache ',
            ]),
        new Item('restfull',
            [
                '- Rest Es un estilo de arquitectura para sistemas distribuidos, que usa el protocolo HTTP ',
                '',
                '- Caracteristicas',
                '<strong> - Arquitectura cliente-servidor:</strong> Comunicación continua entre estos 2 agentes ',
                '<strong> - Stateless:</strong> No se deberia almacenar los datos del cliente para mantener el estado de este ',
                '<strong> - Cacheable:</strong> Algunas peticiones pueden ser cacheables para aumentar el rendimiento y la escabilidad ',
                '<strong> - Interfaz uniforme:</strong> Independencia del servidor, ya que siempre se garantizara la misma respuesta ',
                '<strong> - Mensajes:</strong> Todos los mensajes deben ser coherentes con la función que representan, halla un error ó no ',
                '<strong> - HATEOAS:</strong> Es incluir todo lo necesario en la respuesta para que el usuario pueda seguir haciendo peticiones ',
                '',
                '- Web Restfull',
                '<strong> - Uri del recurso:</strong> Cada metodo deberia contar con una url unica para identificar la función ',
                '<strong> - Representación de recurso:</strong> Se puede añadir a la cabecera de la petición, definiendo el formato que se procesara ',
                '<strong> - Operaciones:</strong> Usar los metodos HTTP de manera idonea (GET, POST, PUT DELETE) ',
                '<strong> - Hipervinculos:</strong> Se pueden incluir vinculos para más acciones con el objeto, dentro de la respuesta ',
            ]),
        new Item('httpCodes',
            [
                '<strong>- Respuestas informativas -> 1xx </strong>',
                ' - Son poco usadas y se enfocan más a aspectos de la red y la comunicación ',
                '',
                '<strong>- Respuestas satisfactorias -> 2xx </strong> Se usan para denotar el exito de una operación ',
                ' - 200 OK -> Respuesta estandar para peticiones correctas ',
                ' - 201 Created -> Solicitud aceptada y se ha creado un nuevo recurso ',
                '',
                '<strong>- Redirecciones -> 3xx </strong> Son cuando es necesario tomar acciones extras para efectuar la acción ',
                ' - 300 Multiple Choices -> Multiples opciones con varias respuestas ',
                ' - 301 Moved Permanently -> La URI solicitada ha sido movida a otra URI ',
                ' - 304 Not Modified -> Para propositos de cache, indicando que no ha sido modificado ',
                '',
                '<strong>- Errores del cliente -> 4xx </strong> La solicitud es incorrecta ya sea por sintaxis o información errada ',
                ' - 400 Bad request -> La solicitud no puede ser interpretada por una sintaxis invalida ',
                ' - 401 Unauthorized -> La autenticacion del usuario es posible pero incorrecta ',
                ' - 403 Forbidden -> No se cuenta con los permisos necesarios para el contenido ',
                ' - 404 Not Found -> El contenido solicitado no pudo ser encontrado ',
                '',
                '<strong>- Errores del servidor -> 5xx </strong> La solicitud es valida pero no pudo ser ejecutada debido a errores del servidor ',
                ' - 500 Internal Server Error -> El servidor ha tenido un error que no sabe manejar ',
                ' - 501 Not Implemented -> El metodo solicitado no es soportado por el servidor ',
                ' - 502 Bad Gateway -> Al obtener una puerta de enlace se obtiene una respuesta invalida ',
                ' - 503 Service unavailable -> Servicio no disponible ',
            ]),
        new Item('caracteristicas',
            [
                '- Buenas practicas para crear APIs 100% restfull',
                '',
                '<strong>- Versionamiento:</strong> Las apis tambien cambian y esto no debe evitar que las versiones anteriores dejen de funcionar ',
                '',
                '<strong>- Autenticación:</strong> Esto garantiza un minimo de seguridad e integración en las operaciones a realizar, para esto se puede usar OAuth2 o JWT',
                '',
                '<strong>- Paginación:</strong> Mostrar todos los resultados es inviable en varios terminos, por lo tanto deberia haber, una forma de mostrar segmentos de información ',
                '',
                '<strong>- Documentación:</strong> Cuando algo cambia la documentación tambien debe hacerlo de inmediato',
                '  -  de lo contrario puede haber problemas de inconsistencias con los parametros ',
                '',
                '<strong>- Respuestas:</strong> Los codigos deben reflejar lo que haya sucedido, es una mala practica siempre devolver OK(200) ',
                '  - aunque hayan sucedido errores, esto da lugar a mensajes contradictorios ',
            ]),
        new Item('madurezDeUnaApi',
            [
                '- Entre más niveles se implementen, más util y completa se puede considerar una API',
                '',
                '<strong>- Nivel 0:</strong> Se puede considerar simplemente como una conexión http con una sola URI y un solo metodo ',
                '<strong>- Nivel 1:</strong> Usa varias URIs y un solo metodo http por cada una, esto ayuda a la separación de recursos ',
                '<strong>- Nivel 2:</strong> Ademas de usar varias URIs, tambien se usan más metodos y tipos para cada URI, a su vez este expone más recursos ',
                '<strong>- Nivel 3:</strong> Este hace uso de todo lo anterior además de incluir HATEOAS, esto facilita su navegación al punto de ser más intuitivo ',
            ]),
        new Item('factores12',
            [
                '<strong>- Codigo base:</strong> Todo el codigo debe ser controlado mediante un sistema de versiones, ',
                ' - y este no deber ser compartido entre proyectos, de ser el caso esta seria una libreria en comun ',
                '',
                '<strong>- Dependencias:</strong> Todas las dependencias a usar siempre deben estar declaradas y aisladas del entorno de ejecución ',
                ' - la aplicación no puede depender de que estas esten instaladas en el host, ya el modo de su gestión es de libre albedrio ',
                '',
                '<strong>- Configuraciones:</strong> Si existen diferentes despliegues y entornos de ejecución, estos deben tener sus propias configuraciones ',
                ' - esto se puede lograr mediantes variables de entorno y el manejo de distintos archivos de configuración ',
                '',
                '<strong>- Backing services:</strong> Todo sistema que consuma la aplicación (bases de datos, mensajeria, colas, cache, etc.. ), ',
                ' - deberia poder conectarse y cambiarse por medio de simples configuraciones, sin modificar el codigo base ',
                '',
                '<strong>- Separacion de etapas -> cada etapa deberia ser manejada de manera diferente, ya que en esencia lo son ',
                '<strong> - Construccion:</strong> Convierte el codigo base en un ejecutable listo para funcionar ',
                '<strong> - Distribución:</strong> Se toma la construcción previa y se crea una o n instancias de acuerdo a una configuración ',
                '<strong> - Ejecución   :</strong> Es la aplicación ya funcional en el entorno previamente preparado ',
                '',
                '<strong>- Procesos:</strong> Para que la aplicación se ejecute de manera adecuada, esta no deberia contemplar guardar estados ',
                ' - esto significa que todos los procesos deben ser individuales e independientes entre si ',
                '',
                '<strong>- Puertos:</strong> Estas aplicaciones son autocontenidas y se comunican mediante puertos HTTP ',
                '',
                '<strong>- Concurrencia:</strong> Toda aplicación deberia ser su propia encargada de autogestionarse su crecimiento, ',
                ' - de acuerdo a la demanda y a la disponibilidad de recursos, ya sean hilos, procesos, uso de memoria, asincronia, etc.. ',
                '',
                '<strong>- Desechabilidad:</strong> Todos los procesos de las aplicaciones deberian ser desechable, y tener un tiempo de arranque minimo, ',
                ' - esto con el proposito de iniciar cuando sean requeridos, realizar su función, y devolver los recursos consumidos al finalizar ',
                '',
                '<strong>- Igualdad de ambientes:</strong> Desarrollo y producción deben ser lo más parecidos posibles ',
                ' - tener diferencias entre estos ambientes puede traer errores inesperados, al intercambiar entre tecnologias o herramientas ',
                '',
                '<strong>- Historiales:</strong> Además de ser utiles a la hora de depurar, estos permiten tener mediciones y metricas de la aplicación ',
                ' - se pueden observar en tiempo real, o guardarse en ficheros que seran consultados despues ',
                '',
                '<strong>- Administración de procesos:</strong> Estas tareas deberian tener los mismos comandos y secuencias de realización, ',
                ' - independientemente del ambiente o sus configuraciones',
            ]),
        new Item('migracionesNube',
            [
                '- Toda migración hacia la nube, generalmente recoge 6 alternativas ',
                '<strong> - Realojar:</strong> Consiste en mover la aplicacion tal y como existia originalmente, una medida apresurada que no siempre funciona ',
                '<strong> - Replataformar:</strong> Consiste en modificar la estructura subyacente, sin modificar la arquitectura central de aplicación ',
                '<strong> - Readquirir:</strong> Consta de una migración de una nube o servicio a otro, de acuerdo a las necesidades del negocio ',
                '<strong> - Refactorizar/Rediseñar:</strong> No solo es un movimiento de ambiente, tambien son mejoras de escalabilidad ó rendimiento ',
                '<strong> - Retirar:</strong> A veces hay recursos que estan obsoletos o ya no se necesitan, por lo que se eliminan ó se desactivan ',
                '<strong> - Retener:</strong> Son ocasiones donde es necesario soportar tecnologias legacy que no son compatibles con la nube',
            ]),
        new Item('capTeorema',
            [
                '- Este teorema sostiene que no es posible que un sistema distribuido cumpla o garantice más de 2/3 de las siguientes propiedades ',
                '',
                '<strong>- Consistency  (Coherencia):</strong> Todos los clientes ven los mismos datos de manera simultanea ',
                '<strong>- Availability (disponibilidad):</strong> Todos los clientes disponen de acceso de lectura y escritura en cualquier momento ',
                '<strong>- Partitions (tolerancia a la particion):</strong> El sistema sigue funcionando como un todo, despues de que las partes fallen o se incomuniquen ',
                '',
                '<strong>- Sistema CP:</strong> Coherencia y tolerancia a la particion (sistemas de DNS)',
                '<strong>- Sistena AP:</strong> Disponibilidad y tolerancia a la partición (BD relacionales) ',
                '<strong>- Sistema CA:</strong> Coherencia y disponibilidad (aplicaciones financieras)',
            ]),
        new Item('dns',
            [
                '- Es la manera como accedemos a una pagina web por medio de nombres(dominios) y no de direcciones IP ',
                '- Este proceso de traducción de direcciones es realizado por estos servidores que estan esparcidos por el mundo ',
                '- Al estar esparcidos por el mundo esto permite una administración descentralizada, pero sigue estando interconectada ',
                '- Aunque este metodo es normal hoy en dia, tambien se puede acceder a los sitios directamente por medio de una IP obteniendo el dominio del sitio ',
                '- Si un servidor no encuentra la información solicitada, este la restransmite a otros en la red hasta dar con un resultado ',
            ]),
        new Item('HATEOAS',
            [
                '- Los servicios REST son más simples, por eso son una gran opción sobre SOAP, pero tambien se puede abusar de esto ',
                '- <strong>Hypermedia As The Engine Of Application State</strong> (hipermedia como motor del estado de la aplicación)',
                '- Basicamente se busca poder navegar y descubir sus recursos solo con las respuestas, sin depender exclusivamente de la documentación ',
                '- Para que esto se cumpla, parte de la respuesta deben ser hipervinculos a sus recursos asociados ',
                '- Esto con el fin de mantener compatibilidad con versiones más antiguas, y evitar problemas a sus consumidores ',
            ]),
        new Item('apiStandars',
            [
                '- Tener estandares para una API, es una manera simple de mejorar la coherencia, la estabilidad ',
                ' - la generalidad y su usabilidad, ya sean estandares de la comunidad, comerciales o propios ',
                '- Aunque equilibrar esto con con el desarrollo no siempre van en la misma linea, siendo inflexibles algunas veces ',
                '',
                '- Las palabras <strong>Must</strong>(debe), <strong>Should</strong>(deberia), <strong>May</strong>(puede) deberian ser usadas segun la definición RFC 2119',
                '',
                '<strong>- Principios y terminos a conocer</strong>                       ',
                ' - REST                      - REST Model               - Tipos de API:  ',
                ' - DDD                       - Eventos y sucesos         - Negocio       ',
                ' - Madurez del API                                       - Mediadora     ',
                '',
                '<strong>- Manejo del ciclo de vida</strong>   5 Estados & 3 Etapas principales',
                ' - Diseño    ->  Testing      ->  Publicación   ->  Deprecación   -> Retiro   ',
                ' - Validar       Tests            Soporte                                     ',
                ' - Modelo        Evaluación       Observación                                 ',
                '',
                '<strong> - Manejo de versiones</strong> Ya sea semantico, por estabilidad, o un enfoque más practico y despreocupado, en la misma url',
                '<strong> - Implementar (IAM)</strong> <em>Identity Access Management</em> controlando que recursos son protegidos y el como ',
                '<strong> - Documentación y Herramientas de diseño</strong> La especificación de OpenApi (OAS), define un estandar agnostico para las APIs REST ',
                '<strong> - Integrar DevOps y CD/CI</strong> Reduciendo el tiempo entre etapas y agilizando el depliegue y mantenimiento con cada versión ',
                '<strong> - Control de documentación</strong> La documentación debe estar presente y ser accesible, además de concordar con lo expuesto ',
                '',
                '<strong>- Rutas y convenciones de nombres</strong>',
                ' - Estos facilitan la coherencia y la predictibilidad, pero hay que tener muchos factores a consideración, como: ',
                '  - Lenguajes, protocolos, frameworks, participantes, codigo heredado, etc... ',
                '<strong> - Campos y parametros</strong> Estos deben ser consistentes, ya sea lowerCamelCase o snake_case; si son arreglos puede ser plural ("names") ',
                '<strong> - Recursos</strong> Deberian ser sustantivos que indiquen la pluralidad o la singularidad como tal ',
                '<strong> - Identificadores</strong> Unicos e inmutables y que los soporte la URL ',
                '<strong> - Rutas</strong> Su composición deberia ser secuencial y predecible, primando la usabilidad ',
                '',
                '<strong>- Convenciones para carga util</strong>',
                '<strong> - Codificación</strong> El formato Unicode-8 (UTF-8) es el tipo de codificación estandar para todo el texto y sus representaciones textuales ',
                '<strong> - Formato de datos interoperables</strong> Datos comunes como fechas o direcciones deberian ser compartidos y/o compatibles con terceros ',
                '<strong> - Documentar la respuesta y la petición</strong> Estas deberian ser los más simples y livianas posibles ',
                '<strong> - Datos binarios y multi contenido</strong> Estos deben analizarse para evitar problemas de serialización/deserialización ó rendimiento ',
                '<strong> - HATEOAS, Links y Paginación</strong> Utiles para dispensar y navegar en grandes volumenes de datos ',
                '',
                '<strong>- Protocolos de Peticiones y Respuestas ',
                '<strong> - HTTPS</strong> Solo exponer endpoints encriptados ',
                '<strong> - Metodos HTTP</strong> Breve explicación de que metodos pueden ser usados y en que escenarios ',
                '<strong> - Encabezados HTTP</strong> Describir que Headers son usados para las peticiones y las respuestas ',
                '<strong> - Codigos HTTP</strong> Cada recursos puede responder con diferentes codigos de acuerdo al exito/error de la solicitud',
                '<strong> - Cache</strong> Como impacta su uso o no, en la API, ya sea en rendimiento, disponibilidad, coherencia, etc... ',
                '',
                '<strong>- Manejo de errores</strong>',
                ' - Devolver un codigo de error HTTP puede ser rapido y transmite información a grandes rasgos, sin exponer datos confidenciales ',
                ' - Sin embargo esto entorpece el registro y analisis de errores; debiendo devolver errores más detallados, que eviten lo tecnico ',
                '',
                '<strong>- Seguridad</strong>',
                ' - Toda la información que se exponga debe ser debidamente controlada, para evitar filtraciones y comprometer datos sensibles ',
                '<strong> - Alcance</strong> Se pueden definir que rutas necesitan autenticación y cuales no, definiendo diferentes alcances ',
                '<strong> - Transporte</strong> Exponer solo endpoints encriptados o versiones especificas de TLS ',
                '<strong> - Gateway API</strong> Otra manera de brindar seguridad, ocultando el procesamiento de la petición ',
                '',
                '<strong>- Registro y Trazabilidad ',
                '<strong> - Logging & Tracing</strong> Contenido clasificado o sensible no debe ser almacenado en los logs, a menos que sea seguro ',
                '<strong> - Audit Logs, Security Incident & Event Management</strong> Cada incidente debe analizarse y actuar en consecuencia ',
                '',
                '<strong>Consideraciones:',
                ' - Todo lo anteriormente recopilado es una guia, por lo cual debe ser adaptado de acuerdo a cada nuevo contexto ',
                ' - Y no se excluye de que este abierto a posibles cambios y mejoras por venir, despues de nuevas iteraciones',
                ' - Además de que cada tema y subtema a su vez tiene fuentes de profundización, presentes en el articulo original ',
            ]),
        new Item('apiGateway',
            [
                '- Aunque sean terminos similares, un Api gateway y Balanceador de carga son soluciones diferetes, para muchos problemas similares ',
                '<strong>- Api Gateway:</strong> Son una capa de filtración para las ya conocidas APIs, permitiendo que los clientes puedan realizar llamados y obtener el recurso ',
                '<strong>- Balanceador de carga:</strong> Es un sistema para equilibrar todo el trafico de nuestra aplicación, permitiendo que no se sobrecarguen los servidores ',
                '',
                '- Una de las principales diferencias radica en que el Api Gateway puede realizar tratamientos a la petición entrante, ',
                ' - como autenticación, validaciones, formateo, priorización, además de ofuscamiento y funcionar como posible limitador ',
                '- Por otro lado su contraparte, solo le interesa distribuir el trafico de la red, de manera que ningun nodo o servidor, ',
                ' - llegue a saturarse mientras que otros no esten realizando ninguna acción, y en algunos casos hasta puede funcionar como firewall ',
            ]),
        new Item('falaciesDistributedSystems',
            [
                '- Que un sistema sea Distribuido y no solo tiene beneficios, tambien tiene enfrenta nuevos problemas, que son iherentes a los microservicios ',
                '- Suelen haber falacias a nivel generalizado, que no siempre se contemplan a la hora de solucionar problemas, pero que siempre estan presentes ',
                '',
                '<strong> - La red es confiable:</strong> Para construir un programa confiable, se debe aceptar el hecho de que toda comunicación puede fallar, ',
                '  - y se debe tener una politica para recuperarse, como realizar reintentos o el patron <em>store and forward</em> para poder recuperarse ',
                '<strong> - 0 Latencia:</strong> Directamente relacionada a las distancias fisicas, siempre esta presente en toda comunicación ',
                '<strong> - Ancho de banda infinito:</strong> Cada viaje es costoso, no solo por la latencia, sino lo que se ha de enviar o recibir, ',
                '  - el tamaño de esta comunicación puede crecer hasta el punto que sature la red y provoque caidas en el sistema ',
                '<strong> - La red es Segura:</strong> Asumir esto, o confiar en las personas, puede ser un error critico, por lo que un buen analisis, ',
                '  - correción de errores y un diseño pensado para ser seguro no deberian faltar ',
                '<strong> - La topologia no cambia:</strong> La estructura de la red, no siempre sera la misma, ¿ nuestro sistema esta preparado, ',
                '  - si un sistema critico dejara de funcionar ?, tecnologias como Docker y Kubernetes casi nos hacen olvidar que esto no es 100% de sentado ',
                '<strong> - Administración:</strong> No todo se puede controlar todo el tiempo, eventualmente el sistema crecera y evolucionara, ',
                '  - por lo que la dependencia con otros sistemas seran inevitables, por lo que el monitoreo y la obsersavilidad deben estar al orden del dia ',
                '<strong> - El costo del Transporte:</strong> Enviar datos entre sistemas es un costo omnipresente, pero esto no significa que no se pueda ',
                '  - optimizar o migrar a protocolos de comunicación más ligeros ',
                '<strong> - La red es Homogenea:</strong> La interoperabilidad es algo fundamental en la actualidad, pero no todo es tan ordenado y funcional, ',
                '  - como no todos los sistemas son iguales, se deben crear soluciones genericas que puedan ser adaptadas para nuevos sistemas ',
            ])
    ];

export const PATRONES =
    [
        new Item('definicionPatrones',
            [
                '- Son soluciones especificas a problemas comunes y los más conocidos son: ',
                '<strong>GOF:</strong> Que se dividen en 3, creacionales, estructurales y de comportamiento ',
                '<strong>GRASP:</strong> Representan los principios básicos de la asignación de responsabilidades a objetos, en forma de patrones ',
            ]),
        new Item('gof',
            [
                '<strong>- Creacionales:</strong> Se usan para la creación de objetos ya se ocultando o simplificando la creación de estos ',
                '<strong>- Estructurales:</strong> Separan la interfaz de su implementación por medio de la abstracción ',
                '<strong>- Comportamiento:</strong> Definen la comunicación entre objetos, y la independencia de esta de los objetos ',
            ]),
        new Item('desglosegof',
            [
                '- Creacionales ',
                '<strong> - Singleton:</strong> Restringe la instancia de la clase a un solo Objeto ',
                '<strong> - MVC:</strong> Plantea la separación en 3 capas, cada una con una función especifica ',
                '<strong> - Abstract factory:</strong> Permite crear familias de objetos relacionados sin especificarlas directamente ',
                '<strong> - Builder:</strong> Permite crear objetos bajo demanda, y solo con las propiedades especificadas ',
                '',
                '- Estructurales ',
                '<strong> - Adapter:</strong> Permite la comunicación entre objetos de tipos diferentes, independientemente del tipo de cada objeto ',
                '<strong> - Decorator:</strong> Añade funcionalidades extra añadiendo clases que ya las tienen, sin afectar al codigo existente ',
                '<strong> - Facade:</strong> Permite acceder facilmente a muchas funciones, muy usado en librerias y frameworks ',
                '<strong> - Bridge:</strong> Permite dividir clases muy relacionadas en otras más pequeñas e independientes ',
                '',
                '- Comportamiento ',
                '<strong> - Iterator:</strong> Permite recorrer los elementos de una colección ',
                '<strong> - Mediador:</strong> La comunicación entre objetos se da solo mediante un elemento central ',
                '<strong> - Observer:</strong> Permite generar subscripciones y que todos los oyentes se enteren de los cambios ',
                '<strong> - Estrategia:</strong> Permite que una clase escoja la mejor implementación de acuerdo al caso',
            ]),
        new Item('grasp',
            [
                '- Intentan hacer que la Asignación de responsabilidades sea lo más optima posible',
                '- Alta cohesion mediante la refactorización, y bajo acoplamiento al no abusar de la herencia ',
                '- Cada componente tiene una función especifica en la que es experto',
                '- Conocer las peculiaridades de cada lenguaje como ciclos de vida e integración con el SO ',
                '- Darle prioridad al polimorfismo más que a las sentencias de control al usarse en los objetos ',
                '- Evitar el uso de variables globales, especialmente en el desarrollo web ',
                '- La creación de factorias y clases intermedias ayudan a la mantenibilidad del código',
            ]),
        new Item('desglosegrasp',
            [
                '<strong>- Indirección:</strong> Mejorar el acoplamiento entre 2 clases, asignando a una clase como mediadora entre ellas ',
                ' - ideal para clases con alta volutibilidad y uso de librerias de externas ',
                '',
                '<strong>- Invención pura:</strong> Son clases que no representan un objeto o una abstracción especifica del dominio, ',
                ' - sino que se creo para reducir el acoplamiento, aumentar la cohesion y mejorar la reutilización ',
                '',
                '<strong>- Creación:</strong> Determina quien es el responsable de crear nuevas instancias de acuerdo a ciertos criterios, ',
                ' - mal usado puede degenerar en el smells code de cirugia a escopetazos ',
                '',
                '<strong>- Experto en Información:</strong> La responsabilidad de crear o usar un objeto solo es de aquel que conoce todo lo necesario, ',
                ' - reduciendo el acoplamiento, aumentando la cohesión y encapsulamiento ',
                '',
                '<strong>- Controlador:</strong> Sirve como intermediario entre una determinada interfaz y el algoritmo que la implementa, ',
                ' - es aquel que contiene la logica necesaria para redireccionar a los componentes indicados segun los datos ingresados ',
            ]),
        new Item('dao',
            [
                '- Son usados para el acceso a los datos (persistencia)',
                '<strong> - DAO:</strong> Obliga a una mayor implementación manual a cambio de flexibilidad ',
                '<strong> - Active Record:</strong> Se gana una mayor independencia de la bd a costa de ceder el control ',
            ]),
        new Item('antipatronesDev',
            [
                '- Son malas soluciones a problemas comunes que parecen buena idea, y nacen del afan de implementar patrones o de  mezclarlos de manera icorrecta ',
                '',
                '<strong> - Golden Hammer:</strong> Pretende que todo se solucione de la misma manera o con el mismo lenguaje',
                '<strong> - Lava Flow:</strong> Es la codificación de manera continua, sin un orden alguno, y lleno de redundancias',
                '<strong> - Spaghetti Code:</strong> Aparece cuando se suelen mezclar muchos lenguajes, aumentando la complejidad de la solución ',
                '<strong> - God Class:</strong> Sucede cuando todo se soluciona en un solo archivo metodo o clase',
                '<strong> - Poltergeist:</strong> Es la existencia de elementos injustificadamente',
                '',
                '- Tambien se pueden aplicar para temas de arquitectura',
                '<strong> - Reinventar la rueda:</strong> Es la implementación de soluciones que ya existen de antemano',
                '<strong> - Casarse con el diablo:</strong> Es la dependencia total de algun elemento sin contingencia alguna ',
            ]),
        new Item('dobleDespacho',
            [
                '- Es un patron de diseño que resuelve 2 problemas: ',
                '- Cuando el comportamiento depende del objeto y los parametros recibidos ',
                '- Esto se puede hacer mediante varias maneras, herencia, polimorfismo, reflexion, etc... ',
            ]),
        new Item('patronSaga',
            [
                '- Es un patron que ayuda a garantizar la integridad de las transacciones, es especialmente util para aplicaciones distribuidas y microservicios ',
                '',
                '<strong>- Mediante coreografia:</strong> Es una sucesión de eventos donde cada uno llama al siguiente ',
                '  - despues de terminar su tarea, en este caso cada servicio debe saber como responder ante cada caso posible ',
                ' - Facil de implementar y con poco acoplamiento, pero se puede complicar entre más operaciones hallan ',
                '',
                '<strong>- Mediante orquestación:</strong> De esta manera un solo proceso o servicio es el encargado de coordinar, ',
                '  - todas las llamadas de los procesos y de realizar el rollback completo si alguna de las operaciones falla ',
                ' - Más facil de mantener a cambio de convertirse en un posible cuello de botella ',
            ]),
        new Item('patroncqrs',
            [
                '- El acronimo significa: Segregación de Responsabilidad de Consultas de Comandos ',
                '- Las operaciones de lectura y escritura utilizan diferentes modelos de datos ',
                '- Las consultas no pueden modificar los datos y los comandos pueden ser procesados de manera asincrona ',
                '- Esto permite facilitar leer y escribir operaciones, agregando tanto seguridad como complejidad ',
                '- Los datos no solo se manejan de maneras diferentes, tambien pueden ser almacenados de distintas formas ',
                '- Especialmente util cuando las operaciones de lectura y de creacion/modificación difieren sustancialmente ',
            ]),
        new Item('patronUndoRedo',
            [
                '- Es un patron de comportamiento bastente usado en la actualidad ',
                '- Este patron dicta que cualquier cambio que se realize puede ser devuelto a un estado previo ',
                ' - Ademas de que se debe ser capaz de volver a un estado futuro desde uno pasado ',
                '- Manejar estados y tener memmoria de estos puede implicar mayor complejidad para las aplicaciones ',
                '- Los estados no deben ser modificables y sus cambios no deben tener efectos colaterales ',
                '',
                '- Este patron puede tener 2 enfoques: ',
                '<strong>- Todo o nada:</strong> No hay puntos intermedios de que guardar y que no, toda acción realizada deber ser recordada ',
                '<strong>- Calculados:</strong> Los estados anteriores y proximos, se pueden calcular en base al actual ',
                '- Ambos enfoques pueden presentar problemas de complejidad y rendimiento respectivamente ',
            ]),
        new Item('tiposDePatrones',
            [
                '- Existen diferentes clasificaciones para los patrones de acuerdo a su nivel de abstracción, segun la clasificación de Frank Buschmann serian: ',
                '',
                '<strong>- Patrones Arquitectonicos:</strong> Se centran en la estructura del sistema, definición de subsistemas, ',
                ' - manejo de responsabilidades, lineas guia para organizar las relaciones ',
                '',
                '<strong>- Patrones de Diseño:</strong> Esquemas para refinar subsistemas, componentes o las relaciones de estos, ',
                ' - estos describen una estructura recurrente y comun que resuelve un problema de diseño, ',
                ' - en un contexto especifico, algunos de estos pueden ser los patrones GRASP o lo GOF ',
                '',
                '<strong>- Patrones de codificación(idioms):</strong> Ayudan a implementar aspectos particulares del diseño, en un lenguaje especifico'
            ]),
        new Item('stranglerFig',
            [
                '- Una higuera estranguladora, es una planta peculiar, debido a que su semilla crece desde las ramas de un arbol, hasta que echan raices en el suelo ',
                '- Durante años van creciendo poco a poco sofocando y matando a su huesped ',
                '- Una gran metafora a la hora de hablar de migrar y reemplazar sistemas anticuados con otros más actuales ',
                '- Esto sonaria como simplemente realizar una aplicación que haga exactamente lo mismo, lo cual para nada es simple ',
                '- Además de que esto involucra nuevas funciones, correciones o incluso mantener los errores ya conocidos ',
                '- Tambien se ha de tener en cuenta que esto es proceso arduo y constante, con miras de que futuros estrangulamientos se simplifiquen ',
                '- Mantener ciclos cortos y hacer lanzamientos frecuentes, permite que esta aplicación no solo tome menos, si no que entregue valor más pronto ',
            ]),
        new Item('antipatronesPM',
            [
                '- Todo trabajo relacionado al desarrollo de software necesita comunicación e interacción humana, los antipatrones en esta gestión, destruyen ',
                ' - y entorpecen esta actividad humana fundamental, principalmente en las 3 areas más involucradas, Gestion de procesos, recursos y relaciones ',
                '',
                '<strong>Blowhard Jamboree:</strong> Las opiniones de los expertos influyen en las decisiones tecnologicas, las criticas y la atención a informes negativos',
                ' - que aparecen en medios importantes y publicaciones privadas, consumen tiempo en dar respuestas, ',
                ' - ya que los tomadores de decisiones les surgen inquietudes, para entender o refutar estas publicaciones ',
                '<strong>Paralisis de analisis:</strong> Esforzarse por alcanzar la perfección y la integridad, en la fase de analisis, puede inducir un estancamiento ',
                ' - ya que se busca evitar realizar cambios, algo impractico, ya que el software crece y soluciona problemas de manera incremental/iterativa ',
                '<strong>Ingeniería de Viewgraph:</strong> Los proyectos se atascan al producir demasiados diagramas y documentación, en lugar de desarrollar ',
                ' - la gerencian que era quien los solicita nunca obtiene las herramientas de desarrollo adecuadas, ',
                ' - y los desarrolladores se ven condenados a usar software para automatizar la creación de estos documentos, que suelen ser pseudotecnicos ',
                '<strong>Muerte por planificación:</strong> Demasiada planificación conduce a cronogramas más apretados y complejos para etapas posteriores, ',
                ' - en vez de tomarse de manera que integre desarrollo con etapas iterativas y planificación incremental ',
                '<strong>Miedo al exito:</strong> Cuando un proyecto esta al borde del exito, suelen aflorar preocupaciones y miedos que antes no estaban presentes, ',
                ' - sobre cosas que pueden salir mal, inseguridades, e incluso casos de paranoia y sucesos altamente improbables ',
                '<strong>Corncob:</strong> Las personas dificiles, frecuentemente destruyen y desvian los procesos del software, a traves de diversas maneras ',
                '<strong>Violencia Intelectual:</strong> Ocurre cuando alguien con un conocimiento que otros no tienen, lo usa para intimidar o amendrentar en reuniones ',
                '<strong>Gestión Irracional:</strong> La indecisión habitual, y malas decisiones tomadas de facto, conducen a crisis de desarrollo cronicas, y malos caminos ',
                '<strong>Humo y Espejos:</strong> Aveces se suele mostrar desarrollos incompletos y promesas de nuevas funcionalidades',
                ' - sin saber los riesgos y los desafios tecnicos que esto involucra, para erroneamente compremeter a la organización más alla de sus capacidades ',
                '<strong>Mala gestión:</strong> La falta de supervisión e involucramiento, puede conducir a una desorientación que afecta a los procesos y acciones internas ',
                '<strong>Fire Drill:</strong> Volar suele ser descrito como <em>horas de aburrimiento, seguidas de 15 segundos de terror</em>, lo mismo suele pasar',
                ' - cuando existen meses de poco desarrollo, seguidos de demandas de entrega inmediatas, debido a una gran variedad de causas y situaciones ',
                '<strong>The Feud:</strong> Las peleas entre gerentes, suelen ser más que personales, estos conflictos influyen y hasta pueden afectar directamente',
                ' - a los subalternos, desde simples malos tratos, hasta acciones disciplinarias ',
                '<strong>Los correos son peligrosos:</strong> El correo electronico es una gran herramienta de comunicación, pero no es apta para todos los mensajes ',
                ' - ni para escribir acerca de comunicaciones delicadas, ya que suelen ser temas inapropiados o muy delicados',
            ])
    ];

export const PRUEBAS_AVANZADAS =
    [
        new Item('cajaNegraBlanca',
            [
                '<strong>- Caja blanca:</strong> Este tipo de testing se realiza sabiendo la estructura del codigo, funcionamiento, ',
                ' - estructura, arquitectura, etc.. con todo esto en mente se realizan las pruebas ',
                '<strong>- Caja negra:</strong> En este metodo solo se conoce las entradas y las salidas del proceso, ',
                ' - teniendo su funcionamiento interno oculto ',
                '',
                '- Por lo general los tests de caja blanca son realizados por los desarrolladores del proyecto, ',
                ' - y los de caja negra por las personas que conocen del negocio ',
                '',
                '- Tambien se suelen mencionar los test de Caja gris, que se considerarian un punto medio, ',
                ' - donde la persona encargada conoce del negocio y de su implementación, más no con una gran profundidad ',
            ]),
        new Item('valorLimite',
            [
                '- Esta tecnica se basa en la heuristica de que los errores son más probables en los valores extremos de las entradas ',
                '- Los valores escogidos son aquellos que se encuentran por encima o debajo de las clases de equivalencia ',
                '- Dependiendo del tipo de dato de la entrada se suele escoger las pruebas para que cumplan los siguientes escenarios: ',
                ' - (n-1) valor cercano al limite minimo ',
                ' - (n)   valor encontrado en el rango normal de los datos ',
                ' - (n+1) valor cercano al limite maximo ',
                '- Los valores limite se pueden considerar una especie de frontera entre el comportamiento normal del sistema y ',
                ' - un punto de error conocido o desconocido para el sistema ',
                '',
                '- Si tomamos como ejemplo los dias de la semana se podrian dar los siguientes casos: ',
                '',
                '                          Dias de la semana validos                            ',
                '    Otro   Domingo  Lunes  Martes  Miercoles  Jueves  Viernes  Sabado    Otro  ',
                '    Error  Limite                rango normal                  Limite    Error ',
                '           inferior                                            Superior        ',
            ]),
        new Item('clasesEquivalencia',
            [
                '- Esta tecnica considera que todas las entradas del programa se pueden clasificar en 2 tipos: ',
                '</strong> - Efectos negativos:</strong> Entradas que inducen al error ó casos no cobijados durante el desarrollo ',
                '</strong> - Efectos positivos:</strong> Entradas que no deberian provocar ningun error ó mal funcionamiento del sistema ',
                '',
                '- Todos los elementos de una clase de equivalencia teoricamente se deben comportar igual, ',
                ' - por lo que solo basta escoger uno del grupo y probar con este elemento ',
                '- Las clases de equivalencia puende ser de distintos tipos: ',
                ' - Rangos, valores especificos, conjuntos de valores, condiciones binarias, etc.. ',
                '',
                '- De acuerdo a cada tipo se deberia sacar las clases de equivalencias validas e invalidas ',
                '- Si se da el caso, tambien se deberian probar los valores limite del sistema ',
            ]),
        new Item('grafosCausaEfecto',
            [
                '- Estos grafos representan una relación logica entre distinas causas y sus posibles efectos ',
                '- Donde una causa (entradas) pueden generar en diversos efectos (salidas) ',
                '- Estas entradas y salidas tambien se pueden combinar para elaborar complejas reglas de negocio ',
            ]),
        new Item('tiposDePruebas',
            [
                '<strong>- Alfa:</strong> Estan enfocadas a identificar posibles problemas antes de un release (lanzamiento) ',
                '<strong>- Aceptación:</strong> Realizadas por el cliente con el proposito de aceptar, o no el producto ',
                '<strong>- Ad-hoc:</strong> No tienen ninguna base o referencia por lo que su impredecibilidad puede romper las cosas ',
                '',
                '<strong>- Beta:</strong> Se realizan en un ambiente real, desde la perspectiva de un usuario para satisfacer a los clientes ',
                '<strong>- Compatibilidad(software):</strong> Se prueba que el software actual soporte las versiones previas ',
                '<strong>- Compatibilidad(Hardware):</strong> Se prueban diferentes entornos de hardware para saber donde y como puede correr ',
                '',
                '<strong>- Componentes:</strong> Aca se prueban la union de las diferentes partes de la aplicación y su funcionamiento en conjunto ',
                '<strong>- Extremo a extremo:</strong> Se prueba todo el sistema como un todo, su funcionamiento general y no particular ',
                '<strong>- GUI:</strong> Se prueba la interfaz grafica del usuario y que esta se adapte al publico enfocado, además de que funcione ',
                '',
                '<strong>- Camino feliz:</strong> Aca solo se crean casos que se conocen y que no deberian fallar ',
                '<strong>- Integración:</strong> Se juntan partes especificas y se prueban como un grupo en especifico ',
                '<strong>- Carga:</strong> Tienen el objetivo de averiguar cuanta carga de trabajo puede manejar un sistema sin degradaciones importantes ',
                '',
                '<strong>- Recuperación:</strong> Valida la capacidad del sistema para recuperarse de posibles fallos ',
                '<strong>- Regresión:</strong> Cualquier cambio de una funcionalidad no debe afectar lo que ya estaba funcionando ',
                '<strong>- Estres:</strong> La intención es saber en que punto un sistema deja de funcionar y porque ',
                '',
                '<strong>- Internalización:</strong> Que tambien se adapta un sistema para su uso en diferentes contextos geograficos ',
                '<strong>- Unitarias:</strong> Son pruebas de funciones especificas del sistema que se pueden tomar como una parte individual de la generalidad ',
                '<strong>- Humo:</strong> Se concentran en verificar que con cada cambio que se haga el sistema siga funcionando bien de manera general ',
            ]),
        new Item('outsideInside',
            [
                '- En el TDD se suelen encontrar 2 enfoques diferentes ',
                '',
                '<strong>- Escuela clasica (Inside-out)</strong>',
                ' - Tiene en cuenta conceptos originales de Kent Beck, Stephen Freeman y Nat Pryce como: ',
                ' - Triangulación: Que se basa en obtener varios casos especificos, con los cuales se pueda implementar una solución generica ',
                ' - Verificación: Que se centra en usar los objetos reales previamente configurados, con interacciones reales ',
                '',
                '<strong>- Escuela de Londres (Outside-in)</strong>',
                ' - Su proposito sigue siendo el mismo pero la manera de alcanzarlo es diferente ',
                ' - Verificar el comportamiento y las interacciones de los objetos más que sus estados ',
                ' - Asi se puede ahorrar todo el trabajo de la creación de los objetos y solo usar dobles ',
            ]),
        new Item('casosDePruebas',
            [
                '- Entre más complejo sea un software, mayor sera la posibilidad de sufrir defectos ',
                '- Un caso de prueba es un conjunto de condiciones y variables, bajo un mismo ambiente que determinara si, ',
                ' - alguna caracteristica esta completa o parcial, y si lo cumple de manera satisfactoria ',
                '',
                '- Para lograr esto, deberia crearse al menos un caso de prueba por cada requisito definido: ',
                ' - Los ciclos de pruebas deben ser fluidos y eficientes ',
                ' - Los casos deben estar escritos de manera clara y comprensible ',
                ' - La ejecución debe ser facil o estar guiada de no poder serlo ',
                ' - Tener las entradas y salidas debidamente especificadas ',
                ' - Definir los comportamientos esperados y como invocarlos ',
                '',
                '- Tambien pueden tener estados despues de su finalización: ',
                '<strong> - Exito:</strong> Todos los pasos y el comportamiento ha sido el esperado ',
                '<strong> - Fallido:</strong> Si alguno de los pasos es erroneo ',
                '<strong> - Bloqueado:</strong> Si este no se puede realizar debido a una secuencia especifica no posible, o fallos previos ',
                '<strong> - N/A:</strong> Ya no aplica debido a cambios en la funcionalidad o los requisitos asociados ',
                '',
                '- Pasos a tener en cuenta: ',
                ' - Identificar los requirimientos a probar y enumerar los casos de cada requisito ',
                ' - Realizar una matriz de trazabilidad para vincular los requerimientos y sus casos de prueba',
                ' - Escribir una descripción general del caso, que permita a personas con o sin conocimientos previos entender la prueba ',
                ' - Conocer los prerrequisitos a tener en cuenta para la prueba ',
                ' - Definir la prioridad de cada caso (alta, media, baja) ',
                ' - Secuencia de pasos y su descripción para realizar la prueba ',
                ' - Descripción de los resultados, sea exitosa o no lo sea ',
            ]),
        new Item('casosDeUso',
            [
                '- Descripción del conjunto de interacciones del sistema con uno o varios actores para alcanzar un objetivo ',
                '- Este debe incluir las multiples rutas posibles (escenarios) que el usuario puede tomar ',
                '- Aca se ha de tener en cuenta factores como que proceso se va a realizar, que actor lo va ejecutar y como lo hara ',
                '- Estos detallan las funcionalidades del sistema',
            ]),
        new Item('codeSmellsTests1',
            [
                '- Convenciones de nombres: ',
                '<strong> - Identidad equivocada:</strong> Cuando el nombre de una prueba es contrario a lo que esta haciendo ',
                '<strong> - Caso anonimo:</strong> Cuando su nombre no describe lo que se esta probando ',
                '<strong> - Testy test:</strong> Cuando una prueba tiene la redundancia de que indica que es una prueba ',
                '<strong> - Ni verbos ni sustantivos:</strong> Esta tiene el nombre del concepto pero no del comportamiento previsto ',
                '',
                '- Estructurales: ',
                '<strong> - Todo es una propiedad:</strong> Cuando variables temporales se mantienen como variables de instancia ',
                '<strong> - Falta de parametrizacion:</strong> Cuando se llaman metodos fuera del metodo de tests o se hace un 2x1 en un mismo test ',
                '<strong> - Test de integracion enmascarado:</strong> Demasiadas capas estan involucradas en un test ',
                '<strong> - El Parasito:</strong> Los tests deben ser independientes y nunca depender de otros tests previos ',
                '<strong> - Pruebas cuajadas:</strong> Union inapropiada de varios tests o division innecesaria ',
                '',
                '- Inicializacion y desmontaje (setup, teardown)',
                '<strong> - Primeros y ultimos ritos:</strong> Metodos repetivos en cada prueba al iniciar y finalizarla, en vez de una configuracion comun ',
                '<strong> - Sobre configuracion:</strong> Uso excesivo de datos compartidos que no todos los tests necesitan ',
                '<strong> - La configuracion esta en otra parte:</strong> y la prueba solo hace las validaciones ',
                '<strong> - Mi configuracion funciona:</strong> El test se puede desviar o duplicar el codigo de produccion innecesariamente ',
                '<strong> - Data-ja vu:</strong> Los datos que pueden ser inmutables y compartidos se instancian innecesariamente con cada test ',
                '<strong> - Limpieza dolorosa:</strong> Cuando se necesita crear o destruir un recurso cosotoso y la separacion del test con este es debil o muy larga ',
                '',
                '- Codificacion: ',
                '<strong> - Ocultamiento:</strong> Cuando algo que es parte fundamental del test esta como comentario pero no codificado ',
                '<strong> - Sobre refactorizar:</strong> Se ha aplicado tando DRY al codigo de pruebas que ha perdido significado y legibilidad ',
                '<strong> - Infierno repetivo:</strong> No se puede entender el tests ya que hay demasiado codigo, indicando la falta de fabricacion de datos ',
                '<strong> - Metodos incompletos:</strong> Cuando hay metodos de utilidad que no preparan todas las cosas como las necesita el test ',
                '<strong> - Automatizacion:</strong> Si el codigo de tests es autogenerado, es necesario revisarlo para saber que no es inutil o esta mal ',
                '',
                '- Datos: ',
                '<strong> - ¿ que se prueba ?</strong> Los datos del tests no son claros en lo que son o hacen ',
                '<strong> - Fabrica de datos perdidad:</strong> Cuando cada tests construye sus propios datos en vez de tener un metodo comun para esto ',
                '<strong> - Datos mundanos:</strong> Son datos que sirven para el contexto de la prueba pero no son reales ',
                '<strong> - Rueda de la fortuna</strong> Los datos aleatorios pueden conducir al fallo de las pruebas, haciendolas erraticas ',
                '<strong> - Bomba de tiempo:</strong> Cuando se prueban informacion con fechas, si no se tiene cuidado estos datos pueden volverse erraticos ',
            ]),
        new Item('codeSmellsTests2',
            [
                '- Aserciones - frameworks: ',
                '<strong> - Chat logging:</strong> Se usan mensajes por consola o logs para suplir el fallo de una asercion ',
                '<strong> - Afirmaciones torpes:</strong> Se escogen a voluntad afirmaciones poco sofisticadas y de facil verificacion ',
                '<strong> - Desviacion:</strong> Cuando se escoge la asercion erronea para que el fallo de la prueba sea más facil de entender ',
                '<strong> - Afirmar el mazo:</strong> Se crean aserciones demasiado completas para no pensar en una mas general e indicativa ',
                '<strong> - Asercion Martini:</strong> En vez de verificar todo, se verifica lo que sea y como sea para que el test pase ',
                '<strong> - Condicionales:</strong> Sobreesfuerzo en la verificacion donde las aserciones son dinamicas de acuerdo a la ejecucion del codigo de pruebas ',
                '<strong> - Confusas:</strong> La falta de control en el sistema conlleva a no predecir resultados exactos si no coincidencias parciales ',
                '',
                '- pruebas: ',
                '<strong> - EL verdadero creyente:</strong> La prueba convence al autor de que el codigo esta bien y no que tal vez esta erroneo ',
                '<strong> - Asertar el mundo:</strong> Las aserciones prueban todo, hasta detalles sin sentido ',
                '<strong> - Evidencia circunstancial:</strong> Las aserciones comprueban comportamientos indirectos ',
                '<strong> - intermitentes:</strong> Las afirmaciones fallan en comprobar el panorama general al centrarse en subconjuntos de detalles ',
                '',
                '- Locura por los mocks: ',
                '<strong> - Sobremockear:</strong> Son pruebas de caja blanca que siempre pasan ya que todo es perfecto ',
                '<strong> - Locura simulada:</strong> Cuando se abusa de los mocks hasta para crear simples objetos primitivos como POJOs',
                '<strong> - Simulacion de control remoto:</strong> La clase que depende de un servicio se prueba con la dependencia simulada y no el servicio en si ',
                '<strong> - El corazon revelador:</strong> Cuando existe codigo de produccion que solo cobra sentido en la ejecucion de los tests ',
                '',
                '- Inestables: ',
                '<strong> - El cienpies humano:</strong> No solo sucede cuando existe una prueba dependediente de otra, si no que hay una secuencia especifica para que no fallen ',
                '<strong> - ¿ Hay alguien ahi ? </strong> Prueba o codigo inestable que dañan la compilacion ocasionalmente ',
                '<strong> - Caldero chorreante:</strong> Prueba sensible a condiciones creadas por otras pruebas o que corrompe a otras ',
                '<strong> - Solista:</strong> Solo funciona cuando nadie más se esta ejecutando ',
                '<strong> - Demandante de recursos:</strong> Si el sistema esta lento este test fallara, debido a procesos internos pesados ',
                '',
                '- Implementacion: ',
                '<strong> - Asi lo escribi:</strong> Probando la implementación conocida, en vez del resultado ',
                '<strong> - Contorsionista:</strong> Debido a que las pruebas fueron escritas despues del codigo, este debe esforzarse para funcionar ',
                '<strong> - Caja de espadas:</strong> Entre mas tests se agreguen con los diversos puntos testeables, menos se evitaran las vias no descubiertas del codigo ',
            ]),
        new Item('mutation',
            [
                '- Es una tecnica de pruebas para encontrar fallas en las variaciones de un software y determinar la efectividad de las pruebas ',
                '- Una mutación es una prueba con una ligera modificación del codigo, si estas llegan a pasar el mutante sobrevivio, por lo que el codigo esta mal ',
                '- Entre menos mutaciones sobrevivan, mejor sera la calidad del codigo probado ',
                '- Tambien se ha de tener en cuenta que pueden existir mutantes equivalentes, que hacen lo mismo que el codigo original, solo que con otra sintaxis ',
                '',
                '- Las mutaciones se pueden dar por varios casos: ',
                ' - Cambiar valores usados en el codigo original, como empezar un ciclo en 1 y no en 0, etc... ',
                ' - Eliminar, intercambiar o duplicar bloques de codigo declarados ',
                ' - Decisiones al comparar valores, ya sea intercambiando un == por un != por ejemplo',
                '',
                '- Ventajas: ',
                ' - permiten cubrir gran parte de la logica a probar ',
                ' - detecta errores de facil alusión ',
                ' - verifica la efectividad de nuestro conjunto de pruebas y si es necesario aumentarlas o corregirlas ',
                '',
                '- Desventajas: ',
                ' - consumen una gran cantidad de recursos ',
                ' - es necesario contrarrestar mutantes que no tienen sentidos o no son validos en el contexto de la prueba ',
                '',
                '- Supuestos en lo que se basan estas pruebas: ',
                ' - Supuesto del programador competente: Si un programador es capaz de escribir y probar segementos pequeños, tambien lo hara con más grandes ',
                ' - Supuesto del efecto del acoplamiento: Si se combinan 2 formas para formar un programa y ambas son buenas, entonces lo combinación tambien lo sera '
            ])
    ];
