import * as Keys from '../keys'
import { Item } from "../models";

export class Content5 {

    public temas: Item[] = [
        ...PATRONES,
        ...CONOCIMIENTOS_EMPIRICOS,
        ...NUBE,
        ...APIS,
        ...META_ESTRUCTURAS,
        ...PEOPLE,
        ...MICRO_SERVICES
    ];

}

export const PATRONES =
    [
        new Item(Keys.PATRONES_DEFINITION,
            [
                '- Son soluciones especificas y reutilizables a problemas comunes, o con abstracciones similares, los más conocidos son: ',
                '<strong>GOF:</strong> Que se dividen en 3, creacionales, estructurales y de comportamiento ',
                '<strong>GRASP:</strong> Representan los principios básicos de la asignación de responsabilidades a objetos, en forma de patrones ',
            ]),
        new Item(Keys.PATRONES_GOF,
            [
                '- Los creadores de de GoF, proponen 2 principios basicos: ',
                '<strong>Programar orientado a interfaces y no a una implementación:</strong> El codigo se deberia comportar como una <em>Caja negra</em>, ',
                ' - donde solo interesa lo que puede hacer y lo que necesita, en vez del como, no nos debe interesar el funcionamiento interno ',
                '<strong>Favorecer la composición sobre la herencia:</strong> Aunque funcionalmente son similares conceptualmente no lo son, aunque ambas ',
                ' - permiten la adición de funcionalidades y evitan la duplicación, la herencia lo hace exponiendo el funcionamiento de la clase, ',
                ' - mientras que la composición no, llegando a afirmaciones como que la herencia no es compatible con la encapsulación',
                '',
                '<strong>Creacionales:</strong> Se usan para la creación de objetos ya sea ocultando o simplificando la creación de estos ',
                '<strong>Estructurales:</strong> Separan la interfaz de su implementación por medio de la abstracción ',
                '<strong>Comportamiento:</strong> Definen la comunicación entre objetos, y la independencia de esta de los objetos ',
            ]),
        new Item(Keys.PATRONES_DESGLOSE_GOF,
            [
                'Creacionales ',
                '<strong>- Singleton:</strong> Restringe la instancia de la clase a un solo Objeto ',
                '<strong>- MVC:</strong> Plantea la separación en 3 capas, cada una con una función especifica ',
                '<strong>- Abstract factory:</strong> Permite crear familias de objetos relacionados sin especificarlas directamente ',
                '<strong>- Builder:</strong> Permite crear objetos bajo demanda, y solo con las propiedades especificadas ',
                '',
                'Estructurales ',
                '<strong>- Adapter:</strong> Permite la comunicación entre objetos de tipos diferentes, independientemente del tipo de cada objeto ',
                '<strong>- Decorator:</strong> Añade funcionalidades extra añadiendo clases que ya las tienen, sin afectar al codigo existente ',
                '<strong>- Facade:</strong> Permite acceder facilmente a muchas funciones, muy usado en librerias y frameworks ',
                '<strong>- Bridge:</strong> Permite dividir clases muy relacionadas en otras más pequeñas e independientes ',
                '',
                'Comportamiento ',
                '<strong>- Iterator:</strong> Permite recorrer los elementos de una colección ',
                '<strong>- Mediador:</strong> La comunicación entre objetos se da solo mediante un elemento central ',
                '<strong>- Observer:</strong> Permite generar subscripciones y que todos los oyentes se enteren de los cambios ',
                '<strong>- Estrategia:</strong> Permite que una clase escoja la mejor implementación de acuerdo al caso',
            ]),
        new Item(Keys.PATRONES_GRASP,
            [
                '- Intentan hacer que la Asignación de responsabilidades sea lo más optima posible',
                '- Alta cohesion mediante la refactorización, y bajo acoplamiento al no abusar de la herencia ',
                '- Cada componente tiene una función especifica en la que es experto',
                '- Conocer las peculiaridades de cada lenguaje como ciclos de vida e integración con el SO ',
                '- Darle prioridad al polimorfismo más que a las sentencias de control al usarse en los objetos ',
                '- Evitar el uso de variables globales, especialmente en el desarrollo web ',
                '- La creación de factorias y clases intermedias ayudan a la mantenibilidad del código',
            ]),
        new Item(Keys.PATRONES_DESGLOSE_GRASP,
            [
                '<strong>Indirección:</strong> Mejorar el acoplamiento entre 2 clases, asignando a una clase como mediadora entre ellas ',
                '- Ideal para clases con alta volutibilidad y uso de librerias de externas, como clientes y servicios ',
                '',
                '<strong>Fabricación pura:</strong> Son clases que no representan un objeto o una abstracción especifica del dominio ',
                '- Se creo para reducir el acoplamiento y aumentar la reutilización al tener clases constructoras personalizadas ',
                '',
                '<strong>Creación:</strong> Una clase <strong>B</strong> es responsable de crear otra clase <strong>A</strong> si se cumplen ciertos criterios',
                ' - B contiene a A',
                ' - B es una agregación/composición de A',
                ' - B usa/almacena a A',
                ' - B tiene toda la información necesaria para crear a A',
                '',
                '<strong>Experto en Información:</strong> La responsabilidad de realizar una acción, solo es de aquel que conoce todo lo necesario ',
                '- Reduce el acoplamiento, aumentando la cohesión y encapsulamiento, siempre y cuando se tengan consideraciones como: ',
                ' - Logica de Negocio ',
                ' - Persistencia',
                ' - Interfaz de Usuario ',
                '',
                '<strong>Controlador:</strong> Sirve como intermediario entre una interfaz y el algoritmo que la implementa ',
                '- Es aquel que contiene la logica necesaria para redireccionar a los componentes indicados segun los datos ingresados ',
                '',
                '<strong>No hables con extraños:</strong> Un metodo solo invocara a metodos de ',
                ' - De si mismo (this)',
                ' - De su area de parametros ',
                ' - Un objeto creado en su propio ambito (los demás se dan por incluidos)',
            ]),
        new Item(Keys.PATRONES_PERSISTENCE_PATTERNS,
            [
                '- Son usados para el acceso la y manipulación de los datos (persistencia), desde diferentes fuentes, como Bases de Datos',
                '- Tambien son una forma de diferenciar entre la Programación Orientada a Objetos y la Programación Orientada a Datos',
                '- Mientras que en <em>POO</em> pone enfasis en conceptos como la Encapsulación, Polimorfismo y la Abstracción',
                '- En <em>POD</em> se hace enfasis en la separación entre los datos y su manipulación, la generalización y la inmutabilidad',
                '',
                '<strong>Driver Pattern:</strong> Este patron es el más cercado a la BD, es el responsable de establecer la respectiva conexión y comunicación ',
                ' - Esto es beneficioso en que se hace una extracción de datos, sin procesar e inmutable desde la BD',
                ' - La abstracción puede traer complejidad extra y errores en la conversión a objetos de dominio, necesaria para manipularlos',
                '',
                '<strong>Data Mapper:</strong> Es una capa mediadora entre los objetos y su representación en BD, de manera que se garantize la independencia de ambos enfoques ',
                ' - Puede ser aplicado a Sql y NoSql sin problemas, además de que multiples frameworks ya tienen este patron implementado y listo para ser usado',
                '',
                '<strong>Objeto de Acceso a Datos(DAO):</strong> Esta abstracción encapsula todas las interacciones con la fuente de datos',
                ' - Permitiendo que ambas partes cambien sin verse afectadas, solamente con el requerimiento de que cumplan el contrato especificado ',
                '',
                '<strong>Active Record:</strong> Similar a los enfoques anteriores, con la diferencia, de aca es la propia entidad la que realiza todas sus operaciones ',
                ' - Este empoderamiento simplifica la integración con la BD, pero lleva a penalizaciones y una violación del principio de responsabilidad unica ',
                '',
                '<strong>Repository:</strong> Es el patrón más orientado hacia el manejo de objetos y su importancia para el dominio, mediante el uso de metodo declarativos ',
                '',
                '<strong> Patron                      Ventajas                                                  Desventajas                 </strong>                ',
                '            - Enfoque directo de comunicación con la BD            - Reduce la portabilidad al estar vinculado directamente a la BD                 ',
                ' Driver     - Permite ajustes y un control de bajo nivel           - Puede tener codigo de bajo nivel o muy detallado, haciendolo poco mantenible   ',
                '            - Util para optimizaciones especificas por BD                                                                                           ',
                '',
                ' Data       - Separa el acceso a BD del Dominio                    - La complejidad del mapeo, puede afectar el rendimiento y la codificación       ',
                ' Mapper     - Admite personalizaciones en las transformaciones     - Puede requerir codigo repetitivo para la transformación entre ambas partes     ',
                '',
                ' DAO        - Mayor modularidad al separar los datos del dominio   - Puede agregar complejidad extra y aumentar el tiempo de desarrollo             ',
                '            - Admite el intercambio entre multiples motores de BD                                                                                   ',
                '',
                ' Active     - Simplifica las operaciones de cada entidad           - Acoplamiento indebido entre los datos y la logica del dominio                  ',
                ' Record     - Reduce la necesidad de una capa de datos separada    - No respeta el principio de responsabilidad unica, dificultando el mantenmiento ',
                '',
                '            - Alinea el lenguaje de dominio, con los datos         - Requiere una capa adicional, agregando complejidad                             ',
                ' Repository - Esta union genera un codigo más expresivo            - Los metodos especificos de dominio varian entre si, si no hay algun estandar   ',
                '            - Mantiene la separación entre las 2 capas                                                                                              ',
                '',
                '<strong>Data Transfer Object(DTO):</strong> Estrictamente hablando no es un patron para la persistencia de datos, pero si para su manipulación ',
                ' - Es un patron versatil multiproposito, como el movimiento fluido de datos entre diferentes capas ó sistemas ',
                ' - Esto tambien representa la responsabilidad de mantener el correcto aislamiento entre capas y la coherencia dentro de la aplicación ',
                '<strong>CQRS:</strong> Es una estrategia arquitectonica, para mejorar el rendimiento y separar las acciones entre lectura y escritura',
                ' - Esta separación puede conllevar problemas potenciales como la sincronización de los datos ó la complejidad adicional de esta separación ',
            ]),
        new Item(Keys.PATRONES_ANTI_PATTERNS,
            [
                '- Son malas soluciones a problemas comunes que parecen buena idea, y nacen del afan de implementar patrones o de  mezclarlos de manera icorrecta ',
                '',
                '<strong>- Golden Hammer:</strong> Pretende que todo se solucione de la misma manera o con el mismo lenguaje',
                '<strong>- Lava Flow:</strong> Es la codificación de manera continua, sin un orden alguno, y lleno de redundancias',
                '<strong>- Spaghetti Code:</strong> Aparece cuando se suelen mezclar muchos lenguajes, aumentando la complejidad de la solución ',
                '<strong>- God Class:</strong> Sucede cuando todo se soluciona en un solo archivo metodo o clase',
                '<strong>- Poltergeist:</strong> Es la existencia de elementos injustificadamente',
                '',
                'Tambien se pueden aplicar para temas de arquitectura',
                '<strong>- Reinventar la rueda:</strong> Es la implementación de soluciones que ya existen de antemano',
                '<strong>- Casarse con el diablo:</strong> Es la dependencia total de algun elemento sin contingencia alguna ',
            ]),
        new Item('dobleDespacho',
            [
                '- Es un patron de diseño que resuelve 2 problemas: ',
                '- Cuando el comportamiento depende del objeto y los parametros recibidos ',
                '- Esto se puede hacer mediante varias maneras, herencia, polimorfismo, reflexion, etc... ',
            ]),
        new Item('patronSaga',
            [
                '- Es un patron que ayuda a garantizar la integridad de las transacciones, es especialmente util para aplicaciones distribuidas y microservicios ',
                '',
                '<strong>Mediante coreografia:</strong> Es una sucesión de eventos donde cada uno llama al siguiente ',
                ' - despues de terminar su tarea, en este caso cada servicio debe saber como responder ante cada caso posible ',
                '- Facil de implementar y con poco acoplamiento, pero se puede complicar entre más operaciones hallan ',
                '',
                '<strong>Mediante orquestación:</strong> De esta manera un solo proceso o servicio es el encargado de coordinar, ',
                ' - todas las llamadas de los procesos y de realizar el rollback completo si alguna de las operaciones falla ',
                '- Más facil de mantener a cambio de convertirse en un posible cuello de botella ',
            ]),
        new Item(Keys.PATRONES_CQRS,
            [
                '- <strong>S</strong>egregación de <strong>R</strong>esponsabilidades de <strong>C</strong>omandos y <strong>Q</strong>ueries(Consultas)',
                '- Las operaciones de lectura y escritura utilizan diferentes modelos de datos ',
                '- Las consultas no pueden modificar los datos y los comandos pueden ser procesados de manera asincrona ',
                '- Esto permite facilitar leer y escribir operaciones, agregando tanto seguridad como complejidad ',
                '- Los datos no solo se manejan de maneras diferentes, tambien pueden ser almacenados de distintas formas ',
                '- Especialmente util cuando las operaciones de lectura y de creacion/modificación difieren sustancialmente ',
                '- Es un patron usado en las Arquitecturas basadas en eventos, sistemas que manejan consistencia eventual y colas de mensajeria '
            ]),
        new Item('patronUndoRedo',
            [
                '- Es un patron de comportamiento bastente usado en la actualidad ',
                '- Este patron dicta que cualquier cambio que se realize puede ser devuelto a un estado previo ',
                ' - Ademas de que se debe ser capaz de volver a un estado futuro desde uno pasado ',
                '- Manejar estados y tener memmoria de estos puede implicar mayor complejidad para las aplicaciones ',
                '- Los estados no deben ser modificables y sus cambios no deben tener efectos colaterales ',
                '',
                '- Este patron puede tener 2 enfoques: ',
                '<strong>- Todo o nada:</strong> No hay puntos intermedios de que guardar y que no, toda acción realizada deber ser recordada ',
                '<strong>- Calculados:</strong> Los estados anteriores y proximos, se pueden calcular en base al actual ',
                '- Ambos enfoques pueden presentar problemas de complejidad y rendimiento respectivamente ',
            ]),
        new Item(Keys.PATRONES_TYPES,
            [
                '- Existen diferentes clasificaciones para los patrones de acuerdo a su nivel de abstracción, segun la clasificación de Frank Buschmann serian: ',
                '',
                '<strong>Patrones Arquitectonicos:</strong> Se centran en la estructura del sistema, definición de subsistemas, ',
                ' - manejo de responsabilidades, lineas guia para organizar las relaciones ',
                '',
                '<strong>Patrones de Diseño:</strong> Esquemas para refinar subsistemas, componentes o las relaciones de estos, ',
                ' - estos describen una estructura recurrente y comun que resuelve un problema de diseño, ',
                ' - en un contexto especifico, algunos de estos pueden ser los patrones GRASP o lo GOF ',
                '',
                '<strong>Patrones de codificación(idioms):</strong> Ayudan a implementar aspectos particulares del diseño, en un lenguaje especifico'
            ]),
        new Item(Keys.PATRONES_STRANGLER_FIG,
            [
                '- Una higuera estranguladora, es una planta peculiar, debido a que su semilla crece desde las ramas del arbol, hasta que echan raices en el suelo ',
                '- Durante años van creciendo poco a poco sofocando y matando a su huesped, hasta quedar una sombra del arbol original ',
                '- Una gran metafora a la hora de hablar de migrar y reemplazar sistemas anticuados con otros más actuales ',
                '- Esto sonaria como simplemente realizar una aplicación que haga exactamente lo mismo, lo cual para nada es simple ',
                '- Además de que esto involucra nuevas funciones, correciones o incluso mantener los errores ya conocidos ',
                '- Tambien se ha de tener en cuenta que esto es proceso arduo y constante, con miras de que futuros estrangulamientos se simplifiquen ',
                '- Mantener ciclos cortos y hacer lanzamientos frecuentes, permite que esta aplicación no solo tome menos, si no que entregue valor más pronto ',
                '- Para evitar que los mismos errores se repitan, es necesario que se produzcan cambios organizacionales más amplios para evitar un caos similar ',
                '- Si no realizan cambios y no se aprende de la experiencia del pasado, el nuevo sistema terminara en un caos similar, como dice la <em>Ley de Conway</em> ',
                '',
                '<em>Ian Cartwright, Rob Horn</em> y <em>James Lewis</em> Definierón 4 actividades a alto nivel necesarias para este enfoque incremental ',
                '- Comprender los resultados que se desean lograr',
                '- Decidir como dividir el problema en partes más pequeñas',
                '- Entregar piezas con exito',
                '- Cambiar la organización para permitir que esto se haga de manera continua ',
            ]),
        new Item('antipatronesPM',
            [
                '- Todo trabajo relacionado al desarrollo de software necesita comunicación e interacción humana, los antipatrones en esta gestión, destruyen ',
                ' - y entorpecen esta actividad humana fundamental, principalmente en las 3 areas más involucradas, Gestion de procesos, recursos y relaciones ',
                '',
                '<strong>Blowhard Jamboree:</strong> Las opiniones de los expertos influyen en las decisiones tecnologicas, las criticas y la atención a informes negativos',
                ' - que aparecen en medios importantes y publicaciones privadas, consumen tiempo en dar respuestas, ',
                ' - ya que los tomadores de decisiones les surgen inquietudes, para entender o refutar estas publicaciones ',
                '',
                '<strong>Paralisis de analisis:</strong> Esforzarse por alcanzar la perfección y la integridad, en la fase de analisis, puede inducir un estancamiento ',
                ' - ya que se busca evitar realizar cambios, algo impractico, ya que el software crece y soluciona problemas de manera incremental/iterativa ',
                '',
                '<strong>Ingeniería de Viewgraph:</strong> Los proyectos se atascan al producir demasiados diagramas y documentación, en lugar de desarrollar ',
                ' - la gerencian que era quien los solicita nunca obtiene las herramientas de desarrollo adecuadas, ',
                ' - y los desarrolladores se ven condenados a usar software para automatizar la creación de estos documentos, que suelen ser pseudotecnicos ',
                '',
                '<strong>Muerte por planificación:</strong> Demasiada planificación conduce a cronogramas más apretados y complejos para etapas posteriores, ',
                ' - en vez de tomarse de manera que integre desarrollo con etapas iterativas y planificación incremental ',
                '',
                '<strong>Miedo al exito:</strong> Cuando un proyecto esta al borde del exito, suelen aflorar preocupaciones y miedos que antes no estaban presentes, ',
                ' - sobre cosas que pueden salir mal, inseguridades, e incluso casos de paranoia y sucesos altamente improbables ',
                '',
                '<strong>Corncob:</strong> Las personas dificiles, frecuentemente destruyen y desvian los procesos del software, a traves de diversas maneras ',
                '',
                '<strong>Violencia Intelectual:</strong> Ocurre cuando alguien con un conocimiento que otros no tienen, lo usa para intimidar o amendrentar en reuniones ',
                '',
                '<strong>Gestión Irracional:</strong> La indecisión habitual, y malas decisiones tomadas de facto, conducen a crisis de desarrollo cronicas, y malos caminos ',
                '',
                '<strong>Humo y Espejos:</strong> Aveces se suele mostrar desarrollos incompletos y promesas de nuevas funcionalidades',
                ' - sin saber los riesgos y los desafios tecnicos que esto involucra, para erroneamente compremeter a la organización más alla de sus capacidades ',
                '',
                '<strong>Mala gestión:</strong> La falta de supervisión e involucramiento, puede conducir a una desorientación que afecta a los procesos y acciones internas ',
                '',
                '<strong>Fire Drill:</strong> Volar suele ser descrito como <em>horas de aburrimiento, seguidas de 15 segundos de terror</em>, lo mismo suele pasar',
                ' - cuando existen meses de poco desarrollo, seguidos de demandas de entrega inmediatas, debido a una gran variedad de causas y situaciones ',
                '',
                '<strong>The Feud:</strong> Las peleas entre gerentes, suelen ser más que personales, estos conflictos influyen y hasta pueden afectar directamente',
                ' - a los subalternos, desde simples malos tratos, hasta acciones disciplinarias ',
                '',
                '<strong>Los correos son peligrosos:</strong> El correo electronico es una gran herramienta de comunicación, pero no es apta para todos los mensajes ',
                ' - ni para escribir acerca de comunicaciones delicadas, ya que suelen ser temas inapropiados o muy delicados',
            ]),
        new Item(Keys.PATRONES_CLOUD_DESIGN_PATTERNS,
            [
                '- La administración de datos es un elemento clave de las aplicaciones en la nube, e influye en la mayoria de atributos de calidad ',
                ' - los datos tienen una naturaleza distribuida de manera intrinseca, que representa desafios como la coherencia y la sincronización',
                '- Un buen diseño incluye el mantenimiento y la reutilización para permitir que componentes y subsistemas, se puedan utilizar en otras aplicaciones ',
                '- La naturaleza distribuida de las aplicaciones requiere una infraestructura de mensajeria, que permita conectar los componentes y servicios',
                '',
                '<strong>Anti-Corruption Layer:</strong> Implementa una capa de fachada o de adatador entre una aplicación moderna y un sistema heredado',
                '',
                '<strong>Backends for Frontends:</strong> Servicios independientes de back-end que determinadas aplicaciones ó front-end puedan usar ',
                '',
                '<strong>Cache-Aside:</strong> Carga datos a petición en una memoria caches desde algun almacen de datos',
                '',
                '<strong>Circuit Breaker:</strong> Controla errores que pueden tardar una cantidad variable de tiempo, durante la conexión o uso de servicios remotos',
                '',
                '<strong>Competing Consumers:</strong> Permite que varios consumidores simultaneos, procesen los mensajes recibidos en un mismo canal ',
                '',
                '<strong>Event Sourcing:</strong> Usa un almacen de solo anexar para registrar la serie completa de eventos, que describen las acciones realizadas sobre el dominio ',
                '',
                '<strong>Federated Identity:</strong> La autenticación se delega a un proveedor de identidad externo ',
                '',
                '<strong>Index Table:</strong> Crea indices en los campos de los almacenes de datos que suelen hacer referencia las consultas ',
                '',
                '<strong>Materialized View:</strong> Genera vistas previamente construidas con sus datos, cuando los datos no tienen el formato idoneo para las consultas requeridas ',
                '',
                '<strong>Priority Queue:</strong> Clasifica por orden de prioridad las solicitudes a ser procesadas, a mayor prioridad, más rapido se procesan ',
                '',
                '<strong>Pipes And Filters:</strong> Desglosa una tarea compleja, en una serie de elementos independientes reutilizables',
                '',
                '<strong>Publicador y Subscriptor:</strong> Permite que una aplicación anuncie eventos asincronos, entre 1-n cosumidores interesados',
                '',
                '<strong>Retry:</strong> Permite tratar errores temporales previamente anticipados, como en un servicio o recurso de red, siendo trasparentes con los errores ',
            ]),
        new Item(Keys.PATRONES_ENRICHED_MODEL,
            [
                '- En <strong>POO</strong> la forma como se diseñan las clases tiene un impacto significativo en la calidad y mantenibilidad del codigo ',
                '- En Java es comun el uso de modelos(entidades), DTO, y Objetos planos (POJO), que se pueden crear como simples clases con atributos ',
                '',
                '<strong>Clases anemicas:</strong>',
                '- Clases contenedoras de datos, sin logica significativa para el negocio ',
                '- La logica de negocio se encuentra en otras partes/capas, como servicios o controladores ',
                '- Mantener la logica de una clase fuera de ella, esta violando multiples principios como el encapsulamiento y la cohesión ',
                '',
                '<strong>Clases enriquecidas:</strong>',
                '- La clase encapsula tanto los datos como las operaciones relacionadas con esos datos ',
                '- Una clase no solo debe transportar datos como un DTO, tambien debe comportamientos y validaciones sobre estos ',
                '- Al ser la misma clase la encargada de su manipulación se mejora la encapsulación y la cohesión ',
                '',
                '<strong>Inmutabilidad:</strong>',
                '- Las clases inmutables son incompatibles con este tipo de logica para enriquecer las clases ',
                '- Esto debido a la imposibilidad de cambiar sus atributos, pero existen escenarios donde esta caracteristica es requerida ',
                '- Cada enfoque se debe usar de acuerdo a las necesidades y como mejor se adecuen ',
            ]),
        new Item(Keys.PATRONES_OUTBOX,
            [
                '- Con el auge de los microservicios el patron <strong>outbox</strong> surge como una forma de ayudar con el orden y la coherencia ',
                '- Este patrón organiza la comunicación de eventos y garantiza la coherencia de los datos debido a los desafios de la comunicacion asyncrona ',
                '',
                '- En primer lugar este patron define un almacenamiento temporal donde se registran los cambios en los datos salientes ',
                '- Despues se transmiten los registros serializados hacia el o los servicios externos ',
                '- Como ultimo paso se actualizan los registros para confirmar el exito en el envio ó su fallo y asi reintentar posteriormente ',
                '',
                '- Esto permite que en caso de cualquier falla los datos permanezcan hasta que puedan ser enviados sin contratiempos ',
                '- Este mecanismo permite crear sistemas resilientes al mismo tiempo que mantiene la consistencia de los datos, en especial en sistemas complejos ',
                '',
                '- Cuando se alteran los datos los datos siempre se registran inicialmente en la BD ',
                '- El envio no se hace de inmediato, por lo que suele existir un proceso o tarea segundaria que revisa periodicamente los mensajes pendientes por enviar ',
                '- Tambien debe considerar un mecanismo de limpieza, si los mensajes no son esenciales o no se considera mantener un historico de los datos ',
                '',
                '<strong>Ventajas & Desventajas</strong>',
                '- Mantiene la consistencia de los datos y no se pierden eventos sin al menos haberse reintentado ',
                '- Se agrega complejidad ya que se deben guardar y actualizar los mensajes antes y despues del envio ',
                '- Tambien se gasta más espacio debido a la necesidad de almacenar los mensajes y ralentiza el sistema ',
            ])
    ];

export const CONOCIMIENTOS_EMPIRICOS =
    [
        new Item('cristales',
            [
                '- Esta teoria predice que los desperfectos del ambiente van a generar la sensación de que la ley no existe ',
                '- Corregir los errores, aun por más por pequeños que sean evitara que el software se degenere ',
                '- Las pequeñas faltas pueden conllevar a transgresiones mayores ',
                '- Establecer normas claras y realizar revisiones periodicas ayuda a evitar este fenomeno ',
            ]),
        new Item('quo',
            [
                '- Es la preferencia innata del ser humano a la estabilidad ',
                '- Nuestras emociones son un punto de inflexión a la hora de tomas decisiones que arriesguan esta estabilidad ',
                '- Este fenomeno esta ligado a otros más comunes y que se viven casi a diario ',
                '',
                '<strong>Aversión a las perdidad:</strong> Es un efecto donde es más facil aferrarse a una cantidad u objeto en el que haya invertido tiempo y dinero, ',
                ' - que adquirir o construir uno nuevo que representara una ganancia, mayor a la actual ',
                '<strong>Efecto de dotación:</strong> Los bienes se perciben de manera más valiosa cuando son de nuestra propiedad, ',
                ' - Aunque este mismo bien sea el mismo que el de otra persona ',
                '',
                '- Estos fenomenos se pueden dar en el mundo del software al no realizar refactors, o limpiezas en el codigo solamente porque, ',
                ' - "funciona", aunque lo haga de manera complicada u poco optima ',
            ]),
        new Item(Keys.CONOCIMIENTOS_EMPIRICOS_COSTO_HUNDIDO,
            [
                '- La falacia del costo hundido es la tendencia a mantener proyectos fracasados ó obsoletos ',
                '- Esto se debe al tiempo y gastos invertidos en los proyectos, que no queremos soltar por la aversion a las perdidas ',
                '',
                '- En la industria del software es comun tener casos donde hay sistemas que constantemente deben ser parcheados, ',
                ' - costando tiempo y dinero, y donde la solucion más optima seria rehacer el sistema que continuar con este tipo de situaciones ',
                '',
                '- Tambien estan los casos donde las personas se niegan a abandonar proyectos estables, pero que eventualmente seran obsoletos ',
                ' - ya que migrar esto implica un costo, que puede ser menor que mantener a un proyecto legacy; pero esto no se ve a corto plazo ',
            ]),
        new Item('tiposProgramadores',
            [
                '<strong>The duct tape:</strong> Este programador arreglara el error sin importale como, la prioridad para el siempre sera arreglar el error, ',
                ' - sin importar la complejidad de la solución ni lo que se deba hacer y/o dañar ',
                '',
                '<strong>The perfectionist programmer:</strong> Cada segmento de codigo es una obra de arte, no le importan las fechas limites ó los presupuestos, ',
                ' - solo que el codigo generado sea hermoso, eficiente, e inmutable, a menos que sea el mismo quien lo cambie ',
                '',
                '<strong>The anti-programming programmer:</strong> Es aquel que siempre evitara reinventar la rueda, ya sea usando librerias de terceros',
                ' - ó usando codigo ya hecho por alguien más, pero siempre se decantara por la solución más simple, ',
                ' - aunque esta no sea eficiente o retrocompatible, pero si sera facil de entender',
                '',
                '<strong>The half-assed programmer:</strong> Este programador es el más odiado por los demás Programadores, ya que solo le importa cumplir con su tarea, ',
                ' - la calidad ó la eficiencia son solo utopias con el; y lo más seguro es que generara problemas a largo plazo, ',
                ' - siempre sera eficaz a cuanto a los tiempos de entrega, aunque esto dañe otras partes del sistema ',
                '',
                '<strong>The theoretical programmer:</strong> Para este programador siempre habra diferentes maneras de resolver algo, y la mayoria del tiempo lo ocupara pensando ',
                ' - como resolverlo de la mejor manera, por lo que la manera que escoja para hacerlo nunca lo satisfacera al 100%, ',
                ' - pero entregara codigo a tiempo y con buena calidad ',
            ]),
        new Item('sesgos',
            [
                '- Son impulsos inherentes a cada ser humano que se basan en sus emociones, conocimientos, experiencias, creencias, etc.. ',
                '- Es la interpretación erronea de la información disponible, y como esto afecta nuestra emisión de juicios ',
                '',
                '<strong>Sesgo de confirmación:</strong> Es la busqueda de sucesos ó interpretaciones para confirmar algo que creemos de manera arraigada ',
                '<strong>Disponibilidad heuristica:</strong> Atajo mental que otorga más valor o credibilidad a la primera información que recordemos ',
                '<strong>Sesgo de anclaje:</strong> Es basarse en la primera información y solo esta fuente para tomar una decisión, sin evaluar otras posibilidades ',
                '<strong>Sesgo de observación selectiva:</strong> Es cuando diriges toda tu atención solamente a lo que te interesa, sin presta atención a los demás datos ',
                '<strong>Sesgo negativo:</strong> Te enfocas en los sucesos negativos en vez de tomar una posición más neutra ',
                '<strong>Resistencia reactiva:</strong> Se enfoca en hacer lo contrario de lo que alguien te dice ó aconseja, de manera selectiva y racional ',
                '<strong>Sesgo de impacto:</strong> Tendencia a sobrestimar un evento o lugar extraordinario, que pasara de lo excepcional a lo comun ',
            ]),
        new Item('prejuicios',
            [
                '- El primer paso es aceptar que todos tenemos segos cognitivos, estemos concientes o no de ellos ',
                '- Para combatirlos se pueden usar diferentes estrategias como: ',
                '',
                '- Evitar el <em>punto ciego</em> todos estamos sesgados, el primer paso para evitarlo es aceptarlo ',
                '- Para evitar la <em>subjetividad</em> es ideal tener un equipo diverso y participativo ',
                '- No usar el <em>muro tecnico</em> para eludir o evitar cuestionamientos incomodos ',
                '- Planificar e investigar para salir de nuestra <em>zona de comfort</em>, nos ayuda a encontrar más soluciones ',
                '- Realiza pruebas, no siempre todo funciona o funciona como deberia ',
                '- Mantener afinidad con una persona no significa que debemos de dejar de prestar atención a los demás ',
                '- No aceptar la innovación puede ser tan malo como siempre estar al filo de la vanguardia ',
            ]),
        new Item('multitarea',
            [
                'Es la capacidad de manejar y realizar multiples tareas al mismo tiempo, este concepto es muy buscado actualmente, aunque tiene pros y contras ',
                '',
                '<strong>Ventajas</strong>',
                ' - Si se logra hacerlo de manera eficiente, se pueden ahorrar recursos y aumentar la productividad ',
                ' - Mejor reacción a las tareas complejas y un mejor manejo de las responsabilidades ',
                '',
                '<strong>Contras</strong>',
                ' - Menor eficacia, al tener un mayor ruido de las acciones por hacer ',
                ' - Decaimiento de la memoria y posibles problemas de estres, además de una peor salud fisica y mental ',
                ' - Mayor riesgo de errores al tener que estar atento a más cosas ',
                ' - Menor calidad del trabajo, además de posibilidades de sufrir de deficit de atención ',
            ]),
        new Item('maxwellCurve',
            [
                '- Más horas de trabajo no es sinonimo de productividad, al contrario, esto es un atentado directo',
                '- Este estudio fue realizado principalmente para Scrum, y demuestra de que se puede ser tan optimo como en cascada, usando menos tiempo ',
                '- Jornadas más cortas no necesariamente significan menos productividad, estas pueden ayudar a: ',
                ' - Atraer nuevos talentos',
                ' - Mejorar el equilibrio entre vida personal y laboral, teniendo trabajadores más felices y colaborativos ',
                ' - Reduce los sentimientos de insatisfacción ',
            ]),
        new Item('dunningKruger',
            [
                '- Es la tendencia natural de personas menos habilidosas a sobreestimar sus conocimientos y habilidades ',
                '- Tambien se da de la manera contraria, en la cual personas calificadas tienden a subestimar sus capacidades ',
                '- Una clara representación de este sesgo cognitivo se da con la siguente frase de: <strong>Charles Darwin</strong> ',
                '- <em>La ignorancia genera confianza más frecuentemente que el conocimiento</em>',
                '',
                '<strong>Ejemplos:</strong>',
                '- Cantantes que se creen muy talentosos sin tener tecnica vocal ',
                '- Pacientes que se automedican ya que creen saber más que sus doctores ',
                '- Personas que se entrenan y aumentan sus niveles de competencias, dandose cuenta de sus falencias ',
            ]),
        new Item('reforzamientoSkinner',
            [
                '- Mediante la manipulación experimental y la observación conductual se esbozo una de las primeras terorias en este ambito ',
                '- Para modificar la conducta humanan o animal se puede utilizar los llamados reforzamientos, ya sean positivos o negativos',
                '- Esto con el fin de eliminar, potenciar o inhibir conductas especificas ',
                '- Los estimulos desencadenan respuestas especificas en las personas, por lo que mediante alguno refuerzo, ',
                ' - se puede ejercer una influencia en dicha reacción o conducta para potenciarse o inhibirse ',
                '',
                '- Algunos tipos de refuerzos pueden ser: ',
                '<strong>- Primarios o intrinsecos:</strong> Conductas que generan satisfacción inmediata, comer por ejemplo ',
                '<strong>- Secundarios:</strong> Son aprendizajes externos y pueden ser materiales como el dinero o sociales como el recnocimiento ',
                '<strong>- Eliminacion de consecuencias:</strong> Son considerados negativos y van de la mano con eliminar actividades desagradables para las personas ',
                '',
                '- Los refuerzos pueden ser continuos o intermitentes dependiendo de la forma mas efectiva para el caso dado ',
            ]),
        new Item('pastaTheory',
            [
                '- Escribir codigo reutilizable y mantenible es lo ideal, pero siempre es más facil decirlo que hacerlo ',
                '- Un desarrollo exitoso no solo requiere que el codigo funcione, si no que sea mantenible y entendible ',
                '- Para que esto sea posible, se deben evitar antipatrones y tener ciertas estrategias y hasta metodologias propias ',
                '',
                '<strong>Codigo espagueti:</strong> Data de los 70 para hacer referencia a un codigo descuidado y altamente acoplado ',
                '<strong>Codigo lasaña:</strong>    No solo se tiene problemas al ser desprolijos, tambien cuando hay un sobrediseño, que aporta complejidad innecesaria ',
                '<strong>Codigo raviolis:</strong>  Demasiadas piezas pequeñas e individuales, haciendo crecer la pila de llamados sin control ',
                '<strong>Codigo pizza:</strong>     Es una arquitectura plana, donde hay divisiones a nivel codigo, pero no se tienen una estructura logica definida ',
                '<strong>Codigo stromboli:</strong> Es un codigo demasiado acoplado, donde cualquier cambio, por inocuo que sea, puede desembocar un caos en otro sitio ',
                '',
                '- Cualquiera sea la metafora, hay que tener en cuenta que incluso las mejores practicas no son eternas, estas pueden cambiar ',
                ' - por lo que nuestro codigo tambien debe cambiar con ellas, y nunca dejar de lado la mantenibilidad como una meta constante '
            ]),
        new Item('thingsThatAreNotTaught',
            [
                '- Aunque son puntos subjetivos provenientes del Autor, estos ejemplifican gran parte de las vivencias que se pueden tener en la ingenieria de software ',
                '',
                '- Rara vez se escriben codigos pequeños o desde cero, ya que hay pocos problemas que puedan ser solucionados de manera facil y rapida ',
                '- No siempre se tiene un lienzo en blanco, en el cual se pueda crear todo una solución, casi siempre habra que mantener o modificar algo que ya existe ',
                '- Es más importante saber el porque de la codificación, que el como, ya que se sabe que caracteristicas debe tener la solución a grandes rasgos ',
                '- La documentación es una gran pieza que no tiene el enfasis suficiente, no solo es escribir codigo funcional, tambies es hacerlos de manera clara ',
                '- Más importante que la solución, es el valor que esta agrega al negocio, no se gana nada con un buen codigo que no resuelve ningun problema ',
                '- Buenas practicas, Diseño, Principios, y demas cosas se realizan para tener productos escalables y que fallen lo menos posible ',
                '- El codigo no es estatico, significa que debera ser mantenido por otros y mantendremos al de otros antes, entre más se facilite esto mejor para todos ',
                '- Trabajar con personas tambien puede significar que puede haber incompetencia, sortearla o afrontarla se vuelve necesario con el tiempo ',
                '- <em>La unica constante es el cambio</em> "Heraclito" todo puede cambiar, ya sea porque no haya requerimientos correctos o se deba ahondar para obtenerlos ',
                '- Todo tiene errores, Asi es más facil de entender que por más usado o testeado que algo sea, jamas estara libre de errores ',
                '- No es un trabajo perfecto, Tendras que hacer cosas que no te agraden, los plazos pueden ser sofocantes, las tecnologias se vuelven obsoletas, etc...',
                '- Se pediran presupuestos, aun cuando no se puedan dar, y aun con las diversas tecnicas que hay, solo la experiencia lo acerca más a la realidad ',
                '- No todo es codificar, tambien hay tiempo malgastado en reuniones, pero no todas las reuniones son inutiles, ',
                ' - la información debe compartirse con los demas involucrados para que las cosas sigan funcionando de manera eficiente ',
            ]),
        new Item('boilingFrog',
            [
                '- Este sindrome se basa en una leyenda urbana, donde una rana es hervida lentamente, con un premisa simple, si la rana se coloca de repente, ',
                ' - esta saltara y se salvara, pero si se coloca en agua tibia y la temperatura va subiendo lentamente, esta no percibira el peligro, ',
                ' - hasta que sea demasiado tarde, debido a que esta ha intentando adaptarse a sus nuevas condiciones, ',
                '- El modelo más adecuado para hablar de este sindrome, es la evolución, donde se evidencia la <em>supervivencia del más apto</em>',
                '- Esto es aplicable a diversas areas, desde los negocios y mercados de inversión, hasta situaciones laborales y personales ',
                '',
                '- Este sindrome tiene una base tecnica, que la teoria del <em>efecto domino</em>, que sugiere que una acción iniciara una cadena ',
                ' - de eventos que culminaran en un evento posterior predecible',
                '- Tambien se puede encontrar una relación directa con el <em>efecto mariposa</em>(matematicas) y la <em>paradoja de sorites</em>(filosofia)',
            ]),
        new Item('boysScouts',
            [
                '- Los Boys Scouts tienen una regla general <em>Dejar siempre el campamento más limpio de lo que se encontro</em>',
                '- Si encuentras algun desorden, limpialo, mejoras intencionalmente el entorno, para el siguiente grupo de personas ',
                '- Esta misma regla aplica para nuestros desarrollos, asi se frenaria o se reduciaria al menos el implacable deterioro de los sistemas ',
                '- Asi no solo estas cuidando de tu propio codigo, tambien de otros equipos, ayudandose entre todos, con grandes beneficios a largo plazo ',
            ]),
        new Item('zeigarnik',
            [
                '- En general la sensación de no haber terminado algo que se empezo nos deja con una sensación desagradable, este es el efecto <em>Zeigarnik</em>',
                '',
                '- A principios del siglo XX la investigadora sovietica <em>Bluma Zeigarnik</em> junto al psicologo <em>Kurt Lewin</em> observaron un comportamiento curioso, ',
                ' - en los meseros, que recordaban mejor los pedidos de las mesas que aun estaban sin servir o sin pagar, que de las que ya estaban completadas',
                '',
                '- La memoria de los meseros parecia dar mayor prioridad a evocar información sobre pedidos inconclusos, ',
                ' - sin importar si habian sucedido antes o despues de otros, que ya habian sido pagados o entregados, estos se perdian con mayor facilidad',
                '',
                '- Esto desemboco en un estudio, donde un grupo de voluntarios debia resolver diferentes tipos de problemas, ',
                ' - el experimento se centro en el efecto que tenia la interrupción de las tareas y no en su rendimiento o su finalización',
                '',
                '- Despues se comprobo que estas personas recordaban mejor los datos acerca de las pruebas, que habian sido interrumpidas y no de las finalizadas',
                '',
                '- Además de este y otros estudios, tambien tuvieron influencia en la <strong>Teoria de Gestalt</strong>',
                '',
                '- Esto es importante ya que afecta a cualquier estudio relacionado con la memoria, además de que se extiende a cualquier proceso de aprendizaje ',
            ]),
        new Item(Keys.CONOCIMIENTOS_EMPIRICOS_PAIR_PROGRAMMING,
            [
                '- En la actualidad con los modelos de lenguaje y las aplicaciones para generar codigo han estado relativamente disponibles por un tiempo ',
                '- Los desarrolladores han descubierto sus fortalezas y debilidades, y han visto como ofrecer más rapido valor a los clientes ',
                '- Pero esta generación de codigo no es infalible, siempre necesitara revisión y si es demasiado exhaustiva, reducira la productividad ',
                '- Sin embargo existe un modelo de programación que integra la revisión continua del codigo, la programación por pares ',
                '- Esto produciria un mejor codigo, de lo que hubiera sido producido individualmente; de esta manera la IA se puede convertir en la pareja ideal ',
                '',
                '- En el pair programing generalmente siempre existe el <em>conductor</em> quien realmente escribe el codigo y el otro es el <em>navegante</em> ',
                ' - que comprueba el trabajo realizado conforme se va haciendo y vigila el panorama en general',
                '- Diversos estudios han demostrado que contrario a las objeciones y el pensamiento de que seria el doble de costosa, esta manera de trabajar, ',
                ' - solo añade un 15% más de tiempo de desarrollo y en cambio retribuye con un 15% menos de errores y defectos',
                '- Esto en parte a que el proceso de revisión se hace durante y no despues, asi compartir el conocimiento y posibles correciones eran más eficientes ',
                '- Este ejercicio se ha llegado a comparar con 2 pilotos en una cabina de avión, donde ambos son capaces de tomar el control en cualquier momento ',
                '- Por lo que el nivel de los programadores debe ser similar, de lo contrario podria tornarse en una sesión de mentoria ó de entrenamiento',
                '',
                '- El principal problema de la IA y su codigo generado, es cuando toma la posición de conductor, con un navegante incapaz',
                '- Generando codigo que es directamente copiado y pegado, ya sea por mediocridad, desconocimiento o pereza',
                '- Esta falta de control de calidad suele repercutir en la necesidad de refactorizar y hacer correcciones en el plazo cercano ',
                '- La IA es sumamente eficiente en la generación de codigo, pero esto no puede realizarse sin supervisión, la calidad proviene del desarrollador ',
                '- Aca más que nunca es importante la experiencia, la aplicación de patrones, principios, arquitecturas, etc..',
                '',
                '- <em>El trabajo de la IA es ser rápida. Tu trabajo es ser bueno</em>, la programación en pareja es un multiplicador de fuerza, ',
                ' - mientras que uno se centra en la sintaxis y la implementación, el otro cuida el panorama en general, comprende y revisa el codigo generado ',
            ]),
        new Item(Keys.CONOCIMIENTOS_EMPIRICOS_STAGES_COMPETENCE_MODEL,
            [
                '- Este modelo diseñado por <em>Noel Burch</em> identifica y gerarquiza 4 etapas por las que pasan los individuos cuando aprenden una nueva habilidad ó conocimiento ',
                '',
                '<strong>Incompetencia inconsciente:</strong> <em>1Era Etapa</em>, Las personas no son conscientes de su falta de conocimiento y/o habilidades ',
                '- No saben lo que no saben, y posiblemente no vean la necesidad de mejorar, su intuición suele ser erronea ',
                '',
                '<strong>Incompetencia consciente:</strong> <em>2da Etapa</em>, Las personas se dan cuenta de su falta de conocimiento y pueden sentirse frustradas o abrumadas ',
                '- Son conscientes de la cantidad de aprendizaje que les falta para mejorar, sus analisis suelen ser erroneos ',
                '',
                '<strong>Competencia consciente:</strong> <em>3ra Etapa</em>, Las personas han desarrollado los conocimientos y habilidades necesarios para desempeñarse eficazmente ',
                '- Es posible que necesite practicar de manera regular para mantener un buen desempeño, sus analisis suelen ser correctos ',
                '',
                '<strong>Competencia inconsciente:</strong> <em>4ta Etapa</em>, Las personas han desarrollado un nivel de competencia tan alto que logran hacer tareas sin pensarlo ',
                '- Han internalizado el conocimiento y la habilidad hasta el punto de que se ha convertido en algo natural, su intuición suele ser correcta ',
            ]),
        new Item(Keys.CONOCIMIENTOS_EMPIRICOS_EXPIERENCE_LESSONS,
            [
                '- Las soluciones inteligentes no siempre son buena opción, lo ideal siempre sera hacer las cosas los más simple posibles ',
                '- Dar valor, retener algo hasta que este totalmente perfeccionado, esta frenando la creación de valor para la empresa ',
                '- Las relaciones son importantes si se quiere progresar, no te limites a hacer solamente tu trabajo, se servicial con todos los integrantes de tu empresa ',
                '- Nunca seas invisible visualiza tus capacidades frente a la dirección y que no solamente tus compañeros lo sepan ',
                '- Construye una red de contactos que se expanda más alla de tu empresa actual, nunca se sabe cuando estas conexiones pueden ser utiles ',
                '- Este dispuesto a realizar tareas que desconozca o que requieran de esfuerzo adicional, esto siempre sera bien visto por los jefes ',
                '- Persigue la aventura e interesate por nuevas tecnologias, no te enfoques solamente en crecer salarialmente ',
                '- Desafia las tendencias naturales, no siempre se tiene que ser competitivo, pero hay momentos donde es necesario serlo ',
                '- Un buen trabajo regularmente conlleva tiempo, más del deseado, ser perfeccionista generalmente solo trae un mayor uso de recursos ',
                '- EL software que se esta creando, algun dia sera descontinuado o dejara de funcionar, por eso cree incrementos pequeños y entregables ',
            ])
    ];

export const NUBE =
    [
        new Item('nube',
            [
                '<strong>- Nube Publica:</strong> Los recursos son del proveedor y estos son compartidos con otros usuarios, sin necesidad alguna de mantenimiento ',
                '<strong>- Nube Privada:</strong> Los recursos son propios y no estan compartidos con terceros, un entorno más escalable y con un gran control ',
                '<strong>- Nube Hibrida:</strong> Los recursos son propios pero el espacio puede ser compartido con otros usuarios, marcando fronteras claras para su acceso ',
            ]),
        new Item('iaas-paas-saas',
            [
                '- Estos 3 modelos de servicios actualmente ayudan a las empresas a ahorrar costos, en software y hardware, además de multiples ventajas ',
                '',
                '<strong>IaaS - Infraestructura como servicio:</strong> Aca todo la infraestructura necesaria se contrata con un tercero, a cambio de una cuota o un alquiler, ',
                ' - esto es muy conveniente ya que se compra lo que se necesita; algunos de los más conocidos son Amazon Web Services Y Microsoft Azure ',
                '',
                '<strong>PasS - Plataforma como servicio:</strong> En este caso solo se provee la infraestructura, y el cliente solo se preocupa de su aplicación, ',
                ' - delegando la administración a un tercero, algunos de los más conocidos son Google App Engine Y Bungee Connect ',
                '',
                '<strong>SaaS - Software como Servicio:</strong> se aloja el software y la infraestructura, el usuario solo se preocupa por usarlo y sus necesidades ',
                ' - algunos de los más conocidos son Microsoft Office 365 y WordPress ',
            ]),
        new Item('caas-daas-faas',
            [
                '- En la actualidad la computación en la nube, ha revolucionado la forma en que operan las empresas, ofreciendo soluciones escalables y flexibles ',
                '- De manera rentable, abarcando multiples necesidades, convirtiendose en componentes que impulsan la innovación y la eficiencia en la nube ',
                '',
                '<strong>CaaS - Contenedores como Servicio:</strong> Los contenedores permiten empaquetar aplicaciones de forma estandarizada y de manera liviana, ',
                ' - por lo que tambien existen plataformas para escalarlos y administrarlos de manera facil ',
                '',
                '<strong>FaaS - Función como Servicio:</strong> Ejecute fragmentos de codigo sin administrar servidores ni contenedores, en este modelo se pueden escribir ',
                ' - e implementar funciones pequeñas con un solo proposito, sin preocuparse por temas como infraestructura o despliegues complicados ',
                '',
                '<strong>DaaS - Escritorio como Servicio:</strong> Proporciona a los usuarios, una infraestructura de escritorio virtual, alojada en la nube, ',
                ' - y es accesible desde cualquier lugar y cualquier dispositivo con conexión a internet ',
            ]),
        new Item('factores12',
            [
                '<strong>Codigo base:</strong> Todo el codigo debe ser controlado mediante un sistema de versiones, ',
                ' - y este no deber ser compartido entre proyectos, de ser el caso esta seria una libreria en comun ',
                '',
                '<strong>Dependencias:</strong> Todas las dependencias a usar siempre deben estar declaradas y aisladas del entorno de ejecución ',
                ' - la aplicación no puede depender de que estas esten instaladas en el host, ya el modo de su gestión es de libre albedrio ',
                '',
                '<strong>Configuraciones:</strong> Si existen diferentes despliegues y entornos de ejecución, estos deben tener sus propias configuraciones ',
                ' - esto se puede lograr mediantes variables de entorno y el manejo de distintos archivos de configuración ',
                '',
                '<strong>Backing services:</strong> Todo sistema que consuma la aplicación (bases de datos, mensajeria, colas, cache, etc.. ), ',
                ' - deberia poder conectarse y cambiarse por medio de simples configuraciones, sin modificar el codigo base ',
                '',
                '<strong>Separacion de etapas:</strong> Cada etapa deberia ser manejada de manera diferente, ya que en esencia lo son ',
                '<strong> - Construccion:</strong> Convierte el codigo base en un ejecutable listo para funcionar ',
                '<strong> - Distribución:</strong> Se toma la construcción previa y se crea una o n instancias de acuerdo a una configuración ',
                '<strong> - Ejecución   :</strong> Es la aplicación ya funcional en el entorno previamente preparado ',
                '',
                '<strong>Procesos:</strong> Para que la aplicación se ejecute de manera adecuada, esta no deberia contemplar guardar estados ',
                ' - esto significa que todos los procesos deben ser individuales e independientes entre si ',
                '',
                '<strong>Puertos:</strong> Estas aplicaciones son autocontenidas y se comunican mediante puertos HTTP ',
                '',
                '<strong>Concurrencia:</strong> Toda aplicación deberia ser su propia encargada de autogestionarse su crecimiento, ',
                ' - de acuerdo a la demanda y a la disponibilidad de recursos, ya sean hilos, procesos, uso de memoria, asincronia, etc.. ',
                '',
                '<strong>Desechabilidad:</strong> Todos los procesos de las aplicaciones deberian ser desechable, y tener un tiempo de arranque minimo, ',
                ' - esto con el proposito de iniciar cuando sean requeridos, realizar su función, y devolver los recursos consumidos al finalizar ',
                '',
                '<strong>Igualdad de ambientes:</strong> Desarrollo y producción deben ser lo más parecidos posibles ',
                ' - tener diferencias entre estos ambientes puede traer errores inesperados, al intercambiar entre tecnologias o herramientas ',
                '',
                '<strong>Historiales:</strong> Además de ser utiles a la hora de depurar, estos permiten tener mediciones y metricas de la aplicación ',
                ' - se pueden observar en tiempo real, o guardarse en ficheros que seran consultados despues ',
                '',
                '<strong>Administración de procesos:</strong> Estas tareas deberian tener los mismos comandos y secuencias de realización, ',
                ' - independientemente del ambiente o sus configuraciones',
            ]),
        new Item('migracionesNube',
            [
                '- Toda migración hacia la nube, generalmente recoge 6 alternativas ',
                '<strong>Realojar:</strong> Consiste en mover la aplicacion tal y como existia originalmente, una medida apresurada que no siempre funciona ',
                '<strong>Replataformar:</strong> Consiste en modificar la estructura subyacente, sin modificar la arquitectura central de aplicación ',
                '<strong>Readquirir:</strong> Consta de una migración de una nube o servicio a otro, de acuerdo a las necesidades del negocio ',
                '<strong>Refactorizar/Rediseñar:</strong> No solo es un movimiento de ambiente, tambien son mejoras de escalabilidad ó rendimiento ',
                '<strong>Retirar:</strong> A veces hay recursos que estan obsoletos o ya no se necesitan, por lo que se eliminan ó se desactivan ',
                '<strong>Retener:</strong> Son ocasiones donde es necesario soportar tecnologias legacy que no son compatibles con la nube',
            ]),
        new Item(Keys.NUBE_CAP_TEOREMA,
            [
                '- Este teorema sostiene que no es posible que un sistema distribuido cumpla o garantice más de 2/3 de las siguientes propiedades ',
                '',
                '<strong>- Consistency  (Coherencia):</strong> Todos los clientes ven los mismos datos de manera simultanea ',
                '<strong>- Availability (disponibilidad):</strong> Todos los clientes disponen de acceso de lectura y escritura en cualquier momento ',
                '<strong>- Partitions (tolerancia a la particion):</strong> El sistema sigue funcionando como un todo, despues de que las partes fallen o se incomuniquen ',
                '',
                '<strong>- Sistema CP:</strong> Coherencia y tolerancia a la particion (sistemas de DNS)',
                '<strong>- Sistena AP:</strong> Disponibilidad y tolerancia a la partición (BD relacionales) ',
                '<strong>- Sistema CA:</strong> Coherencia y disponibilidad (aplicaciones financieras)',
            ]),
        new Item('dns',
            [
                '- Es la manera como accedemos a una pagina web por medio de nombres(dominios) y no de direcciones IP ',
                '- Este proceso de traducción de direcciones es realizado por estos servidores que estan esparcidos por el mundo ',
                '- Al estar esparcidos por el mundo esto permite una administración descentralizada, pero sigue estando interconectada ',
                '- Aunque este metodo es normal hoy en dia, tambien se puede acceder a los sitios directamente por medio de una IP obteniendo el dominio del sitio ',
                '- Si un servidor no encuentra la información solicitada, este la restransmite a otros en la red hasta dar con un resultado ',
            ]),
        new Item(Keys.NUBE_FALACIES_DYSTRIBUTED_SYSTEMS,
            [
                '- Que un sistema sea Distribuido no solo tiene beneficios, tambien enfrenta nuevos problemas, que son iherentes a los microservicios y a su separación ',
                '- Suelen haber falacias a nivel generalizado, que no siempre se contemplan a la hora de solucionar problemas, pero que siempre estan presentes ',
                '',
                '<strong>La red es confiable:</strong> Para construir un programa confiable, se debe aceptar el hecho de que toda comunicación puede fallar, ',
                ' - y se debe tener una politica para recuperarse, como realizar reintentos o el patron <em>store and forward</em> para poder recuperarse ',
                '',
                '<strong>Sin Latencia:</strong> Directamente relacionada a las distancias fisicas, siempre esta presente en toda comunicación y nunca es <strong>0</strong>',
                '',
                '<strong>Ancho de banda infinito:</strong> Cada viaje es costoso, no solo por la latencia, sino lo que se ha de enviar o recibir, ',
                ' - el tamaño de esta comunicación puede crecer hasta el punto que sature la red y provoque caidas en el sistema ',
                '',
                '<strong>La red es Segura:</strong> Asumir esto como confiar en las personas, puede ser un error critico, por lo que un buen analisis, ',
                ' - correción de errores y un diseño pensado para ser seguro no deberian faltar ',
                '',
                '<strong>La topologia no cambia:</strong> La estructura de la red, no siempre sera la misma, ¿ nuestro sistema esta preparado, ',
                ' - si un sistema critico dejara de funcionar ?, tecnologias como Docker y Kubernetes casi nos hacen olvidar que esto no es fiable al 100%',
                '',
                '<strong>Administración:</strong> No todo se puede controlar todo el tiempo, eventualmente el sistema crecera y evolucionara, ',
                ' - por lo que la dependencia con otros sistemas seran inevitables, por lo que el monitoreo y la observabilidad deben estar al orden del dia ',
                '',
                '<strong>El costo del Transporte:</strong> Enviar datos entre sistemas es un costo omnipresente, pero esto no significa que no se pueda ',
                ' - optimizar o migrar a protocolos de comunicación más ligeros ',
                '',
                '<strong>La red es Homogenea:</strong> La interoperabilidad es algo fundamental en la actualidad, pero no todo es tan ordenado y funcional, ',
                ' - y como no todos los sistemas son iguales, se deben crear soluciones genericas que puedan ser adaptadas para nuevos sistemas ',
                '',
                '- No existe ninguna formula magica para solucionar estos problemas, lo maximo a lo que se llegara seran soluciones que solventen las consecuencias ',
            ]),
        new Item('loadBalancing',
            [
                '- Es un metodo para distribuir el trafico de red de manera equitativa, en un conjunto de recursos que admite una aplicación ',
                '- Las aplicaciones modernas deben procesar millones de peticiones de miles de usuario, de manera simultanea y de manera rapida y fiable ',
                '',
                '<strong>Beneficios:</strong>',
                '- Aumentan la tolerancia a fallos al detectar automaticamente fallas en el servidor y redirigir este trafico a servidores disponibles ',
                '- Se pueden ejecutar mantenimientos y/o actualizaciones con un minimo o sin tiempo de inactividad de la aplicación ',
                '- Recuperación de desastres al apuntar a sitios con copias de seguridad ',
                '- Evitar cuellos de botella en alguno de los servidores ',
                '- Predecir el trafico para que el escalamiento de la aplicación sea más eficiente ',
                '- Monitoreo del trafico y bloqueo de contenido malicioso',
                '- Enrutamiento del trafico a traves de firewalls de red para una mayor seguridad ',
                '- Reducción de la latencia al poder redirigir a sitios cercanos geograficamente ',
                '',
                '<strong>Algoritmos:</strong> Conjunto de reglas para determinar el mejor servidor para cada una de las solicitudes y se dividen en 2 categorias ',
                '',
                '<strong>Carga estatica:</strong> siguen reglas fijas y no tienen en cuenta el estado de los servidores actual ',
                '<strong>- Metodo turnorotativo:</strong> Cada servidor tiene una IP asignada en su grupo(granja) y los servidores se van rotando por turnos ',
                '<strong>- Metodo de turno rotativo ponderado:</strong> Asigna diferentes pesos a cada servidor en función de su prioridad/capacidad, a mayor ponderación mayor carga ',
                '<strong>- Metodo Hash de IP:</strong> Este lleva algun calculo matematico para convertir la IP del cliente en un <em>hash</em> con el que se le asigna algun servidor ',
                '',
                '<strong>Carga Dinamica:</strong> Examinan el estado actual de los servidores antes de distribuir el trafico ',
                '<strong>- Metodo de Conexión minima:</strong>',
                ' - Una conexión es un canal abierto entre un cliente y un servidor, estas conexiones se comprueban para saber cuales tienen la mayor cantidad activa,',
                ' - y enviar a los servidores con menos conexiones, este metodo supone que todas las conexiones requieren la misma potencia de procesamiento ',
                '<strong>- Metodo de respuesta minimo:</strong>',
                ' - Se toma el tiempo de respuesta total del servidor, lo cual se combina con la cantidad de conexiones activas, para determinar la mejor opción, ',
                ' - con el fin de garantizar un servicio más rapido para todos los usuarios',
                '<strong>- Metodo basado en recursos:</strong>',
                ' - Cada servidor cuenta con un software especializado llamado <em>agente</em> para calcular el uso de recursos y estimar los recursos libres, ',
                ' - asi se se comprueban si son suficientes para distribuir el trafico a ese servidor ',
                '',
                '- Tambien se pueden clasificar por tipo de tecnologia, ya sean si realizan la acción mediante <em>hardware</em> o <em>software</em>',
                '- Ademas de la clasificación por tipo de carga, donde se clasifican por <em>aplicación</em>, de <em>red</em>, de <em>servidor global</em> y <em>DNS</em>',
            ]),
        new Item('latencia',
            [
                '- Los sistemas con una gran latencia y que estan orientados al uso de los usuarios, el tiempo perdido son ganancias perdidas',
                '- Algunas Estrategias para reducir la latencia: ',
                '',
                '<strong>Indices:</strong> Crear indices, optimizar y reducir las consultas a las BD',
                '',
                '<strong>Cache:</strong> Almacenar los datos que son frecuentemente consultados, disminuye tiempos a la apliaccion y reduce las consultas a las BD',
                '',
                '<strong>Load Balancer:</strong> La distribución apropiada de las cargas de trabajo, hara que los tiempos sean más uniformes',
                '',
                '<strong>CDN:</strong> Cachear el contenido estatico cerca de los usuarios que lo usen, reduciento distancias a nivel geografico',
                '',
                '<strong>Procesos Asyncronos:</strong> Ejecutar peticiones en segundo plano y no bloquear las peticiones cuando sean muy demoradas',
                '',
                '<strong>Comprensión:</strong> Comprimir la información antes de enviarse mediante la red',
            ]),
        new Item(Keys.NUBE_OBSERVABILIDAD,
            [
                '- Es la capacidad de comprender lo que esta pasando en un sistema complejo, en tiempo real si es posible, los principios fundamentales son: ',
                '',
                '<strong>Participación:</strong> Toda información que no este curada es inutil y solo consume recursos, esto no debe afectar la participación, ',
                ' - ya que cualquiera puede enviar datos para ser analizados, sin importar la diversidad de las fuentes',
                '',
                '<strong>Democratización:</strong> No solo aquellas personas que tengan conocimiento del sistema deberian saber que esta pasando, ',
                ' - toda la organización puede beneficiarse de la plataforma y obtener resultados utiles para diferentes areas de negocio ',
                '',
                '<strong>Eficiencia:</strong> Es la caracteristica más deseable, tanto que si la velocidad se degrada ya no tendria sentido su uso, ',
                ' - se debe minimizar el tiempo entre que suceda algun evento importante y su notificación, sin importar el reto del volumen de datos ',
                '',
                '- Esta observabilidad en el software se debe a 3 areas principales, y aunque se puedan solapar, tambien pueden existir de manera independiente',
                '',
                '<strong>Metricas:</strong> Son los atomos logicos e información medible, que permiten la generación de contadores, graficas y estadisticas, ',
                ' - ya sean en intervalos de tiempo ó incluso en tiempo real, pero carecen de detalles, para lo cual estan los <em>logs</em>',
                '',
                '<strong>Logging:</strong> Se encarga de eventos discretos que suelen ser enriquecidos con un contexto, que añade información valiosa',
                ' - al evento, permitiendo conocer que, cuando y porque ha ocurrido, debido al enorme volumen de datos y al ruido que esto puede generar, ',
                ' - se debe tener una politica clara de cuando y como usar los logs',
                '',
                '<strong>Tracing:</strong> Esta definición esta estrechamente relacionada con la definición de <em>request</em> que es considerada una transacción en nuestro sistema,',
                ' - que tiene un principio y fin (<em>lifecycle</em>), en los sistemas modernos es posible realizar este seguimiento ',
                ' - a todo lo largo de su proceso, inclusive si pasa a travez de diferentes sistemas, cada salto entre sistema es un <em>span</em>',
            ]),
        new Item(Keys.NUBE_TWO_PHASE_COMMIT,
            [
                '- En la computación distribuida, uno de los problemas más importantes es lograr un concenso entre multiples nodos, lo cual no es facil de lograr ',
                '- La confirmación de 2 fases, tambien conocida como <strong>2PC</strong> es un algoritmo para lograr la confirmación atomica de las transacciones ',
                '- Sin importar la cantidad de nodos que participen, ya que todos deben confirmar o negar al unisono, esto se logra mediante 2 fases',
                '',
                '<strong>- Fase de preparación:</strong> Preguntar a los nodos involucrados, si pueden confirmar la transacción propuesta ',
                '<strong>- Fase de confirmación:</strong> Ordenar a todos los nodos que confirmen o cancelen la transacción propuesta ',
                '',
                '- Si durante la preparación el nodo acepta la transacción propuesta debe confirmar la transacción si el nodo coordinador envia la solicitud ',
                '- Independientemente ante cualquier escenario de falla para respetar esta promesa, los datos se deben persistir para que puedan ser recuperados ',
                '- Un caso de uso comun es cuando se tiene el requisito estricto de tener una vista consistente de los datos en todo momento ',
                '',
                '- Un cuello de botella suele ser que debido a la necesidad de bloqueos, si un coordinador muere, todos los nodos deben esperar la decisión final ',
                '- Hasta que el coordinador se recupere, o la transacción sea abortada, se deben prohibir las operaciones sobre los datos involucrados ',
                '- En caso de fallo extremo y que el coordinador no pueda tomar una decisión, los nodos no estan en potestad para hacerlo tampoco, ',
                ' - lo que hace estrictamente necesario que se tome una decisión manualmente en cada nodo participante ',
            ]),
        new Item(Keys.NUBE_DISPONIBILITY,
            [
                '- La disponibilidad es la medida para determinar que un recurso es accesible para los usuarios, durante un periodo de tiempo determinado ',
                '- Las migraciones a la nube, ha obligado que los proveedores de servicios ofrezcan disponibilidades cada vez más altas ',
                '- Una alta disponibilidad no es sinonimo de completa disponibilidad, ningun servicio puede ofrecer el 100% ya que se deben tener en cuenta factores como: ',
                ' - Mantenimiento                                     - Desastres naturales',
                ' - Actualizaciones                                   - Casos fortuitos',
                '',
                '- Esto se deja explicito en los acuerdos a nivel de servicios <strong>SLA</strong> con una disponibilidad de 99.999% que es lo más parecido ',
                '- Este nivel de disponibilidad no es fortuito, requiere de inversiones y mantenimientos significativos, además de acciones como: ',
                ' - Una arquitectura madura que permita CD/CI         - Planes de recuperación y copias de seguridad ',
                ' - Automatización de tareas                          - Sistemas distribuidos y manejo de redundancias',
                ' - Supervisión y solución de problemas constante     - Actualizaciones y mantenimientos periodicos ',
                '',
                '---------------------------------------------------------',
                '&brvbar;            <strong>Nivel</strong>              &brvbar;    <strong>%</strong>     &brvbar;   <strong>Tiempo</strong>   &brvbar;',
                '---------------------------------------------------------',
                '&brvbar; Servidor convencional         &brvbar; 99%      &brvbar; 87 H 40 m  &brvbar;',
                '&brvbar; Servidor publico cloud        &brvbar; 99.9%    &brvbar;  8 H 46 m  &brvbar;',
                '&brvbar; Grupo de alta disponibilidad  &brvbar; 99.99%   &brvbar;  0 H 56 m  &brvbar;',
                '&brvbar; Disponibilidad continua       &brvbar; 99.999%  &brvbar;  5 m 16 s  &brvbar;',
            ]),
        new Item(Keys.NUBE_PACELC,
            [
                '- Los sistemas distribuidos tienen diversos puntos de fallos, como los servidores, la red, perdida de datos, etc.. ',
                '- Anteriormente el <strong>Teorema CAP</strong> establece que es imposible que un sistema distribuido proporcione simultaneamente: <strong>C</strong> Coherencia',
                '- Sin embargo, un sistema <strong>CA</strong> que no tolera Particiones, no es coherente                                           <strong>A</strong> Disponibilidad',
                '- Debido a esto, los <strong>DBMS</strong>, tuvieron que escoger entre Consistencia(<strong>ACID</strong>) y Disponibilidad(<strong>BASE</strong>)                   <strong>P</strong> Tolerancia a particiones ',
                '',
                '- Este teorema cubre aspectos faltante de CAP y establece que un sistema que replique datos: ',
                ' - Si hay una Partición(<strong>P</strong>) un sistema distribuido puede equilibrar entre Disponibilidad(<strong>A</strong>) y Consistencia(<strong>C</strong>) ',
                ' - Si no hay(<strong>E</strong>) Particiónes, el sistema se equilibrara entre Latencia(<strong>L</strong>) y Consistencia(<strong>C</strong>)',
            ])
    ];

export const APIS =
    [
        new Item('api',
            [
                '- Significa <em>Interfaz de Programación de Aplicaciones</em>',
                '- Conjunto de reglas y especificaciones por el cual se puede comunicar diferentes componentes de software',
                '- Permiten compartir reutilizar funciones ya existentes, evitando reiventar la rueda',
                '- Suelen ser la entrada principal a los sistemas distribuidos y explicarse en terminos de cliente-servidor',
                '- Estas pueden funcionar de 4 maneras diferentes, segun el momento y motivo de creación',
                '',
                '<strong>SOAP:</strong> Utiliza el protocolo simple de acceso a objetos, en formato <em>XML</em>, poco flexible pero bastante popular en el pasado ',
                '<strong>RPC:</strong> Se denominan llamadas a procedimientos remotos, donde el cliente completa una función en el servidor y este devuelve el resultado',
                '<strong>WebSocket:</strong> Funcionan de manera bidireccional, por lo que suelen ser más eficientes que los mecanismos de petición-respuesta ',
                '<strong>REST:</strong> Son flexibles ya que generalmente usan el formato <em>JSON</em>, aca el cliente envia la solicitud, se procesa y devuelve una respuesta',
                '',
                '',
            ]),
        new Item('tiposApi',
            [
                '<strong>- Locales:</strong> Ofrecen servicios del SO o como middleware entre apliaciones, como el acceso a una BD ',
                '<strong>- Web:</strong> Ampliamente utilizadas para acceder a recursos expuestos mediantes el protocolo HTTP mediante una URL',
                ' - estas generalmente son de tipo REST pero tambien existen con el protocolo SOAP ',
                '<strong>- Programación:</strong> Se basan en llamar procedimientos remotos y que aparenten ser locales, como las apis de la serie WS de Microsoft',
            ]),
        new Item('restfull',
            [
                '- Rest Es un estilo de arquitectura para sistemas distribuidos, que usa el protocolo HTTP ',
                '',
                'Caracteristicas',
                '<strong>- Arquitectura cliente-servidor:</strong> Comunicación continua entre estos 2 agentes ',
                '<strong>- Stateless:</strong> No se deberia almacenar los datos del cliente para mantener el estado de este ',
                '<strong>- Cacheable:</strong> Algunas peticiones pueden ser cacheables para aumentar el rendimiento y la escabilidad ',
                '<strong>- Interfaz uniforme:</strong> Independencia del servidor, ya que siempre se garantizara la misma respuesta ',
                '<strong>- Mensajes:</strong> Todos los mensajes deben ser coherentes con la función que representan, halla un error ó no ',
                '<strong>- HATEOAS:</strong> Es incluir todo lo necesario en la respuesta para que el usuario pueda seguir haciendo peticiones ',
                '',
                'Web Restfull',
                '<strong>- Uri del recurso:</strong> Cada metodo deberia contar con una url unica para identificar la función ',
                '<strong>- Representación de recurso:</strong> Se puede añadir a la cabecera de la petición, definiendo el formato que se procesara ',
                '<strong>- Operaciones:</strong> Usar los metodos HTTP de manera idonea (GET, POST, PUT DELETE) ',
                '<strong>- Hipervinculos:</strong> Se pueden incluir vinculos para más acciones con el objeto, dentro de la respuesta ',
            ]),
        new Item('caracteristicas',
            [
                '- Para crear APIs 100% restfull, se consideran que deben seguir ciertos estandares y cumplir con buenas practicas ',
                '',
                '<strong>Versionamiento:</strong> Las apis tambien cambian y esto no debe evitar que las versiones anteriores dejen de funcionar ',
                '<strong>Autenticación:</strong> Esto garantiza un minimo de seguridad e integración en las operaciones a realizar, para esto se puede usar OAuth2 o JWT',
                '<strong>Paginación:</strong> Mostrar todos los resultados es inviable en varios terminos, por lo que deberia haber una forma de segmentar la información ',
                '<strong>Documentación:</strong> Cuando algo cambia la documentación tambien debe hacerlo, de lo contrario puede haber problemas e inconsistencias ',
                '<strong>Respuestas:</strong> Los codigos deben reflejar lo que haya sucedido, es una mala practica siempre devolver <strong>200</strong>, en especial si han sucedido errores ',
            ]),
        new Item('madurezDeUnaApi',
            [
                '- Entre más niveles se implementen, más util y completa se puede considerar una API',
                '',
                '<strong>Nivel 0:</strong> Se puede considerar simplemente como una conexión http con una sola URI y un solo metodo ',
                '<strong>Nivel 1:</strong> Usa varias URIs y un solo metodo http por cada una, esto ayuda a la separación de recursos ',
                '<strong>Nivel 2:</strong> Ademas de usar varias URIs, tambien se usan más metodos y tipos para cada URI, a su vez este expone más recursos ',
                '<strong>Nivel 3:</strong> Este hace uso de todo lo anterior además de incluir HATEOAS, esto facilita su navegación al punto de ser más intuitivo ',
            ]),
        new Item('httpCodes',
            [
                '<strong>Respuestas informativas(1xx):</strong> Son poco usadas y se enfocan más a aspectos de la red y la comunicación ',
                '- 100 Continue              Repuesta provisional, indica que todo esta bien y que el cliente debe continuar o ignorar la solicitud',
                '- 102 Processing            El servidor ha recibido la solicitud y aun se encuentra procesandola, sin respuesta disponible ',
                '',
                '<strong>Respuestas satisfactorias(2xx):</strong> Se usan para denotar el exito de una operación ',
                '- 200 OK                    Respuesta estandar para peticiones correctas ',
                '- 201 Created               Solicitud aceptada y se ha creado un nuevo recurso ',
                '- 204 No Content            Solicitud completada con exito, la respuesta no tiene contenido ',
                '',
                '<strong>Redirecciones(3xx):</strong> Son cuando es necesario tomar acciones extras para efectuar la acción ',
                '- 300 Multiple Choices      Multiples opciones con varias respuestas ',
                '- 301 Moved Permanently     La URI solicitada ha sido movida a otra URI ',
                '- 304 Not Modified          Para propositos de cache, indicando que no ha sido modificado ',
                '',
                '<strong>Errores del cliente(4xx):</strong> La solicitud es incorrecta ya sea por sintaxis o información errada ',
                '- 400 Bad request           La solicitud no puede ser interpretada por una sintaxis invalida ',
                '- 401 Unauthorized          La autenticacion del usuario es posible pero incorrecta ',
                '- 403 Forbidden             No se cuenta con los permisos necesarios para el contenido ',
                '- 404 Not Found             El contenido solicitado no pudo ser encontrado ',
                '',
                '<strong>Errores del servidor(5xx):</strong> La solicitud es valida pero no pudo ser ejecutada debido a errores del servidor ',
                '- 500 Internal Server Error El servidor ha tenido un error que no sabe manejar ',
                '- 501 Not Implemented       El metodo solicitado no es soportado por el servidor ',
                '- 502 Bad Gateway           Al obtener una puerta de enlace se obtiene una respuesta invalida ',
                '- 503 Service unavailable   Servicio no disponible ',
            ]),
        new Item('HATEOAS',
            [
                '- Los servicios REST son más simples, por eso son una gran opción sobre SOAP, pero tambien se puede abusar de esto ',
                '- <strong>Hypermedia As The Engine Of Application State</strong> (hipermedia como motor del estado de la aplicación)',
                '- Basicamente se busca poder navegar y descubir sus recursos solo con las respuestas, sin depender exclusivamente de la documentación ',
                '- Para que esto se cumpla, parte de la respuesta deben ser hipervinculos a sus recursos asociados ',
                '- Esto con el fin de mantener compatibilidad con versiones más antiguas, y evitar problemas a sus consumidores ',
            ]),
        new Item('apiStandars',
            [
                '- Tener estandares para una API, es una manera simple de mejorar la coherencia, la estabilidad ',
                ' - la generalidad y su usabilidad, ya sean estandares de la comunidad, comerciales o propios ',
                '- Aunque equilibrar esto con con el desarrollo no siempre van en la misma linea, siendo inflexibles algunas veces ',
                '',
                '- Las palabras <strong>Must</strong>(debe), <strong>Should</strong>(deberia), <strong>May</strong>(puede) deberian ser usadas segun la definición RFC 2119',
                '',
                '<strong>Principios y terminos a conocer</strong>                       ',
                ' - REST                      - REST Model               - Tipos de API:  ',
                ' - DDD                       - Eventos y sucesos         - Negocio       ',
                ' - Madurez del API                                       - Mediadora     ',
                '',
                '<strong>Manejo del ciclo de vida</strong>   5 Estados & 3 Etapas principales',
                ' - Diseño    ->  Testing      ->  Publicación   ->  Deprecación   -> Retiro   ',
                ' - Validar       Tests            Soporte                                     ',
                ' - Modelo        Evaluación       Observación                                 ',
                '',
                '<strong> - Manejo de versiones</strong> Ya sea semantico, por estabilidad, o un enfoque más practico y despreocupado, en la misma url',
                '<strong> - Implementar (IAM)</strong> <em>Identity Access Management</em> controlando que recursos son protegidos y el como ',
                '<strong> - Documentación y Herramientas de diseño</strong> La especificación de OpenApi (OAS), define un estandar agnostico para las APIs REST ',
                '<strong> - Integrar DevOps y CD/CI</strong> Reduciendo el tiempo entre etapas y agilizando el depliegue y mantenimiento con cada versión ',
                '<strong> - Control de documentación</strong> La documentación debe estar presente y ser accesible, además de concordar con lo expuesto ',
                '',
                '<strong>Rutas y convenciones de nombres</strong>',
                ' - Estos facilitan la coherencia y la predictibilidad, pero hay que tener muchos factores a consideración, como: ',
                '  - Lenguajes, protocolos, frameworks, participantes, codigo heredado, etc... ',
                '<strong>- Campos y parametros</strong> Estos deben ser consistentes, ya sea lowerCamelCase o snake_case; si son arreglos puede ser plural ("names") ',
                '<strong>- Recursos</strong> Deberian ser sustantivos que indiquen la pluralidad o la singularidad como tal ',
                '<strong>- Identificadores</strong> Unicos e inmutables y que los soporte la URL ',
                '<strong>- Rutas</strong> Su composición deberia ser secuencial y predecible, primando la usabilidad ',
                '',
                '<strong>Convenciones para carga util</strong>',
                '<strong>- Codificación</strong> El formato Unicode-8 (UTF-8) es el tipo de codificación estandar para todo el texto y sus representaciones textuales ',
                '<strong>- Formato de datos interoperables</strong> Datos comunes como fechas o direcciones deberian ser compartidos y/o compatibles con terceros ',
                '<strong>- Documentar la respuesta y la petición</strong> Estas deberian ser los más simples y livianas posibles ',
                '<strong>- Datos binarios y multi contenido</strong> Estos deben analizarse para evitar problemas de serialización/deserialización ó rendimiento ',
                '<strong>- HATEOAS, Links y Paginación</strong> Utiles para dispensar y navegar en grandes volumenes de datos ',
                '',
                '<strong>Protocolos de Peticiones y Respuestas ',
                '<strong>- HTTPS</strong> Solo exponer endpoints encriptados ',
                '<strong>- Metodos HTTP</strong> Breve explicación de que metodos pueden ser usados y en que escenarios ',
                '<strong>- Encabezados HTTP</strong> Describir que Headers son usados para las peticiones y las respuestas ',
                '<strong>- Codigos HTTP</strong> Cada recursos puede responder con diferentes codigos de acuerdo al exito/error de la solicitud',
                '<strong>- Cache</strong> Como impacta su uso o no, en la API, ya sea en rendimiento, disponibilidad, coherencia, etc... ',
                '',
                '<strong>Manejo de errores</strong>',
                '- Devolver un codigo de error HTTP puede ser rapido y transmite información a grandes rasgos, sin exponer datos confidenciales ',
                '- Sin embargo esto entorpece el registro y analisis de errores; debiendo devolver errores más detallados, que eviten lo tecnico ',
                '',
                '<strong>Seguridad:</strong> Toda la información que se exponga debe ser debidamente controlada, para evitar filtraciones y comprometer datos sensibles ',
                '<strong>- Alcance</strong> Se pueden definir que rutas necesitan autenticación y cuales no, definiendo diferentes alcances ',
                '<strong>- Transporte</strong> Exponer solo endpoints encriptados o versiones especificas de TLS ',
                '<strong>- Gateway API</strong> Otra manera de brindar seguridad, ocultando el procesamiento de la petición ',
                '',
                '<strong>Registro y Trazabilidad ',
                '<strong>- Logging & Tracing</strong> Contenido clasificado o sensible no debe ser almacenado en los logs, a menos que sea seguro ',
                '<strong>- Audit Logs, Security Incident & Event Management</strong> Cada incidente debe analizarse y actuar en consecuencia ',
                '',
                '<strong>Consideraciones:',
                ' - Todo lo anteriormente recopilado es una guia, por lo cual debe ser adaptado de acuerdo a cada nuevo contexto ',
                ' - Y no se excluye de que este abierto a posibles cambios y mejoras por venir, despues de nuevas iteraciones',
                ' - Además de que cada tema y subtema a su vez tiene fuentes de profundización, presentes en el articulo original ',
            ]),
        new Item(Keys.APIS_GATEWAY,
            [
                '- Aunque sean terminos similares, un Api gateway y un Balanceador de carga son soluciones diferetes, para muchos problemas similares ',
                '<strong>- Api Gateway:</strong> Son una capa de filtración para las ya conocidas APIs, permitiendo que los clientes puedan realizar llamados y obtener el recurso ',
                '<strong>- Balanceador de carga:</strong> Es un sistema para equilibrar todo el trafico de nuestra aplicación, permitiendo que no se sobrecarguen los servidores ',
                '',
                '- Una de las principales diferencias radica en que el Api Gateway puede realizar tratamientos a la petición entrante, ',
                ' - como autenticación, validaciones, formateo, priorización, además de ofuscamiento y funcionar como posible limitador ',
                '- Por otro lado su contraparte, solo le interesa distribuir el trafico de la red, de manera que ningun nodo o servidor, ',
                ' - llegue a saturarse mientras que otros no esten realizando ninguna acción, y en algunos casos hasta puede funcionar como firewall ',
            ]),
        new Item('arquitecturalApiStyles',
            [
                '<strong>REST (Representational State Transfer)</strong> El campeon en cuanto a simplicidad y ubicuidad, este aprovecha los metodos HTTP y Json',
                ' - permitiendo una acercamiento amigable con los recursos, siendo al dia de hoy uno de los estilos más usados ',
                '',
                '<strong>SOAP (Simple Object Access Protocol)</strong> Es una implementación robusta y compleja, donde se usan principalmente XML para definir ',
                ' - una comunicación estructurada, y aunque requiera un cliente-servidor, es compensada por su resiliencia ',
                '',
                '<strong>GraphQL</strong> Un contendiente nuevo en el campo que ofrece flexibilidad y precisión, permitiendo solicitar a los clientes exactamente ',
                ' - lo que necesitan, reduciendo la redundancia, aunque en algunos casos pueda conllevar a problemas de rendimiento ',
                '',
                '<strong>gRPC (Google Remote Procedure Call)</strong> Es el más veloz de todas las APIs actualmente, este corre sobre HTTP/2 y puede utilizar datos binarios ',
                ' - especialmente util para microservicios, donde la comunicación rapida y fiable es vital ',
                '',
                '<strong>WebSockets</strong> Comunicación en tiempo real y bidirecional, bastante util en aplicaciones en vivo y con una constante transmision de datos ',
                '',
                '<strong>Webhooks</strong> Estos notifican a los clientes cuando ocurren ciertos eventos, desde el lado del servidor, asi todos los clientes',
                ' - se mantienen enterados ante cualquier evento, perfectos para arquitecturas basadas en eventos ',
                '',
                '<strong>MQTT (Message Queuing Telemetry Transport)</strong> Es un mensajero liviano, diseñado para entorno con recursos limitados, redes inestables ',
                ' - y con problemas de ancho de banda, que siempre intenta ser lo más confiable posible ',
                '',
                '<strong>AMQP (Advanced Message Queuing Protocol)</strong> Una cola de mensajes robusta y estandarizada, sobresaliente al trabajar como middleware ',
                ' - aca los mensajes son sumamente confiables ',
                '',
                '- No todos los estilos son ideales, para todas las tareas, aca se deben evaluar los requerimientos y requisitos ',
                ' - El tipo de datos que se van a enviar y recibir ',
                ' - Los requerimientos relacionados al rendimiento e interoperabilidad entre sistemas ',
                ' - Que tanta seguridad se requiere ',
                ' - Proyecciones de escalabilidad ',
            ]),
        new Item('uri',
            [
                '- Es una secuencia de caracteres que identifica un recurso logico(abstracto) o fisico, que no necesariamente esta conectado a internet',
                '- Esto permite que los protocolos de internet faciliten sus interacciones, esta sintaxis generica se define como: ',
                '<strong> [//[user:password@]host[:port]][/]path[?query][#fragment] </strong>',
                '',
                '<strong> - Esquema:</strong> El primer elemento es el nombre del esquema, no es sensitivo a mayusculas/minusculas y se separa del resto por <i>:</i>',
                '<strong> - Autoridad:</strong> Se compone de varios partes, un nombre registrado o de una dirección IP, ',
                '  - una seccion de autenticacion opcional y un puerto que tambien es opcional ',
                '<strong> - Consulta:</strong> Cadena de datos no jerarquicos, que suele ser una secuencia de pares atributo-valor, separados por un delimitador, como <i>&</i>',
                '<strong> - Fragmento:</strong> Contiene un identificador que proporciona dirección a un recurso secundario y se separa por <i>#</i> ',
                '',
                '<strong>Tipos de URI</strong>',
                '',
                '<strong>URL:</strong> Localizador Uniforme de Recursos, es usado para identificar y localizar paginas web, sin embargo ',
                ' - esto no garantiza el acceso a este, tiene que ser unica, por eso contiene valores como: protocolo, dominio, subdominio',
                '<strong>URI:</strong> Nombre de Recurso Uniforme, es similar a la URL, pero esta es independiente de la ubicación, y es persistente ',
                ' - lo que significa que siempre identifica el mismo recurso, incluso cuando deja de estar disponible o deja de existir ',
            ]),
        new Item(Keys.APIS_TESTING,
            [
                '<strong>Pruebas de humo:</strong> Validación simple de que el API funcione y nada se rompa',
                '<strong>Pruebas funcionales:</strong> Crea un plan de pruebas basado en los requisitos funcionales, y compara los resultados con los esperados ',
                '<strong>Pruebas de integración:</strong> Prueba la comunicación entre varias APIs y los servicios de extremo a extremo ',
                '',
                '<strong>Pruebas de regresión:</strong> Garantiza que la correción de errores o nuevas funcionalidades, no alteren el comportamiento del API ',
                '<strong>Pruebas de carga:</strong> Mide el redndimiento de la aplicación, simulando diferentes cargas de trabajo, y calcular su capacidad ',
                '<strong>Pruebas de estres:</strong> Se crean cargas elevadas de manera deliberada y se prueba si el API funciona con normalidad ',
                '',
                '<strong>Pruebas de seguridad:</strong> Se prueban posibles fallos de seguridad y posibles amenazas externas ',
                '<strong>Pruebas de UI:</strong> Es la interacción entre la interfaz de usuario y el API, para asegurarse que los datos se muestren correctamente ',
                '<strong>Pruebas fuzz:</strong> Se ingresan datos no validos o inesperados, para intentar bloquear el API, y/o encontrar vulnerabilidades ',
            ]),
        new Item('apiIdempotencia',
            [
                '- La idempotencia es un concepto informatico, que describe una operación o función que cuando se aplica varias veces, ',
                ' - tiene el mismo efecto que si se aplicara una vez, esto en informatica es bastante necesario por 2 razones: ',
                '',
                '<strong>Reintentos:</strong> Permite reintentar operaciones fallidas, sin temor a causar efectos segundarios, o problemas indeseados ',
                ' - en escenarios donde ocurren problemas de red, tiempo de espera, o fallas recurrentes, aumentando la tolerancia a los fallos ',
                '<strong>Sistemas distribuidos:</strong> En sistemas distribuidos las operaciones repetidas pueden generar efectos adversos, con esto ',
                ' - las solicitudes repetidas dan resultados más consistentes, permitiendo resultados predecibles y un sistema estable ',
                '<strong>Operaciones con Bases de Datos:</strong> El volver a aplicar operaciones sobre registros ya existentes, no debe cambiar el estado actual ',
                '',
                '- Diseñar y crear un API Idempotente en sistemas de diferentes tipos y arquitecturas conlleva su propio conjunto de desafios ',
                '',
                '<strong>Arquitectura de sistemas distribuidos y microservicios</strong>',
                '<strong>- Limites:</strong> Cuando se manejan transacciones, es comun tener limites, por lo que coordinar estas operaciones ',
                '  - entre multiples servicios como si fuera un unico contexto transaccional, requiere un modelo claro de transacciones distribuidas ',
                '<strong>- Cache Distribuido:</strong> Mantener un cache actualizado y coordinado, para que pueda ser distribuido',
                '  - requiere tener ciertas consideraciones, en especial si se tienen actualizaciones parciales ',
                '',
                '<strong>Operaciones asyncronas y Arquitecturas basadas en eventos</strong>',
                '<strong>- Ordenamiento y entrega de eventos:</strong> Garantizar el orden de las operaciones y que los eventos duplicados ',
                ' - no provoquen efectos segundarios es un desafio',
                '<strong>- Rollbacks:</strong> La reversión de cambios, en especial cuando es desencadenada por eventos asyncronos o se dan ',
                ' - en sistemas distribuidos, requiere de una planificación cuidadosa y un proceso meticuloso',
                '',
                '<strong>Componentes Stateful & Stateless</strong>',
                '<strong>- Sesiones:</strong> Las sesiones deben ser diseñadas para tener en cuenta la Idempotencia ',
                ' - y más si es necesario tener en cuenta diferentes estados o se manejan multiples sesiones ',
                '<strong>- Tokens:</strong> Gestionar la reutilización o la singularidad de los tokens, esta intrinsecamente ',
                ' - ligado al manejo de las sesiones, asi como si aceptar o denegar peticiones que provengan de sesiones caducas ',
                '<strong>- Solicitudes sin estado:</strong> Obtener información que requiere de sesiones en sistemas sin sesiones ',
                ' - requiere alternativas como el uso de tokens idempotentes y su debida implemetación ',
                '<strong>- Autenticación y Autorización:</strong> Toda solicitud debe ser debidamene autorizada y contar ',
                ' - con una autenticación previa, sin depender de los datos de sesion y al mismo tiempo ser eficiente ',
            ]),
        new Item(Keys.APIS_REST_VS_MESSAGING,
            [
                '- Los microservicios han llegado para quedarse, ampliamente adoptados debidos a las ventajas que ofrecen',
                '- Aun asi, para un correcto funcionamiento, deben poder comunicarse entre si, convirtiendo esta forma en un aspecto critico ',
                '-<em> Martin Fowler</em> defiende lo que el llama <strong>smart endpoints and dumb pipes</strong> para la comunicacion entre microservicios ',
                '- En el pasado los <em>Enterprise Service Buses</em> dominaban junto a <strong>SOA</strong> donde era comun integrar la logica de integración ',
                ' - y la transformación de los datos en la infraestructura, convirtiendola en una arquitectura de tipo <strong>smart pipes</strong> y <strong>dumb endpoints</strong>',
                '',
                '<strong>REST</strong> como se conoce hoy en dia, fue definida por <em>Roy Fielding</em> en su tesis doctoral',
                ' - <strong>Architectural Styles and the Design of Network-based Software Architectures</strong>, además de ser parte del proceso de definición de <strong>HTTP</strong> que ',
                ' - desde entonces es vital para la industria y es una base fundamental del desarrollo moderno de aplicaciones, debido a sus multiples fortalezas: ',
                '',
                '<strong>- Solicitud/Respuesta Sincrona:</strong> Este comportamiento es la base del protocolo de red sobre el que esta REST, por lo que practicamente es heredado ',
                '<strong>- Publico y estandarizado:</strong> Gracias al trabajo del <em>IETF</em> REST y su capa de transporte es interoperable entre todos los lenguajes de programación ',
                ' - además de contar con multiples herramientas para documentación y el manejo de la seguridad ',
                '',
                '- Aun asi, hay escenarios donde no es ideal, o no es posible tener este tipo de comunicación sincrona, por lo que no todo se puede solucionar con Rest',
                '',
                '<strong>- Acoplamiento Indeseado:</strong> Con un servicio Rest se asume que un dato es solicitado solamente por el sitio que lo necesita, que sucede cuando otro ',
                ' - servicio o componente se conecta y necesita los datos, desafiando el proposito de un unico objetivo, y convirtiendose en un orquestador no deseado ',
                '<strong>- Bloqueos:</strong> Al ser sincrono, cada petición debe esperar la respuesta, mediante un bloqueo, que evita la liberación y reutilización de estos recursos ',
                '',
                '<strong>Mensajeria y manejo de eventos</strong> Muchas deficiencias asociadas al sincronismo de Rest, se pueden solucionar al implementar microservicios controlados ',
                ' - por eventos, esto los hace inheremente asincronicos, asi solamente actuan cuando necesitan publicar o subscribirse a lo que les importa o necesitan ',
                '',
                '<strong>- Acoplamiento flexible:</strong> Al usar un patron de publicación/subscripción los servicios no se conocen entre si, por lo que cualquier servicio ',
                ' - solo debe publicar o subscribirse a lo que le interesa y/o necesita',
                '<strong>- Sin bloqueos:</strong> Ya no es necesario esperar hasta que se complete la solicitud, ahora se pueden realizar multiples tareas, sin bloquear los recuros, ',
                ' - dejando espacio para que se puedan hacer más tareas, de la manera más eficiente posible ',
                '<strong>- Escalable:</strong> A medida que la demanda crece, es fundamental crecer para aumentar la capacidad, por lo que al tener servicios más pequeños, ',
                ' - estos pueden crece/decrecer, de una manera fiable, rapida y de manera individual, especialmente cuando se detectan cuellos de botella ',
                '<strong>- Resiliencia y Errores:</strong> Al tener plataformas que garantizan la entrega de mensajes, se reduce la logica al no tener que lidiar con mensajes perdidos ',
                ' - y la consistencia de los datos, eventualmente se recuperara, al procesar todos los mensajes acumulados, durante el tiempo que habian errores ',
            ]),
        new Item(Keys.APIS_API_GOVERNANCE,
            [
                '- La integración entre sistemas por medio de apis, crece todos los dias y se convierten en piezas claves para las estrategias comerciales ',
                '- Es especialmente beficiosa si es una arquitectura de microservicios, ya que entre mayor sea la empresa, mayor numero de Apis creara/consumira ',
                '',
                '<strong>Centralización:</strong> Tener un punto central donde se creen y se hagan cumplir las politicas, para toda la organización ',
                '<strong>Contratos:</strong> Algunas empresas estan adoptando un enfoque API-First, ayudando a establecer que sean coherentes y reutilizables ',
                '<strong>Guia de estilo:</strong> La estandarización del diseño garantiza que todas las APIs sean coherentes entre si',
                '<strong>Reutilizabilidad:</strong> La estandarización además de garantizar la coherencia, tambien contempla que existan componentes reutilizables ',
                '<strong>Automatización:</strong> Los contratos, la documentación y el seguimiento, son procesos que pueden y deberian ser automatizados ',
                '<strong>Versionamiento:</strong> Ayuda a realizar un seguimiento y mantener diferentes versiones, sin afectar a los consumidores',
                '<strong>Deprecación:</strong> En la medidad que las APIs queden obsoletas, se debe controlar cuando y como dejaran de utilizarse ',
                '<strong>Tracking:</strong> El seguimiento de los aspectos de una API deberia ser parte de su gestión, como, quien, cuando, ciclo de vida, etc..',
                '<strong>Discovery:</strong> Tambien es necesario un metodo para representar las depedencias y ayudar a analizar posibles futuros impactos ',
            ]),
        new Item(Keys.APIS_API_FIRST,
            [
                '- Las APIs han existido casi a la par que la informatica moderna, surgieron por la necesidad de que multiples aplicaciones de software se comunicaran ',
                '- Siguen cumpliendo esa función, trabajando de forma invisible, mientras que en segundo plano comunican millones de dispositivos y aplicaciones ',
                '- El enfoque <strong>API-First</strong> prioriza las API al comienzo del desarrollo, posicionandose como un componente basico del software ',
                '- El diseño se realiza antes de que se inicie el desarrollo, pensando en el servicio que se va a exponer y no como un resultado del desarrollo ',
                '',
                '<strong>API Publicas:</strong>',
                '- Proveen acceso publico a datos y servicios ofrecidos por cualquier organización',
                '- Pueden ser totalmente gratuitas o cobrar tarifas por sus servicios ',
                '- Pueden ser integradas en aplicaciones de terceros sin problemas de licencias generalmente ',
                '',
                '<strong>API Privadas:</strong>',
                '- Usadas para conectar aplicaciones y componentes de software de una misma empresa ',
                '- No se exponen para ser usadas ante terceros',
                '- Las empresas suelen tener cientos o miles de API, tantas como sean necesarias ',
                '',
                '<strong>API Partners:</strong>',
                '- Son establecidas entre una o varias compañias, como medios eficaces de compartir información y colaboración ',
                '- No son expuestas al publico en general, pero tampoco son totalmente privativas ',
                '- Suelen tener mecanimos de seguridad y autenticación, para restringir el acceso indebido ',
                '',
                '<strong>API Lifcycle:</strong>',
                '- Toda API tiene un ciclo de vida, por esto es preciso que se defina y coordina de manera precisa, estas suelen ser las etapas más comunes ',
                '<strong>- Productor:</strong>  Definición -> Diseño -> Desarrollo -> Tests -> Seguridad -> Despliegue -> Observación -> Distribución ',
                '<strong>- Consumidor:</strong> Descubrimiento -> Evaluación -> Integración -> Tests -> Despliegue -> Observación ',
                '',
                '<strong>Beneficios:</strong>',
                '- Aumenta la productividad, al tener una colaboración estrecha a lo largo de todo el ciclo de vida ',
                '- Simplifica la gobernanza al tener un panorama claro en todas las etapas, y una comprensión de todo el ecosistema empresarial ',
                '- Es un modelo compatible con multiples rutas de trabajo, siendo adaptable segun la necesidades ',
                '- Cumplir con esta designación, implica que se deben seguir mas procedimientos, etapas, iteraciones, etc.. que aumentan la calidad del software '
            ]),
    ];

export const META_ESTRUCTURAS =
    [
        new Item('scope',
            [
                '- Se puede definir como el alcance que tendran las variables en tu codigo ',
                '',
                '<strong>Scope Local:</strong> Las variables seran accesibles solamente en el ambito declarado como lo puede ser: dentro de una función o una sentencia de control ',
                '',
                '<strong>Scope Global:</strong> Se pueden acceder desde cualquier parte de tu codigo y por consiguiente ser mutada, trayendo posibles bugs consigo ',
            ]),
        new Item('precedencia',
            [
                '- los operadores en las expresiones tienen una jeararquia predeterminada que determina el orden de evaluación ',
                '',
                '- Operadores con igual prioridad se evaluan de izquierda a derecha ',
                '- Operadores logicos y de operación bit a bit de izquierda a derecha ',
                '- Operadores matematicos, se respeta la jeararquia matematica, a menos que se involucren parantesis ',
                '- Los parentesis afectan el orden de evaluación, al mismo tiempo que permiten asociar expresiones ',
                '- La precedencia puede cambiar entre lenguajes, por lo que se recomienda saber las especificaciones de cada uno ',
            ]),
        new Item(Keys.META_ESTRUCTURAS_VERTICAL_AND_HORIZONTAL,
            [
                '- Una buena estructura es primordial para todo proyecto, sin embargo no siempre debe reflejar la arquitectura del proyecto',
                '',
                '<strong>Estructura horizontal:</strong> Estaba fuertemente ligado al modelo en cascada, donde se realizaban capas transversales ',
                ' - a todo el sistema, de manera que todo los componentes estaban separados entre si ',
                '- Esta estructura suele ser compleja de entender si no se entiende el negocio, además de que no todos necesitan las mismas partes para funcionar ',
                '',
                '    Products      Orders                  Customers                 ',
                '-------&darr;------------&darr;-----   Views      -----&darr;-------',
                '-------&darr;------------&darr;-----  Presenter   -----&darr;-------',
                '-------&darr;------------&darr;-----   Domain     -----&darr;-------',
                '------ &darr;------------&darr;-----  Services    -----&darr;-------',
                '-------&darr;------------&darr;-----  Entities    -----&darr;-------',
                '-------&darr;------------&darr;----- Repositories -----&darr;-------',
                '-------&darr;------------&darr;-----  DataSource  -----&darr;-------',
                '',
                '<strong>Estructura vertical:</strong> En esta organización prima el dominio, por lo que cada capa esta aislada entre si ',
                ' - toda la estructura de un componente es independiente entre si, y más facil de modificar ',
                '',
                '    Products           Orders            Customers     ',
                '|    Views     |  |    Views     |  |    Views     |   ',
                '|   Presenter  |  |   Presenter  |  |   Presenter  |   ',
                '|    Domain    |  |    Domain    |  |    Domain    |   ',
                '|   Services   |  |   Services   |  |   Services   |   ',
                '|   Entities   |  |   Entities   |  |   Entities   |   ',
                '| Repositories |  | Repositories |  | Repositories |   ',
                '|  DataSource  |  |  DataSource  |  |  DataSource  |   ',
            ]),
        new Item('expresionesRegulares',
            [
                '- Una expresion regular es una forma de buscar coincidencias o patrones de manera optimizada ',
                '- No solo permite encontrar coincidencia, tambien permite modificar lo que se haya encontrado ',
                '- Se basan en diagramas de estado, ya que todas las transiciones se deben cumplir, para que el texto a evaluar cumpla con la condiciones dadas ',
                '- Estas expresiones en si se escriben igual, y son independientes del lenguaje que se use ',
                '- Los compiladores de muchos lenguajes se basan en analizadores sintacticos, para analizar el codigo copiado, ',
                ' - estos a su vez se basan en expresiones regulares para saber si se cumplen con las condiciones del lenguaje ',
            ]),
        new Item(Keys.META_ESTRUCTURAS_ESTRUCTURAS_DATOS,
            [
                '- Es un concepto general que comparten muchos lenguajes de programación ',
                '- Que a su vez pueden cambiar y/o tener variaciones segun el lenguaje, dependiendo de cada implementación ',
                '- Una estructura es una colección de valores organizados, sobre los cuales se pueden administrar y hacer operaciones con ellos ',
                '- Tambien existe una manera estandarizada o implementada por el mismo lenguaje para acceder a los datos, y suelen ser de distintos tipos: ',
                '',
                '<strong>- Contiguamente asignadas:</strong> Compuestas por bloques de memorias unicos e incluyen a: <em>Arrays, Matrices, Heaps, Hash Tables</em>',
                '<strong>- Estructuas enlazadas:</strong> Son distintos fragmentos de memoria unidos por punteros e incluyen: <em>Listas, Arboles y Grafos </em>',
                '<strong>- Contenedores:</strong> Permiten almacenar y recuperar datos en un orden determinado y contienen: <em>Pilas y colas</em>',
                '',
                '- Existen más tipos de estructuras, pero estas son de las más comunes y usadas generalmente ',
            ]),
        new Item(Keys.META_ESTRUCTURAS_ESTRUCTURAS_DATOS_2,
            [
                '<strong>Arrays:</strong> Colección de elementos de una o varias dimensiones con un tamaño fijo y de un tipo especifico <strong>Aplicaciones:</strong> ',
                '  - Resultados de busquedas             - Sistemas GPS                  - Calendarios',
                '',
                '<strong>Colas:</strong> Siguen la estructura <em>FIFO</em>; primero en entrar, primero en salir <strong>Aplicaciones:</strong> ',
                '  - Atención de usuarios                - Mensajeria                    - Impresiones ',
                '',
                '<strong>Listas enlazadas:</strong> Son elementos separados formados de manera lineal, pero cada elemento contiene algun enlace del siguiente elemento, ',
                '- Tambien pueden enlazarse con el elemento anterior si son del tipo doblemente enlazadas <strong>Aplicaciones:</strong>',
                '  - Reordenación                        - Eliminación                   - Inserción ',
                '',
                '<strong>Pilas:</strong> Sigue la estructura <em>LIFO</em>; ultimo en entrar, primero en salir, solo se puede ingresar/eliminar elementos, no permite busquedas <strong>Aplicaciones:</strong>',
                '  - Acciones tipo Undo/Redo             - Evaluación de expresiones     - Backtracing ',
                '',
                '<strong>Arboles:</strong> Estructura de datos jerararquica, que consta de nodos conectados, no tienen relaciones ciclicas ',
                '- Cada nodo solo tiene un camino de acceso, facilitando las busquedas y las modificaciones <strong>Aplicaciones:</strong>',
                '  - Sistemas de archivos                - Inteligencia Artificial       - Enrutamiento de redes',
                '  - Indexación de bases de datos        - Compiladores                  - Compresión de datos  ',
                '',
                '<strong>Grafos:</strong> Consta de Vertices(nodos) conectados mediante aristas que pueden ser caminos con una sola dirección o bidireccioneales ',
                '- La dirección los convierte en Grafos Dirigidos o No dirigidos respectivamente <strong>Aplicaciones:</strong>',
                ' - Modelado de relaciones              - Analisis de redes              - Redes sociales',
                ' - Sistemas de recomendación           - BD No relacionales '
            ]),
        new Item('homoiconicidad',
            [
                '- Es una propiedad que comparten algunos lenguajes de programación en los cuales el propio lenguaje, se puede manipular y comportarse como un dato más ',
                '- La representación primaria de esto tambien es una estructura de datos en un tipo primitivo del lenguaje ',
                '<strong>Ventajas:</strong> ',
                '- Extender el lenguaje con nuevos conceptos es más sencillo ',
                '- Los datos pueden ser pasados entre capas, como lo son la capa base y meta del programa ',
                '- Permite realizar operaciones de manipulacion de codigo en tiempo de compilación en vez de ejecución ',
                '- Se puede modificar el arbol de sintaxis del lenguaje ',
            ]),
        new Item(Keys.META_ESTRUCTURAS_MAQUINA_ESTADOS,
            [
                '- Es una modelización conceptual en forma de diagrama de un problema ',
                '- En esta situación siempre se encuentra un inicio, el cual es la espera de un estimulo ',
                '- Esto nos da una base para modelar problemas que pueden ser sustancialmente complejos, además de extensos ',
                '',
                '<strong>Elementos de un diagrama</strong>',
                '<strong>- Estados:</strong> Posición/acción donde se encuentra actualmente y de la cual puede saltar a otro estado, o a si mismo, impulsado por una acción/resultado concreto ',
                '<strong>- Entradas:</strong> Interacciones o acciones que pueden alterar un estado y hacerlo cambiar a otro ',
                '<strong>- Salidas:</strong> Acciones con las cuales el estado responde despues de ser previamente alterado ',
                '<strong>- Eventos:</strong> Son las acciones o interacciones que puede tener un estado, internas o externas ',
                '<strong>- Transiciones:</strong> Caminos que se pueden tomar entre estados, estos deberian estar acotados, y comprobar que las condiciones se dan para realizar el cambio',
                '',
                '- Este sistema "simple", y en casos trivial, evoluciono para ser parte fundamental de la informatica ',
                '- Acualmente las maquinas de Mealy y de Moore son usadas para crear maquinas de estados finitos "FSM" ',
                '- Para realizar estos esquemas lo primero es definir las entradas, salidas y sus estados ',
                '- Despues se realiza una tabla donde se definen las relaciones entre estos',
                '- Finalmente se grafica teniendo en cuenta las entradas y salidas de cada estado ',
                '',
                '- Si los sistemas se llegan a complicar o extender demasiado, se pueden realizar simplificaciones mediante algebra de Boole',
            ]),
        new Item('sistemasComplejos',
            [
                '<strong>Caracteristicas:</strong>',
                '<strong>- Comportamiento impredecible:</strong> Son sensibles a las condiciones iniciales ',
                '<strong>- Conectividad:</strong> Los subsistemas se afectan mutuamente, aun sin conexión directa ',
                '<strong>- Auto organización:</strong> Tendencia constante de generar patrones de comportamiento ',
                '<strong>- Jerarquia:</strong> Cualquier cambio de una jerarquia, afectara a esta ',
                '<strong>- Historico-dependientes:</strong> El tiempo es un factor muy importante a tener en cuenta ',
                '<strong>- Irreductubilidad:</strong> La estructura o no se puede, o es muy dificil de reducir a estados más simples',
                '<strong>- Dialogicos:</strong> Los opuestos no se excluyen, se complementan ',
                '<strong>- Recursivos:</strong> Las causas y los resultados se alternan en el tiempo ',
                '<strong>- Hologrametricos:</strong> Hay identidad estructural entre las partes y su todo ',
                '',
                '<strong>Principios:</strong>',
                '<strong>- Equifinidad:</strong> Los estados finales son alcanzables sin importar las condiciones iniciales ',
                '<strong>- Heterogeneidad auto organizacional:</strong> La complejidad aumenta en medida que se interactua con la entropia del entorno ',
                '<strong>- Complejidad organizada:</strong> Los sistemas abiertos conjugan complejidad y orden ',
                '<strong>- Abundancia organizacional:</strong> Las estructuras complejas, son encontradas con facilidad ',
                '<strong>- Teleologico:</strong> Finalidades especificas dependen de sistemas especificos ',
                '<strong>- Retroalimentación:</strong> Se pueden tener feedbacks positivos y negativos ',
                '<strong>- Complejidad jerarquica:</strong> A mayor complejidad, mayor jerarquización ',
            ]),
        new Item('funcionesLambda',
            [
                '- Son una subrutina definida no enlazada a un identificador, tambien llamadas funciones anonimas o literales ',
                '- Suelen ser usadas como argumentos o contruir respuestas en funciones de orden superior ',
                '- Son comunes en los lenguajes funcionales y/o multiparadigma ',
                '- Tambien son capaces de inferir los tipos de los parametros de entrada y ajustarse polimorficamente',
                '- Pueden ser expresiones simples o tener varias instrucciones ',
                '',
                '<strong>Sintaxis:</strong>',
                '- <em>Lambda de expression</em>  -> (parametros) => expression ',
                '- <em>Lambda de instruccion</em> -> (parametros) => { sequencia de expresiones } ',
                '',
                '- Su sintaxis suele ser más concisa y combinada con otras caracteristicas como los Stream permiten el paradigma funcional en Java ',
            ]),
        new Item('valueObjects',
            [
                '- Es apliamente usado en <strong>DDD</strong> (Domain Driven Design)',
                '- Estos son una modelación de un concepto en nuestro sistema, como pueden ser fechas, precios, monedas, cantidades, etc.. ',
                '',
                '<strong>Caracteristicas</strong>',
                ' - Estan concebidos para medir o describir un concepto en nuestro dominio, no son simplemente valores, sino que cumplen alguna función ',
                ' - Son inmutables y su construcción no debe ser demasiado compleja ',
                ' - Siempre son validos, y si no lo son deben de lanzar una excepción, se pueden usar constructores semanticos para facilitar su creación ',
                ' - No poseen identidad, por lo que su comparación se basa solamente en sus valores ',
                '',
                '<strong>Testing</strong>',
                ' - Testear un VO esta relacionado directamente a la complejidad de los valores que represente ',
                ' - Generalmente solo se validan sus valores y que sus operaciones no incumplan la inmutabilidad (side-effects)',
            ]),
        new Item('dynamicProgramming',
            [
                '- Es una tecnica de programación informatica en la que un problema algoritmico se divide en subproblemas y los resultados se guardan, ',
                ' - y los subproblemas se optimizan para encontrar la solución general, generalmente relacionado con encontrar valores limites y optimizaciones ',
                '- Al tratarse de problemas largos y complicados almacenar los resultados en vez de calcularse cada vez es considerablemente más optimo ',
                '- Pero solo es aplicable cuando los problemas son dividibles y hay valores que se pueden repetir y/o necesitar en varios lugares (superpuestos)',
                '- La programación recursiva es una manera de optimizar algunos problemas que son solucionables mediante recursividad ',
                ' - sin contar con los problemas de esta, como el crecimiento desmedido de la pila de llamados y el uso de memoria poco optimizado ',
                '',
                '<strong>Ventajas:</strong>',
                ' - Dividir los problemas más grandes en varios más pequeños y manejables',
                ' - Permite almacenar y reutilizar los subproblemas',
                ' - Facilita la depuración a la hora de buscar errores ',
                ' - Reduce la complejidad temporal al no usar recursividad y optimiza el uso de recursos',
                ' - Toma decisiones del alcance de los subproblemas, para que sean reutilizables y decide como se combinaran ',
                '',
                '<strong>Algoritmos principales</strong>',
                ' <strong>- Algoritmos codiciosos:</strong> Son herramientas de optimización, optando por valores optimos locales que no necesariamente seran los globales ',
                ' <strong>- Floyd-Warshall:</strong> Encuentra la ruta más corta entre todos los vertices en un grafo con pesos, ya sean dirigidos o no dirigidos ',
                ' <strong>- Bellman Ford:</strong> Encuentra la ruta más corta entre desde un vertice fuente a un vertice destino ',
            ]),
        new Item(Keys.META_ESTRUCTURAS_SERIALIZATION_DESERIALIZATION,
            [
                '- Son 2 conceptos importantes en la programación en general, que permiten que los objetos puedan ser almacenados, transmitidos y reconstruidos ',
                ' - ya sea para su persistencia, ser transmitidos a traves de una red o ser almacenados en un cache en memoria ',
                '',
                '<strong>Serialización:</strong> Un objeto tiene 3 caracteristicas principales, Identidad, estado y comportamiento, ',
                ' - La serialización es el proceso de convertir el estado(valor o datos) de un objeto en un flujo de bytes ',
                '',
                '<strong>Formatos:</strong> Se pueden usar diferentes formatos, como <em>Json</em> o <em>Xml</em> porque son formatos legibles y/o faciles de interpretar por otro sistema ',
                ' - o en cambio el <em>Binario</em> para temas de rendimiento al ser más rapidos de leer y escribir que aquellos basados en texto ',
                '',
                '<strong>Deserialización:</strong> Es justamente el proceso inverso, donde se toma este flujo de bytes y se convierte de nuevo en un objeto, como el original ',
                ' - para esto, existen librerias e implementaciones propias de los lenguajes',
                '',
                '<strong>Consideraciones:</strong> ',
                '<strong> - Rendimiento:</strong> Entre más complejo y/o grande sea el objeto, más costara Serializar o Deserializar para el sistema ',
                '<strong> - Plataformas y dependencias:</strong> Este proceso tambien depende en que se haga y que lenguaje, por lo que puede haber incompatibilidades ',
                '<strong> - Versiones:</strong> Los objetos cambian, se modifican con el tiempo, por lo que versiones más nuevas puede haber problemas entre versiones diferentes ',
                '<strong> - No serializables:</strong> En ciertos casos, hay objetos que no se pueden serializar, como identificadores de archivos o sockets ',
                '<strong> - Seguridad:</strong> Suplantar los flujos de bytes con fines malintencionados, puede exponer las vulnerabilidades de un programa ',
                '<strong> - Legibilidad:</strong> Los datos que se serializan generalmente no son legibles para los humanos, lo que dificulta la solución de problemas ',
                '  - directamente relacionados con los datos en este estado, ya sea en la transmision o el almacenamiento ',
            ]),
        new Item(Keys.META_ESTRUCTURAS_DEPRECATION,
            [
                '- En Java, como en otros lenguajes es comun encontrar metodos o clases marcadas de esa manera, una clara indicación de que esta en desuso ',
                '- Muchos lenguajes conformen van evolucionando se optimizan o se corrigen, sin dejar de promover pero no garantizando la <em>retrocompatibilidad</em> ',
                '- En la practica sirven como advertencia para no usar los metodos ó clases deprecados, ya que esta marcados para ser removidos en proximas actualizaciones ',
                '- Esto tambien puede suceder en desarrollos propios y no solamente en librerias ó frameworks ',
                '- Posponer estos cambios puede obstaculizar el mantenimiento, crear riesgos de seguridad, problemas de rendimiento y acelerar la conversión a <em>Legacy Code</em>',
                '',
                '<strong>¿ Como mantener una base de codigo actualizada ?</strong>',
                '<strong>- Priorize:</strong> Los metodos deprecados a cambiar, en base a multiples factores como seguridad, uso, importancia y riesgos',
                '<strong>- Documentación:</strong> Generalmente cualquier deprecación tiene una o varias opciones por el cual cambiarlo y contempla posibles efectos segundarios ',
                '<strong>- Herramientas:</strong> Para encontrar posibles candidatos, además de buenas practicas como el analisis de calidad, Como <em>Digma</em> o <em>SonarQube</em>',
                '<strong>- Refactorización, pruebas y cambios incrementales:</strong> De esa manera no se convierte en una osadia que comprometa la estabilidad del codigo ',
            ])
    ];

export const PEOPLE =
    [
        new Item(Keys.PEOPLE_PEOPLE_AND_PROCESS,
            [
                '- Las Personas, los Procesos y las Tecnologias son el sostenimiento de toda empresa ',
                '- Equilibrar estos 3 elementos de manera optima no es tarea facil, pero lograrlo genera una gestión del conocimiento más que adecuada ',
                '- Cualquier cambio de estas partes traera efectos secundarios sobre las demas, por lo que es ideal siempre tener un objetivo en comun ',
                '',
                '<strong>Personas:</strong> Siempre seran necesarias para pensar, planear y ejecutar ',
                '- Son las posedoras del conocimiento y las encargadas de mantenerlo y transformarlo ',
                '',
                '<strong>Tecnologia:</strong> Ayuda a las personas a llevar procesos de difusión del conocimiento personal ',
                '- Proporciona herramientas de enseñanza y entrenamiento ',
                '',
                '<strong>Procesos:</strong> Deben incluir tareas y proporcionar conocimiento de las actividades internas ',
                '- Ofrecen el valor agregado al cliente y ayudan a mejorar el conocimiento compartido ',
                '',
                '- Algunos de los objetivos de tener este equilibrio son: ',
                ' - Transformar los datos en información y a su vez en conocimiento ',
                ' - Permitir que el conocimiento se accesible para todos y generable por todos ',
                ' - Mejora continua de los procesos y aumentar la productividad ',
                ' - Generar valor agregado de manera que este conocimiento sea una ventaja competitiva ',
            ]),
        new Item('gestionDeServicios',
            [
                '- Es una metodologia que pone su foco en el cliente y como mejorar su atención ',
                '- Toda organización debe contar con personal competente en cuanto al uso de las tecnologias que se usen ',
                '- Los proveedores y los socios son partes importantes de toda empresa, no se pueden ignorar ',
                '- La creación de valor es importante para todo producto y servicio que se ofrezcan ',
                '',
                '<strong>7 principios para una correcta gestión:</strong>',
                '- Se debe crear el mayor valor para los clientes a la vez que se perjudican lo menos posible ',
                '- Siempre sera mejor revisar los procesos existentes y mejorarlos que empezar desde cero ',
                '- Es mejor avanzar seguro y constante con un enfoque concreto ',
                '- El trabajo en equipo es importante, todos deben ser visibles y colaborarse entre si ',
                '- Tener una consciencia holistica, ya que todas las areas se afectan entre si de alguna manera ',
                '- Entre más simple sea un proceso mejor ',
                '- La automatización y la optimización siempre deben ser aspectos a alcanzar ',
            ]),
        new Item('gestionDeActivos',
            [
                '- Los elementos fisicos y no fisicos de las empresas tambien deben ser considerados como partes del negocio ',
                '- Esto se puede aplicar a todo software que la empresa use o desarrolle y los elementos necesarios para su funcionamiento ',
                '- Tener un inventario actualizado garantiza que siempre se maneje lo necesario ',
                '- En un contexto informatico esto se puede aplicar de varias formas, principalmente al manejo de archivos electronicos ',
                ' - además de las licencias que se usan y que se generan desde la misma empresa ',
                '',
                '<strong>Ejemplos de activos:</strong>',
                '<strong>- Hardware:</strong> Dispositivos de redes, centros de datos, servidores',
                '<strong>- Infraestructura:</strong> Proporcionada por terceros, y dispositivos propios de la empresa usados por los usuarios finales ',
                '<strong>- Datos:</strong> Digitales derivados de las operaciones internas ',
                '',
                '- Estos suelen tener un ciclo de vida ciclico, el cual es el siguiente: ',
                '  -> <strong>Planear</strong> ->         -> <strong>Adquirir</strong> ->    -> <strong>Asignación</strong> ->       -> <strong>Mantenimiento</strong> ->    -> <strong>Retiro</strong> ->',
                '  Como obtenerlos       Construcción,     Introducción al        prolongar la vida      Al final del          ',
                '  y como se usaran      compra,           ambiente productivo    util o mitigar los     este debe ser         ',
                '  además de analizar    arrendamiento     y definiciones de      riesgos de posibles    retirado y desechado  ',
                '  costos/beneficios     o licencias       procesos y usos        fallos                 o solo cancelado      ',
                '',
                '<strong>Beneficios de esta gestión:</strong>',
                '- Mejores decisiones en base a información actual y verificable ',
                '- Continuidad del negocio al estar mejor preparados para las interrupciónes del negocio ',
                '- Manejo oportuno de las licencias y suscripciones de la empresa ',
                '- Costos totales de la empresa de manera global ',
                '- Permite la estandarización de manera transversal en la empresa ',
            ]),
        new Item('fidelizacion',
            [
                '- Fidelizar a un cliente, garantiza que esta siempre permanecera comprando nuestos productos y servicios ',
                '- Segun la ley de pareto el 80% de las ventas son de los clientes actuales y 20% de los nuevos ',
                '- Es un error comun concentrarse en adquirir nuevos clientes y descuidar los viejos ',
                '- Un cliente satisfecho es la mejor publicidad, aun asi, esto no siginifica que sea un cliente fiel ',
                '',
                '<strong>Algunas estrategias para fidelizar a los clientes:</strong>',
                '- Ser honestos en la justa medida, ya que no siempre todo sera una historia de exito ',
                '- Mantener una comunicación constante, haciendo saber los resultados de manera regular ',
                '- Preparar un plan a futuro que lo haga sentir importante ',
                '- Comparte los momentos de exito, no solo los fracasos merecen atención ',
                '- Solicita sus opiniones y hazlos sentir escuchados ',
                '- Las relaciones son mejores cuando son reciprocas ',
                '',
                '<strong>Clasificación de los clientes:</strong>',
                '<strong>- Apostoles:</strong> Clientes fijos bastantes satisfechos y que recomendaran tu marca ',
                '<strong>- Leales:</strong> Cuentan igual de satisfechos que los apostoles, pero que no divulgan tu marca ',
                '<strong>- Mercenarios:</strong> Tienen satisfacción alta, pero solo compraran cuando esto les aporte algun beneficio ',
                '<strong>- Rehenes:</strong> No estan satisfechos con tu producto, pero tampoco estan dispuestos a migrar ni asummir más costos ',
                '<strong>- Indiferentes:</strong> Son neutrales frente a la marca, y aunque esten satisfechos solo haran compras ocasionales ',
                '<strong>- Terroristas:</strong> Además de estar insatisfechos, estos hablaran mal de la marca en sus circulos de influencia ',
            ]),
        new Item('modeloDIKW',
            [
                '- Es un sistema jerarquico donde cada capa le da soporte a las caracteristicas de la siguiente ',
                ' &uarr;',
                ' Contexto ',
                ' &uarr;                                     Sabiduria        &#35;     Union de todas las partes ',
                ' &uarr;                      Conocimiento                   &#35;&#35;&#35;    Se forman las partes de un todo ',
                '           Información                                &#35;&#35;&#35;&#35;&#35;   Conexión de las partes',
                ' &uarr;  Datos                                            &#35;&#35;&#35;&#35;&#35;&#35;&#35;  Reunion de todas las partes ',
                '   &rarr;      &rarr;    &rarr;  Comprension    &rarr;',
                '  Busqueda  Absorción     Practica     Reflexion',
                ' ',
                '<strong>Datos:</strong> Son la materia prima para formar las siguientes capas, indeferentemente de la fuente ',
                '<strong>Información:</strong> Es una construcción más avanzada a partir de acopio de simples datos, gracias a nuestro raciocinio y reconocimiento de patrones',
                '<strong>Conocimiento:</strong> Ya con la información podemos actuar en base a esta, tomar decisiones especificas, o responder interrogantes de manera practica ',
                '<strong>Sabiduria:</strong> Generalmente es la capacidad de pensar y analizar las situaciones, que se presenten, además de poder abstraerlo a otros contextos',
            ]),
        new Item('gestionDeExpectativas',
            [
                '- Lo más probable es que estas esten formadas por diferentes factores y experiencias pasadas ',
                '- Muchas cosas pueden salir mal en un proyecto pero estas son algunas maneras de solucionarlo ',
                '',
                '<strong>Asumiendo lo obvio:</strong> Siempre hay diferencias entre lo que una persona escucha y lo que otra dice, ',
                ' - además de que hablamos de lo que consideramos importante y evitamos las obviedades, ',
                ' - sin comprender que estas no lo son para todos ',
                '',
                '<strong>Evitar el riesgo:</strong> Generalmente no nos gusta hablar de posibles problemas, ',
                ' - y si hay riesgos intentamos evitarlos hasta que sean inevitables, aunque esto nos traera problemas ',
                ' - en un futuro casi inmediato, preveer los problemas nos hace profesionales más confiables ',
                '',
                '<strong>Información incorrecta:</strong> Cuando vas al medico esperas una explicación a fondo de tus sintomas, ',
                ' - no simplemente un medicamento para calmarlos; puede que funcionen o solo enmascarar algo peor ',
                ' - en terminos de un equipo esto significa mantener a todos los involucrados al tanto ',
                '',
                '<strong>Reuniones sin agenda:</strong> Las reuniones no son de agrados de todos, y menos cuando estas son sorpresa, ',
                ' - además de que no se suele estar preparado para estas, generando frustaciones y estres, ',
                ' - lo mejor para evitar esto es simplemente agendarlas con anterioridad ',
                '',
                '<strong>Realización de contratos:</strong> La negociación es importante pero para segurar que todo funcione ',
                ' - es importante generar acuerdos y dejarlos por escrito, asi demostrar alguna equivocación, ',
                ' - y quien es el responsable o que este obligado a resolver el problema',
            ]),
        new Item('capa8',
            [
                '- Es un error relacionado directamente con el usuario final, ya sea por desconocimiento o por un mal diseño de la UX/UI',
                '- Esta capa no existe como tal, es una expresión para aludir la culpa al usuario ',
                '- El nombre viene del modelo OSI que consta de 7 capas, donde la septima capa es la aplicación, la que usa el usuario final ',
                '- Estos errores son de las principales fuente de error en las organizaciones y excelente puerta de entrada para los hackers ',
            ]),
        new Item('noNewsGoodNews',
            [
                '- Si no hay noticias son buenas noticias ',
                '- Tan simple como ejecutar un comando y este no devuelve un mensaje de error, si no que se ejecuto con exito ',
                '- Los codigos de error se establecieron para poner de acuerdo a desarrolladores y usuarios ',
                '- Usar los codigos de error para dar información es una manera util de entender los problemas ',
            ]),
        new Item('tiposHackers',
            [
                '- Un Hacker es aquel individuo que usa sus habilidades informaticas para violentar y penetrar la ciberseguridad ',
                '- Inicialmente solo existian 3 sombreros como clasificación, pero hay otros que han surgido con el tiempo ',
                '',
                '<strong>Sombrero Blanco</strong>',
                '- No importan su genero, nacionalidad, etnica, y demás caracteristicas, siempre defienden lo que es correcto ',
                '- Protegen a los civiles y a las organizaciones en general encontrando y reportando vulnerabilidades ',
                '- Trabajan en cargos como ingenieros de ciberseguridad, pruebas de penetración y otros puestos de seguridad, además de tareas como: ',
                '  - Escaneo de redes        - Configuracion de IDS (detección de intrusos) ',
                '  - Creación de honeypots   - Hackeo de equipos para encontrar vulnerabilidades ',
                '',
                '<strong>Sombrero Gris</strong>',
                '- Tambien defenden lo correcto, pero no siempre usaran metodos convencionales para hacerlo ',
                '- Esto puede ser moralmente ambiguo por lo que este punto medio a veces se decanta más por un extremo (Negro o Blanco)',
                '',
                '<strong>Sombrero Negro</strong>',
                '- Realizan actividades ilegales para obtener algun tipo de redito, generalmente finaciero ',
                '- Tambien suelen hacerlo por diversion, pero con fines de lucro, sin importar los daños que puedan generar, tambien pueden: ',
                '  - Instalar puertas traseras   - Mantener el acceso a los sistemas comprometidos ',
                '  - Escalar en privilegios      - Descargar datos valiosos y/o sensibles ',
                '  - Instalar malware            - Usar el Phishing ',
                '',
                '<strong>Sombrero Verde</strong>',
                '- Jovenes entusiastas, inexpertos y por lo tanto vulnerables al riesgo ',
                '- Actualmente con tantas herramientas y facilidades es comun que se mentan en problemas ',
                '- Que aprovechan para aprender de sus errores y convertirse en mejores hackers y cambiar de sombrero ',
                '',
                '<strong>Sombrero Azul</strong>',
                '- Son hackers experimentados que suelen ser vengativos y expondran tu vida digital ',
                '- Suelen ser profesionales de seguridad externos en busca de vulnerabilidades antes de los lanzamientos ',
                '',
                '<strong>Sombrero Rojo</strong>',
                '- Además de ser vengativos, defienden lo correcto por lo que si eres un criminal no tendran piedad alguna ',
                '- No solo desactivan las actividades delictivas permanentemente, tambien son temidos por otros hackers ',
                '- Son tan experimentados que no tienen problemas en piratear sistemas con Linux ',
                '- No se arrepienten y no dudan si su objetivo es destruir a los de sombreros negro ',
                '',
                '- Si quiere conocer sus equivalentes en los personajes de Marvel y DC, ó conocer casos famosos, puedes dar click en la fuente',
            ]),
        new Item('sindromesLaborales',
            [
                '- Un sindrome es una condición o sintoma caracteristico de una enfermedad, aunque en el contexto empresarial, es más metaforico que fisico ',
                ' - existen una gran variedad de sintomas y situaciones completamente relacionables ',
                '',
                '<strong>Sindrome de Burnout:</strong> Un trabajador quemado puede presentar depresión o ansiedad, asi como irritabilidad, ',
                ' - perdida de atención o falta de motivación, por muchas causas como, acoso laboral, exceso de responsabilidades, malos tratos, etc..',
                ' - la clave esta en la prevención mediante, incentivos laborales o estableciendo un mejor ambiente laboral ',
                '',
                '<strong>Sindrome de procusto:</strong> Las victimas son los subordinados, donde los jefes, se esfuerzan por degradar el trabajo, ',
                ' - de los mejores subordinados, ya sea por que se consideren una amenaza, o simples rencillas personales ',
                '',
                '<strong>Sindrome de Peter Pan:</strong> Las empresas no quieren crecer, ya que es un proceso dificil y lleno de riesgos ',
                '',
                '<strong>Sindrome del SuperHeroe:</strong> Los emprendedores pueden fracasar, ya que no saben o no quieren delegar, ',
                ' - y aunque saben que no pueden con todo, quieren tenerlo todo bajo su control, perdiendo valiosas alianzas y colaboradores ',
                '',
                '<strong>Sindrome de Abstinencia de ejecutivos:</strong> Cuando son forzados a tomar descansos, pueden presentar sintomas fisicos y psicologicos, ',
                ' - como si de una droga real, para esto es preciso ayuda de profesionales',
                '',
                '<strong>Sindrome del Fundador:</strong> Todo pasa y se vincula directamente con el fundador, es una referencia inevitable, ',
                ' - una verdadera prueba de exito, es que la empresa sea capaz de sobrevivir y proliferar sin el fundador, mediante buenos colaboradores ',
                '',
                '<strong>Sindrome del Impostor:</strong> Algunos empresarios y profesionales exitosos, no se creen merecedores de su exito y se subestiman, ',
                ' - por esto es necesario un ambiente que no descarte buenas opciones y que los impulse a creer en sus posibilidades ',
                '',
                '<strong>Efecto Dunin-Kruger:</strong> Hay personas son incapaces de comprender su incompetencia, creyendose mejores de lo que son, ',
                ' - con un desempeño pobre e inconscientes de este hecho; por eso se insta a realizar una autocritica constructiva ',
                '',
                '<strong>Sindrome de Hamlet:</strong> Directivos que no solo viven en un estado de duda constante, cuando son necesarios para decisiones importantes, ',
                ' - suelen fracasar y tener excusas del porque, por eso es habitual tenerlos en areas poco jerarquicas, con procesos más analiticos ',
                '',
                '<strong>Sindrome de Persona Alfa:</strong> Constantemente persiguen el liderazgo y los logros, suelen tener bastantes aspectos positivos, ',
                ' - pero se pueden convertir en amenazas si tienen estilos despoticos y agresivos para liderar, es importante que los objetivos, ',
                ' - no sobrepasen ciertos limites, ni pongan en riesgo a alguien debido a sus actos ',
                '',
                '<strong>Sindrome de Codigo Hamurabi:</strong> Se establecen complejas y extensas normas internas, que obstaculizan la comunicación ',
                ' - y generan cuellos de botella, para esto es necesario flexibilizar procesos o encontrar alternativas más eficientes ',
                '',
                '<strong>Sindrome de Estocolmo:</strong> Aca existe un trabajador perjudicado, pero que se encuentra emocionalmente vinculado, ',
                ' - por lo que se niega a abandonar, para esto es necesario tener un espacio de reflexión y toma de conciencia ',
                '',
                '<strong>Sindrome de Plena actividad:</strong> Donde siempre es necesario estar haciendo algo, o si no es esta desaprovechando el tiempo, ',
                ' - aca se menosprecia el tiempo para estrategias y planes, solo para concentrarse en el atareado ahora, ',
                ' - aca se deben hacer mejores esfuerzos en la planificación y un mejor control de los recursos, tanto humanos como fisicos ',
                '',
                '<strong>Principio de Peter:</strong> Los empleados pueden ascender y lo hacen, hasta el limite de sus competencias, llegados a ese punto es necesario ',
                ' - evitar que se conviertan en obstaculos, ya sea cambiando entre areas, mejorando la formación o fortaleciendo equipos, entre otras acciones ',
                '',
                '<strong>Sindrome de Oficina Enferma:</strong> En este caso existe una influencia directa del ambiente, tal como edificios mal ventilados, con poca iluminación ',
                ' - mucho ruido o con poca movilidad, afectando directamente la salud de los empleados, haciendo necesario analizar, cambiar el espacio o mudarse',
                '',
                '<strong>Sindrome de No Inventado aqui:</strong> Un rechazo frontal y categorico, a toda solución que sean ajenas, aunque sean más simples o eficientes, ',
                ' - prefiriendo gastar recursos innecesariamente, que abrirse a nuevas oportunidades y conocimientos, que podrian mejorar las cosas ',
            ]),
        new Item('icebergIgnorance',
            [
                '- En 1989 Sidney Yoshida desarrollo la teoria de <em>Iceberg de la ignorancia</em>, que refleja ciertos datos, sobre el funcionamiento de las organizaciones',
                '',
                '- El <strong>4%</strong>   de los problemas son conocidos por la alta dirección ',
                '- El <strong>9%</strong>   de los problemas son conocidos por los mandos medios ',
                '- El <strong>74%</strong>  de los problemas son conocidos por los supervisores ',
                '- El <strong>100%</strong> de los problemas son conocidos por los operarios de linea ',
                '',
                '- En otras palabras, entre mayor sea el rango, mayor sera el desconocimiento de los problemas, afectando multiples aspectos como: ',
                ' - Toma de decisiones de manera inadecuadas   - Ineficaz asignación de recursos',
                ' - Fugas de talento                           - Ineficiencia y errores costosos, entre otras',
                '- Debido a factores como:',
                ' - Falta de comunicación                       - Liderazgo inadecuado ',
                ' - Miedos a las consecuencias de los errores   - Fugas de información ',
                '',
                '<strong>Como conectar las altas jerarquias, con la primera linea</strong>',
                '- Escuchar con atención y preguntar con curiosidad                     - Fomentar el sentido de pertenencia ',
                '- Mostrar humildad y nunca dudar en solicitar ayuda                    - Entender porque y como se puede mejorar como equipo',
                '- Crear espacios de integración y colaboración                         - Delegar de manera real y a conciencia ',
                '- Que toda la jerarquia participe, a la hora de buscar soluciones      - Desterrar el miedo a las represalias',
            ]),
        new Item(Keys.PEOPLE_LANGUAGE_UBICUOS,
            [
                '- El lenguaje Ubicuo, es un termino usado por <em>Eric Evans</em> usa en el <em>Domain Driven Design</em> para la practica de tener un lenguaje comun ',
                ' - entre desarrolladores y usuarios, además de otras personas que tambien esten involucradas ',
                '- Esto hace parte de una estandarización profesional, que se refiere a la adopción de las mejores practicas y patrones de la industria ',
                '- Asi se puede hablar un mismo idioma, para que la comunicación sea efectiva y eficiente, mediante estandares compartidos ',
                '- De esta manera tener conversaciones entre congeneres y transmitir ideas, es algo que beneficia a todos los involucrados y no se pierde tiempo ',
                ' - al tener que explicar conceptos y metodologias que se usan en la ingenieria y que son transversales ',
            ]),
        new Item('hippoEfect',
            [
                '- <strong>La Opinion de la Persona Mejor Pagada</strong>, suele tener demasiado impacto cuando no se cuentan con datos para tomar decisiones ',
                '- Y es peor cuando se tienen los datos, pero estos no se toman en cuenta cuando prevalece la persona HIPPO en la habitación ',
                '- Esto ata a la organización a lo que esta persona quiere que se haga, y no lo que los datos indican que se debe hacer o ',
                ' - tenerlos en cuenta a la hora de visualizar el panorama ',
                '- Esto sucede cuando se debe tomar una decisión dificil, pero no hay datos o analisis suficientes, entonces el grupo a menudo cedera ',
                ' - ante este juicio, ya que suelen tener la mayor experiencia y poder en la sala, tanto que las voces disidentes no tienen lugar ',
                '- Esto es peligroso debido a que los humanos tienen una tendencia al sesgo de autoridad, ilustrado por el <em>Experimento de Milgram</em> de 1963',
                '- Resulta que las personas tienden a crear en aquello que dice o hace, aquellos que consideramos como expertos y no oponerse a sus ordenes ',
            ]),
        new Item('burnout',
            [
                '- Tener un enfoque sostenible dentro de la industria del software, es algo que cada vez es más importante, dentro de la industria del software ',
                '- Algunas reflexiones de como se puede obtener un enfoque sostenible dentro de la industria',
                '',
                '<strong>Reencuadre cognitivo:</strong> <em>El impedimento a la acción hace avanzar la acción. Lo que se interpone en el camino se convierte en el camino</em>. <strong>Marco Aurelio</strong>',
                '- Los impedimentos se pueden considerar algo procesable, con esta mentalidad, cada desafio se puede convertir en una oportunidad ',
                '- Las novedades y las experiencias, seran una gran fuente para enriquecer diferentes perspectivas',
                '- Pensar positivamente, enfocandose en lo bueno',
                '- Comprender los obstaculos impuestos por la naturaleza humana',
                '',
                '<strong>Orientación a la motivación:</strong> Esto se centra en como el trabajo esta ligado a la motivación personal, y como ',
                ' - el sentimiento de satisfacción esta bajo el propio auto-control, mientras que las recompensas extrínsecas estan fuera de nuestro control, ',
                ' - si se busca la validación externa, existe una mayor responsabilidad de que estas no se cumplan ',
                '- Es mejor orientar las recompensas en función de areas, que se alineen con los resultados que se estan logrando ',
                '- Escenarios donde todas las partes involucradas, tengan alguna experiencia o valor de crecimiento personal ',
                '- Retrasar compensaciones extrinsencas, como subroducto, de la produción de calidad, a traves de recompensas intrinsecas',
                '',
                '<strong>Planificación proactiva:</strong> Es la capacidad de anticipar eventos futuros, tomar iniciativa, y planificar el futuro ',
                '- Respirar profundamente y calmar la mente, recordando que el peligro no es fisico',
                '- Desacelere sus pensamientos, para evaluar lo que sabe y lo que no',
                '- Separe la planificación de la acción, su proximo paso es crear un plan, que tenga en cuenta el tiempo ',
                '',
                '<strong>Alegria & Felicidad:</strong> Un concepto fuertemente ligado a las areas de neurociencia y psicologia, tipos de sentimientos de recompensa: ',
                '<strong>- Hedonico(corto plazo):</strong>    Transitorio y ligado a experiencias momentaneas que traen alegria y satisfacción',
                '<strong>- Eudaimónico(largo plazo):</strong> Conectado con el crecimiento personal, la autorealización y la busqueda de autosuperación ',
                ' ',
                '         <strong>Endorfinas</strong>                <strong>Dopamina</strong>                         <strong>Serotonina</strong>                       <strong>Oxitocina</strong>',
                ' Los <em>Plazos</em>                La <em>Realización</em>                   El <em>Orgullo</em>                            El <em>Reconocimiento</em>',
                ' liberan endorfinas        de una tarea produce             por la calidad o el                   genera Oxitocina, ',
                ' preparando el cuerpo      dopamina para una sensación      crecimiento personal , incian la      para recompensarte al ',
                ' para realizar             momentanea de alegria            Serotonina, que genera                haber aportado algun ',
                ' los trabajos                                               satisfacción  a largo plazo           valor al equipo',
                '',
                '- En un ambiente desquilibrado, hay mayor presión de trabajo, y muchas tareas por realizar, ahora el orgullo y el crecimiento personal ',
                ' - pasan a un segundo plano, lo que resulta que las recompensas se orienten a factores extrinsencos, ',
                ' - teniendo una menor satisfacción en menor y mayor plazo ',
                '',
                '- Evalue su relación con el trabajo y como puede solucionar direfentes tipos de problemas',
                '- Motivación interna, para asegurar la priorización del cumplimiento, y la entrega de valor a largo plazo ',
                '- Reduzca el estres, evitando grandes cantidades de <strong>Cortisol</strong>, y generar una resiliencia hacia el estres cronico ',
            ]),
        new Item('ona',
            [
                '- En las empresas de creación de productos intelectuales, que manejan grupos y diferentes tipos de personal, ',
                ' - y que tienen estructuras jerarquicas tradicionales, han demostrado problemas debido a su complejidad y cambio constantes ',
                '',
                '- Esta herramienta ofrece una vision profunda de los patrones de las relaciones e interacciones, dentro de nuestras empresas ',
                ' - permitiendo visualiazar el flujo de la información y la colaboración entre areas ',
                '',
                '- <em>Rob Cross</em> uno de los pioneros en este campo, destaco como esta puede actuar como una radiografia de los entresijos organizacionales ',
                ' - revelando patrones invisibles que afectan directamente la efectividad de nuestra empresa, y como influye la participación de los empleados ',
                '',
                '- En muchas organizaciones, un analisis ONA, ayuda a las personas encargadas a diseñar y cambiar, la organización de las empresas, ',
                ' - de manera más rapidas y adaptable, enfocandose en las areas por mejorar '
            ]),
        new Item(Keys.PEOPLE_PROCESS_BLOAT,
            [
                '- En las etapas iniciales de un proyecto, el desarrollo es agil, la toma rapida de decisiones y el entusiasmo por ofrecer valor',
                '- Sin embargo en la medida que los proyectos ganan complejidad, muchos caen en antipatrones que disminuyen o matan la productividad',
                '- Uno de estos es poco conocido pero insidioso, este monstruo burocratico que obstaculiza la innovación y mata silenciosamente la productividad ',
                '- Esto inicia con el objetivo de optimizar las operaciones, mantener los estandares calidad y minimizar los riesgos ',
                '',
                '<strong>Cultura organizacional:</strong> Un proceso cauteloso puede instuir multiples capas de burocracia, suponiendo que más procesos equivalen a menos riesgos ',
                '<strong>Falta de confianza:</strong> Una dirección sin confianza en el equipo de desarrollo, puede imponer niveles de aprobación y documentación engorrosos',
                '<strong>Complejidad y escala:</strong> Crecer es sinonimo de complejidad, con más partes interesadas que a su vez tienen sus propios procesos <em>Leyes de Lehman</em>',
                '<strong>Equipaje heredado:</strong> A veces los procesos redundantes persisten simplemente, "Porque siempre ha sido asi"',
                '',
                '<strong>Consecuencias:</strong>',
                '<strong>- Productividad reducida</strong> Se dedica más tiempo al trabajo administrativo, que al desarrollo real',
                '<strong>- Sin innovación:</strong> La burocracia, apaga la creatividad y limita los esfuerzos experimentales o por mejorar ',
                '<strong>- Comercializacion retrasada:</strong> Más procesos y etapas, conducen a ciclos más largos, afectando la capacidad de respuesta hacia el mercado ',
                '<strong>- Disminución de la moral:</strong> La perdida de agilidad, y la monotonia de los procesos por cumplir, debilita la moral del equipo',
                '',
                '<strong>Ejemplos durante el desarrollo:</strong>',
                '- Revisiones excesivas de codigo, aun para cambios simples y monotonos',
                '- Emisión de tickets complicadas, llegando a extremos donde es más costoso registrar el problema que solucionarlo ',
                '- Informes obligatorios, tomando valioso tiempo para recopilar todas las tareas, y no en realizarlas ',
                '- Reuniones excesivas, la comunicación entre las partes involucradas es primordial, estos espacios deben ser efectivos y utiles ',
                '',
                '<strong>¿ Como combatirla ?',
                '- Auditorias periodicas, para evaluar la relevancia y eficacia de las acciones y procesos, asegurando que estas no contribuyan más al problema ',
                '- Principios <em>Lean</em> y <em>Agile</em>, Adopte y transforme metodologias que ayuden a dar valor, con la menor cantidad de gastos posibles ',
                '- Fomente la confianza y la autonomia en la medidad de lo posible',
                '- Mantenga los procesos en lo minimo viable, solo aquellos procesos que sean absolutamente necesarios para mantener la calidad ',
            ]),
        new Item(Keys.PEOPLE_TRIANGLES_SUCCESS,
            [
                '- Cuando se trabaja en el sector de las comunicaciones o la tecnologia, es inevitable no sentirse aludido con la Serie de HBO <em>Silicon Valley</em> ',
                '- Una gran serie que muestra la cultura de las empresas emergentes tecnologicas, y chistes que solamente un programador podria entender por completo ',
                '- Tambien introduce algo que casi todo el mundo en el sector tecnologico ha experimentado, el choque ocasional entre areas ',
                '',
                '- En esta serie se introduce un concepto ficticio de "Los Triangulos Unidos del Exito", que explica la relación entre Ventas e Ingenieria ',
                '- Que sea ficticio no le quita el hecho de que se base en comportamientos del mundo real y al mismo tiempo logra tener sentido ',
                ' - El triangulo superior, formado por <em>Ingeniería</em> y <em>Manofactura</em>, que se considera un "mal necesario" en los negocios ',
                ' - El triángulo inferior, compuesto por <em>Ventas</em> y <em>Crecimiento</em>, y que representa su único objetivo ',
                ' - Para unir los triángulos en un cuadrado, creó una línea de demarcación denominada <strong>compromiso</strong> ',
                '',
                '- Aunque se exponga de manera comica, tambien expone problemas del mundo real, como el obligar al area de ingenieria a renunciar a sus aspiraciones ',
                ' - a largo plazo en aras de obtener ganancias en el corto plazo, además de que no permite que ambas areas crezcan de manera separada ',
                '- Esto en el mundo real es inviable, el forzar a <em>compromisos</em> que vayan en detrimento del producto o de la calidad, solo por priorizar las ventas ',
                '- Hacer esto es una receta para el fracaso a largo plazo, a cambio de una ganancia en el corto plazo ',
            ]),
        new Item(Keys.PEOPLE_SOMBREROS_PENSAMIENTO,
            [
                '- La creatividad es esencial para la resolución de problemas, pero siempre habra problemas y obstaculos en el camino ',
                '- Esta metodologia estimula el pensamiento logico y creativo permitiendo abordar retos desde nuevas perpectivas y encontrar caminos alternativos ',
                '- Uno de los objetivos es facilitar el pensamiento paralelo para obtener un panorama más amplio y encontrar soluciones innovadoras ',
                '- Este metodo ideado por el psicologo y escritor <em>Edward Bono</em> propone 6 sombreros, con diferentes formas de pensar ',
                '',
                '<strong>Sombrero Blanco:</strong> Pensamiento Objetivo basado en hechos e información disponible recopilada previamente ',
                '- Evita opioniones e interpretaciones que no se basen en los datos ni aspectos relevantes ',
                '',
                '<strong>Sombrero Rojo:</strong> Pensamiento Emocional basado en sentimientos e intuiciones ',
                '- Permite expresar las sensaciones sin tener que justificar ni argumentar ',
                '',
                '<strong>Sombrero Amarillo:</strong> Pensamiento Optimista basado en los beneficios y oportunidades que ofrece el problema ',
                '- Se buscan las nuevas oportunidades que estan ocultan detras del problema ',
                '',
                '<strong>Sombrero Negro:</strong> Pensamiento Critico, analizando debilidades y amenazas asi como dificultades y obstaculos ',
                '- Se intenta identificar la mayor cantidad posible de riesgos e incovenientes, para prevenir problemas ',
                '',
                '<strong>Sombrero Verde:</strong> Pensamiento Creativo donde se generan nuevas ideas para resolver el problema ',
                '- Ayuda a romper con mapas mentales establecidos ó practicas antiguas ',
                '',
                '<strong>Sombrero Azul:</strong> Pensamiento Planificador que busca una correcta gestión de procesos',
                '- Se define el objetivo del problema, establece reglas y evaluaciones para medir los resultados ',
                '',
                '<strong>Beneficios:</strong>',
                '<strong>- Organización:</strong> Ordena los pensamientos y elimina información redundante o irrelevante ',
                '<strong>- Creatividad:</strong> Alienta a los participantes a salir de su zona de comfort ',
                '<strong>- Productividad:</strong> Se evitan discusiones improductivas y los bloqueos mentales ',
                '<strong>- Efectividad:</strong> Mejora la calidad de las soluciones al considerar multiples aspectos relevantes ',
                '<strong>- Inclusividad:</strong> Fomenta la participación y la colaboración mediante opiniones y multiples puntos de vista ',
                '<strong>- Habilidades Interpersonales:</strong> Habilidades de comunicación, negociación, liderazgo y trabajo en equipo ',
                '',
                '<strong>¿ Como usarla ?',
                '<strong>Definir el tema o problema a tratar:</strong> Se le entrega el sombrero Azul a aquel que va a coordinar la dinamica ',
                '- Deber ser alguien con capacidades de liderazgo, inteligencia emocional y que sea un buen mediador ',
                '',
                '<strong>Elegir el orden y los tiempos de cada sombrero:</strong> No hay normas rigidas ni secuencias que seguir ',
                '- El punto es que las sesiones sean agiles y se puedan alternar los roles de acuerdo a los participantes ',
            ])
    ];

export const MICRO_SERVICES =
    [
        new Item(Keys.MICROSERVICES_ANALISIS,
            [
                '- Un microservicio como componente de software que prioriza la modularidad y la escalabilidad, es importante que cumpla ciertas caracteristicas: ',
                '',
                '<strong>Principio de responsabilidad unica:</strong> Centrarse en una sola función, es un principio que aplica a multiples niveles en el desarrollo ',
                '- Gestionar multiples responsabilidades puede generar dificultades en el mantenimiento, su comprensión, y sus acciones ',
                '- La especialización trae grandes beneficios, desde una mejor comprensión, pasando por mejores tests, hasta un escalado más eficiente ',
                '',
                '<strong>Alta integración, Bajo acoplamiento:</strong> Es un principio de <em>POO</em>, pero tambien puede aplicarse para evitar Alto Acoplamiento, Baja Cohesión  ',
                '- Un acoplamiento estrecho genera fragilidad, haciendo que cualquier cambio en un microservicio interrumpa los servicios conectados ',
                '- La baja cohesión da lugar a responsabilidades poco claras y fronteras difusas ',
                '',
                '<strong>Escalabilidad y Resiliencia:</strong> Cualquier sistema debe ser capaz de gestionar picos de trafico y recuperarse de fallos ',
                '- Un sistema se diseña con esto en mente desde el principio, adaptandose a cualquier trafico y reduciendo tiempos de interrupciones ',
                '',
                '<strong>Autonomia y Evolución:</strong> Los ciclos de cambios, no se deberian ver ralentizados entre microservicios ',
                '- Que un microservicio implique cambios en otros ralentiza el desarrollo e inevitablemente complica el mantenimiento del sistema ',
                '- Un acoplamiento estrecho inhibe la evolución y capacidades de escalamiento creando cuellos de botella ',
                '',
                '<strong>Diseño evolutivo y mejora continua:</strong> Los sistemas deben adaptarse y evolucionar en pro de cubrir nuevas necesidades y expectativas ',
                '- Los sistemas se van refinando y adaptando constantemente, de lo contrario se volverian obsoletos e insostenible ',
                '',
                '<strong>Considereaciones:</strong>',
                '- Diseñar microservicios, es una maratón, no un sprint, estos principios son pautas que deben ser adaptados segun cada necesidad ',
                '- Aplicar estos principios ayuda a crear sistemas robustos, escalables y mantenibles, con el objetivo de brindar valor, y no solo crear codigo ',
            ]),
        new Item(Keys.MICROSERVICES_FUNDAMENTALS,
            [
                '- Los monolitos y los microservicios son de las arquitecturas más usadas, debido a que son conceptualmente simples ',
                ' - y que pueden ser adaptadas con facilidad a multiples contextos y necesidades',
                '- Pero los microservicios aunque son una opción muy prometedora, no siempre deben ser usados, ya que en ciertos casos, ',
                ' - suelen ser contraproducentes y van en contravia de lo que se necesita ',
                '',
                '- Para entender mejor cuando usarse, y cuando no, se daran unas pequeñas pautas para un mejor discernimiento ',
                '',
                '           <strong>Fortalezas</strong>                                         <strong>Debilidades</strong>           ',
                ' - Componentes independientes                    - Desarrollo y diseño más complejo         ',
                ' - Agiliza el conocimiento del negocio           - Dificultad para realizar testing         ',
                ' - Escalabilidad a la medida                     - Complejidad para el Monitoreo y registro ',
                '',
                '        <strong> Monolitico cuando</strong>                                 <strong>Microservicios cuando</strong>          ',
                ' - Equipo pequeño o inexperto                    - Equipo con experiencia y manejo de la nube ',
                ' - Aplicación simple y pocos requerimientos      - Se puede y se sabe descomponer el negocio  ',
                ' - Rapidez para lanzar el MPV                    - Aplicación compleja y con miras a crecer   ',
                '',
                '<strong>- Escalabilidad:</strong> De acuerdo al libro <em>The Art of Scalability</em>, se puede expresar como un cubo donde:',
                '<strong>Eje X:</strong> Duplicación horizontal, Donde la carga se distribuye entre n instancias creadas ',
                ' - Si n instancias son insuficientes, siempre se pueden crear más, teniendo en cuenta que el crecimiento no siempre es lineal ',
                '<strong>Eje Z:</strong> Partición de datos: El codigo fuente es identico en cada copia, pero la base de datos esta segmentada ',
                ' - Por lo tanto debe haber un componente capaz de enrutar las solicitudes, a quien tenga los datos indicados ',
                '<strong>Eje Y</strong> Descomposición funcional: La aplicación se divide en subsistemas más pequeños, que sean independientes entre si ',
                ' - Asi se puede escalar solamente las partes que tengan una alta demanda, sin aumentar todo innecesariamente ',
            ]),
        new Item(Keys.MICROSERVICES_ARQUITECTURAS,
            [
                '- Se pasa del concepto de un nucleo central y robusto a tener diferentes partes más pequeñas, ligeras y debidamente acotadas ',
                '- Esto permite que sean autonomos y su desarrollo no afecte generalmente el codigo de otros servicios ó funcionalidades ',
                '- Cada micro servicio esta diseñado de manera que pueda ser especializado, resolviendo problemas particulares con requisitos especificos ',
                '- Las partes se intercomunican entre si y funcionan de manera separada, aumentando la tolerancia a fallos ',
                '- Los servicios pueden ser independientes de las tecnologias, además de que tambien se pueden subdividir en caso de tener gran complejidad ',
                '- Tambien se pueden escalar/desescalar de manera individual optimizando el uso de recursos ',
            ]),
        new Item(Keys.MICROSERVICES_BEST_PRACTICES,
            [
                '- Los microservicios deben ser eficientes escalables y resilientes, para esto se deben tener lineamientos y seguir buenas practicas ',
                '',
                '<strong>Responsabilidad unica:</strong> Se deben enfocar en una sola función, la simplicidad mejora la mantenibilidad y la flexibilidad ',
                '',
                '<strong>Contenendores:</strong> Los contenedores como Docker, sirven para empaquetar e implementar aplicaciones de forma rapida, coherente y agil ',
                '',
                '<strong>Orquestación:</strong> Los contenedores se debe orquestar y relacionar, para que puedan ser escalables y facilmente administrables ',
                '',
                '<strong>Resiliencia y Tolerancia a fallos:</strong> Las fallas deben contenerse y manejarse de manera elegante, para evitar fallos criticos ',
                '- Implemente elementos como reintentos, circuit breakers, contingencias, con el fin de de garantizar la confiabiabilidad ',
                '',
                '<strong>Escalabilidad:</strong> Estos deben de crecer de manera independiente y segun las necesidades, ya sea de manera programada o reactiva ',
                '',
                '<strong>CI/CD:</strong> Elementos como testing, despliegues, analisis de calidad, builds pueden ser realizados por canales de Integración continua y Despliegue continuo ',
                '',
                '<strong>Observabilidad:</strong> Monitorear los micro servicios de manera que el logging y el tracing sean robustas y utiles para entender el comportamiento del sistema ',
                '',
                '<strong>Seguridad:</strong> Mecanismos como Autenticación, Autorización, cifrado, para proteger los datos y cumplir con las normas ',
                '',
                '<strong>API Gateway:</strong> Gestión y enrutamiento de las solicitudes, además de otras funcionalidades como balanceo de carga y mecanismo de seguridad ',
                '',
                '<strong>Stateless:</strong> Evite el manejo de estados en la medida de lo posible, permitiendo que cualquier instancia pueda manejar cualquier petición ',
                '',
                '<strong>BD per service:</strong> Cada microservicio debe se independiente, implicando que tenga su propia BD, evitando puntos de falla unicos ',
                '',
                '<strong>Event-Driven Architecture:</strong> Un enfoque basado en el manejo de eventos, permitiendo un menor acoplamiento y un manejo asyncronico de los eventos ',
            ]),
        new Item(Keys.MICROSERVICES_BY_DEFAULT,
            [
                '- Los monolitos no son malos, ni contienen codigo mal hecho, esto siempre sera responsabilidad de los desarrolladores a cargo ',
                '- Un punto que siempre va a estar en contra de los microservicios, es la capacidad para testearse de manera conjunta ',
                '- El alcance de una prueba es determinado por cuanto se puede testear en una sola prueba, entre menor sea el alcance, ',
                ' - más se alejara de la experiencia final del usuario ',
                '',
                '- En un monolito el scope(alcanze) es facil debido a que todo esta contenido dentro de una aplicación que hace todo ',
                '- En cambio en los microservicios, la complejidad del testing es directamente proporcional a sus relaciones y su funcionamiento en conjunto ',
                '- Para hacer estas pruebas es necesario en ciertos escenarios usar <em>dummies</em> o <em>mocks</em> que son equivalentes, más no iguales, al comportamiento real ',
                '',
                '- En cambio en un monolito este mismo conjunto de pruebas puede hacerse relativamente con menos esfuerzo y recursos ',
                '- Otro motivo en contra, es la infraestructura y la comunicación entre microservicios, que no deben ser ignoradas ',
                ' - ya que hacen parte fundamental del diseño de la aplicación, además de las complejidades inherentes que conllevan ',
                '',
                '- Un monolito no es mala idea, tampoco los microservicios, la gran diferencia es que no se deberian implementar en las primeras versiones ',
                '- La complejidad extra y las divisiones entre dominios, desviaran el foco real de la aplicación de prestar un servicio de calidad ',
                '- Realizar un monolito, permite que las necesidades y los requerimientos puedan madurar y evolucionar de manera natural ',
                '- Esto no evita que se pueda hacer un modelado que facilite una futura migración a microservicios, cuando sea necesaria ',
            ]),
        new Item(Keys.MICROSERVICES_TRADEOFFS,
            [
                '- El estilo arquitectonico de los microservicios no es la solución definitiva a los problemas, hay ocasiones donde pueden ser el problema ',
                '- Esto se debe a que hay tantas opciones y criterios a tener en cuenta, que lo que funciona para algunos equipos, puede derrumbar a otros ',
                '- Estos no estan exentos igual que muchas practicas y tecnologias de tener costos y beneficios implicitos y ocultos ',
                '',
                '<strong>Beneficios:</strong>',
                '<strong>Limites entre modulos:</strong>',
                '- Esta fuerte delimitación tambien se puede lograr en un monolito, pero aca se da de una manera más solida y es más dificil de eludir ',
                '- Especialmente util cuando el software crece, permitiendo que esta división facilite el mantenimiento y los cambios tengan un impacto menor ',
                '- Esto tambien depende de la disciplina de los equipos, ya que se puede copiar y pegar el codigo en vez de implementar librerias en comun ',
                '- Tambien aplican puntos como la <em>Ley de Conway</em> y que idealmente es mejor iniciar con monolitos y solo migrar despues de cierta maduración ',
                '',
                '<strong>Implementación Independiente:</strong>',
                '- La complejidad del negocio siempre va a estar presente, pero algo que ha ido cambiando con el tiempo es la forma de desplegar las aplicaciones ',
                '- Actualmente areas como <em>CD/CI</em> los despliegues suelen ser automatizados y tienen multiples mecanismos de recuperación ',
                '- Esto hace que los microservicios no deberian existir sin buenas practicas de <em>DevOps</em> y una infraestructura que lo soporte ',
                '',
                '<strong>Diversidad Tecnologica:</strong>',
                '- Al ser unidades tienen libertad para ser creadas y mantenidas por multiples equipos y usar el stack tecnologico más apropiado ',
                '- No estan atados a usar las mismas librerias, lenguajes ó bases de datos, si no que se escoge la mejor opción para cada requerimiento ',
                '- Esto le da un gran valor a la experimentación y su capacidad de encontrar mejores opciones para actualizar decisiones iniciales ',
                '',
                '',
                '<strong>Contras:</strong>',
                '<strong>Distribución:</strong>',
                '- Distribuir las funcionalidades y consultarlas para crear un proceso suele tener un rendimiento menor y problemas de latencia ',
                '- Los mecanismos para solventar este problema suelen cambiar la forma de la programación y darle un protagonismo que no es ideal a la infraestructura ',
                '- Tambien puede cambiar el diseño del sistema para que sea asincrono, una forma de programar cognitivamente más compleja y dificil de realizar ',
                '- Esto tambien hace que haya que tener más consideraciones y tener mecanismos de resiliencia ante las posibles fallas que se puedan presentar ',
                '',
                '<strong>Consistencia Eventual:</strong>',
                '- Además de ser un problema relacionado con la usabilidad ya que aunque exista un proceso <strong>Y</strong> en alguna parte que finalizo ',
                ' - la actualización de la información se realiza por el proceso <strong>X</strong> en otra parte del sistema, entonces el exito/fracaso no sera inmediato ',
                '- En algun momento todos los cambios se veran reflejados, pero siempre existira un lapso de tiempo en el que no se sabra que fue lo que paso ',
                '- Si los errores no son corregidos o observados esto inevitablemente terminara afectando al negocio junto a la coherencia/confibialidad de los datos',
                '',
                '<strong>Complejidad Operativa:</strong>',
                '- El usar unidades pequeñas e independientes es una gran ventaja para el desarrollo, pero esto se puede convertir en una presión adicional ',
                ' - ya que se multiplican la cantidad de acciones y funcionalidades que se deben observar y/o gestionar ',
                '- Tambien existe el riesgo de no eliminar la complejidad, simplemente se traslada a la intercomunicación entre servicios ',
                '- EL panorama general es más dificil de dislumbrar, la base de codigo esta repartida en multiples partes igual que las responsabilidades ',
            ]),
        new Item(Keys.MICROSERVICES_PATTERNS,
            [
                '<strong>Patron Saga:</strong> Proporciona una gestión eficaz de la transacciones, usando una secuencia de transacciones locales ',
                ' - de manera que todas las operaciones se puedan ejecutar, o se realizen acciones de compensación, para deshacer los cambios anteriores ',
                ' - todo esto de manera idempotente, para que se puedan autogestionar, sin intervención manual, esto se puede realizar de 2 maneras: ',
                '<strong> - Coreografia:</strong> Cada microservicio produce y escucha, y se comunican a traves de un canal en comun ',
                '<strong> - Orquestación:</strong> Un orquestador es el responsable de tomar las decisiones, y los servicios solo ejecutan ',
                '',
                '<strong>BD por microservicio:</strong> Cuando se reemplaza un monolito, por microservicios, una decisión importante es la de mantener o fragmentar la BD',
                ' - Mantener una sola BD es un beneficio a corto plazo, por lo que se puede optar por que cada servicio tenga una propia, o incluso compartida ',
                ' - Permitiendo que la aplicación sea más resiliente y escalable, al mismo tiempo que la persistencia puede llegar a ser poliglota ',
                '',
                '<strong>Agregador:</strong> Se refiere a un programa que recopila elementos relacionados y los muestra, ya sea despues de juntarlos y/o transformarlos ',
                ' - Esto permite escalar en varios ejes, y un unico acceso al que consultar, evitando sobrecargar a los modulos de manera individual ',
                '',
                '<strong>Event Sourcing:</strong> Define un enfoque impulsado por la secuencia de eventos, los cuales son constantemente registrados ',
                ' - Esto con el fin de obtener historicos y realizar acciones sobre estos, como notificar o realizar operaciones a los registros existentes ',
                '',
                '<strong>CQRS</strong> Util cuando solo existe una BD, por eso es necesario dividir la aplicación en 2 partes, Comandos y consultas ',
                '<strong> - Comandos:</strong> Manejan todo lo relacionado con la creación, Eliminación y actualización ',
                '<strong> - Consultas:</strong> Maneja las consultas y la obtención de datos ',
                ' - Esta separación garantiza, que se pueda recuperar o modificar información, pero no ambas acciones al mismo tiempo ',
                '',
                '<strong>API Gateway:</strong> Adecuado para multiples aplicaciones de tipo cliente, donde se entrega un unico punto de entrada al sistema ',
                ' - Esto minimiza la cantidad de llamdos necesarios entre el cliente y la aplicación además de ser seguro mediante sistemas de aunteticación ',
                '',
                '<strong>Circuit Breaker:</strong> Es una manera de proteger la aplicación, si se llegara a presentar un fallo catastrofico, que se convierta en una cascada ',
                ' - Este maneja 3 estados principales, y como si de una maquina de estados se tratase, controla el flujo de la aplicación ',
                '<strong> - Abierto:</strong> La solicitud falla y se devuelve una excepción, cerrando el acceso por un tiempo determinado ',
                '<strong> - Cerrado:</strong> Enruta las solicitudes y cuenta la cantidad de fallas, hasta que no pasen de un umbral ',
                '<strong> - Half-Open:</strong> Solo se permite un pequeño numero de operaciones, cambiando entre estados de acuerdo a si fallan o son exitosas ',
            ]),
        new Item(Keys.MICROSERVICES_ANTI_PATTERNS,
            [
                '<strong>Monolito en microservicios:</strong> Conservar una arquitectura monolitica encontrara inevitablemente multiples problemas como: ',
                '- Tolerancia a fallos, problemas de escalabilidad y una implementación más compleja debio a la codependencia entre equipos ',
                '- Bases de datos compartidas, esto dificultara el crecimiento de la aplicación además de convertirse en un punto critico si llega a fallar ',
                '',
                '<strong>Microservicios habladores:</strong> Los microservicios necesitan comunicarse entre si para poder funcionar, sin embargo esto no siempre es ideal ',
                '- Si es demasiado frecuente, ya sea por solicitudes de datos ó realizar tareas menores, se puede generar trafico en la red y retrasar otras respuestas ',
                '- Si las APIs y los Eventos son demasiados atomicos al punto de requerir multiples llamados para cualquier operación/transacción ',
                ' - se debe considerar que cada uno requiere procesamiento de serialización/deserialización que pueden generar operaciones bloqueantes ',
                '- Esto puede degradar en el punto de requerir una cadena entre multiples Microservicios en el que una sola falla afectara a los demás ',
                '',
                '<strong>Monolito Distribuido:</strong> Es una aplicación diseñada como un sistema distribuido, pero en realidad solo son multiples componentes ',
                '- Falta de autonomia de cada servicio, debido a que su eqipo no es independiente frente a otros requisitos/funcionalidades desde otros equipos ',
                '- Si los componentes necesitan un estado compartido se debe tener en cuenta como se sincronizaran ',
                '',
                '<strong>Exceso de microservicios:</strong> Un error comun es pensar en divir todas las funciones incluso las simples, hasta tener demasiados ',
                '- Baja cohesión los microservicios individuales no tienen coherencia dentro del conjunto, solo complican su entendimiento ',
                '- Alto acoplamiento debido a las multiples interacciones e interdependencias entre servicios ',
                '',
                '<strong>Exceso de funcionalidades:</strong> Tambien existe la posibilidad de que los microservicios tengan demasiadas responsabilidades ',
                '- Ya sea por una planificación inadecuada ó un desconocimiento del negocio, las delimitaciones se vuelven difusas ',
                '- Mala interpretación de requisitos, haciendo que se introduzcan funcionalidades irrelevantes ó en componentes equivocados ',
                '',
                '<strong>Arquitectura Spageti:</strong> Es una arquitectura sin ninguna organización o división logica, solamente una maraña de componentes conectados ',
                '- El flujo de control es complejo y enrevesado, de manera que rastrear errores es un martirio ó se generan comportamientos impredecibles ',
                '- Acoplamiento indeseado al estar estrechamente conectados, cualquier modificación puede afectar otros componentes y asi empezar una ola de cambios ',
                '',
                '<strong>Falta de observabilidad:</strong> La aplicación no proporciona información adecuada sobre el estado internos y sus operaciones ',
                '- Logs limitados en especial a la hora de registrar errores o sucesos importantes, dificultando el seguimiento de los problemas ',
                '- Rastreo disperso ya que se carece de capacidades para rastrear el flujo de la solicitud entre los componentes involucrados ',
                '',
                '<strong>Ignorar el costo humano:</strong> Se centra tanto la necesidad de cumplir objetivos que generan plazos irreales ',
                '- El trabajo excesivo empieza a afectar la vida personal y el tiempo libre de los colaboradores, disminuyendo su productividad a larga ',
                '- Las capacidades del equipo no son tenidas en cuenta a la hora de planear los plazos y generan expectativas poco realistas ',
                '- Microgestión o falta de apoyo, ya sea por parte de los lideres o del mismo equipo respectivamente ',
            ])
    ];
