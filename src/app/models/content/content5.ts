import { PATRONES_PERSISTENCE_PATTERNS } from "../linkReferencia";
import { Item } from "../models";

export class Content5 {

    public temas: Item[] = [
        ...PATRONES,

    ];

}

export const PATRONES =
    [
        new Item('definicionPatrones',
            [
                '- Son soluciones especificas y reutilizables a problemas comunes, o con abstracciones similares, los más conocidos son: ',
                '<strong>GOF:</strong> Que se dividen en 3, creacionales, estructurales y de comportamiento ',
                '<strong>GRASP:</strong> Representan los principios básicos de la asignación de responsabilidades a objetos, en forma de patrones ',
            ]),
        new Item('gof',
            [
                '- Los creadores de de GoF, proponen 2 principios basicos: ',
                '<strong>- Programar orientado a una interfaz y no a una implementación</strong>, el codigo se deberia comportar como una <em>Caja negra</em>, ',
                ' - donde solo interesa lo que puede hacer y lo que necesita, en vez del como, no nos debe interesar el funcionamiento interno ',
                '<strong>- Favorecer la composición sobre la herencia</strong>, aunque funcionalmente son similares conceptualmente no lo son, aunque ambas ',
                ' - permiten la adición de funcionalidades y evitan la duplicación, la herencia lo hace exponiendo el funcionamiento de la clase, ',
                ' - mientras que la composición no, llegando a afirmaciones como que la herencia no es compatible con la encapsulación',
                '',
                '<strong>Creacionales:</strong> Se usan para la creación de objetos ya sea ocultando o simplificando la creación de estos ',
                '<strong>Estructurales:</strong> Separan la interfaz de su implementación por medio de la abstracción ',
                '<strong>Comportamiento:</strong> Definen la comunicación entre objetos, y la independencia de esta de los objetos ',
            ]),
        new Item('desglosegof',
            [
                'Creacionales ',
                '<strong>- Singleton:</strong> Restringe la instancia de la clase a un solo Objeto ',
                '<strong>- MVC:</strong> Plantea la separación en 3 capas, cada una con una función especifica ',
                '<strong>- Abstract factory:</strong> Permite crear familias de objetos relacionados sin especificarlas directamente ',
                '<strong>- Builder:</strong> Permite crear objetos bajo demanda, y solo con las propiedades especificadas ',
                '',
                'Estructurales ',
                '<strong>- Adapter:</strong> Permite la comunicación entre objetos de tipos diferentes, independientemente del tipo de cada objeto ',
                '<strong>- Decorator:</strong> Añade funcionalidades extra añadiendo clases que ya las tienen, sin afectar al codigo existente ',
                '<strong>- Facade:</strong> Permite acceder facilmente a muchas funciones, muy usado en librerias y frameworks ',
                '<strong>- Bridge:</strong> Permite dividir clases muy relacionadas en otras más pequeñas e independientes ',
                '',
                'Comportamiento ',
                '<strong>- Iterator:</strong> Permite recorrer los elementos de una colección ',
                '<strong>- Mediador:</strong> La comunicación entre objetos se da solo mediante un elemento central ',
                '<strong>- Observer:</strong> Permite generar subscripciones y que todos los oyentes se enteren de los cambios ',
                '<strong>- Estrategia:</strong> Permite que una clase escoja la mejor implementación de acuerdo al caso',
            ]),
        new Item('grasp',
            [
                '- Intentan hacer que la Asignación de responsabilidades sea lo más optima posible',
                '- Alta cohesion mediante la refactorización, y bajo acoplamiento al no abusar de la herencia ',
                '- Cada componente tiene una función especifica en la que es experto',
                '- Conocer las peculiaridades de cada lenguaje como ciclos de vida e integración con el SO ',
                '- Darle prioridad al polimorfismo más que a las sentencias de control al usarse en los objetos ',
                '- Evitar el uso de variables globales, especialmente en el desarrollo web ',
                '- La creación de factorias y clases intermedias ayudan a la mantenibilidad del código',
            ]),
        new Item('desglosegrasp',
            [
                '<strong>- Indirección:</strong> Mejorar el acoplamiento entre 2 clases, asignando a una clase como mediadora entre ellas ',
                ' - ideal para clases con alta volutibilidad y uso de librerias de externas ',
                '',
                '<strong>- Invención pura:</strong> Son clases que no representan un objeto o una abstracción especifica del dominio, ',
                ' - sino que se creo para reducir el acoplamiento, aumentar la cohesion y mejorar la reutilización ',
                '',
                '<strong>- Creación:</strong> Determina quien es el responsable de crear nuevas instancias de acuerdo a ciertos criterios, ',
                ' - mal usado puede degenerar en el smells code de cirugia a escopetazos ',
                '',
                '<strong>- Experto en Información:</strong> La responsabilidad de crear o usar un objeto solo es de aquel que conoce todo lo necesario, ',
                ' - reduciendo el acoplamiento, aumentando la cohesión y encapsulamiento ',
                '',
                '<strong>- Controlador:</strong> Sirve como intermediario entre una determinada interfaz y el algoritmo que la implementa, ',
                ' - es aquel que contiene la logica necesaria para redireccionar a los componentes indicados segun los datos ingresados ',
            ]),
        new Item(PATRONES_PERSISTENCE_PATTERNS,
            [
                '- Son usados para el acceso a y manipulación de los datos (persistencia), desde diferentes fuentes, como Bases de Datos',
                '- Tambien son una forma de diferenciar entre la Programación Orientada a Objetos y la Programación Orientada a Datos',
                '- Mientras que en <em>POO</em> pone enfasis en conceptos como la Encapsulación, Polimorfismo y la Abstracción',
                '- En <em>POD</em> se hace enfasis en la separación entre los datos y su manipulación, la generalización y la inmutabilidad',
                '',
                '<strong>- Driver Pattern:</strong> Este patron es el más cercado a la BD, es el responsable de establecer la respectiva conexión y comunicación ',
                ' - Esto es beneficioso en que se hace una extracción de datos, sin procesar e inmutable desde la BD',
                ' - La abstracción puede traer complejidad extra y errores en la conversión a objetos de dominio, necesaria para manipularlos',
                '',
                '<strong>- Data Mapper:</strong> Es una capa mediadora entre los objetos y su representación en BD, de manera que se garantize la independencia de ambos enfoques ',
                ' - Puede ser aplicado a Sql y NoSql sin problemas, además de que multiples frameworks ya tienen este patron implementado y listo para ser usado',
                '',
                '<strong>- Objeto de Acceso a Datos(DAO):</strong> Esta abstracción encapsula todas las interacciones con la fuente de datos',
                ' - Permitiendo que ambas partes cambien sin verse afectadas, solamente con el requerimiento de que cumplan el contrato especificado ',
                '',
                '<strong>- Active Record:</strong> Similar a los enfoques anteriores, con la diferencia, de aca es la propia entidad la que realiza todas sus operaciones ',
                ' - Este empoderamiento simplifica la integración con la BD, pero lleva a penalizaciones y una violación del principio de responsabilidad unica ',
                '',
                '<strong>- Repository:</strong> Es el patrón más orientado hacia el manejo de objetos y su importancia para el dominio, mediante el uso de metodo declarativos ',
                '',
                '<strong> Patron                      Ventajas                                                  Desventajas                 </strong>                 ',
                '            - Enfoque directo de comunicación con la BD            - Reduce la portabilidad al estar vinculado directamente a la BD                  ',
                ' Driver     - Permite ajustes y un control de bajo nivel           - Puede tener codigo de bajo nivel o muy detallado, haciendolo poco mantenible    ',
                '            - Util para optimizaciones especificas por BD                                                                                            ',
                '',
                ' Data       - Separa el acceso a BD del Dominio                    - La complejidad del mapeo, puede afectar el rendimiento y la codificación        ',
                ' Mapper     - Admite personalizaciones en las transformaciones     - Puede requerir codigo repetitivo para la transformación entre ambas partes      ',
                '',
                ' DAO        - Mayor modularidad al separar los datos del dominio   - Puede agregar complejidad extra y aumentar el tiempo de desarrollo              ',
                '            - Admite el intercambio entre multiples motores de BD                                                                                    ',
                '',
                ' Active     - Simplifica las operaciones de cada entidad           - Acoplamiento indebido entre los datos y la logica del dominio                   ',
                ' Record     - Reduce la necesidad de una capa de datos separada    - No respeta el principio de responsabilidad unica, dificultando el mantenmiento  ',
                '',
                '            - Alinea el lenguaje de dominio, con los datos         - Requiere una capa adicional, agregando complejidad                              ',
                ' Repository - Esta union genera un codigo más expresivo            - Los metodos especificos de dominio varian entre si, si no se maneja un estandar ',
                '            - Mantiene la separación entre las 2 capas                                                                                               ',
                '',
                '<strong>Data Transfer Object(DTO):</strong> Estrictamente hablando no es un patron para la persistencia de datos, pero si para su manipulación ',
                ' - Es un patron versatil multiproposito, como el movimiento fluido de datos entre diferentes capas ó sistemas ',
                ' - Esto tambien representa la responsabilidad de mantener el correcto aislamiento entre capas y la coherencia dentro de la aplicación ',
                '<strong>CQRS:</strong> Es una estrategia arquitectonica, para mejorar el rendimiento y separar las acciones entre lectura y escritura',
                ' - Esta separación puede conllevar problemas potenciales como la sincronización de los datos ó la complejidad adicional de esta separación ',
            ]),
        new Item('antipatronesDev',
            [
                '- Son malas soluciones a problemas comunes que parecen buena idea, y nacen del afan de implementar patrones o de  mezclarlos de manera icorrecta ',
                '',
                '<strong> - Golden Hammer:</strong> Pretende que todo se solucione de la misma manera o con el mismo lenguaje',
                '<strong> - Lava Flow:</strong> Es la codificación de manera continua, sin un orden alguno, y lleno de redundancias',
                '<strong> - Spaghetti Code:</strong> Aparece cuando se suelen mezclar muchos lenguajes, aumentando la complejidad de la solución ',
                '<strong> - God Class:</strong> Sucede cuando todo se soluciona en un solo archivo metodo o clase',
                '<strong> - Poltergeist:</strong> Es la existencia de elementos injustificadamente',
                '',
                '- Tambien se pueden aplicar para temas de arquitectura',
                '<strong> - Reinventar la rueda:</strong> Es la implementación de soluciones que ya existen de antemano',
                '<strong> - Casarse con el diablo:</strong> Es la dependencia total de algun elemento sin contingencia alguna ',
            ]),
        new Item('dobleDespacho',
            [
                '- Es un patron de diseño que resuelve 2 problemas: ',
                '- Cuando el comportamiento depende del objeto y los parametros recibidos ',
                '- Esto se puede hacer mediante varias maneras, herencia, polimorfismo, reflexion, etc... ',
            ]),
        new Item('patronSaga',
            [
                '- Es un patron que ayuda a garantizar la integridad de las transacciones, es especialmente util para aplicaciones distribuidas y microservicios ',
                '',
                '<strong>Mediante coreografia:</strong> Es una sucesión de eventos donde cada uno llama al siguiente ',
                ' - despues de terminar su tarea, en este caso cada servicio debe saber como responder ante cada caso posible ',
                '- Facil de implementar y con poco acoplamiento, pero se puede complicar entre más operaciones hallan ',
                '',
                '<strong>Mediante orquestación:</strong> De esta manera un solo proceso o servicio es el encargado de coordinar, ',
                ' - todas las llamadas de los procesos y de realizar el rollback completo si alguna de las operaciones falla ',
                '- Más facil de mantener a cambio de convertirse en un posible cuello de botella ',
            ]),
        new Item('patroncqrs',
            [
                '- <strong>S</strong>egregación de <strong>R</strong>esponsabilidad de <strong>C</strong>onsultas de Comandos(<strong>Q</strong>ueries) ',
                '- Las operaciones de lectura y escritura utilizan diferentes modelos de datos ',
                '- Las consultas no pueden modificar los datos y los comandos pueden ser procesados de manera asincrona ',
                '- Esto permite facilitar leer y escribir operaciones, agregando tanto seguridad como complejidad ',
                '- Los datos no solo se manejan de maneras diferentes, tambien pueden ser almacenados de distintas formas ',
                '- Especialmente util cuando las operaciones de lectura y de creacion/modificación difieren sustancialmente ',
            ]),
        new Item('patronUndoRedo',
            [
                '- Es un patron de comportamiento bastente usado en la actualidad ',
                '- Este patron dicta que cualquier cambio que se realize puede ser devuelto a un estado previo ',
                ' - Ademas de que se debe ser capaz de volver a un estado futuro desde uno pasado ',
                '- Manejar estados y tener memmoria de estos puede implicar mayor complejidad para las aplicaciones ',
                '- Los estados no deben ser modificables y sus cambios no deben tener efectos colaterales ',
                '',
                '- Este patron puede tener 2 enfoques: ',
                '<strong>- Todo o nada:</strong> No hay puntos intermedios de que guardar y que no, toda acción realizada deber ser recordada ',
                '<strong>- Calculados:</strong> Los estados anteriores y proximos, se pueden calcular en base al actual ',
                '- Ambos enfoques pueden presentar problemas de complejidad y rendimiento respectivamente ',
            ]),
        new Item('tiposDePatrones',
            [
                '- Existen diferentes clasificaciones para los patrones de acuerdo a su nivel de abstracción, segun la clasificación de Frank Buschmann serian: ',
                '',
                '<strong>- Patrones Arquitectonicos:</strong> Se centran en la estructura del sistema, definición de subsistemas, ',
                ' - manejo de responsabilidades, lineas guia para organizar las relaciones ',
                '',
                '<strong>- Patrones de Diseño:</strong> Esquemas para refinar subsistemas, componentes o las relaciones de estos, ',
                ' - estos describen una estructura recurrente y comun que resuelve un problema de diseño, ',
                ' - en un contexto especifico, algunos de estos pueden ser los patrones GRASP o lo GOF ',
                '',
                '<strong>- Patrones de codificación(idioms):</strong> Ayudan a implementar aspectos particulares del diseño, en un lenguaje especifico'
            ]),
        new Item('stranglerFig',
            [
                '- Una higuera estranguladora, es una planta peculiar, debido a que su semilla crece desde las ramas de un arbol, hasta que echan raices en el suelo ',
                '- Durante años van creciendo poco a poco sofocando y matando a su huesped ',
                '- Una gran metafora a la hora de hablar de migrar y reemplazar sistemas anticuados con otros más actuales ',
                '- Esto sonaria como simplemente realizar una aplicación que haga exactamente lo mismo, lo cual para nada es simple ',
                '- Además de que esto involucra nuevas funciones, correciones o incluso mantener los errores ya conocidos ',
                '- Tambien se ha de tener en cuenta que esto es proceso arduo y constante, con miras de que futuros estrangulamientos se simplifiquen ',
                '- Mantener ciclos cortos y hacer lanzamientos frecuentes, permite que esta aplicación no solo tome menos, si no que entregue valor más pronto ',
            ]),
        new Item('antipatronesPM',
            [
                '- Todo trabajo relacionado al desarrollo de software necesita comunicación e interacción humana, los antipatrones en esta gestión, destruyen ',
                ' - y entorpecen esta actividad humana fundamental, principalmente en las 3 areas más involucradas, Gestion de procesos, recursos y relaciones ',
                '',
                '<strong>Blowhard Jamboree:</strong> Las opiniones de los expertos influyen en las decisiones tecnologicas, las criticas y la atención a informes negativos',
                ' - que aparecen en medios importantes y publicaciones privadas, consumen tiempo en dar respuestas, ',
                ' - ya que los tomadores de decisiones les surgen inquietudes, para entender o refutar estas publicaciones ',
                '',
                '<strong>Paralisis de analisis:</strong> Esforzarse por alcanzar la perfección y la integridad, en la fase de analisis, puede inducir un estancamiento ',
                ' - ya que se busca evitar realizar cambios, algo impractico, ya que el software crece y soluciona problemas de manera incremental/iterativa ',
                '',
                '<strong>Ingeniería de Viewgraph:</strong> Los proyectos se atascan al producir demasiados diagramas y documentación, en lugar de desarrollar ',
                ' - la gerencian que era quien los solicita nunca obtiene las herramientas de desarrollo adecuadas, ',
                ' - y los desarrolladores se ven condenados a usar software para automatizar la creación de estos documentos, que suelen ser pseudotecnicos ',
                '',
                '<strong>Muerte por planificación:</strong> Demasiada planificación conduce a cronogramas más apretados y complejos para etapas posteriores, ',
                ' - en vez de tomarse de manera que integre desarrollo con etapas iterativas y planificación incremental ',
                '',
                '<strong>Miedo al exito:</strong> Cuando un proyecto esta al borde del exito, suelen aflorar preocupaciones y miedos que antes no estaban presentes, ',
                ' - sobre cosas que pueden salir mal, inseguridades, e incluso casos de paranoia y sucesos altamente improbables ',
                '',
                '<strong>Corncob:</strong> Las personas dificiles, frecuentemente destruyen y desvian los procesos del software, a traves de diversas maneras ',
                '',
                '<strong>Violencia Intelectual:</strong> Ocurre cuando alguien con un conocimiento que otros no tienen, lo usa para intimidar o amendrentar en reuniones ',
                '',
                '<strong>Gestión Irracional:</strong> La indecisión habitual, y malas decisiones tomadas de facto, conducen a crisis de desarrollo cronicas, y malos caminos ',
                '',
                '<strong>Humo y Espejos:</strong> Aveces se suele mostrar desarrollos incompletos y promesas de nuevas funcionalidades',
                ' - sin saber los riesgos y los desafios tecnicos que esto involucra, para erroneamente compremeter a la organización más alla de sus capacidades ',
                '',
                '<strong>Mala gestión:</strong> La falta de supervisión e involucramiento, puede conducir a una desorientación que afecta a los procesos y acciones internas ',
                '',
                '<strong>Fire Drill:</strong> Volar suele ser descrito como <em>horas de aburrimiento, seguidas de 15 segundos de terror</em>, lo mismo suele pasar',
                ' - cuando existen meses de poco desarrollo, seguidos de demandas de entrega inmediatas, debido a una gran variedad de causas y situaciones ',
                '',
                '<strong>The Feud:</strong> Las peleas entre gerentes, suelen ser más que personales, estos conflictos influyen y hasta pueden afectar directamente',
                ' - a los subalternos, desde simples malos tratos, hasta acciones disciplinarias ',
                '',
                '<strong>Los correos son peligrosos:</strong> El correo electronico es una gran herramienta de comunicación, pero no es apta para todos los mensajes ',
                ' - ni para escribir acerca de comunicaciones delicadas, ya que suelen ser temas inapropiados o muy delicados',
            ]),
        new Item('patternsMicroservices',
            [
                '- Un microservicio es una colección de "pequeños" servicios que se integran, y que existen de manera autonoma y menos acoplada, ',
                ' - y que tienen claramente sus responsabilidades y asociaciones bien definidas',
                '- A continuación, se mostraran 7 patrones importantes, a la hora de comunicar y enlazar estos componentes',
                '',
                '<strong>Patron Saga:</strong> Proporciona una gestión eficaz de la transacciones, usando una secuencia de transacciones locales ',
                ' - de manera que todas las operaciones se puedan ejecutar, o se realizen acciones de compensación, para deshacer los cambios anteriores ',
                ' - todo esto de manera idempotente, para que se puedan autogestionar, sin intervención manual, esto se puede realizar de 2 maneras: ',
                '<strong> - Coreografia:</strong> Cada microservicio produce y escucha, y se comunican a traves de un canal en comun ',
                '<strong> - Orquestación:</strong> Un orquestador es el responsable de tomar las decisiones, y los servicios solo ejecutan ',
                '',
                '<strong>BD por microservicio:</strong> Cuando se reemplaza un monolito, por microservicios, una decisión importante es la de mantener o fragmentar la BD',
                ' - Mantener una sola BD es un beneficio a corto plazo, por lo que se puede optar por que cada servicio tenga una propia, o incluso compartida ',
                ' - Permitiendo que la aplicación sea más resiliente y escalable, al mismo tiempo que la persistencia puede llegar a ser poliglota ',
                '',
                '<strong>Agregador:</strong> Se refiere a un programa que recopila elementos relacionados y los muestra, ya sea despues de juntarlos y/o transformarlos ',
                ' - Esto permite escalar en varios ejes, y un unico acceso al que consultar, evitando sobrecargar a los modulos de manera individual ',
                '',
                '<strong>Event Sourcing:</strong> Define un enfoque impulsado por la secuencia de eventos, los cuales son constantemente registrados ',
                ' - Esto con el fin de obtener historicos y realizar acciones sobre estos, como notificar o realizar operaciones a los registros existentes ',
                '',
                '<strong>CQRS</strong> Util cuando solo existe una BD, por eso es necesario dividir la aplicación en 2 partes, Comandos y consultas ',
                '<strong> - Comandos:</strong> Manejan todo lo relacionado con la creación, Eliminación y actualización ',
                '<strong> - Consultas:</strong> Maneja las consultas y la obtención de datos ',
                ' - Esta separación garantiza, que se pueda recuperar o modificar información, pero no ambas acciones al mismo tiempo ',
                '',
                '<strong>API Gateway:</strong> Adecuado para multiples aplicaciones de tipo cliente, donde se entrega un unico punto de entrada al sistema ',
                ' - Esto minimiza la cantidad de llamdos necesarios entre el cliente y la aplicación además de ser seguro mediante sistemas de aunteticación ',
                '',
                '<strong>Circuit Breaker:</strong> Es una manera de proteger la aplicación, si se llegara a presentar un fallo catastrofico, que se convierta en una cascada ',
                ' - Este maneja 3 estados principales, y como si de una maquina de estados se tratase, controla el flujo de la aplicación ',
                '<strong> - Abierto:</strong> La solicitud falla y se devuelve una excepción, cerrando el acceso por un tiempo determinado ',
                '<strong> - Cerrado:</strong> Enruta las solicitudes y cuenta la cantidad de fallas, hasta que no pasen de un umbral ',
                '<strong> - Half-Open:</strong> Solo se permite un pequeño numero de operaciones, cambiando entre estados de acuerdo a si fallan o son exitosas ',
            ])
    ];